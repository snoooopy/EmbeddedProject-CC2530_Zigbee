###############################################################################
#
# IAR C/C++ Compiler V9.20.1.2476 for 8051                02/May/2017  13:55:37
# Copyright 2004-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        F:\3_Jin_testCode\ZStack-CC2530-2.3.0-1.4.0µØËø\ZStack-CC2530-2.3.0-1.4.0µØËø\Components\mt\MT_SYS.c
#    Command line       =  
#        -f
#        F:\3_Jin_testCode\ZStack-CC2530-2.3.0-1.4.0µØËø\ZStack-CC2530-2.3.0-1.4.0µØËø\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wRouter.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DRTR_NWK -DBLINK_LEDS) -f
#        F:\3_Jin_testCode\ZStack-CC2530-2.3.0-1.4.0µØËø\ZStack-CC2530-2.3.0-1.4.0µØËø\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_POLLED=3000
#        -DNWK_INDIRECT_MSG_TIMEOUT=7 -DMAX_RREQ_ENTRIES=8
#        -DAPSC_MAX_FRAME_RETRIES=3 -DNWK_MAX_DATA_RETRIES=2
#        -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9 -DAPS_MAX_GROUPS=16
#        -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000
#        -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
#        -DREJOIN_POLL_RATE=440
#        F:\3_Jin_testCode\ZStack-CC2530-2.3.0-1.4.0µØËø\ZStack-CC2530-2.3.0-1.4.0µØËø\Components\mt\MT_SYS.c
#        -D ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC -D
#        LCD_SUPPORTED=DEBUG -lC
#        F:\3_Jin_testCode\ZStack-CC2530-2.3.0-1.4.0µØËø\ZStack-CC2530-2.3.0-1.4.0µØËø\Projects\zstack\Samples\SampleApp\CC2530DB\RouterEB\List\
#        -lA
#        F:\3_Jin_testCode\ZStack-CC2530-2.3.0-1.4.0µØËø\ZStack-CC2530-2.3.0-1.4.0µØËø\Projects\zstack\Samples\SampleApp\CC2530DB\RouterEB\List\
#        --diag_suppress Pe001,Pa010 -o
#        F:\3_Jin_testCode\ZStack-CC2530-2.3.0-1.4.0µØËø\ZStack-CC2530-2.3.0-1.4.0µØËø\Projects\zstack\Samples\SampleApp\CC2530DB\RouterEB\Obj\
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 8 -I
#        F:\3_Jin_testCode\ZStack-CC2530-2.3.0-1.4.0µØËø\ZStack-CC2530-2.3.0-1.4.0µØËø\Projects\zstack\Samples\SampleApp\CC2530DB\
#        -I
#        F:\3_Jin_testCode\ZStack-CC2530-2.3.0-1.4.0µØËø\ZStack-CC2530-2.3.0-1.4.0µØËø\Projects\zstack\Samples\SampleApp\CC2530DB\..\SOURCE\
#        -I
#        F:\3_Jin_testCode\ZStack-CC2530-2.3.0-1.4.0µØËø\ZStack-CC2530-2.3.0-1.4.0µØËø\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\ZMAIN\TI2530DB\
#        -I
#        F:\3_Jin_testCode\ZStack-CC2530-2.3.0-1.4.0µØËø\ZStack-CC2530-2.3.0-1.4.0µØËø\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MT\
#        -I
#        F:\3_Jin_testCode\ZStack-CC2530-2.3.0-1.4.0µØËø\ZStack-CC2530-2.3.0-1.4.0µØËø\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\INCLUDE\
#        -I
#        F:\3_Jin_testCode\ZStack-CC2530-2.3.0-1.4.0µØËø\ZStack-CC2530-2.3.0-1.4.0µØËø\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\TARGET\CC2530EB\
#        -I
#        F:\3_Jin_testCode\ZStack-CC2530-2.3.0-1.4.0µØËø\ZStack-CC2530-2.3.0-1.4.0µØËø\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\MCU\CCSOC\
#        -I
#        F:\3_Jin_testCode\ZStack-CC2530-2.3.0-1.4.0µØËø\ZStack-CC2530-2.3.0-1.4.0µØËø\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\INCLUDE\
#        -I
#        F:\3_Jin_testCode\ZStack-CC2530-2.3.0-1.4.0µØËø\ZStack-CC2530-2.3.0-1.4.0µØËø\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\AF\
#        -I
#        F:\3_Jin_testCode\ZStack-CC2530-2.3.0-1.4.0µØËø\ZStack-CC2530-2.3.0-1.4.0µØËø\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\NWK\
#        -I
#        F:\3_Jin_testCode\ZStack-CC2530-2.3.0-1.4.0µØËø\ZStack-CC2530-2.3.0-1.4.0µØËø\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SEC\
#        -I
#        F:\3_Jin_testCode\ZStack-CC2530-2.3.0-1.4.0µØËø\ZStack-CC2530-2.3.0-1.4.0µØËø\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SAPI\
#        -I
#        F:\3_Jin_testCode\ZStack-CC2530-2.3.0-1.4.0µØËø\ZStack-CC2530-2.3.0-1.4.0µØËø\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SYS\
#        -I
#        F:\3_Jin_testCode\ZStack-CC2530-2.3.0-1.4.0µØËø\ZStack-CC2530-2.3.0-1.4.0µØËø\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\ZDO\
#        -I
#        F:\3_Jin_testCode\ZStack-CC2530-2.3.0-1.4.0µØËø\ZStack-CC2530-2.3.0-1.4.0µØËø\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\F8W\
#        -I
#        F:\3_Jin_testCode\ZStack-CC2530-2.3.0-1.4.0µØËø\ZStack-CC2530-2.3.0-1.4.0µØËø\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\
#        -I
#        F:\3_Jin_testCode\ZStack-CC2530-2.3.0-1.4.0µØËø\ZStack-CC2530-2.3.0-1.4.0µØËø\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES\SADDR\
#        -I
#        F:\3_Jin_testCode\ZStack-CC2530-2.3.0-1.4.0µØËø\ZStack-CC2530-2.3.0-1.4.0µØËø\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES\SDATA\
#        -I
#        F:\3_Jin_testCode\ZStack-CC2530-2.3.0-1.4.0µØËø\ZStack-CC2530-2.3.0-1.4.0µØËø\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\INCLUDE\
#        -I
#        F:\3_Jin_testCode\ZStack-CC2530-2.3.0-1.4.0µØËø\ZStack-CC2530-2.3.0-1.4.0µØËø\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\HIGH_LEVEL\
#        -I
#        F:\3_Jin_testCode\ZStack-CC2530-2.3.0-1.4.0µØËø\ZStack-CC2530-2.3.0-1.4.0µØËø\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\
#        -I
#        F:\3_Jin_testCode\ZStack-CC2530-2.3.0-1.4.0µØËø\ZStack-CC2530-2.3.0-1.4.0µØËø\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\
#        -Ohz --require_prototypes
#    List file          =  
#        F:\3_Jin_testCode\ZStack-CC2530-2.3.0-1.4.0µØËø\ZStack-CC2530-2.3.0-1.4.0µØËø\Projects\zstack\Samples\SampleApp\CC2530DB\RouterEB\List\MT_SYS.lst
#    Object file        =  
#        F:\3_Jin_testCode\ZStack-CC2530-2.3.0-1.4.0µØËø\ZStack-CC2530-2.3.0-1.4.0µØËø\Projects\zstack\Samples\SampleApp\CC2530DB\RouterEB\Obj\MT_SYS.r51
#
###############################################################################

F:\3_Jin_testCode\ZStack-CC2530-2.3.0-1.4.0µØËø\ZStack-CC2530-2.3.0-1.4.0µØËø\Components\mt\MT_SYS.c
      1          /***************************************************************************************************
      2            Filename:       MT_SYS.c
      3            Revised:        $Date: 2009-12-22 17:20:57 -0800 (Tue, 22 Dec 2009) $
      4            Revision:       $Revision: 21402 $
      5          
      6            Description:   MonitorTest
      7          
      8            Copyright 2007-2009 Texas Instruments Incorporated. All rights reserved.
      9          
     10            IMPORTANT: Your use of this Software is limited to those specific rights
     11            granted under the terms of a software license agreement between the user
     12            who downloaded the software, his/her employer (which must be your employer)
     13            and Texas Instruments Incorporated (the "License").  You may not use this
     14            Software unless you agree to abide by the terms of the License. The License
     15            limits your use, and you acknowledge, that the Software may not be modified,
     16            copied or distributed unless embedded on a Texas Instruments microcontroller
     17            or used solely and exclusively in conjunction with a Texas Instruments radio
     18            frequency transceiver, which is integrated into your product.  Other than for
     19            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     20            works of, modify, distribute, perform, display or sell this Software and/or
     21            its documentation for any purpose.
     22          
     23            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     24            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     25            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     26            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     27            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     28            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     29            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     30            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     31            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     32            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     33            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     34          
     35            Should you have any questions regarding your right to use this Software,
     36            contact Texas Instruments Incorporated at www.TI.com.
     37          
     38           ***************************************************************************************************/
     39          
     40          /***************************************************************************************************
     41           * INCLUDES
     42           ***************************************************************************************************/
     43          #include "ZComDef.h"
     44          #include "MT.h"
     45          #include "MT_SYS.h"
     46          #include "MT_VERSION.h"
     47          #include "nwk_util.h"
     48          #include "OSAL.h"
     49          #include "OSAL_NV.h"
     50          #include "Onboard.h"  /* This is here because RAM read/write macros need it */

   \                                 In  segment SFR_AN, at 0x9d
   \   unsigned char volatile __sfr SLEEPSTA
   \                     SLEEPSTA:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IEN0
   \                     _A_IEN0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc9
   \   unsigned char volatile __sfr WDCTL
   \                     WDCTL:
   \   000000                DS 1
     51          #include "hal_adc.h"
     52          #include "ZGlobals.h"
     53          
     54          /***************************************************************************************************
     55           * MACROS
     56           ***************************************************************************************************/
     57          
     58          #define MT_SYS_DEVICE_INFO_RESPONSE_LEN 14
     59          #define MT_NV_ITEM_MAX_LENGTH           250
     60          
     61          #if !defined HAL_GPIO || !HAL_GPIO
     62          #define GPIO_DIR_IN(IDX)
     63          #define GPIO_DIR_OUT(IDX)
     64          #define GPIO_TRI(IDX)
     65          #define GPIO_PULL_UP(IDX)
     66          #define GPIO_PULL_DN(IDX)
     67          #define GPIO_SET(IDX)
     68          #define GPIO_CLR(IDX)
     69          #define GPIO_TOG(IDX)
     70          #define GPIO_GET(IDX) 0
     71          #define GPIO_HiD_SET() (val = 0)
     72          #define GPIO_HiD_CLR() (val = 0)
     73          #endif
     74          
     75          /***************************************************************************************************
     76           * CONSTANT
     77           ***************************************************************************************************/

   \                                 In  segment XDATA_ROM_C, align 1
     78          const uint16 MT_SysOsalEventId [] = {
   \                     MT_SysOsalEventId:
   \   000000   0008         DW 2048
   \   000002   0004         DW 1024
   \   000004   0002         DW 512
   \   000006   0001         DW 256
     79                                                MT_SYS_OSAL_EVENT_0,
     80                                                MT_SYS_OSAL_EVENT_1,
     81                                                MT_SYS_OSAL_EVENT_2,
     82                                                MT_SYS_OSAL_EVENT_3
     83                                              };
     84          
     85          typedef enum {
     86            GPIO_DIR,
     87            GPIO_TRI,
     88            GPIO_SET,
     89            GPIO_CLR,
     90            GPIO_TOG,
     91            GPIO_GET,
     92            GPIO_HiD = 0x12
     93          } GPIO_Op_t;
     94          
     95          #define GPIO_MASK  0x33
     96          
     97          /***************************************************************************************************
     98           * EXTERNAL FUNCTIONS
     99           ***************************************************************************************************/
    100          extern uint16 HalAdcReadVoltage(void);
    101          extern uint16 HalAdcReadTemperature(void);
    102          
    103          /***************************************************************************************************
    104           * LOCAL FUNCTIONS
    105           ***************************************************************************************************/
    106          #if defined (MT_SYS_FUNC)
    107          void MT_SysReset(uint8 *pBuf);
    108          void MT_SysPing(void);
    109          void MT_SysVersion(void);
    110          void MT_SysSetExtAddr(uint8 *pBuf);
    111          void MT_SysGetExtAddr(void);
    112          void MT_SysOsalNVWrite(uint8 *pBuf);
    113          void MT_SysOsalNVRead(uint8 *pBuf);
    114          void MT_SysOsalStartTimer(uint8 *pBuf);
    115          void MT_SysOsalStopTimer(uint8 *pBuf);
    116          void MT_SysRandom(void);
    117          void MT_SysAdcRead(uint8 *pBuf);
    118          void MT_SysGpio(uint8 *pBuf);
    119          void MT_SysStackTune(uint8 *pBuf);
    120          void MT_SysGetDeviceInfo(uint8 *pBuf);
    121          #endif /* MT_SYS_FUNC */
    122          
    123          #if defined (MT_SYS_FUNC)
    124          /***************************************************************************************************
    125           * @fn      MT_SysProcessing
    126           *
    127           * @brief   Process all the SYS commands that are issued by test tool
    128           *
    129           * @param   pBuf - pointer to the msg buffer
    130           *
    131           *          | LEN  | CMD0  | CMD1  |  DATA  |
    132           *          |  1   |   1   |   1   |  0-255 |
    133           *
    134           * @return  status
    135           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    136          uint8 MT_SysCommandProcessing(uint8 *pBuf)
   \                     MT_SysCommandProcessing:
    137          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    138            uint8 status = MT_RPC_SUCCESS;
   \   000005   7E00         MOV     R6,#0x0
    139          
    140            switch (pBuf[MT_RPC_POS_CMD1])
   \   000007   8A82         MOV     DPL,R2
   \   000009   8B83         MOV     DPH,R3
   \   00000B   A3           INC     DPTR
   \   00000C   A3           INC     DPTR
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   602B         JZ      ??MT_SysCommandProcessing_0
   \   000010   14           DEC     A
   \   000011   602D         JZ      ??MT_SysCommandProcessing_1
   \   000013   14           DEC     A
   \   000014   602F         JZ      ??MT_SysCommandProcessing_2
   \   000016   14           DEC     A
   \   000017   6031         JZ      ??MT_SysCommandProcessing_3
   \   000019   14           DEC     A
   \   00001A   6033         JZ      ??MT_SysCommandProcessing_4
   \   00001C   24FC         ADD     A,#-0x4
   \   00001E   6034         JZ      ??MT_SysCommandProcessing_5
   \   000020   14           DEC     A
   \   000021   6036         JZ      ??MT_SysCommandProcessing_6
   \   000023   14           DEC     A
   \   000024   6038         JZ      ??MT_SysCommandProcessing_7
   \   000026   14           DEC     A
   \   000027   603A         JZ      ??MT_SysCommandProcessing_8
   \   000029   14           DEC     A
   \   00002A   603C         JZ      ??MT_SysCommandProcessing_9
   \   00002C   14           DEC     A
   \   00002D   603E         JZ      ??MT_SysCommandProcessing_10
   \   00002F   14           DEC     A
   \   000030   6040         JZ      ??MT_SysCommandProcessing_11
   \   000032   14           DEC     A
   \   000033   6042         JZ      ??MT_SysCommandProcessing_12
   \   000035   248F         ADD     A,#-0x71
   \   000037   6045         JZ      ??MT_SysCommandProcessing_13
   \   000039   8041         SJMP    ??MT_SysCommandProcessing_14
    141            {
    142              case MT_SYS_RESET_REQ:
    143                MT_SysReset(pBuf);
   \                     ??MT_SysCommandProcessing_0:
   \   00003B                ; Setup parameters for call to function MT_SysReset
   \   00003B   12....       LCALL   `??MT_SysReset::?relay`; Banked call to: MT_SysReset
    144                break;
   \   00003E   803E         SJMP    ??MT_SysCommandProcessing_13
    145          
    146              case MT_SYS_PING:
    147                MT_SysPing();
   \                     ??MT_SysCommandProcessing_1:
   \   000040                ; Setup parameters for call to function MT_SysPing
   \   000040   12....       LCALL   `??MT_SysPing::?relay`; Banked call to: MT_SysPing
    148                break;
   \   000043   8039         SJMP    ??MT_SysCommandProcessing_13
    149          
    150              case MT_SYS_VERSION:
    151                MT_SysVersion();
   \                     ??MT_SysCommandProcessing_2:
   \   000045                ; Setup parameters for call to function MT_SysVersion
   \   000045   12....       LCALL   `??MT_SysVersion::?relay`; Banked call to: MT_SysVersion
    152                break;
   \   000048   8034         SJMP    ??MT_SysCommandProcessing_13
    153          
    154              case MT_SYS_SET_EXTADDR:
    155                MT_SysSetExtAddr(pBuf);
   \                     ??MT_SysCommandProcessing_3:
   \   00004A                ; Setup parameters for call to function MT_SysSetExtAddr
   \   00004A   12....       LCALL   `??MT_SysSetExtAddr::?relay`; Banked call to: MT_SysSetExtAddr
    156                break;
   \   00004D   802F         SJMP    ??MT_SysCommandProcessing_13
    157          
    158              case MT_SYS_GET_EXTADDR:
    159                MT_SysGetExtAddr();
   \                     ??MT_SysCommandProcessing_4:
   \   00004F                ; Setup parameters for call to function MT_SysGetExtAddr
   \   00004F   12....       LCALL   `??MT_SysGetExtAddr::?relay`; Banked call to: MT_SysGetExtAddr
    160                break;
   \   000052   802A         SJMP    ??MT_SysCommandProcessing_13
    161          
    162              case MT_SYS_OSAL_NV_READ:
    163                MT_SysOsalNVRead(pBuf);
   \                     ??MT_SysCommandProcessing_5:
   \   000054                ; Setup parameters for call to function MT_SysOsalNVRead
   \   000054   12....       LCALL   `??MT_SysOsalNVRead::?relay`; Banked call to: MT_SysOsalNVRead
    164                break;
   \   000057   8025         SJMP    ??MT_SysCommandProcessing_13
    165          
    166              case MT_SYS_OSAL_NV_WRITE:
    167                MT_SysOsalNVWrite(pBuf);
   \                     ??MT_SysCommandProcessing_6:
   \   000059                ; Setup parameters for call to function MT_SysOsalNVWrite
   \   000059   12....       LCALL   `??MT_SysOsalNVWrite::?relay`; Banked call to: MT_SysOsalNVWrite
    168                break;
   \   00005C   8020         SJMP    ??MT_SysCommandProcessing_13
    169          
    170              case MT_SYS_OSAL_START_TIMER:
    171                MT_SysOsalStartTimer(pBuf);
   \                     ??MT_SysCommandProcessing_7:
   \   00005E                ; Setup parameters for call to function MT_SysOsalStartTimer
   \   00005E   12....       LCALL   `??MT_SysOsalStartTimer::?relay`; Banked call to: MT_SysOsalStartTimer
    172                break;
   \   000061   801B         SJMP    ??MT_SysCommandProcessing_13
    173          
    174              case MT_SYS_OSAL_STOP_TIMER:
    175                MT_SysOsalStopTimer(pBuf);
   \                     ??MT_SysCommandProcessing_8:
   \   000063                ; Setup parameters for call to function MT_SysOsalStopTimer
   \   000063   12....       LCALL   `??MT_SysOsalStopTimer::?relay`; Banked call to: MT_SysOsalStopTimer
    176                break;
   \   000066   8016         SJMP    ??MT_SysCommandProcessing_13
    177          
    178              case MT_SYS_RANDOM:
    179                MT_SysRandom();
   \                     ??MT_SysCommandProcessing_9:
   \   000068                ; Setup parameters for call to function MT_SysRandom
   \   000068   12....       LCALL   `??MT_SysRandom::?relay`; Banked call to: MT_SysRandom
    180                break;
   \   00006B   8011         SJMP    ??MT_SysCommandProcessing_13
    181          
    182              case MT_SYS_ADC_READ:
    183                MT_SysAdcRead(pBuf);
   \                     ??MT_SysCommandProcessing_10:
   \   00006D                ; Setup parameters for call to function MT_SysAdcRead
   \   00006D   12....       LCALL   `??MT_SysAdcRead::?relay`; Banked call to: MT_SysAdcRead
    184                break;
   \   000070   800C         SJMP    ??MT_SysCommandProcessing_13
    185          
    186              case MT_SYS_GPIO:
    187                MT_SysGpio(pBuf);
   \                     ??MT_SysCommandProcessing_11:
   \   000072                ; Setup parameters for call to function MT_SysGpio
   \   000072   12....       LCALL   `??MT_SysGpio::?relay`; Banked call to: MT_SysGpio
    188                break;
   \   000075   8007         SJMP    ??MT_SysCommandProcessing_13
    189          
    190              case MT_SYS_STACK_TUNE:
    191                MT_SysStackTune(pBuf);
   \                     ??MT_SysCommandProcessing_12:
   \   000077                ; Setup parameters for call to function MT_SysStackTune
   \   000077   12....       LCALL   `??MT_SysStackTune::?relay`; Banked call to: MT_SysStackTune
    192                break;
   \   00007A   8002         SJMP    ??MT_SysCommandProcessing_13
    193          
    194              case MT_SYS_RESET_IND:
    195                //TBD
    196                break;
    197          
    198              default:
    199                status = MT_RPC_ERR_COMMAND_ID;
   \                     ??MT_SysCommandProcessing_14:
   \   00007C   7E02         MOV     R6,#0x2
    200                break;
    201            }
    202          
    203            return status;
   \                     ??MT_SysCommandProcessing_13:
   \   00007E   EE           MOV     A,R6
   \   00007F   F9           MOV     R1,A
   \   000080   02....       LJMP    ??Subroutine12_0 & 0xFFFF
    204          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine12_0:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    205          
    206          /***************************************************************************************************
    207           * @fn      MT_SysReset
    208           *
    209           * @brief   Reset/reprogram the device.
    210           * @param   typID: 0=reset, 1=serial bootloader
    211           *
    212           * @return  None
    213           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    214          void MT_SysReset(uint8 *pBuf)
   \                     MT_SysReset:
    215          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    216            (void)pBuf;  // Intentionally unreferenced parameter
    217            SystemReset();  /* Restart this program */
   \   000000   C2AF         CLR     0xa8.7
   \   000002   75C9AB       MOV     0xc9,#-0x55
   \   000005   75C95B       MOV     0xc9,#0x5b
   \                     ??MT_SysReset_0:
   \   000008   80FE         SJMP    ??MT_SysReset_0
   \   00000A                REQUIRE _A_IEN0
   \   00000A                REQUIRE WDCTL
    218          }
    219          
    220          /***************************************************************************************************
    221           * @fn      MT_SysPing
    222           *
    223           * @brief   Process the Ping command
    224           *
    225           * @param   None
    226           *
    227           * @return  None
    228           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    229          void MT_SysPing(void)
   \                     MT_SysPing:
    230          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 2
   \   000004   74FE         MOV     A,#-0x2
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
    231            uint16 tmp16;
    232            uint8 retArray[2];
    233          
    234            /* Build Capabilities */
    235            tmp16 = MT_CAP_SYS | MT_CAP_MAC | MT_CAP_NWK | MT_CAP_AF | MT_CAP_ZDO|
    236                    MT_CAP_SAPI | MT_CAP_UTIL | MT_CAP_DEBUG | MT_CAP_APP | MT_CAP_ZOAD;
    237          
    238            /* Convert to high byte first into temp buffer */
    239            retArray[0] = LO_UINT16( tmp16 );
   \   000009   85..82       MOV     DPL,?XSP + 0
   \   00000C   85..83       MOV     DPH,?XSP + 1
   \   00000F   7411         MOV     A,#0x11
   \   000011   F0           MOVX    @DPTR,A
    240            retArray[1] = HI_UINT16( tmp16 );
   \   000012   7401         MOV     A,#0x1
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   E4           CLR     A
   \   000018   12....       LCALL   ?Subroutine6 & 0xFFFF
    241          
    242            /* Build and send back the response */
    243            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS), MT_SYS_PING,
    244                                          sizeof (tmp16), retArray );
   \                     ??CrossCallReturnLabel_4:
   \   00001B   7A01         MOV     R2,#0x1
   \   00001D   7961         MOV     R1,#0x61
   \   00001F   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    245          }
   \   000022   7402         MOV     A,#0x2
   \   000024   02....       LJMP    ?Subroutine1 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001   AC..         MOV     R4,?XSP + 0
   \   000003   AD..         MOV     R5,?XSP + 1
   \   000005   7B02         MOV     R3,#0x2
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine9_0
   \   000003                ; // Fall through to label ??Subroutine9_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine9_0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    246          
    247          /***************************************************************************************************
    248           * @fn      MT_SysVersion
    249           *
    250           * @brief   Process the Version command
    251           *
    252           * @param   None
    253           *
    254           * @return  None
    255           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    256          void MT_SysVersion(void)
   \                     MT_SysVersion:
    257          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    258            byte *verStr = (byte *)MTVersionString;
    259            uint8 respLen = sizeof(MTVersionString);
    260          
    261            /* Build and send back the response */
    262            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS), MT_SYS_VERSION,
    263                                         respLen, verStr);
   \   000004                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000004   7C..         MOV     R4,#MTVersionString & 0xff
   \   000006   7D..         MOV     R5,#(MTVersionString >> 8) & 0xff
   \   000008   7B05         MOV     R3,#0x5
   \   00000A   7A02         MOV     R2,#0x2
   \   00000C   7961         MOV     R1,#0x61
   \   00000E   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    264          }
   \   000011   02....       LJMP    ??Subroutine9_0 & 0xFFFF
    265          
    266          /***************************************************************************************************
    267           * @fn      MT_SysSetExtAddr
    268           *
    269           * @brief   Set the Extended Address
    270           *
    271           * @param   pBuf
    272           *
    273           * @return  None
    274           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    275          void MT_SysSetExtAddr(uint8 *pBuf)
   \                     MT_SysSetExtAddr:
    276          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8B..         MOV     ?V1,R3
    277            uint8 retValue = ZFailure;
   \   00000C   12....       LCALL   ?Subroutine5 & 0xFFFF
    278            uint8 cmdId;
    279          
    280            /* parse header */
    281            cmdId = pBuf[MT_RPC_POS_CMD1];
    282            pBuf += MT_RPC_FRAME_HDR_SZ;
   \                     ??CrossCallReturnLabel_2:
   \   00000F   F5..         MOV     ?V0,A
   \   000011   5002         JNC     ??MT_SysSetExtAddr_0
   \   000013   05..         INC     ?V1
    283          
    284            if ( ZMacSetReq(ZMacExtAddr, pBuf) == ZMacSuccess )
   \                     ??MT_SysSetExtAddr_0:
   \   000015                ; Setup parameters for call to function ZMacSetReq
   \   000015   0A           INC     R2
   \   000016   0A           INC     R2
   \   000017   0A           INC     R2
   \   000018   AB..         MOV     R3,?V1
   \   00001A   79E2         MOV     R1,#-0x1e
   \   00001C   12....       LCALL   `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
   \   00001F   E9           MOV     A,R1
   \   000020   7028         JNZ     ??MT_SysSetExtAddr_1
    285            {
    286              retValue = osal_nv_write(ZCD_NV_EXTADDR, 0, Z_EXTADDR_LEN, pBuf);
   \   000022                ; Setup parameters for call to function osal_nv_write
   \   000022   78..         MOV     R0,#?V0
   \   000024   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000027   75..08       MOV     ?V0,#0x8
   \   00002A   75..00       MOV     ?V1,#0x0
   \   00002D   78..         MOV     R0,#?V0
   \   00002F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000032   7C00         MOV     R4,#0x0
   \   000034   7D00         MOV     R5,#0x0
   \   000036   7A01         MOV     R2,#0x1
   \   000038   7B00         MOV     R3,#0x0
   \   00003A   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   00003D   7404         MOV     A,#0x4
   \   00003F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000042   E9           MOV     A,R1
   \   000043   85..82       MOV     DPL,?XSP + 0
   \   000046   85..83       MOV     DPH,?XSP + 1
   \   000049   F0           MOVX    @DPTR,A
    287            }
    288          
    289            /* Build and send back the response */
    290            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS), cmdId, 1, &retValue);
   \                     ??MT_SysSetExtAddr_1:
   \   00004A                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00004A   AC..         MOV     R4,?XSP + 0
   \   00004C   AD..         MOV     R5,?XSP + 1
   \   00004E   7B01         MOV     R3,#0x1
   \   000050   EE           MOV     A,R6
   \   000051   FA           MOV     R2,A
   \   000052   7961         MOV     R1,#0x61
   \   000054   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    291          
    292          }
   \   000057   7401         MOV     A,#0x1
   \   000059   02....       LJMP    ??Subroutine8_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006   7401         MOV     A,#0x1
   \   000008   F0           MOVX    @DPTR,A
   \   000009   8A82         MOV     DPL,R2
   \   00000B   8B83         MOV     DPH,R3
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   FE           MOV     R6,A
   \   000011   EA           MOV     A,R2
   \   000012   2403         ADD     A,#0x3
   \   000014   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine8_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F02         MOV     R7,#0x2
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA
    293          
    294          /***************************************************************************************************
    295           * @fn      MT_SysGetExtAddr
    296           *
    297           * @brief   Get the Extended Address
    298           *
    299           * @param   None
    300           *
    301           * @return  None
    302           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    303          void MT_SysGetExtAddr(void)
   \                     MT_SysGetExtAddr:
    304          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 8
   \   000004   74F8         MOV     A,#-0x8
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
    305            uint8 extAddr[Z_EXTADDR_LEN];
    306          
    307            ZMacGetReq( ZMacExtAddr, extAddr );
   \   000009                ; Setup parameters for call to function ZMacGetReq
   \   000009   AA..         MOV     R2,?XSP + 0
   \   00000B   AB..         MOV     R3,?XSP + 1
   \   00000D   79E2         MOV     R1,#-0x1e
   \   00000F   12....       LCALL   `??ZMacGetReq::?relay`; Banked call to: ZMacGetReq
    308          
    309            /* Build and send back the response */
    310            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS), MT_SYS_GET_EXTADDR,
    311                                         Z_EXTADDR_LEN, extAddr);
   \   000012                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000012   AC..         MOV     R4,?XSP + 0
   \   000014   AD..         MOV     R5,?XSP + 1
   \   000016   7B08         MOV     R3,#0x8
   \   000018   7A04         MOV     R2,#0x4
   \   00001A   7961         MOV     R1,#0x61
   \   00001C   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    312          }
   \   00001F   7408         MOV     A,#0x8
   \   000021   02....       LJMP    ?Subroutine1 & 0xFFFF
    313          
    314          /***************************************************************************************************
    315           * @fn      MT_SysOsalNVRead
    316           *
    317           * @brief  Read a NV value
    318           *
    319           * @param  uint8 pBuf - pointer to the data
    320           *
    321           * @return  None
    322           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    323          void MT_SysOsalNVRead(uint8 *pBuf)
   \                     MT_SysOsalNVRead:
    324          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
    325            uint16 nvId;
    326            uint8 nvItemLen=0, nvItemOffset=0;
    327            uint8 *pRetBuf=NULL;
    328            uint8 respLen, cmdId;
    329          
    330            /* parse header */
    331            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   000005   8A82         MOV     DPL,R2
   \   000007   8B83         MOV     DPH,R3
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   F5..         MOV     ?V7,A
    332            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   00000E   EA           MOV     A,R2
   \   00000F   2403         ADD     A,#0x3
   \   000011   FA           MOV     R2,A
   \   000012   5001         JNC     ??MT_SysOsalNVRead_0
   \   000014   0B           INC     R3
    333          
    334            /* Get the ID */
    335            nvId = BUILD_UINT16(pBuf[0], pBuf[1]);
   \                     ??MT_SysOsalNVRead_0:
   \   000015   8A82         MOV     DPL,R2
   \   000017   8B83         MOV     DPH,R3
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   FC           MOV     R4,A
   \   00001B   A3           INC     DPTR
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   F8           MOV     R0,A
   \   00001E   E4           CLR     A
   \   00001F   C8           XCH     A,R0
   \   000020   F9           MOV     R1,A
   \   000021   EC           MOV     A,R4
   \   000022   28           ADD     A,R0
   \   000023   FE           MOV     R6,A
   \   000024   E4           CLR     A
   \   000025   39           ADDC    A,R1
   \   000026   FF           MOV     R7,A
    336            pBuf += sizeof(uint16);
    337          
    338            /* Calculate the offset */
    339            nvItemOffset = *pBuf;
   \   000027   8A82         MOV     DPL,R2
   \   000029   8B83         MOV     DPH,R3
   \   00002B   A3           INC     DPTR
   \   00002C   A3           INC     DPTR
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   F5..         MOV     ?V6,A
    340          
    341            nvItemLen = osal_nv_item_len(nvId);
   \   000030                ; Setup parameters for call to function osal_nv_item_len
   \   000030   EE           MOV     A,R6
   \   000031   FA           MOV     R2,A
   \   000032   EF           MOV     A,R7
   \   000033   FB           MOV     R3,A
   \   000034   12....       LCALL   `??osal_nv_item_len::?relay`; Banked call to: osal_nv_item_len
   \   000037   EA           MOV     A,R2
   \   000038   F5..         MOV     ?V0,A
    342          
    343            /* Return only 250 bytes max */
    344            if (nvItemLen > MT_NV_ITEM_MAX_LENGTH)
   \   00003A   C3           CLR     C
   \   00003B   94FB         SUBB    A,#-0x5
   \   00003D   4005         JC      ??MT_SysOsalNVRead_1
    345            {
    346              nvItemLen = MT_NV_ITEM_MAX_LENGTH;
   \   00003F   75..FA       MOV     ?V0,#-0x6
   \   000042   8003         SJMP    ??MT_SysOsalNVRead_2
    347            }
    348          
    349            if ((nvItemLen > 0) && ((nvItemLen - nvItemOffset) > 0))
   \                     ??MT_SysOsalNVRead_1:
   \   000044   EA           MOV     A,R2
   \   000045   6023         JZ      ??MT_SysOsalNVRead_3
   \                     ??MT_SysOsalNVRead_2:
   \   000047   A8..         MOV     R0,?V6
   \   000049   E5..         MOV     A,?V0
   \   00004B   C3           CLR     C
   \   00004C   98           SUBB    A,R0
   \   00004D   F8           MOV     R0,A
   \   00004E   95E0         SUBB    A,0xE0 /* A   */
   \   000050   F9           MOV     R1,A
   \   000051   C3           CLR     C
   \   000052   E8           MOV     A,R0
   \   000053   9401         SUBB    A,#0x1
   \   000055   E9           MOV     A,R1
   \   000056   9400         SUBB    A,#0x0
   \   000058   A2D2         MOV     C,0xD0 /* PSW */.2
   \   00005A   65D0         XRL     A,PSW
   \   00005C   33           RLC     A
   \   00005D   400B         JC      ??MT_SysOsalNVRead_3
    350            {
    351              respLen = nvItemLen - nvItemOffset + 2;
   \   00005F   E5..         MOV     A,?V0
   \   000061   C3           CLR     C
   \   000062   95..         SUBB    A,?V6
   \   000064   2402         ADD     A,#0x2
   \   000066   F5..         MOV     ?V1,A
   \   000068   8003         SJMP    ??MT_SysOsalNVRead_4
    352            }
    353            else
    354            {
    355              respLen = 2;
   \                     ??MT_SysOsalNVRead_3:
   \   00006A   75..02       MOV     ?V1,#0x2
    356            }
    357          
    358            pRetBuf = osal_mem_alloc(respLen);
   \                     ??MT_SysOsalNVRead_4:
   \   00006D                ; Setup parameters for call to function osal_mem_alloc
   \   00006D   AA..         MOV     R2,?V1
   \   00006F   7B00         MOV     R3,#0x0
   \   000071   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000074   8A..         MOV     ?V4,R2
   \   000076   8B..         MOV     ?V5,R3
    359          
    360            if (pRetBuf != NULL)
   \   000078   EA           MOV     A,R2
   \   000079   45..         ORL     A,?V5
   \   00007B   6074         JZ      ??MT_SysOsalNVRead_5
    361            {
    362              osal_memset(pRetBuf, 0, respLen);
   \   00007D                ; Setup parameters for call to function osal_memset
   \   00007D   AC..         MOV     R4,?V1
   \   00007F   7D00         MOV     R5,#0x0
   \   000081   7900         MOV     R1,#0x0
   \   000083   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
    363          
    364              /* Default to ZFailure */
    365              pRetBuf[0] = ZFailure;
   \   000086   85..82       MOV     DPL,?V4
   \   000089   85..83       MOV     DPH,?V5
   \   00008C   7401         MOV     A,#0x1
   \   00008E   F0           MOVX    @DPTR,A
   \   00008F   E5..         MOV     A,?V1
   \   000091   C3           CLR     C
   \   000092   9403         SUBB    A,#0x3
   \   000094   4044         JC      ??MT_SysOsalNVRead_6
    366          
    367              if (respLen > 2)
    368              {
    369                if (((osal_nv_read( nvId, (uint16)nvItemOffset, (uint16)nvItemLen, &pRetBuf[2])) == ZSUCCESS) && (respLen > 2))
   \   000096                ; Setup parameters for call to function osal_nv_read
   \   000096   E5..         MOV     A,?V4
   \   000098   2402         ADD     A,#0x2
   \   00009A   F5..         MOV     ?V2,A
   \   00009C   E4           CLR     A
   \   00009D   35..         ADDC    A,?V5
   \   00009F   F5..         MOV     ?V3,A
   \   0000A1   78..         MOV     R0,#?V2
   \   0000A3   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A6   85....       MOV     ?V2,?V0
   \   0000A9   75..00       MOV     ?V3,#0x0
   \   0000AC   78..         MOV     R0,#?V2
   \   0000AE   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000B1   AC..         MOV     R4,?V6
   \   0000B3   7D00         MOV     R5,#0x0
   \   0000B5   EE           MOV     A,R6
   \   0000B6   FA           MOV     R2,A
   \   0000B7   EF           MOV     A,R7
   \   0000B8   FB           MOV     R3,A
   \   0000B9   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   0000BC   7404         MOV     A,#0x4
   \   0000BE   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000C1   E9           MOV     A,R1
   \   0000C2   7008         JNZ     ??MT_SysOsalNVRead_7
    370                {
    371                  pRetBuf[0] = ZSuccess;
   \   0000C4   85..82       MOV     DPL,?V4
   \   0000C7   85..83       MOV     DPH,?V5
   \   0000CA   E4           CLR     A
   \   0000CB   F0           MOVX    @DPTR,A
    372                }
    373                pRetBuf[1] = nvItemLen - nvItemOffset;
   \                     ??MT_SysOsalNVRead_7:
   \   0000CC   E5..         MOV     A,?V0
   \   0000CE   C3           CLR     C
   \   0000CF   95..         SUBB    A,?V6
   \   0000D1   85..82       MOV     DPL,?V4
   \   0000D4   85..83       MOV     DPH,?V5
   \   0000D7   A3           INC     DPTR
   \   0000D8   8002         SJMP    ??MT_SysOsalNVRead_8
    374              }
    375              else
    376              {
    377                pRetBuf[1] = 0;
   \                     ??MT_SysOsalNVRead_6:
   \   0000DA   A3           INC     DPTR
   \   0000DB   E4           CLR     A
   \                     ??MT_SysOsalNVRead_8:
   \   0000DC   F0           MOVX    @DPTR,A
    378              }
    379          
    380              /* Build and send back the response */
    381              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS), cmdId, respLen, pRetBuf );
   \   0000DD                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   0000DD   AC..         MOV     R4,?V4
   \   0000DF   AD..         MOV     R5,?V5
   \   0000E1   AB..         MOV     R3,?V1
   \   0000E3   AA..         MOV     R2,?V7
   \   0000E5   7961         MOV     R1,#0x61
   \   0000E7   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    382          
    383              osal_mem_free(pRetBuf);
   \   0000EA                ; Setup parameters for call to function osal_mem_free
   \   0000EA   AA..         MOV     R2,?V4
   \   0000EC   AB..         MOV     R3,?V5
   \   0000EE   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    384            }
    385          
    386          
    387          }
   \                     ??MT_SysOsalNVRead_5:
   \   0000F1                REQUIRE ?Subroutine3
   \   0000F1                ; // Fall through to label ?Subroutine3

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   7F08         MOV     R7,#0x8
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    388          
    389          /***************************************************************************************************
    390           * @fn      MT_SysOsalNVWrite
    391           *
    392           * @brief
    393           *
    394           * @param   uint8 pData - pointer to the data
    395           *
    396           * @return  None
    397           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    398          void MT_SysOsalNVWrite(uint8 *pBuf)
   \                     MT_SysOsalNVWrite:
    399          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8B..         MOV     ?V3,R3
    400            uint16 nvId;
    401            uint8 nvItemLen=0, nvItemOffset=0;
    402            uint8 rtrn, cmd;
    403          
    404            /* parse header */
    405            cmd = pBuf[MT_RPC_POS_CMD1];
   \   00000C   8A82         MOV     DPL,R2
   \   00000E   8B83         MOV     DPH,R3
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   E0           MOVX    A,@DPTR
   \   000013   F5..         MOV     ?V5,A
    406            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000015   EA           MOV     A,R2
   \   000016   2403         ADD     A,#0x3
   \   000018   F5..         MOV     ?V2,A
   \   00001A   5002         JNC     ??MT_SysOsalNVWrite_0
   \   00001C   05..         INC     ?V3
    407          
    408            /* Get the ID */
    409            nvId = BUILD_UINT16(pBuf[0], pBuf[1]);
   \                     ??MT_SysOsalNVWrite_0:
   \   00001E   F582         MOV     DPL,A
   \   000020   85..83       MOV     DPH,?V3
   \   000023   E0           MOVX    A,@DPTR
   \   000024   FA           MOV     R2,A
   \   000025   A3           INC     DPTR
   \   000026   E0           MOVX    A,@DPTR
   \   000027   F8           MOV     R0,A
   \   000028   E4           CLR     A
   \   000029   C8           XCH     A,R0
   \   00002A   F9           MOV     R1,A
   \   00002B   EA           MOV     A,R2
   \   00002C   28           ADD     A,R0
   \   00002D   F5..         MOV     ?V0,A
   \   00002F   E4           CLR     A
   \   000030   39           ADDC    A,R1
   \   000031   F5..         MOV     ?V1,A
    410            pBuf += sizeof(uint16);
    411          
    412            /* Calculate the offset */
    413            nvItemOffset = *pBuf++;
   \   000033   85..82       MOV     DPL,?V2
   \   000036   85..83       MOV     DPH,?V3
   \   000039   A3           INC     DPTR
   \   00003A   A3           INC     DPTR
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   F5..         MOV     ?V4,A
    414          
    415            /* Calculate the length */
    416            nvItemLen = *pBuf++;
   \   00003E   85..82       MOV     DPL,?V2
   \   000041   85..83       MOV     DPH,?V3
   \   000044   A3           INC     DPTR
   \   000045   A3           INC     DPTR
   \   000046   A3           INC     DPTR
   \   000047   E0           MOVX    A,@DPTR
   \   000048   FE           MOV     R6,A
   \   000049   E5..         MOV     A,?V2
   \   00004B   2404         ADD     A,#0x4
   \   00004D   F5..         MOV     ?V2,A
   \   00004F   5002         JNC     ??MT_SysOsalNVWrite_1
   \   000051   05..         INC     ?V3
    417          
    418            /* Default to ZFailure */
    419            rtrn = ZFailure;
   \                     ??MT_SysOsalNVWrite_1:
   \   000053   85..82       MOV     DPL,?XSP + 0
   \   000056   85..83       MOV     DPH,?XSP + 1
   \   000059   7401         MOV     A,#0x1
   \   00005B   F0           MOVX    @DPTR,A
    420          
    421            /* Set the Z-Globals value of this NV item. */
    422            zgSetItem( nvId, (uint16)nvItemLen, pBuf );
   \   00005C                ; Setup parameters for call to function zgSetItem
   \   00005C   78..         MOV     R0,#?V2
   \   00005E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000061   EE           MOV     A,R6
   \   000062   FC           MOV     R4,A
   \   000063   7D00         MOV     R5,#0x0
   \   000065   AB..         MOV     R3,?V1
   \   000067   12....       LCALL   `??zgSetItem::?relay`; Banked call to: zgSetItem
   \   00006A   7402         MOV     A,#0x2
   \   00006C   12....       LCALL   ?DEALLOC_XSTACK8
    423          
    424            if ((osal_nv_write(nvId, (uint16)nvItemOffset, (uint16)nvItemLen, pBuf)) == ZSUCCESS)
   \   00006F                ; Setup parameters for call to function osal_nv_write
   \   00006F   78..         MOV     R0,#?V2
   \   000071   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000074   8E..         MOV     ?V6,R6
   \   000076   75..00       MOV     ?V7,#0x0
   \   000079   78..         MOV     R0,#?V6
   \   00007B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00007E   AC..         MOV     R4,?V4
   \   000080   7D00         MOV     R5,#0x0
   \   000082   AA..         MOV     R2,?V0
   \   000084   AB..         MOV     R3,?V1
   \   000086   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000089   7404         MOV     A,#0x4
   \   00008B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00008E   E9           MOV     A,R1
   \   00008F   7022         JNZ     ??MT_SysOsalNVWrite_2
    425            {
    426              if (nvId == ZCD_NV_EXTADDR)
   \   000091   7401         MOV     A,#0x1
   \   000093   65..         XRL     A,?V0
   \   000095   45..         ORL     A,?V1
   \   000097   7012         JNZ     ??MT_SysOsalNVWrite_3
    427              {
    428                rtrn = ZMacSetReq(ZMacExtAddr, pBuf);
   \   000099                ; Setup parameters for call to function ZMacSetReq
   \   000099   AA..         MOV     R2,?V2
   \   00009B   AB..         MOV     R3,?V3
   \   00009D   79E2         MOV     R1,#-0x1e
   \   00009F   12....       LCALL   `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
   \   0000A2   E9           MOV     A,R1
   \   0000A3   85..82       MOV     DPL,?XSP + 0
   \   0000A6   85..83       MOV     DPH,?XSP + 1
   \   0000A9   8007         SJMP    ??MT_SysOsalNVWrite_4
    429              }
    430              else
    431              {
    432                rtrn = ZSuccess;
   \                     ??MT_SysOsalNVWrite_3:
   \   0000AB   85..82       MOV     DPL,?XSP + 0
   \   0000AE   85..83       MOV     DPH,?XSP + 1
   \   0000B1   E4           CLR     A
   \                     ??MT_SysOsalNVWrite_4:
   \   0000B2   F0           MOVX    @DPTR,A
    433              }
    434            }
    435          
    436            /* Build and send back the response */
    437            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS), cmd, 1, &rtrn);
   \                     ??MT_SysOsalNVWrite_2:
   \   0000B3                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   0000B3   AC..         MOV     R4,?XSP + 0
   \   0000B5   AD..         MOV     R5,?XSP + 1
   \   0000B7   7B01         MOV     R3,#0x1
   \   0000B9   AA..         MOV     R2,?V5
   \   0000BB   7961         MOV     R1,#0x61
   \   0000BD   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    438          }
   \   0000C0   7401         MOV     A,#0x1
   \   0000C2   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000C5   02....       LJMP    ?Subroutine3 & 0xFFFF
    439          
    440          /***************************************************************************************************
    441           * @fn      MT_SysOsalStartTimer
    442           *
    443           * @brief
    444           *
    445           * @param   uint8 pData - pointer to the data
    446           *
    447           * @return  None
    448           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    449          void MT_SysOsalStartTimer(uint8 *pBuf)
   \                     MT_SysOsalStartTimer:
    450          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    451            uint16 eventId;
    452            uint8 retValue = ZFailure;
   \   00000A   12....       LCALL   ?Subroutine5 & 0xFFFF
    453            uint8 cmdId;
    454          
    455            /* parse header */
    456            cmdId = pBuf[MT_RPC_POS_CMD1];
    457            pBuf += MT_RPC_FRAME_HDR_SZ;
   \                     ??CrossCallReturnLabel_3:
   \   00000D   FA           MOV     R2,A
   \   00000E   5001         JNC     ??MT_SysOsalStartTimer_0
   \   000010   0B           INC     R3
    458          
    459            if (*pBuf <= 3)
   \                     ??MT_SysOsalStartTimer_0:
   \   000011   8A82         MOV     DPL,R2
   \   000013   8B83         MOV     DPH,R3
   \   000015   E0           MOVX    A,@DPTR
   \   000016   F8           MOV     R0,A
   \   000017   C3           CLR     C
   \   000018   9404         SUBB    A,#0x4
   \   00001A   5022         JNC     ??MT_SysOsalStartTimer_1
    460            {
    461              eventId = (uint16) MT_SysOsalEventId[*pBuf];
    462              retValue = osal_start_timerEx(MT_TaskID, eventId, BUILD_UINT16(pBuf[1], pBuf[2]));
   \   00001C                ; Setup parameters for call to function osal_start_timerEx
   \   00001C   A3           INC     DPTR
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   FC           MOV     R4,A
   \   00001F   8A82         MOV     DPL,R2
   \   000021   8B83         MOV     DPH,R3
   \   000023   A3           INC     DPTR
   \   000024   A3           INC     DPTR
   \   000025   E0           MOVX    A,@DPTR
   \   000026   FA           MOV     R2,A
   \   000027   E4           CLR     A
   \   000028   CA           XCH     A,R2
   \   000029   FB           MOV     R3,A
   \   00002A   EC           MOV     A,R4
   \   00002B   2A           ADD     A,R2
   \   00002C   E4           CLR     A
   \   00002D   3B           ADDC    A,R3
   \   00002E   FD           MOV     R5,A
   \   00002F   12....       LCALL   ?Subroutine4 & 0xFFFF
    463            }
   \                     ??CrossCallReturnLabel_0:
   \   000032   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000035   E9           MOV     A,R1
   \   000036   85..82       MOV     DPL,?XSP + 0
   \   000039   85..83       MOV     DPH,?XSP + 1
   \   00003C   8008         SJMP    ??MT_SysOsalStartTimer_2
    464            else
    465            {
    466              retValue = ZInvalidParameter;
   \                     ??MT_SysOsalStartTimer_1:
   \   00003E   85..82       MOV     DPL,?XSP + 0
   \   000041   85..83       MOV     DPH,?XSP + 1
   \   000044   7402         MOV     A,#0x2
    467            }
   \                     ??MT_SysOsalStartTimer_2:
   \   000046   02....       LJMP    ?Subroutine0 & 0xFFFF
    468          
    469            /* Build and send back the response */
    470            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS), cmdId, 1, &retValue);
    471          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   E8           MOV     A,R0
   \   000001   28           ADD     A,R0
   \   000002   F8           MOV     R0,A
   \   000003   E4           CLR     A
   \   000004   33           RLC     A
   \   000005   F9           MOV     R1,A
   \   000006   74..         MOV     A,#MT_SysOsalEventId & 0xff
   \   000008   28           ADD     A,R0
   \   000009   F582         MOV     DPL,A
   \   00000B   74..         MOV     A,#(MT_SysOsalEventId >> 8) & 0xff
   \   00000D   39           ADDC    A,R1
   \   00000E   F583         MOV     DPH,A
   \   000010   E0           MOVX    A,@DPTR
   \   000011   FA           MOV     R2,A
   \   000012   A3           INC     DPTR
   \   000013   E0           MOVX    A,@DPTR
   \   000014   FB           MOV     R3,A
   \   000015   90....       MOV     DPTR,#MT_TaskID
   \   000018   E0           MOVX    A,@DPTR
   \   000019   F9           MOV     R1,A
   \   00001A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                REQUIRE ??Subroutine10_0
   \   000001                ; // Fall through to label ??Subroutine10_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine10_0:
   \   000000   AC..         MOV     R4,?XSP + 0
   \   000002   AD..         MOV     R5,?XSP + 1
   \   000004   7B01         MOV     R3,#0x1
   \   000006   EE           MOV     A,R6
   \   000007   FA           MOV     R2,A
   \   000008   7961         MOV     R1,#0x61
   \   00000A                REQUIRE ??Subroutine11_0
   \   00000A                ; // Fall through to label ??Subroutine11_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine11_0:
   \   000000   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   \   000003   7401         MOV     A,#0x1
   \   000005   12....       LCALL   ?DEALLOC_XSTACK8
   \   000008                REQUIRE ??Subroutine12_0
   \   000008                ; // Fall through to label ??Subroutine12_0
    472          
    473          /***************************************************************************************************
    474           * @fn      MT_SysOsalStopTimer
    475           *
    476           * @brief
    477           *
    478           * @param   uint8 pData - pointer to the data
    479           *
    480           * @return  None
    481           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    482          void MT_SysOsalStopTimer(uint8 *pBuf)
   \                     MT_SysOsalStopTimer:
    483          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    484            uint16 eventId;
    485            uint8 retValue = ZFailure;
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   7401         MOV     A,#0x1
   \   000012   F0           MOVX    @DPTR,A
    486            uint8 cmdId;
    487          
    488            /* parse header */
    489            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   000013   12....       LCALL   ?Subroutine7 & 0xFFFF
    490            pBuf += MT_RPC_FRAME_HDR_SZ;
    491          
    492            if (*pBuf <= 3)
   \                     ??CrossCallReturnLabel_7:
   \   000016   F8           MOV     R0,A
   \   000017   C3           CLR     C
   \   000018   9404         SUBB    A,#0x4
   \   00001A   500F         JNC     ??MT_SysOsalStopTimer_0
    493            {
    494              eventId = (uint16) MT_SysOsalEventId[*pBuf];
    495              retValue = osal_stop_timerEx(MT_TaskID, eventId);
   \   00001C                ; Setup parameters for call to function osal_stop_timerEx
   \   00001C   12....       LCALL   ?Subroutine4 & 0xFFFF
    496            }
   \                     ??CrossCallReturnLabel_1:
   \   00001F   12....       LCALL   `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
   \   000022   E9           MOV     A,R1
   \   000023   85..82       MOV     DPL,?XSP + 0
   \   000026   85..83       MOV     DPH,?XSP + 1
   \   000029   8008         SJMP    ??MT_SysOsalStopTimer_1
    497            else
    498            {
    499              retValue = ZInvalidParameter;
   \                     ??MT_SysOsalStopTimer_0:
   \   00002B   85..82       MOV     DPL,?XSP + 0
   \   00002E   85..83       MOV     DPH,?XSP + 1
   \   000031   7402         MOV     A,#0x2
    500            }
   \                     ??MT_SysOsalStopTimer_1:
   \   000033   02....       LJMP    ?Subroutine0 & 0xFFFF
    501          
    502            /* Build and send back the response */
    503            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS), cmdId, 1, &retValue );
    504          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   FE           MOV     R6,A
   \   000008   8A82         MOV     DPL,R2
   \   00000A   8B83         MOV     DPH,R3
   \   00000C   A3           INC     DPTR
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   22           RET
    505          
    506          /***************************************************************************************************
    507           * @fn      MT_SysRandom
    508           *
    509           * @brief
    510           *
    511           * @param   uint8 pData - pointer to the data
    512           *
    513           * @return  None
    514           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    515          void MT_SysRandom()
   \                     MT_SysRandom:
    516          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    517            uint16 randValue = Onboard_rand();
   \   00000A                ; Setup parameters for call to function Onboard_rand
   \   00000A   12....       LCALL   `??Onboard_rand::?relay`; Banked call to: Onboard_rand
    518            uint8 retArray[2];
    519          
    520            retArray[0] = LO_UINT16(randValue);
   \   00000D   85..82       MOV     DPL,?XSP + 0
   \   000010   85..83       MOV     DPH,?XSP + 1
   \   000013   EA           MOV     A,R2
   \   000014   F0           MOVX    @DPTR,A
    521            retArray[1] = HI_UINT16(randValue);
   \   000015   7401         MOV     A,#0x1
   \   000017   12....       LCALL   ?XSTACK_DISP0_8
   \   00001A   EB           MOV     A,R3
   \   00001B   12....       LCALL   ?Subroutine6 & 0xFFFF
    522          
    523            /* Build and send back the response */
    524            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS), MT_SYS_RANDOM, 2, retArray );
   \                     ??CrossCallReturnLabel_5:
   \   00001E   7A0C         MOV     R2,#0xc
   \   000020                REQUIRE ?Subroutine2
   \   000020                ; // Fall through to label ?Subroutine2
    525          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7961         MOV     R1,#0x61
   \   000002   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   \   000005   7402         MOV     A,#0x2
   \   000007                REQUIRE ??Subroutine8_0
   \   000007                ; // Fall through to label ??Subroutine8_0
    526          
    527          /***************************************************************************************************
    528           * @fn      MT_SysAdcRead
    529           *
    530           * @brief   Reading ADC value, temperature sensor and voltage
    531           *
    532           * @param   uint8 pData - pointer to the data
    533           *
    534           * @return  None
    535           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    536          void MT_SysAdcRead(uint8 *pBuf)
   \                     MT_SysAdcRead:
    537          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    538            uint8 channel, resolution;
    539            uint16 tempValue;
    540            uint8 retArray[2];
    541            uint8 cmdId;
    542          
    543            /* parse header */
    544            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000A   12....       LCALL   ?Subroutine7 & 0xFFFF
    545            pBuf += MT_RPC_FRAME_HDR_SZ;
    546          
    547            /* Channel */
    548            channel = *pBuf++;
   \                     ??CrossCallReturnLabel_8:
   \   00000D   F9           MOV     R1,A
    549          
    550            /* Resolution */
    551            resolution = *pBuf++;
    552          
    553            /* Voltage reading */
    554            switch (channel)
   \   00000E   12....       LCALL   ?UC_SWITCH_SPARSE
   \                     `?<Jumptable for MT_SysAdcRead>_0`:
   \   000011   01           DB        1
   \   000012   00           DB        0
   \   000013   07           DB        7
   \   000014   ....         DW        ??MT_SysAdcRead_0
   \   000016   02           DB        2
   \   000017   0E           DB        14
   \   000018   ....         DW        ??MT_SysAdcRead_1
   \   00001A   0F           DB        15
   \   00001B   ....         DW        ??MT_SysAdcRead_2
   \   00001D   ....         DW        ??MT_SysAdcRead_3
    555            {
    556              /* Analog input channel */
    557              case HAL_ADC_CHANNEL_0:
    558              case HAL_ADC_CHANNEL_1:
    559              case HAL_ADC_CHANNEL_2:
    560              case HAL_ADC_CHANNEL_3:
    561              case HAL_ADC_CHANNEL_4:
    562              case HAL_ADC_CHANNEL_5:
    563              case HAL_ADC_CHANNEL_6:
    564              case HAL_ADC_CHANNEL_7:
    565                tempValue = HalAdcRead(channel, resolution);
   \                     ??MT_SysAdcRead_0:
   \   00001F                ; Setup parameters for call to function HalAdcRead
   \   00001F   8A82         MOV     DPL,R2
   \   000021   8B83         MOV     DPH,R3
   \   000023   A3           INC     DPTR
   \   000024   A3           INC     DPTR
   \   000025   A3           INC     DPTR
   \   000026   A3           INC     DPTR
   \   000027   E0           MOVX    A,@DPTR
   \   000028   FA           MOV     R2,A
   \   000029   800A         SJMP    ??MT_SysAdcRead_4
    566                break;
    567          
    568              /* Temperature sensor */
    569              case(HAL_ADC_CHANNEL_TEMP):
    570                tempValue = HalAdcRead(HAL_ADC_CHANNEL_TEMP, HAL_ADC_RESOLUTION_14);
   \                     ??MT_SysAdcRead_1:
   \   00002B                ; Setup parameters for call to function HalAdcRead
   \   00002B   7A04         MOV     R2,#0x4
   \   00002D   790E         MOV     R1,#0xe
   \   00002F   8004         SJMP    ??MT_SysAdcRead_4
    571                break;
    572          
    573              /* Voltage reading */
    574              case(HAL_ADC_CHANNEL_VDD):
    575                tempValue = HalAdcRead(HAL_ADC_CHANNEL_VDD, HAL_ADC_RESOLUTION_14);
   \                     ??MT_SysAdcRead_2:
   \   000031                ; Setup parameters for call to function HalAdcRead
   \   000031   7A04         MOV     R2,#0x4
   \   000033   790F         MOV     R1,#0xf
   \                     ??MT_SysAdcRead_4:
   \   000035   12....       LCALL   `??HalAdcRead::?relay`; Banked call to: HalAdcRead
   \   000038   8A..         MOV     ?V0,R2
   \   00003A   8B..         MOV     ?V1,R3
   \   00003C   A8..         MOV     R0,?V0
   \   00003E   A9..         MOV     R1,?V1
    576                break;
   \   000040   8004         SJMP    ??MT_SysAdcRead_5
    577          
    578              /* Undefined channels */
    579              default:
    580                tempValue = 0x00;
   \                     ??MT_SysAdcRead_3:
   \   000042   7800         MOV     R0,#0x0
   \   000044   7900         MOV     R1,#0x0
    581                break;
    582            }
    583          
    584            retArray[0] = LO_UINT16(tempValue);
   \                     ??MT_SysAdcRead_5:
   \   000046   E8           MOV     A,R0
   \   000047   85..82       MOV     DPL,?XSP + 0
   \   00004A   85..83       MOV     DPH,?XSP + 1
   \   00004D   F0           MOVX    @DPTR,A
    585            retArray[1] = HI_UINT16(tempValue);
   \   00004E   7401         MOV     A,#0x1
   \   000050   12....       LCALL   ?XSTACK_DISP0_8
   \   000053   E9           MOV     A,R1
   \   000054   12....       LCALL   ?Subroutine6 & 0xFFFF
    586          
    587            /* Build and send back the response */
    588            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS), cmdId, 2, retArray);
   \                     ??CrossCallReturnLabel_6:
   \   000057   EE           MOV     A,R6
   \   000058   FA           MOV     R2,A
   \   000059   80..         SJMP    ?Subroutine2
    589          }
    590          
    591          /**************************************************************************************************
    592           * @fn      MT_SysGpio
    593           *
    594           * @brief   ZAccel RPC interface for controlling the available GPIO pins.
    595           *
    596           * @param   uint8 pData - Pointer to the data.
    597           *
    598           * @return  None
    599           *************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    600          void MT_SysGpio(uint8 *pBuf)
   \                     MT_SysGpio:
    601          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 1
   \   000004   74FF         MOV     A,#-0x1
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
    602            uint8 cmd, val;
    603            GPIO_Op_t op;
    604          
    605            cmd = pBuf[MT_RPC_POS_CMD1];
   \   000009   8A82         MOV     DPL,R2
   \   00000B   8B83         MOV     DPH,R3
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   FA           MOV     R2,A
    606            pBuf += MT_RPC_FRAME_HDR_SZ;
    607          
    608            op = (GPIO_Op_t)(*pBuf++);
    609            val = *pBuf & GPIO_MASK;
    610          
    611            switch (op)
    612            {
    613              case GPIO_DIR:
    614                if (val & BV(0)) {GPIO_DIR_OUT(0);} else {GPIO_DIR_IN(0);}
    615                if (val & BV(1)) {GPIO_DIR_OUT(1);} else {GPIO_DIR_IN(1);}
    616                if (val & BV(2)) {GPIO_DIR_OUT(2);} else {GPIO_DIR_IN(2);}
    617                if (val & BV(3)) {GPIO_DIR_OUT(3);} else {GPIO_DIR_IN(3);}
    618                break;
    619          
    620              case GPIO_TRI:
    621                if(val & BV(0)) {GPIO_TRI(0);} else if(val & BV(4)) {GPIO_PULL_DN(0);} else {GPIO_PULL_UP(0);}
    622                if(val & BV(1)) {GPIO_TRI(1);} else if(val & BV(5)) {GPIO_PULL_DN(1);} else {GPIO_PULL_UP(1);}
    623                if(val & BV(2)) {GPIO_TRI(2);} else if(val & BV(6)) {GPIO_PULL_DN(2);} else {GPIO_PULL_UP(2);}
    624                if(val & BV(3)) {GPIO_TRI(3);} else if(val & BV(7)) {GPIO_PULL_DN(3);} else {GPIO_PULL_UP(3);}
    625                break;
    626          
    627              case GPIO_SET:
    628                if (val & BV(0)) {GPIO_SET(0);}
    629                if (val & BV(1)) {GPIO_SET(1);}
    630                if (val & BV(2)) {GPIO_SET(2);}
    631                if (val & BV(3)) {GPIO_SET(3);}
    632                break;
    633          
    634              case GPIO_CLR:
    635                if (val & BV(0)) {GPIO_CLR(0);}
    636                if (val & BV(1)) {GPIO_CLR(1);}
    637                if (val & BV(2)) {GPIO_CLR(2);}
    638                if (val & BV(3)) {GPIO_CLR(3);}
    639                break;
    640          
    641              case GPIO_TOG:
    642                if (val & BV(0)) {GPIO_TOG(0);}
    643                if (val & BV(1)) {GPIO_TOG(1);}
    644                if (val & BV(2)) {GPIO_TOG(2);}
    645                if (val & BV(3)) {GPIO_TOG(3);}
    646                break;
    647          
    648              case GPIO_GET:
    649                break;
    650          
    651              case GPIO_HiD:
    652                (val) ? GPIO_HiD_SET() :  GPIO_HiD_CLR();
    653                break;
    654          
    655              default:
    656                break;
    657            }
    658          
    659            val  = (GPIO_GET(0)) ? BV(0) : 0;
    660            val |= (GPIO_GET(1)) ? BV(1) : 0;
    661            val |= (GPIO_GET(2)) ? BV(2) : 0;
    662            val |= (GPIO_GET(3)) ? BV(3) : 0;
   \   000011   85..82       MOV     DPL,?XSP + 0
   \   000014   85..83       MOV     DPH,?XSP + 1
   \   000017   E4           CLR     A
   \   000018   F0           MOVX    @DPTR,A
    663          
    664            /* Build and send back the response */
    665            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS), cmd, 1, &val);
   \   000019                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000019   AC..         MOV     R4,?XSP + 0
   \   00001B   AD..         MOV     R5,?XSP + 1
   \   00001D   7B01         MOV     R3,#0x1
   \   00001F   7961         MOV     R1,#0x61
   \   000021   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    666          }
   \   000024   7401         MOV     A,#0x1
   \   000026                REQUIRE ?Subroutine1
   \   000026                ; // Fall through to label ?Subroutine1
    667          
    668          /**************************************************************************************************
    669           * @fn      MT_SysStackTune
    670           *
    671           * @brief   ZAccel RPC interface for tuning the stack parameters to adjust performance
    672           *
    673           * @param   uint8 pData - Pointer to the data.
    674           *
    675           * @return  None
    676           *************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    677          void MT_SysStackTune(uint8 *pBuf)
   \                     MT_SysStackTune:
    678          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    679            uint8 cmd, rtrn;
    680          
    681            cmd = pBuf[MT_RPC_POS_CMD1];
   \   00000A   8A82         MOV     DPL,R2
   \   00000C   8B83         MOV     DPH,R3
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   FE           MOV     R6,A
    682            pBuf += MT_RPC_FRAME_HDR_SZ;
    683          
    684            switch (*pBuf++)
   \   000012   EA           MOV     A,R2
   \   000013   2403         ADD     A,#0x3
   \   000015   F8           MOV     R0,A
   \   000016   E4           CLR     A
   \   000017   3B           ADDC    A,R3
   \   000018   F9           MOV     R1,A
   \   000019   8882         MOV     DPL,R0
   \   00001B   8983         MOV     DPH,R1
   \   00001D   A3           INC     DPTR
   \   00001E   AA82         MOV     R2,DPL
   \   000020   AB83         MOV     R3,DPH
   \   000022   8882         MOV     DPL,R0
   \   000024   8983         MOV     DPH,R1
   \   000026   E0           MOVX    A,@DPTR
   \   000027   6005         JZ      ??MT_SysStackTune_0
   \   000029   14           DEC     A
   \   00002A   6006         JZ      ??MT_SysStackTune_1
   \   00002C   802B         SJMP    ??MT_SysStackTune_2
    685            {
    686            case STK_TX_PWR:
    687              rtrn = ZMacSetReq(ZMacPhyTransmitPower, pBuf);
   \                     ??MT_SysStackTune_0:
   \   00002E                ; Setup parameters for call to function ZMacSetReq
   \   00002E   79E0         MOV     R1,#-0x20
   \   000030   801B         SJMP    ??MT_SysStackTune_3
    688              break;
    689          
    690            case STK_RX_ON_IDLE:
    691              if ((*pBuf != TRUE) && (*pBuf != FALSE))
   \                     ??MT_SysStackTune_1:
   \   000032   8A82         MOV     DPL,R2
   \   000034   8B83         MOV     DPH,R3
   \   000036   E0           MOVX    A,@DPTR
   \   000037   F8           MOV     R0,A
   \   000038   7401         MOV     A,#0x1
   \   00003A   68           XRL     A,R0
   \   00003B   600E         JZ      ??MT_SysStackTune_4
   \   00003D   E8           MOV     A,R0
   \   00003E   600B         JZ      ??MT_SysStackTune_4
    692              {
    693                (void)ZMacGetReq(ZMacRxOnIdle, &rtrn);
   \   000040                ; Setup parameters for call to function ZMacGetReq
   \   000040   AA..         MOV     R2,?XSP + 0
   \   000042   AB..         MOV     R3,?XSP + 1
   \   000044   7952         MOV     R1,#0x52
   \   000046   12....       LCALL   `??ZMacGetReq::?relay`; Banked call to: ZMacGetReq
   \   000049   8017         SJMP    ??MT_SysStackTune_5
    694              }
    695              else
    696              {
    697                rtrn = ZMacSetReq(ZMacRxOnIdle, pBuf);
   \                     ??MT_SysStackTune_4:
   \   00004B                ; Setup parameters for call to function ZMacSetReq
   \   00004B   7952         MOV     R1,#0x52
   \                     ??MT_SysStackTune_3:
   \   00004D   12....       LCALL   `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
   \   000050   E9           MOV     A,R1
   \   000051   85..82       MOV     DPL,?XSP + 0
   \   000054   85..83       MOV     DPH,?XSP + 1
   \   000057   8008         SJMP    ??MT_SysStackTune_6
    698              }
    699              break;
    700          
    701            default:
    702              rtrn = ZInvalidParameter;
   \                     ??MT_SysStackTune_2:
   \   000059   85..82       MOV     DPL,?XSP + 0
   \   00005C   85..83       MOV     DPH,?XSP + 1
   \   00005F   7402         MOV     A,#0x2
   \                     ??MT_SysStackTune_6:
   \   000061   F0           MOVX    @DPTR,A
    703              break;
    704            }
    705          
    706            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS), cmd, 1, &rtrn);
   \                     ??MT_SysStackTune_5:
   \   000062                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000062   80..         SJMP    ??Subroutine10_0
    707          }
    708          #endif /* MT_SYS_FUNC */
    709          
    710          /***************************************************************************************************
    711           * SUPPORT
    712           ***************************************************************************************************/
    713          
    714          /***************************************************************************************************
    715           * @fn      MT_SysResetInd()
    716           *
    717           * @brief   Sends a ZTOOL "reset response" message.
    718           *
    719           * @param   None
    720           *
    721           * @return  None
    722           *
    723           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    724          void MT_SysResetInd(void)
   \                     MT_SysResetInd:
    725          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 6
   \   000005   74FA         MOV     A,#-0x6
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    726            uint8 retArray[6];
    727          
    728            retArray[0] = ResetReason();   /* Reason */
   \   00000A   E59D         MOV     A,0x9d
   \   00000C   13           RRC     A
   \   00000D   13           RRC     A
   \   00000E   13           RRC     A
   \   00000F   541F         ANL     A,#0x1f
   \   000011   5403         ANL     A,#0x3
   \   000013   85..82       MOV     DPL,?XSP + 0
   \   000016   85..83       MOV     DPH,?XSP + 1
   \   000019   F0           MOVX    @DPTR,A
    729            osal_memcpy( &retArray[1], MTVersionString, 5 );   /* Revision info */
   \   00001A                ; Setup parameters for call to function osal_memcpy
   \   00001A   75....       MOV     ?V0,#MTVersionString & 0xff
   \   00001D   75....       MOV     ?V1,#(MTVersionString >> 8) & 0xff
   \   000020   75..00       MOV     ?V2,#0x0
   \   000023   78..         MOV     R0,#?V0
   \   000025   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000028   7C05         MOV     R4,#0x5
   \   00002A   7D00         MOV     R5,#0x0
   \   00002C   7404         MOV     A,#0x4
   \   00002E   12....       LCALL   ?XSTACK_DISP0_8
   \   000031   AA82         MOV     R2,DPL
   \   000033   AB83         MOV     R3,DPH
   \   000035   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000038   7403         MOV     A,#0x3
   \   00003A   12....       LCALL   ?DEALLOC_XSTACK8
    730          
    731            /* Send out Reset Response message */
    732            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_SYS), MT_SYS_RESET_IND,
    733                                          sizeof(retArray), retArray);
   \   00003D                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00003D   AC..         MOV     R4,?XSP + 0
   \   00003F   AD..         MOV     R5,?XSP + 1
   \   000041   7B06         MOV     R3,#0x6
   \   000043   7A80         MOV     R2,#-0x80
   \   000045   7941         MOV     R1,#0x41
   \   000047   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    734          }
   \   00004A   7406         MOV     A,#0x6
   \   00004C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00004F   7F03         MOV     R7,#0x3
   \   000051   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   000054                REQUIRE SLEEPSTA
    735          
    736          /***************************************************************************************************
    737           * @fn      MT_SysOsalTimerExpired()
    738           *
    739           * @brief   Sends a SYS Osal Timer Expired
    740           *
    741           * @param   None
    742           *
    743           * @return  None
    744           *
    745           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    746          void MT_SysOsalTimerExpired(uint8 Id)
   \                     MT_SysOsalTimerExpired:
    747          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
    748            uint8 retValue;
    749            retValue = Id;
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   F0           MOVX    @DPTR,A
    750            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_SYS), MT_SYS_OSAL_TIMER_EXPIRED, 1, &retValue);
   \   000012                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000012   AC..         MOV     R4,?XSP + 0
   \   000014   AD..         MOV     R5,?XSP + 1
   \   000016   7B01         MOV     R3,#0x1
   \   000018   7A81         MOV     R2,#-0x7f
   \   00001A   7941         MOV     R1,#0x41
   \   00001C   80..         SJMP    ??Subroutine11_0
    751          }

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_SysCommandProcessing::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SysCommandProcessing

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_SysReset::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SysReset

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_SysPing::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SysPing

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_SysVersion::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SysVersion

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_SysSetExtAddr::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SysSetExtAddr

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_SysGetExtAddr::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SysGetExtAddr

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_SysOsalNVRead::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SysOsalNVRead

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_SysOsalNVWrite::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SysOsalNVWrite

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_SysOsalStartTimer::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SysOsalStartTimer

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_SysOsalStopTimer::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SysOsalStopTimer

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_SysRandom::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SysRandom

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_SysAdcRead::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SysAdcRead

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_SysGpio::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SysGpio

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_SysStackTune::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SysStackTune

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_SysResetInd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SysResetInd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_SysOsalTimerExpired::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SysOsalTimerExpired
    752          
    753          /***************************************************************************************************
    754           ***************************************************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      1     21   MT_SysAdcRead
        0     12   -> HalAdcRead
        0     12   -> MT_BuildAndSendZToolResponse
      0      9   MT_SysCommandProcessing
        0      9   -> MT_SysAdcRead
        0      9   -> MT_SysGetExtAddr
        0      9   -> MT_SysGpio
        0      9   -> MT_SysOsalNVRead
        0      9   -> MT_SysOsalNVWrite
        0      9   -> MT_SysOsalStartTimer
        0      9   -> MT_SysOsalStopTimer
        0      9   -> MT_SysPing
        0      9   -> MT_SysRandom
        0      9   -> MT_SysReset
        0      9   -> MT_SysSetExtAddr
        0      9   -> MT_SysStackTune
        0      9   -> MT_SysVersion
      2     17   MT_SysGetExtAddr
        2      8   -> MT_BuildAndSendZToolResponse
        2      8   -> ZMacGetReq
      2     10   MT_SysGpio
        2      1   -> MT_BuildAndSendZToolResponse
      1     29   MT_SysOsalNVRead
        0     16   -> MT_BuildAndSendZToolResponse
        0     16   -> osal_mem_alloc
        0     16   -> osal_mem_free
        0     16   -> osal_memset
        0     16   -> osal_nv_item_len
        0     20   -> osal_nv_read
      1     30   MT_SysOsalNVWrite
        0     17   -> MT_BuildAndSendZToolResponse
        0     17   -> ZMacSetReq
        0     21   -> osal_nv_write
        0     19   -> zgSetItem
      1     19   MT_SysOsalStartTimer
        0     10   -> MT_BuildAndSendZToolResponse
        0     10   -> osal_start_timerEx
      1     19   MT_SysOsalStopTimer
        0     10   -> MT_BuildAndSendZToolResponse
        0     10   -> osal_stop_timerEx
      1     10   MT_SysOsalTimerExpired
        0     10   -> MT_BuildAndSendZToolResponse
      2     11   MT_SysPing
        2      2   -> MT_BuildAndSendZToolResponse
      1     21   MT_SysRandom
        0     12   -> MT_BuildAndSendZToolResponse
        0     12   -> Onboard_rand
      0      9   MT_SysReset
      1     20   MT_SysResetInd
        0     17   -> MT_BuildAndSendZToolResponse
        0     20   -> osal_memcpy
      1     24   MT_SysSetExtAddr
        0     11   -> MT_BuildAndSendZToolResponse
        0     11   -> ZMacSetReq
        0     15   -> osal_nv_write
      1     19   MT_SysStackTune
        0     10   -> MT_BuildAndSendZToolResponse
        0     10   -> ZMacGetReq
        0     10   -> ZMacSetReq
      2      9   MT_SysVersion
        2      0   -> MT_BuildAndSendZToolResponse


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      10  ??Subroutine10_0
       8  ??Subroutine11_0
       5  ??Subroutine12_0
       8  ??Subroutine8_0
       7  ??Subroutine9_0
       1  ?Subroutine0
       3  ?Subroutine1
       7  ?Subroutine2
       5  ?Subroutine3
      27  ?Subroutine4
      21  ?Subroutine5
       8  ?Subroutine6
      17  ?Subroutine7
      91  MT_SysAdcRead
       6  MT_SysAdcRead::?relay
     131  MT_SysCommandProcessing
       6  MT_SysCommandProcessing::?relay
      36  MT_SysGetExtAddr
       6  MT_SysGetExtAddr::?relay
      38  MT_SysGpio
       6  MT_SysGpio::?relay
       8  MT_SysOsalEventId
     241  MT_SysOsalNVRead
       6  MT_SysOsalNVRead::?relay
     200  MT_SysOsalNVWrite
       6  MT_SysOsalNVWrite::?relay
      73  MT_SysOsalStartTimer
       6  MT_SysOsalStartTimer::?relay
      54  MT_SysOsalStopTimer
       6  MT_SysOsalStopTimer::?relay
      30  MT_SysOsalTimerExpired
       6  MT_SysOsalTimerExpired::?relay
      39  MT_SysPing
       6  MT_SysPing::?relay
      32  MT_SysRandom
       6  MT_SysRandom::?relay
      10  MT_SysReset
       6  MT_SysReset::?relay
      84  MT_SysResetInd
       6  MT_SysResetInd::?relay
      92  MT_SysSetExtAddr
       6  MT_SysSetExtAddr::?relay
     100  MT_SysStackTune
       6  MT_SysStackTune::?relay
      20  MT_SysVersion
       6  MT_SysVersion::?relay
       1  SLEEPSTA
       1  WDCTL
       1  _A_IEN0

 
 1 398 bytes in segment BANKED_CODE
    96 bytes in segment BANK_RELAYS
     3 bytes in segment SFR_AN
     8 bytes in segment XDATA_ROM_C
 
 1 494 bytes of CODE  memory
     8 bytes of CONST memory
     0 bytes of DATA  memory (+ 3 bytes shared)

Errors: none
Warnings: none
