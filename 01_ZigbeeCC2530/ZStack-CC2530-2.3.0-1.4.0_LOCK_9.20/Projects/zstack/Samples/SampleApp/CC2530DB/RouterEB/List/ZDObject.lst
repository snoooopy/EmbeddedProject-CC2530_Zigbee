###############################################################################
#
# IAR C/C++ Compiler V9.20.1.2476 for 8051                02/May/2017  13:55:41
# Copyright 2004-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        F:\3_Jin_testCode\ZStack-CC2530-2.3.0-1.4.0µØËø\ZStack-CC2530-2.3.0-1.4.0µØËø\Components\stack\zdo\ZDObject.c
#    Command line       =  
#        -f
#        F:\3_Jin_testCode\ZStack-CC2530-2.3.0-1.4.0µØËø\ZStack-CC2530-2.3.0-1.4.0µØËø\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wRouter.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DRTR_NWK -DBLINK_LEDS) -f
#        F:\3_Jin_testCode\ZStack-CC2530-2.3.0-1.4.0µØËø\ZStack-CC2530-2.3.0-1.4.0µØËø\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_POLLED=3000
#        -DNWK_INDIRECT_MSG_TIMEOUT=7 -DMAX_RREQ_ENTRIES=8
#        -DAPSC_MAX_FRAME_RETRIES=3 -DNWK_MAX_DATA_RETRIES=2
#        -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9 -DAPS_MAX_GROUPS=16
#        -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000
#        -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
#        -DREJOIN_POLL_RATE=440
#        F:\3_Jin_testCode\ZStack-CC2530-2.3.0-1.4.0µØËø\ZStack-CC2530-2.3.0-1.4.0µØËø\Components\stack\zdo\ZDObject.c
#        -D ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC -D
#        LCD_SUPPORTED=DEBUG -lC
#        F:\3_Jin_testCode\ZStack-CC2530-2.3.0-1.4.0µØËø\ZStack-CC2530-2.3.0-1.4.0µØËø\Projects\zstack\Samples\SampleApp\CC2530DB\RouterEB\List\
#        -lA
#        F:\3_Jin_testCode\ZStack-CC2530-2.3.0-1.4.0µØËø\ZStack-CC2530-2.3.0-1.4.0µØËø\Projects\zstack\Samples\SampleApp\CC2530DB\RouterEB\List\
#        --diag_suppress Pe001,Pa010 -o
#        F:\3_Jin_testCode\ZStack-CC2530-2.3.0-1.4.0µØËø\ZStack-CC2530-2.3.0-1.4.0µØËø\Projects\zstack\Samples\SampleApp\CC2530DB\RouterEB\Obj\
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 8 -I
#        F:\3_Jin_testCode\ZStack-CC2530-2.3.0-1.4.0µØËø\ZStack-CC2530-2.3.0-1.4.0µØËø\Projects\zstack\Samples\SampleApp\CC2530DB\
#        -I
#        F:\3_Jin_testCode\ZStack-CC2530-2.3.0-1.4.0µØËø\ZStack-CC2530-2.3.0-1.4.0µØËø\Projects\zstack\Samples\SampleApp\CC2530DB\..\SOURCE\
#        -I
#        F:\3_Jin_testCode\ZStack-CC2530-2.3.0-1.4.0µØËø\ZStack-CC2530-2.3.0-1.4.0µØËø\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\ZMAIN\TI2530DB\
#        -I
#        F:\3_Jin_testCode\ZStack-CC2530-2.3.0-1.4.0µØËø\ZStack-CC2530-2.3.0-1.4.0µØËø\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MT\
#        -I
#        F:\3_Jin_testCode\ZStack-CC2530-2.3.0-1.4.0µØËø\ZStack-CC2530-2.3.0-1.4.0µØËø\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\INCLUDE\
#        -I
#        F:\3_Jin_testCode\ZStack-CC2530-2.3.0-1.4.0µØËø\ZStack-CC2530-2.3.0-1.4.0µØËø\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\TARGET\CC2530EB\
#        -I
#        F:\3_Jin_testCode\ZStack-CC2530-2.3.0-1.4.0µØËø\ZStack-CC2530-2.3.0-1.4.0µØËø\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\MCU\CCSOC\
#        -I
#        F:\3_Jin_testCode\ZStack-CC2530-2.3.0-1.4.0µØËø\ZStack-CC2530-2.3.0-1.4.0µØËø\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\INCLUDE\
#        -I
#        F:\3_Jin_testCode\ZStack-CC2530-2.3.0-1.4.0µØËø\ZStack-CC2530-2.3.0-1.4.0µØËø\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\AF\
#        -I
#        F:\3_Jin_testCode\ZStack-CC2530-2.3.0-1.4.0µØËø\ZStack-CC2530-2.3.0-1.4.0µØËø\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\NWK\
#        -I
#        F:\3_Jin_testCode\ZStack-CC2530-2.3.0-1.4.0µØËø\ZStack-CC2530-2.3.0-1.4.0µØËø\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SEC\
#        -I
#        F:\3_Jin_testCode\ZStack-CC2530-2.3.0-1.4.0µØËø\ZStack-CC2530-2.3.0-1.4.0µØËø\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SAPI\
#        -I
#        F:\3_Jin_testCode\ZStack-CC2530-2.3.0-1.4.0µØËø\ZStack-CC2530-2.3.0-1.4.0µØËø\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SYS\
#        -I
#        F:\3_Jin_testCode\ZStack-CC2530-2.3.0-1.4.0µØËø\ZStack-CC2530-2.3.0-1.4.0µØËø\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\ZDO\
#        -I
#        F:\3_Jin_testCode\ZStack-CC2530-2.3.0-1.4.0µØËø\ZStack-CC2530-2.3.0-1.4.0µØËø\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\F8W\
#        -I
#        F:\3_Jin_testCode\ZStack-CC2530-2.3.0-1.4.0µØËø\ZStack-CC2530-2.3.0-1.4.0µØËø\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\
#        -I
#        F:\3_Jin_testCode\ZStack-CC2530-2.3.0-1.4.0µØËø\ZStack-CC2530-2.3.0-1.4.0µØËø\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES\SADDR\
#        -I
#        F:\3_Jin_testCode\ZStack-CC2530-2.3.0-1.4.0µØËø\ZStack-CC2530-2.3.0-1.4.0µØËø\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES\SDATA\
#        -I
#        F:\3_Jin_testCode\ZStack-CC2530-2.3.0-1.4.0µØËø\ZStack-CC2530-2.3.0-1.4.0µØËø\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\INCLUDE\
#        -I
#        F:\3_Jin_testCode\ZStack-CC2530-2.3.0-1.4.0µØËø\ZStack-CC2530-2.3.0-1.4.0µØËø\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\HIGH_LEVEL\
#        -I
#        F:\3_Jin_testCode\ZStack-CC2530-2.3.0-1.4.0µØËø\ZStack-CC2530-2.3.0-1.4.0µØËø\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\
#        -I
#        F:\3_Jin_testCode\ZStack-CC2530-2.3.0-1.4.0µØËø\ZStack-CC2530-2.3.0-1.4.0µØËø\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\
#        -Ohz --require_prototypes
#    List file          =  
#        F:\3_Jin_testCode\ZStack-CC2530-2.3.0-1.4.0µØËø\ZStack-CC2530-2.3.0-1.4.0µØËø\Projects\zstack\Samples\SampleApp\CC2530DB\RouterEB\List\ZDObject.lst
#    Object file        =  
#        F:\3_Jin_testCode\ZStack-CC2530-2.3.0-1.4.0µØËø\ZStack-CC2530-2.3.0-1.4.0µØËø\Projects\zstack\Samples\SampleApp\CC2530DB\RouterEB\Obj\ZDObject.r51
#
###############################################################################

F:\3_Jin_testCode\ZStack-CC2530-2.3.0-1.4.0µØËø\ZStack-CC2530-2.3.0-1.4.0µØËø\Components\stack\zdo\ZDObject.c
      1          /**************************************************************************************************
      2            Filename:       ZDObject.c
      3            Revised:        $Date: 2009-12-29 11:40:43 -0800 (Tue, 29 Dec 2009) $
      4            Revision:       $Revision: 21414 $
      5          
      6            Description:    This is the Zigbee Device Object.
      7          
      8          
      9            Copyright 2004-2009 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          #include "ZComdef.h"
     44          #include "OSAL.h"
     45          #include "OSAL_Nv.h"
     46          #include "rtg.h"
     47          #include "NLMEDE.h"
     48          #include "nwk_globals.h"
     49          #include "APS.h"
     50          #include "APSMEDE.h"
     51          #include "AssocList.h"
     52          #include "BindingTable.h"
     53          #include "AddrMgr.h"
     54          #include "AF.h"
     55          #include "ZDObject.h"
     56          #include "ZDProfile.h"
     57          #include "ZDConfig.h"
     58          #include "ZDSecMgr.h"
     59          #include "ZDApp.h"
     60          #include "nwk_util.h"   // NLME_IsAddressBroadcast()
     61          #include "ZGlobals.h"
     62          #if defined MT_ZDO_CB_FUNC
     63          #include "MT.h"
     64          #endif
     65          
     66          #if defined( LCD_SUPPORTED )
     67            #include "OnBoard.h"
     68          #endif
     69          
     70          /* HAL */
     71          #include "hal_lcd.h"
     72          
     73          /*********************************************************************
     74           * MACROS
     75           */
     76          
     77          /*********************************************************************
     78           * CONSTANTS
     79           */
     80          // NLME Stub Implementations
     81          #define ZDO_ProcessMgmtPermitJoinTimeout NLME_PermitJoiningTimeout
     82          
     83          // Status fields used by ZDO_ProcessMgmtRtgReq
     84          #define ZDO_MGMT_RTG_ENTRY_ACTIVE             0x00
     85          #define ZDO_MGMT_RTG_ENTRY_DISCOVERY_UNDERWAY 0x01
     86          #define ZDO_MGMT_RTG_ENTRY_DISCOVERY_FAILED   0x02
     87          #define ZDO_MGMT_RTG_ENTRY_INACTIVE           0x03
     88          
     89          /*********************************************************************
     90           * TYPEDEFS
     91           */
     92          #if defined ( REFLECTOR )
     93          typedef struct
     94          {
     95            byte SrcTransSeq;
     96            zAddrType_t SrcAddr;
     97            uint16 LocalCoordinator;
     98            byte epIntf;
     99            uint16 ProfileID;
    100            byte numInClusters;
    101            uint16 *inClusters;
    102            byte numOutClusters;
    103            uint16 *outClusters;
    104            byte SecurityUse;
    105            byte status;
    106          } ZDO_EDBind_t;
    107          #endif // defined ( REFLECTOR )
    108          
    109          enum
    110          {
    111            ZDMATCH_INIT,           // Initialized
    112            ZDMATCH_WAIT_REQ,       // Received first request, waiting for second
    113            ZDMATCH_SENDING_BINDS   // Received both requests, sending unbind/binds
    114          };
    115          
    116          enum
    117          {
    118            ZDMATCH_SENDING_NOT,
    119            ZDMATCH_SENDING_UNBIND,
    120            ZDMATCH_SENDING_BIND
    121          };
    122          
    123          /*********************************************************************
    124           * GLOBAL VARIABLES
    125           */
    126          
    127          /*********************************************************************
    128           * EXTERNAL VARIABLES
    129           */
    130          
    131          /*********************************************************************
    132           * EXTERNAL FUNCTIONS
    133           */
    134          
    135          /*********************************************************************
    136           * LOCAL VARIABLES
    137           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    138          static uint16 ZDOBuildBuf[26];  // temp area to build data without allocation
   \                     ZDOBuildBuf:
   \   000000                DS 52
   \   000034                REQUIRE __INIT_XDATA_Z
    139          
    140          #if defined ( REFLECTOR )

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    141          static ZDO_EDBind_t *ZDO_EDBind;     // Null when not used
   \                     ZDO_EDBind:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    142          #endif
    143          
    144          #if defined ( MANAGED_SCAN )
    145            uint32 managedScanNextChannel = 0;
    146            uint32 managedScanChannelMask = 0;
    147            uint8  managedScanTimesPerChannel = 0;
    148          #endif
    149          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    150          ZDMatchEndDeviceBind_t *matchED = (ZDMatchEndDeviceBind_t *)NULL;
   \                     matchED:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    151          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    152          uint32 apsChannelMask = 0;
   \                     apsChannelMask:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z
    153          
    154          /*********************************************************************
    155           * LOCAL FUNCTIONS
    156           */
    157          static void ZDODeviceSetup( void );
    158          #if defined ( MANAGED_SCAN )
    159            static void ZDOManagedScan_Next( void );
    160          #endif
    161          #if defined ( REFLECTOR )
    162            static void ZDO_RemoveEndDeviceBind( void );
    163            static void ZDO_SendEDBindRsp( byte TransSeq, zAddrType_t *dstAddr, byte Status, byte secUse );
    164          #endif
    165          static byte ZDO_CompareClusterLists( byte numList1, uint16 *list1,
    166                                          byte numList2, uint16 *list2, uint16 *pMatches );
    167          static void ZDO_RemoveMatchMemory( void );
    168          static uint8 ZDO_CopyMatchInfo( ZDEndDeviceBind_t *destReq, ZDEndDeviceBind_t *srcReq );
    169          static void ZDO_EndDeviceBindMatchTimeoutCB( void );
    170          uint8 *ZDO_ConvertOTAClusters( uint8 cnt, uint8 *inBuf, uint16 *outList );
    171          static void zdoSendStateChangeMsg(uint8 state, uint8 taskId);
    172          
    173          /*********************************************************************
    174           * @fn          ZDO_Init
    175           *
    176           * @brief       ZDObject and ZDProfile initialization.
    177           *
    178           * @param       none
    179           *
    180           * @return      none
    181           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    182          void ZDO_Init( void )
   \                     ZDO_Init:
    183          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    184            // Initialize ZD items
    185            #if defined ( REFLECTOR )
    186            ZDO_EDBind = NULL;
   \   000004   90....       MOV     DPTR,#ZDO_EDBind
   \   000007   E4           CLR     A
   \   000008   F0           MOVX    @DPTR,A
   \   000009   A3           INC     DPTR
   \   00000A   F0           MOVX    @DPTR,A
    187            #endif
    188          
    189            // Initialize default ZDO_UseExtendedPANID to the APS one.
    190            osal_cpyExtAddr( ZDO_UseExtendedPANID, AIB_apsUseExtendedPANID );
   \   00000B                ; Setup parameters for call to function sAddrExtCpy
   \   00000B   7C..         MOV     R4,#AIB_apsUseExtendedPANID & 0xff
   \   00000D   7D..         MOV     R5,#(AIB_apsUseExtendedPANID >> 8) & 0xff
   \   00000F   7A..         MOV     R2,#ZDO_UseExtendedPANID & 0xff
   \   000011   7B..         MOV     R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   000013   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
    191          
    192            // Setup the device - type of device to create.
    193            ZDODeviceSetup();
   \   000016   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   7004         JNZ     ??ZDO_Init_0
   \   00001C   7900         MOV     R1,#0x0
   \   00001E   8002         SJMP    ??ZDO_Init_1
   \                     ??ZDO_Init_0:
   \   000020   7901         MOV     R1,#0x1
   \                     ??ZDO_Init_1:
   \   000022                ; Setup parameters for call to function APS_ReflectorInit
   \   000022   12....       LCALL   `??APS_ReflectorInit::?relay`; Banked call to: APS_ReflectorInit
   \   000025                ; Setup parameters for call to function NLME_DeviceJoiningInit
   \   000025   12....       LCALL   `??NLME_DeviceJoiningInit::?relay`; Banked call to: NLME_DeviceJoiningInit
    194          }
   \   000028   80..         SJMP    ??Subroutine181_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine181_0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    195          
    196          #if defined ( MANAGED_SCAN )
    197          /*********************************************************************
    198           * @fn      ZDOManagedScan_Next()
    199           *
    200           * @brief   Setup a managed scan.
    201           *
    202           * @param   none
    203           *
    204           * @return  none
    205           */
    206          static void ZDOManagedScan_Next( void )
    207          {
    208            // Is it the first time
    209            if ( managedScanNextChannel == 0 && managedScanTimesPerChannel == 0 )
    210            {
    211              // Setup the defaults
    212              managedScanNextChannel  = 1;
    213          
    214              while( managedScanNextChannel && (zgDefaultChannelList & managedScanNextChannel) == 0 )
    215                managedScanNextChannel <<= 1;
    216          
    217              managedScanChannelMask = managedScanNextChannel;
    218              managedScanTimesPerChannel = MANAGEDSCAN_TIMES_PRE_CHANNEL;
    219            }
    220            else
    221            {
    222              // Do we need to go to the next channel
    223              if ( managedScanTimesPerChannel == 0 )
    224              {
    225                // Find next active channel
    226                managedScanChannelMask  = managedScanNextChannel;
    227                managedScanTimesPerChannel = MANAGEDSCAN_TIMES_PRE_CHANNEL;
    228              }
    229              else
    230              {
    231                managedScanTimesPerChannel--;
    232          
    233                if ( managedScanTimesPerChannel == 0 )
    234                {
    235                  managedScanNextChannel  <<= 1;
    236                  while( managedScanNextChannel && (zgDefaultChannelList & managedScanNextChannel) == 0 )
    237                    managedScanNextChannel <<= 1;
    238          
    239                  if ( managedScanNextChannel == 0 )
    240                    zdoDiscCounter  = NUM_DISC_ATTEMPTS + 1; // Stop
    241                }
    242              }
    243            }
    244          }
    245          #endif // MANAGED_SCAN
    246          
    247          /*********************************************************************
    248           * @fn      ZDODeviceSetup()
    249           *
    250           * @brief   Call set functions depending on the type of device compiled.
    251           *
    252           * @param   none
    253           *
    254           * @return  none
    255           */
    256          static void ZDODeviceSetup( void )
    257          {
    258            if ( ZG_BUILD_COORDINATOR_TYPE )
    259            {
    260              NLME_CoordinatorInit();
    261            }
    262          
    263          #if defined ( REFLECTOR )
    264            APS_ReflectorInit( (ZG_DEVICE_COORDINATOR_TYPE) ? APS_REFLECTOR_PUBLIC :  APS_REFLECTOR_PRIVATE );
    265          #endif
    266          
    267            if ( ZG_BUILD_JOINING_TYPE )
    268            {
    269              NLME_DeviceJoiningInit();
    270            }
    271          }
    272          
    273          /*********************************************************************
    274           * @fn          ZDO_StartDevice
    275           *
    276           * @brief       This function starts a device in a network.
    277           *
    278           * @param       logicalType     - Device type to start
    279           *              startMode       - indicates mode of device startup
    280           *              beaconOrder     - indicates time betwen beacons
    281           *              superframeOrder - indicates length of active superframe
    282           *
    283           * @return      none
    284           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    285          void ZDO_StartDevice( byte logicalType, devStartModes_t startMode, byte beaconOrder, byte superframeOrder )
   \                     ZDO_StartDevice:
    286          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 11
   \   000005   74F5         MOV     A,#-0xb
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FF           MOV     R7,A
   \   00000C   EA           MOV     A,R2
   \   00000D   FE           MOV     R6,A
    287            ZStatus_t ret;
    288          #if defined ( ZIGBEE_FREQ_AGILITY )
    289            static uint8 discRetries = 0;
    290          #endif
    291          #if defined ( ZIGBEE_COMMISSIONING )
    292            static uint8 scanCnt = 0;
    293          #endif
    294          
    295            ret = ZUnsupportedMode;
    296          
    297            if ( ZG_BUILD_COORDINATOR_TYPE && logicalType == NODETYPE_COORDINATOR )
    298            {
    299              if ( startMode == MODE_HARD )
    300              {
    301                devState = DEV_COORD_STARTING;
    302                ret = NLME_NetworkFormationRequest( zgConfigPANID, zgApsUseExtendedPANID, zgDefaultChannelList,
    303                                                    zgDefaultStartingScanDuration, beaconOrder,
    304                                                    superframeOrder, false );
    305              }
    306              else if ( startMode == MODE_RESUME )
    307              {
    308                // Just start the coordinator
    309                devState = DEV_COORD_STARTING;
    310                ret = NLME_StartRouterRequest( beaconOrder, beaconOrder, false );
    311              }
    312              else
    313              {
    314          #if defined( LCD_SUPPORTED )
    315                HalLcdWriteScreen( "StartDevice ERR", "MODE unknown" );
    316          #endif
    317              }
    318            }
    319          
    320            if ( ZG_BUILD_JOINING_TYPE && (logicalType == NODETYPE_ROUTER || logicalType == NODETYPE_DEVICE) )
   \   00000E   7401         MOV     A,#0x1
   \   000010   6F           XRL     A,R7
   \   000011   6008         JZ      ??ZDO_StartDevice_0
   \   000013   7402         MOV     A,#0x2
   \   000015   6F           XRL     A,R7
   \   000016   6003         JZ      $+5
   \   000018   02....       LJMP    ??ZDO_StartDevice_1 & 0xFFFF
    321            {
    322              if ( (startMode == MODE_JOIN) || (startMode == MODE_REJOIN) )
   \                     ??ZDO_StartDevice_0:
   \   00001B   EE           MOV     A,R6
   \   00001C   6005         JZ      ??ZDO_StartDevice_2
   \   00001E   7403         MOV     A,#0x3
   \   000020   6E           XRL     A,R6
   \   000021   7038         JNZ     ??ZDO_StartDevice_3
    323              {
    324                devState = DEV_NWK_DISC;
   \                     ??ZDO_StartDevice_2:
   \   000023   90....       MOV     DPTR,#devState
   \   000026   7402         MOV     A,#0x2
   \   000028   12....       LCALL   ?Subroutine34 & 0xFFFF
    325          
    326            #if defined( MANAGED_SCAN )
    327                ZDOManagedScan_Next();
    328                ret = NLME_NetworkDiscoveryRequest( managedScanChannelMask, BEACON_ORDER_15_MSEC );
    329            #else
    330                ret = NLME_NetworkDiscoveryRequest( zgDefaultChannelList, zgDefaultStartingScanDuration );
   \                     ??CrossCallReturnLabel_34:
   \   00002B   12....       LCALL   ?XLOAD_R2345
   \   00002E   12....       LCALL   `??NLME_NetworkDiscoveryRequest::?relay`; Banked call to: NLME_NetworkDiscoveryRequest
   \   000031   E9           MOV     A,R1
   \   000032   F8           MOV     R0,A
    331              #if defined ( ZIGBEE_FREQ_AGILITY )
    332                if ( !( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE ) &&
    333                      ( ret == ZSuccess ) && ( ++discRetries == 4 ) )
   \   000033   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000036   E0           MOVX    A,@DPTR
   \   000037   A2E3         MOV     C,0xE0 /* A   */.3
   \   000039   4068         JC      ??ZDO_StartDevice_4
   \   00003B   E8           MOV     A,R0
   \   00003C   7065         JNZ     ??ZDO_StartDevice_4
   \   00003E   90....       MOV     DPTR,#??discRetries
   \   000041   E0           MOVX    A,@DPTR
   \   000042   04           INC     A
   \   000043   F0           MOVX    @DPTR,A
   \   000044   6404         XRL     A,#0x4
   \   000046   707B         JNZ     ??ZDO_StartDevice_5
    334                {
    335                  // For devices with RxOnWhenIdle equals to FALSE, any network channel
    336                  // change will not be recieved. On these devices or routers that have
    337                  // lost the network, an active scan shall be conducted on the Default
    338                  // Channel list using the extended PANID to find the network. If the
    339                  // extended PANID isn't found using the Default Channel list, an scan
    340                  // should be completed using all channels.
    341                  zgDefaultChannelList = MAX_CHANNELS_24GHZ;
   \   000048   90....       MOV     DPTR,#zgDefaultChannelList
   \   00004B   E4           CLR     A
   \   00004C   F0           MOVX    @DPTR,A
   \   00004D   A3           INC     DPTR
   \   00004E   74F8         MOV     A,#-0x8
   \   000050   F0           MOVX    @DPTR,A
   \   000051   A3           INC     DPTR
   \   000052   74FF         MOV     A,#-0x1
   \   000054   F0           MOVX    @DPTR,A
   \   000055   A3           INC     DPTR
   \   000056   7407         MOV     A,#0x7
   \   000058   F0           MOVX    @DPTR,A
   \   000059   8068         SJMP    ??ZDO_StartDevice_5
    342                }
    343              #endif // ZIGBEE_FREQ_AGILITY
    344              #if defined ( ZIGBEE_COMMISSIONING )
    345                if (startMode == MODE_REJOIN && scanCnt++ >= 5 )
    346                {
    347                  // When ApsUseExtendedPanID is commissioned to a non zero value via
    348                  // application specific means, the device shall conduct an active scan
    349                  // on the Default Channel list and join the PAN with the same
    350                  // ExtendedPanID. If the PAN is not found, an scan should be completed
    351                  // on all channels.
    352                  // When devices rejoin the network and the PAN is not found from
    353                  zgDefaultChannelList = MAX_CHANNELS_24GHZ;
    354                }
    355              #endif // ZIGBEE_COMMISSIONING
    356            #endif
    357              }
    358              else if ( startMode == MODE_RESUME )
   \                     ??ZDO_StartDevice_3:
   \   00005B   7401         MOV     A,#0x1
   \   00005D   6E           XRL     A,R6
   \   00005E   7048         JNZ     ??ZDO_StartDevice_6
    359              {
    360                if ( logicalType == NODETYPE_ROUTER )
   \   000060   7401         MOV     A,#0x1
   \   000062   6F           XRL     A,R7
   \   000063   90....       MOV     DPTR,#devState
   \   000066   702E         JNZ     ??ZDO_StartDevice_7
    361                {
    362                  ZMacScanCnf_t scanCnf;
    363                  devState = DEV_NWK_ORPHAN;
   \   000068   740A         MOV     A,#0xa
   \   00006A   F0           MOVX    @DPTR,A
    364          
    365                  /* if router and nvram is available, fake successful orphan scan */
    366                  scanCnf.hdr.Status = ZSUCCESS;
   \   00006B   7401         MOV     A,#0x1
   \   00006D   12....       LCALL   ?XSTACK_DISP0_8
   \   000070   E4           CLR     A
   \   000071   F0           MOVX    @DPTR,A
    367                  scanCnf.ScanType = ZMAC_ORPHAN_SCAN;
   \   000072   7402         MOV     A,#0x2
   \   000074   12....       LCALL   ?XSTACK_DISP0_8
   \   000077   7403         MOV     A,#0x3
   \   000079   F0           MOVX    @DPTR,A
    368                  scanCnf.UnscannedChannels = 0;
   \   00007A   04           INC     A
   \   00007B   12....       LCALL   ?XSTACK_DISP0_8
   \   00007E   E4           CLR     A
   \   00007F   F0           MOVX    @DPTR,A
   \   000080   A3           INC     DPTR
   \   000081   F0           MOVX    @DPTR,A
   \   000082   A3           INC     DPTR
   \   000083   F0           MOVX    @DPTR,A
   \   000084   A3           INC     DPTR
   \   000085   F0           MOVX    @DPTR,A
    369                  scanCnf.ResultListSize = 0;
   \   000086   7408         MOV     A,#0x8
   \   000088   12....       LCALL   ?XSTACK_DISP0_8
   \   00008B   E4           CLR     A
   \   00008C   F0           MOVX    @DPTR,A
    370                  nwk_ScanJoiningOrphan(&scanCnf);
   \   00008D                ; Setup parameters for call to function nwk_ScanJoiningOrphan
   \   00008D   AA..         MOV     R2,?XSP + 0
   \   00008F   AB..         MOV     R3,?XSP + 1
   \   000091   12....       LCALL   `??nwk_ScanJoiningOrphan::?relay`; Banked call to: nwk_ScanJoiningOrphan
    371          
    372                  ret = ZSuccess;
   \   000094   802D         SJMP    ??ZDO_StartDevice_5
    373                }
    374                else
    375                {
    376                  devState = DEV_NWK_ORPHAN;
   \                     ??ZDO_StartDevice_7:
   \   000096   740A         MOV     A,#0xa
   \   000098   12....       LCALL   ?Subroutine34 & 0xFFFF
    377                  ret = NLME_OrphanJoinRequest( zgDefaultChannelList,
    378                                                zgDefaultStartingScanDuration );
    379                }
    380              }
   \                     ??CrossCallReturnLabel_35:
   \   00009B   12....       LCALL   ?XLOAD_R2345
   \   00009E   12....       LCALL   `??NLME_OrphanJoinRequest::?relay`; Banked call to: NLME_OrphanJoinRequest
   \   0000A1   E9           MOV     A,R1
   \   0000A2   F8           MOV     R0,A
    381              else
    382              {
    383          #if defined( LCD_SUPPORTED )
    384                HalLcdWriteScreen( "StartDevice ERR", "MODE unknown" );
    385          #endif
    386              }
    387            }
    388          
    389            if ( ret != ZSuccess )
   \                     ??ZDO_StartDevice_4:
   \   0000A3   E8           MOV     A,R0
   \   0000A4   700D         JNZ     ??ZDO_StartDevice_1
   \   0000A6   801B         SJMP    ??ZDO_StartDevice_5
   \                     ??ZDO_StartDevice_6:
   \   0000A8                ; Setup parameters for call to function HalLcdWriteScreen
   \   0000A8   7C..         MOV     R4,#`?<Constant "MODE unknown">` & 0xff
   \   0000AA   7D..         MOV     R5,#(`?<Constant "MODE unknown">` >> 8) & 0xff
   \   0000AC   7A..         MOV     R2,#`?<Constant "StartDevice ERR">` & 0xff
   \   0000AE   7B..         MOV     R3,#(`?<Constant "StartDevice ERR">` >> 8) & 0xff
   \   0000B0   12....       LCALL   `??HalLcdWriteScreen::?relay`; Banked call to: HalLcdWriteScreen
    390              osal_start_timerEx(ZDAppTaskID, ZDO_NETWORK_INIT, NWK_RETRY_DELAY );
   \                     ??ZDO_StartDevice_1:
   \   0000B3                ; Setup parameters for call to function osal_start_timerEx
   \   0000B3   7CE8         MOV     R4,#-0x18
   \   0000B5   7D03         MOV     R5,#0x3
   \   0000B7   7A01         MOV     R2,#0x1
   \   0000B9   7B00         MOV     R3,#0x0
   \   0000BB   90....       MOV     DPTR,#ZDAppTaskID
   \   0000BE   E0           MOVX    A,@DPTR
   \   0000BF   F9           MOV     R1,A
   \   0000C0   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
    391          }
   \                     ??ZDO_StartDevice_5:
   \   0000C3   740B         MOV     A,#0xb
   \   0000C5   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000C8                REQUIRE ?Subroutine1
   \   0000C8                ; // Fall through to label ?Subroutine1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function NLME_NetworkDiscoveryRequest
   \   000001                ; Setup parameters for call to function NLME_OrphanJoinRequest
   \   000001   90....       MOV     DPTR,#zgDefaultStartingScanDuration
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F9           MOV     R1,A
   \   000006   90....       MOV     DPTR,#zgDefaultChannelList
   \   000009   22           RET

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??discRetries:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    392          
    393          /**************************************************************************************************
    394           * @fn          zdoSendStateChangeMsg
    395           *
    396           * @brief       Helper function for ZDO_UpdateNwkStatus.
    397           *
    398           * input parameters
    399           *
    400           * @param       taskId - The OSAL task identifier to which to send the ZDO_STATE_CHANGE_EVT.
    401           * @param       state - The current device state.
    402           *
    403           * output parameters
    404           *
    405           * None.
    406           *
    407           * @return      None.
    408           **************************************************************************************************
    409           */
    410          static void zdoSendStateChangeMsg(uint8 state, uint8 taskId)
    411          {
    412            osal_event_hdr_t *pMsg = (osal_event_hdr_t *)osal_msg_find(taskId, ZDO_STATE_CHANGE);
    413          
    414            if (NULL == pMsg)
    415            {
    416              if (NULL == (pMsg = (osal_event_hdr_t *)osal_msg_allocate(sizeof(osal_event_hdr_t))))
    417              {
    418                // Upon failure to notify any EndPoint of the state change, re-set the ZDO event to
    419                // try again later when more Heap may be available.
    420                osal_set_event(ZDAppTaskID, ZDO_STATE_CHANGE_EVT);
    421              }
    422              else
    423              {
    424                pMsg->event = ZDO_STATE_CHANGE;
    425                pMsg->status = state;
    426          
    427                (void)osal_msg_send(taskId, (uint8 *)pMsg);
    428              }
    429            }
    430            else
    431            {
    432              // Modify in place the status of an existing ZDO_STATE_CHANGE message to the EndPoint.
    433              pMsg->status = state;
    434            }
    435          }
    436          
    437          /**************************************************************************************************
    438           * @fn          ZDO_UpdateNwkStatus
    439           *
    440           * @brief       This function sends a ZDO_STATE_CHANGE message to the task of every EndPoint
    441           *              registered with AF (except, of course, the ZDO_EP). Even if a single task has more
    442           *              than one registered EndPoint, it will only receive one notification per state
    443           *              change. Although the device may go through a sequence of state changes, the
    444           *              Application task may only receive notification of the final, steady-state state
    445           *              because it has the lowest priority and never even runs to receive the intermediate
    446           *              state change notifications.
    447           *
    448           * input parameters
    449           *
    450           * @param       state - The current device state.
    451           *
    452           * output parameters
    453           *
    454           * None.
    455           *
    456           * @return      None.
    457           **************************************************************************************************
    458           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    459          void ZDO_UpdateNwkStatus(devStates_t state)
   \                     ZDO_UpdateNwkStatus:
    460          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0,R1
    461            epList_t *pItem = epList;
   \   000007   90....       MOV     DPTR,#epList
   \   00000A   800D         SJMP    ??ZDO_UpdateNwkStatus_0
    462          
    463            while (pItem != NULL)
    464            {
    465              if (pItem->epDesc->endPoint != ZDO_EP)
    466              {
    467                zdoSendStateChangeMsg(state, *(pItem->epDesc->task_id));
   \                     ??ZDO_UpdateNwkStatus_1:
   \   00000C   A3           INC     DPTR
   \   00000D   E5..         MOV     A,?V0
   \   00000F   F0           MOVX    @DPTR,A
    468              }
    469          
    470              pItem = pItem->nextDesc;
   \                     ??ZDO_UpdateNwkStatus_2:
   \   000010   8E82         MOV     DPL,R6
   \   000012   8F83         MOV     DPH,R7
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   A3           INC     DPTR
   \   000017   A3           INC     DPTR
   \   000018   A3           INC     DPTR
   \                     ??ZDO_UpdateNwkStatus_0:
   \   000019   12....       LCALL   ??Subroutine204_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_366:
   \   00001C   4F           ORL     A,R7
   \   00001D   604A         JZ      ??ZDO_UpdateNwkStatus_3
   \   00001F   8E82         MOV     DPL,R6
   \   000021   8F83         MOV     DPH,R7
   \   000023   12....       LCALL   ??Subroutine190_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_288:
   \   000026   60E8         JZ      ??ZDO_UpdateNwkStatus_2
   \   000028   A3           INC     DPTR
   \   000029   12....       LCALL   ??Subroutine188_0 & 0xFFFF
    471            }
   \                     ??CrossCallReturnLabel_278:
   \   00002C   F5..         MOV     ?V1,A
   \   00002E                ; Setup parameters for call to function osal_msg_find
   \   00002E   7AD1         MOV     R2,#-0x2f
   \   000030   F9           MOV     R1,A
   \   000031   12....       LCALL   `??osal_msg_find::?relay`; Banked call to: osal_msg_find
   \   000034   8A82         MOV     DPL,R2
   \   000036   8B83         MOV     DPH,R3
   \   000038   E582         MOV     A,DPL
   \   00003A   4583         ORL     A,DPH
   \   00003C   70CE         JNZ     ??ZDO_UpdateNwkStatus_1
   \   00003E                ; Setup parameters for call to function osal_msg_allocate
   \   00003E   7A02         MOV     R2,#0x2
   \   000040   7B00         MOV     R3,#0x0
   \   000042   12....       LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   000045   EA           MOV     A,R2
   \   000046   4B           ORL     A,R3
   \   000047   700E         JNZ     ??ZDO_UpdateNwkStatus_4
   \   000049                ; Setup parameters for call to function osal_set_event
   \   000049   7A10         MOV     R2,#0x10
   \   00004B   7B00         MOV     R3,#0x0
   \   00004D   90....       MOV     DPTR,#ZDAppTaskID
   \   000050   E0           MOVX    A,@DPTR
   \   000051   F9           MOV     R1,A
   \   000052   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   000055   80B9         SJMP    ??ZDO_UpdateNwkStatus_2
   \                     ??ZDO_UpdateNwkStatus_4:
   \   000057   8A82         MOV     DPL,R2
   \   000059   8B83         MOV     DPH,R3
   \   00005B   74D1         MOV     A,#-0x2f
   \   00005D   F0           MOVX    @DPTR,A
   \   00005E   A3           INC     DPTR
   \   00005F   E5..         MOV     A,?V0
   \   000061   F0           MOVX    @DPTR,A
   \   000062                ; Setup parameters for call to function osal_msg_send
   \   000062   A9..         MOV     R1,?V1
   \   000064   12....       LCALL   `??osal_msg_send::?relay`; Banked call to: osal_msg_send
   \   000067   80A7         SJMP    ??ZDO_UpdateNwkStatus_2
    472          #if defined MT_ZDO_CB_FUNC
    473            zdoSendStateChangeMsg(state, MT_TaskID);
    474          #endif
    475          
    476            ZDAppNwkAddr.addr.shortAddr = NLME_GetShortAddr();
   \                     ??ZDO_UpdateNwkStatus_3:
   \   000069                ; Setup parameters for call to function NLME_GetShortAddr
   \   000069   12....       LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   00006C   90....       MOV     DPTR,#ZDAppNwkAddr
   \   00006F   12....       LCALL   ??Subroutine198_0 & 0xFFFF
    477            (void)NLME_GetExtAddr();  // Load the saveExtAddr pointer.
   \                     ??CrossCallReturnLabel_330:
   \   000072                ; Setup parameters for call to function NLME_GetExtAddr
   \   000072   12....       LCALL   `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
    478          }
   \   000075   02....       LJMP    ?Subroutine2 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine188_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001                REQUIRE ??Subroutine189_0
   \   000001                ; // Fall through to label ??Subroutine189_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine189_0:
   \   000000   12....       LCALL   ?Subroutine158 & 0xFFFF
   \                     ??CrossCallReturnLabel_286:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine190_0:
   \   000000   12....       LCALL   ?Subroutine151 & 0xFFFF
   \                     ??CrossCallReturnLabel_290:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine151:
   \   000000   E0           MOVX    A,@DPTR
   \   000001                REQUIRE ??Subroutine191_0
   \   000001                ; // Fall through to label ??Subroutine191_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine191_0:
   \   000000   F8           MOV     R0,A
   \   000001   A3           INC     DPTR
   \   000002   E0           MOVX    A,@DPTR
   \   000003   F9           MOV     R1,A
   \   000004   8882         MOV     DPL,R0
   \   000006   8983         MOV     DPH,R1
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine198_0:
   \   000000   EA           MOV     A,R2
   \   000001                REQUIRE ??Subroutine199_0
   \   000001                ; // Fall through to label ??Subroutine199_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine199_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   EB           MOV     A,R3
   \   000003   F0           MOVX    @DPTR,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine158:
   \   000000   F8           MOV     R0,A
   \   000001   12....       LCALL   ?Subroutine176 & 0xFFFF
   \                     ??CrossCallReturnLabel_597:
   \   000004   E0           MOVX    A,@DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7F04         MOV     R7,#0x4
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine204_0:
   \   000000   12....       LCALL   ??Subroutine208_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_382:
   \   000003                ; Setup parameters for call to function AddrMgrExtAddrValid
   \   000003                ; Setup parameters for call to function sAddrExtCpy
   \   000003   EE           MOV     A,R6
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine208_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FE           MOV     R6,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FF           MOV     R7,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine176:
   \   000000   A3           INC     DPTR
   \   000001   E0           MOVX    A,@DPTR
   \   000002   F583         MOV     DPH,A
   \   000004   8882         MOV     DPL,R0
   \   000006   22           RET
    479          
    480          #if defined ( REFLECTOR )
    481          /*********************************************************************
    482           * @fn          ZDO_RemoveEndDeviceBind
    483           *
    484           * @brief       Remove the end device bind
    485           *
    486           * @param  none
    487           *
    488           * @return      none
    489           */
    490          static void ZDO_RemoveEndDeviceBind( void )
    491          {
    492            if ( ZDO_EDBind != NULL )
    493            {
    494              // Free the RAM
    495              if ( ZDO_EDBind->inClusters != NULL )
    496                osal_mem_free( ZDO_EDBind->inClusters );
    497              if ( ZDO_EDBind->outClusters != NULL )
    498                osal_mem_free( ZDO_EDBind->outClusters );
    499              osal_mem_free( ZDO_EDBind );
    500              ZDO_EDBind = NULL;
    501            }
    502          }
    503          #endif // REFLECTOR
    504          
    505          #if defined ( REFLECTOR )
    506          /*********************************************************************
    507           * @fn          ZDO_RemoveEndDeviceBind
    508           *
    509           * @brief       Remove the end device bind
    510           *
    511           * @param  none
    512           *
    513           * @return      none
    514           */
    515          static void ZDO_SendEDBindRsp( byte TransSeq, zAddrType_t *dstAddr, byte Status, byte secUse )
    516          {
    517            ZDP_EndDeviceBindRsp( TransSeq, dstAddr, Status, secUse );
    518          
    519          #if defined( LCD_SUPPORTED )
    520            HalLcdWriteString( "End Device Bind", HAL_LCD_LINE_1 );
    521            if ( Status == ZDP_SUCCESS )
    522              HalLcdWriteString( "Success Sent", HAL_LCD_LINE_2 );
    523            else
    524              HalLcdWriteString( "Timeout", HAL_LCD_LINE_2 );
    525          #endif
    526          
    527          }
    528          #endif // REFLECTOR
    529          
    530          /*********************************************************************
    531           * @fn          ZDO_CompareClusterLists
    532           *
    533           * @brief       Compare one list to another list
    534           *
    535           * @param       numList1 - number of items in list 1
    536           * @param       list1 - first list of cluster IDs
    537           * @param       numList2 - number of items in list 2
    538           * @param       list2 - second list of cluster IDs
    539           * @param       pMatches - buffer to put matches
    540           *
    541           * @return      number of matches
    542           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    543          static byte ZDO_CompareClusterLists( byte numList1, uint16 *list1,
   \                     ZDO_CompareClusterLists:
    544                                    byte numList2, uint16 *list2, uint16 *pMatches )
    545          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0,R1
   \   000007   8A..         MOV     ?V6,R2
   \   000009   8B..         MOV     ?V7,R3
   \   00000B   8C..         MOV     ?V4,R4
    546            byte x, y;
    547            uint16 z;
    548            byte numMatches = 0;
   \   00000D   7A00         MOV     R2,#0x0
    549          
    550            // Check the first in against the seconds out
    551            for ( x = 0; x < numList1; x++ )
   \   00000F   7B00         MOV     R3,#0x0
   \   000011   7410         MOV     A,#0x10
   \   000013   12....       LCALL   ?XSTACK_DISP0_8
   \   000016   E0           MOVX    A,@DPTR
   \   000017   FC           MOV     R4,A
   \   000018   A3           INC     DPTR
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   FD           MOV     R5,A
   \   00001B   7412         MOV     A,#0x12
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   12....       LCALL   ??Subroutine208_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_377:
   \   000023   8042         SJMP    ??ZDO_CompareClusterLists_0
    552            {
    553              for ( y = 0; y < numList2; y++ )
    554              {
    555                z = list2[y];
   \                     ??ZDO_CompareClusterLists_1:
   \   000025   A8..         MOV     R0,?V1
   \   000027   12....       LCALL   ?Subroutine101 & 0xFFFF
   \                     ??CrossCallReturnLabel_148:
   \   00002A   F5..         MOV     ?V2,A
   \   00002C   A3           INC     DPTR
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   F5..         MOV     ?V3,A
    556                if ( list1[x] == z )
   \   000030   EB           MOV     A,R3
   \   000031   12....       LCALL   ??Subroutine182_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_263:
   \   000034   E5..         MOV     A,?V6
   \   000036   28           ADD     A,R0
   \   000037   F582         MOV     DPL,A
   \   000039   E5..         MOV     A,?V7
   \   00003B   39           ADDC    A,R1
   \   00003C   F583         MOV     DPH,A
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   65..         XRL     A,?V2
   \   000041   7004         JNZ     ??ZDO_CompareClusterLists_2
   \   000043   A3           INC     DPTR
   \   000044   E0           MOVX    A,@DPTR
   \   000045   65..         XRL     A,?V3
   \                     ??ZDO_CompareClusterLists_2:
   \   000047   7014         JNZ     ??ZDO_CompareClusterLists_3
    557                  pMatches[numMatches++] = z;
   \   000049   EA           MOV     A,R2
   \   00004A   12....       LCALL   ??Subroutine182_0 & 0xFFFF
    558              }
   \                     ??CrossCallReturnLabel_264:
   \   00004D   EE           MOV     A,R6
   \   00004E   28           ADD     A,R0
   \   00004F   F582         MOV     DPL,A
   \   000051   EF           MOV     A,R7
   \   000052   39           ADDC    A,R1
   \   000053   F583         MOV     DPH,A
   \   000055   E5..         MOV     A,?V2
   \   000057   F0           MOVX    @DPTR,A
   \   000058   A3           INC     DPTR
   \   000059   E5..         MOV     A,?V3
   \   00005B   F0           MOVX    @DPTR,A
   \   00005C   0A           INC     R2
   \                     ??ZDO_CompareClusterLists_3:
   \   00005D   05..         INC     ?V1
   \                     ??ZDO_CompareClusterLists_4:
   \   00005F   E5..         MOV     A,?V1
   \   000061   C3           CLR     C
   \   000062   95..         SUBB    A,?V4
   \   000064   40BF         JC      ??ZDO_CompareClusterLists_1
   \   000066   0B           INC     R3
   \                     ??ZDO_CompareClusterLists_0:
   \   000067   EB           MOV     A,R3
   \   000068   C3           CLR     C
   \   000069   95..         SUBB    A,?V0
   \   00006B   5005         JNC     ??ZDO_CompareClusterLists_5
   \   00006D   75..00       MOV     ?V1,#0x0
   \   000070   80ED         SJMP    ??ZDO_CompareClusterLists_4
    559            }
    560          
    561            return ( numMatches );
   \                     ??ZDO_CompareClusterLists_5:
   \   000072   EA           MOV     A,R2
   \   000073   F9           MOV     R1,A
   \   000074   02....       LJMP    ??Subroutine202_0 & 0xFFFF
    562          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine182_0:
   \   000000   25E0         ADD     A,0xE0 /* A   */
   \   000002   F8           MOV     R0,A
   \   000003   E4           CLR     A
   \   000004   33           RLC     A
   \   000005   F9           MOV     R1,A
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine101:
   \   000000   12....       LCALL   ?Subroutine161 & 0xFFFF
   \                     ??CrossCallReturnLabel_243:
   \   000003   EC           MOV     A,R4
   \   000004   28           ADD     A,R0
   \   000005   F582         MOV     DPL,A
   \   000007   ED           MOV     A,R5
   \   000008   39           ADDC    A,R1
   \   000009   F583         MOV     DPH,A
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine202_0:
   \   000000   7F08         MOV     R7,#0x8
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine161:
   \   000000   E8           MOV     A,R0
   \   000001   28           ADD     A,R0
   \   000002   F8           MOV     R0,A
   \   000003   E4           CLR     A
   \   000004   33           RLC     A
   \   000005   F9           MOV     R1,A
   \   000006   22           RET
    563          
    564          /*********************************************************************
    565           * Utility functions
    566           */
    567          
    568          /*********************************************************************
    569           * @fn          ZDO_CompareByteLists
    570           *
    571           * @brief       Compares two lists for matches.
    572           *
    573           * @param       ACnt  - number of entries in list A
    574           * @param       AList  - List A
    575           * @param       BCnt  - number of entries in list B
    576           * @param       BList  - List B
    577           *
    578           * @return      true if a match is found
    579           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    580          byte ZDO_AnyClusterMatches( byte ACnt, uint16 *AList, byte BCnt, uint16 *BList )
   \                     ZDO_AnyClusterMatches:
    581          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   \   000007   8C..         MOV     ?V2,R4
    582            byte x, y;
    583          
    584            for ( x = 0; x < ACnt; x++ )
   \   000009   7F00         MOV     R7,#0x0
   \   00000B   740C         MOV     A,#0xc
   \   00000D   12....       LCALL   ?XSTACK_DISP0_8
   \   000010   12....       LCALL   ?Subroutine152 & 0xFFFF
   \                     ??CrossCallReturnLabel_604:
   \   000013   E8           MOV     A,R0
   \   000014   FC           MOV     R4,A
   \   000015   E9           MOV     A,R1
   \   000016   FD           MOV     R5,A
   \   000017   8001         SJMP    ??ZDO_AnyClusterMatches_0
   \                     ??ZDO_AnyClusterMatches_1:
   \   000019   0F           INC     R7
   \                     ??ZDO_AnyClusterMatches_0:
   \   00001A   EF           MOV     A,R7
   \   00001B   C3           CLR     C
   \   00001C   9E           SUBB    A,R6
   \   00001D   502F         JNC     ??ZDO_AnyClusterMatches_2
    585            {
    586              for ( y = 0; y < BCnt; y++ )
   \   00001F   75..00       MOV     ?V3,#0x0
   \   000022   8002         SJMP    ??ZDO_AnyClusterMatches_3
   \                     ??ZDO_AnyClusterMatches_4:
   \   000024   05..         INC     ?V3
   \                     ??ZDO_AnyClusterMatches_3:
   \   000026   E5..         MOV     A,?V3
   \   000028   C3           CLR     C
   \   000029   95..         SUBB    A,?V2
   \   00002B   50EC         JNC     ??ZDO_AnyClusterMatches_1
    587              {
    588                if ( AList[x] == BList[y] )
   \   00002D   12....       LCALL   ?Subroutine104 & 0xFFFF
   \                     ??CrossCallReturnLabel_265:
   \   000030   EA           MOV     A,R2
   \   000031   28           ADD     A,R0
   \   000032   F582         MOV     DPL,A
   \   000034   EB           MOV     A,R3
   \   000035   39           ADDC    A,R1
   \   000036   12....       LCALL   ??Subroutine183_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_270:
   \   000039   F5..         MOV     ?V1,A
   \   00003B   A8..         MOV     R0,?V3
   \   00003D   12....       LCALL   ?Subroutine101 & 0xFFFF
   \                     ??CrossCallReturnLabel_149:
   \   000040   65..         XRL     A,?V0
   \   000042   7004         JNZ     ??ZDO_AnyClusterMatches_5
   \   000044   A3           INC     DPTR
   \   000045   E0           MOVX    A,@DPTR
   \   000046   65..         XRL     A,?V1
   \                     ??ZDO_AnyClusterMatches_5:
   \   000048   70DA         JNZ     ??ZDO_AnyClusterMatches_4
    589                {
    590                  return true;
   \   00004A   7901         MOV     R1,#0x1
   \   00004C   8002         SJMP    ??ZDO_AnyClusterMatches_6
    591                }
    592              }
    593            }
    594          
    595            return false;
   \                     ??ZDO_AnyClusterMatches_2:
   \   00004E   7900         MOV     R1,#0x0
   \                     ??ZDO_AnyClusterMatches_6:
   \   000050   02....       LJMP    ?Subroutine2 & 0xFFFF
    596          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine104:
   \   000000   EF           MOV     A,R7
   \   000001                REQUIRE ??Subroutine182_0
   \   000001                ; // Fall through to label ??Subroutine182_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine183_0:
   \   000000   F583         MOV     DPH,A
   \   000002                REQUIRE ??Subroutine184_0
   \   000002                ; // Fall through to label ??Subroutine184_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine184_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine152:
   \   000000   12....       LCALL   ?Subroutine175 & 0xFFFF
   \                     ??CrossCallReturnLabel_619:
   \   000003   F9           MOV     R1,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine175:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET
    597          
    598          /*********************************************************************
    599           * Callback functions from ZDProfile
    600           */
    601          
    602          /*********************************************************************
    603           * @fn          ZDO_ProcessNodeDescReq
    604           *
    605           * @brief       This function processes and responds to the
    606           *              Node_Desc_req message.
    607           *
    608           * @param       inMsg - incoming message
    609           *
    610           * @return      none
    611           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    612          void ZDO_ProcessNodeDescReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessNodeDescReq:
    613          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL   ?Subroutine45 & 0xFFFF
    614            uint16 aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
    615            NodeDescriptorFormat_t *desc = NULL;
    616          
    617            if ( aoi == ZDAppNwkAddr.addr.shortAddr )
   \                     ??CrossCallReturnLabel_52:
   \   000008   7003         JNZ     ??ZDO_ProcessNodeDescReq_0
   \   00000A   A3           INC     DPTR
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   6D           XRL     A,R5
   \                     ??ZDO_ProcessNodeDescReq_0:
   \   00000D   7017         JNZ     ??ZDO_ProcessNodeDescReq_1
    618            {
    619              desc = &ZDO_Config_Node_Descriptor;
    620            }
    621          
    622            if ( desc != NULL )
    623            {
    624              ZDP_NodeDescMsg( inMsg, aoi, desc );
   \   00000F                ; Setup parameters for call to function ZDP_NodeDescMsg
   \   00000F   75....       MOV     ?V0,#ZDO_Config_Node_Descriptor & 0xff
   \   000012   75....       MOV     ?V1,#(ZDO_Config_Node_Descriptor >> 8) & 0xff
   \   000015   78..         MOV     R0,#?V0
   \   000017   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001A   EE           MOV     A,R6
   \   00001B   FA           MOV     R2,A
   \   00001C   12....       LCALL   `??ZDP_NodeDescMsg::?relay`; Banked call to: ZDP_NodeDescMsg
   \   00001F   7402         MOV     A,#0x2
   \   000021   12....       LCALL   ?DEALLOC_XSTACK8
   \   000024   801F         SJMP    ??ZDO_ProcessNodeDescReq_2
    625            }
    626            else
    627            {
    628              ZDP_GenericRsp( inMsg->TransSeq, &(inMsg->srcAddr),
    629                        ZDP_INVALID_REQTYPE, aoi, Node_Desc_rsp, inMsg->SecurityUse );
   \                     ??ZDO_ProcessNodeDescReq_1:
   \   000026                ; Setup parameters for call to function ZDP_GenericRsp
   \   000026   75..02       MOV     ?V0,#0x2
   \   000029   75..80       MOV     ?V1,#-0x80
   \   00002C   78..         MOV     R0,#?V0
   \   00002E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000031   8C..         MOV     ?V0,R4
   \   000033   8D..         MOV     ?V1,R5
   \   000035   78..         MOV     R0,#?V0
   \   000037   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003A   12....       LCALL   ?Subroutine51 & 0xFFFF
    630            }
   \                     ??CrossCallReturnLabel_63:
   \   00003D   12....       LCALL   `??ZDP_GenericRsp::?relay`; Banked call to: ZDP_GenericRsp
   \   000040   7404         MOV     A,#0x4
   \   000042   12....       LCALL   ?DEALLOC_XSTACK8
    631          }
   \                     ??ZDO_ProcessNodeDescReq_2:
   \   000045   80..         SJMP    ??Subroutine186_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine51:
   \   000000   EE           MOV     A,R6
   \   000001   240E         ADD     A,#0xe
   \   000003   F582         MOV     DPL,A
   \   000005   E4           CLR     A
   \   000006   3F           ADDC    A,R7
   \   000007   F583         MOV     DPH,A
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   FD           MOV     R5,A
   \   00000B   7C80         MOV     R4,#-0x80
   \   00000D   12....       LCALL   ?Subroutine166 & 0xFFFF
   \                     ??CrossCallReturnLabel_250:
   \   000010   EE           MOV     A,R6
   \   000011   240F         ADD     A,#0xf
   \   000013   F582         MOV     DPL,A
   \   000015   E4           CLR     A
   \   000016   3F           ADDC    A,R7
   \   000017   F583         MOV     DPH,A
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   F9           MOV     R1,A
   \   00001B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine45:
   \   000000   EA           MOV     A,R2
   \   000001   FE           MOV     R6,A
   \   000002   EB           MOV     A,R3
   \   000003   FF           MOV     R7,A
   \   000004   12....       LCALL   ?Subroutine164 & 0xFFFF
   \                     ??CrossCallReturnLabel_361:
   \   000007   12....       LCALL   ?Subroutine145 & 0xFFFF
   \                     ??CrossCallReturnLabel_224:
   \   00000A   FC           MOV     R4,A
   \   00000B   E4           CLR     A
   \   00000C   39           ADDC    A,R1
   \   00000D   FD           MOV     R5,A
   \   00000E   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000011   E0           MOVX    A,@DPTR
   \   000012   6C           XRL     A,R4
   \   000013   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine186_0:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine166:
   \   000000   EE           MOV     A,R6
   \   000001   2402         ADD     A,#0x2
   \   000003   FA           MOV     R2,A
   \   000004   E4           CLR     A
   \   000005   3F           ADDC    A,R7
   \   000006   FB           MOV     R3,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine164:
   \   000000   EE           MOV     A,R6
   \   000001   12....       LCALL   ??Subroutine226_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_498:
   \   000004   3F           ADDC    A,R7
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine145:
   \   000000   F583         MOV     DPH,A
   \   000002   12....       LCALL   ?Subroutine175 & 0xFFFF
   \                     ??CrossCallReturnLabel_614:
   \   000005   F9           MOV     R1,A
   \   000006   8882         MOV     DPL,R0
   \   000008   8983         MOV     DPH,R1
   \   00000A   12....       LCALL   ??Subroutine239_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_588:
   \   00000D   F8           MOV     R0,A
   \   00000E   E4           CLR     A
   \   00000F   C8           XCH     A,R0
   \   000010   F9           MOV     R1,A
   \   000011   EA           MOV     A,R2
   \   000012   28           ADD     A,R0
   \   000013   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine226_0:
   \   000000   2413         ADD     A,#0x13
   \   000002   F582         MOV     DPL,A
   \   000004   E4           CLR     A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine239_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET
    632          
    633          /*********************************************************************
    634           * @fn          ZDO_ProcessPowerDescReq
    635           *
    636           * @brief       This function processes and responds to the
    637           *              Node_Power_req message.
    638           *
    639           * @param       inMsg  - incoming request
    640           *
    641           * @return      none
    642           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    643          void ZDO_ProcessPowerDescReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessPowerDescReq:
    644          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL   ?Subroutine45 & 0xFFFF
    645            uint16 aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
    646            NodePowerDescriptorFormat_t *desc = NULL;
    647          
    648            if ( aoi == ZDAppNwkAddr.addr.shortAddr )
   \                     ??CrossCallReturnLabel_53:
   \   000008   7003         JNZ     ??ZDO_ProcessPowerDescReq_0
   \   00000A   A3           INC     DPTR
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   6D           XRL     A,R5
   \                     ??ZDO_ProcessPowerDescReq_0:
   \   00000D   7017         JNZ     ??ZDO_ProcessPowerDescReq_1
    649            {
    650              desc = &ZDO_Config_Power_Descriptor;
    651            }
    652          
    653            if ( desc != NULL )
    654            {
    655              ZDP_PowerDescMsg( inMsg, aoi, desc );
   \   00000F                ; Setup parameters for call to function ZDP_PowerDescMsg
   \   00000F   75....       MOV     ?V0,#ZDO_Config_Power_Descriptor & 0xff
   \   000012   75....       MOV     ?V1,#(ZDO_Config_Power_Descriptor >> 8) & 0xff
   \   000015   78..         MOV     R0,#?V0
   \   000017   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001A   EE           MOV     A,R6
   \   00001B   FA           MOV     R2,A
   \   00001C   12....       LCALL   `??ZDP_PowerDescMsg::?relay`; Banked call to: ZDP_PowerDescMsg
   \   00001F   7402         MOV     A,#0x2
   \   000021   12....       LCALL   ?DEALLOC_XSTACK8
   \   000024   801F         SJMP    ??ZDO_ProcessPowerDescReq_2
    656            }
    657            else
    658            {
    659              ZDP_GenericRsp( inMsg->TransSeq, &(inMsg->srcAddr),
    660                        ZDP_INVALID_REQTYPE, aoi, Power_Desc_rsp, inMsg->SecurityUse );
   \                     ??ZDO_ProcessPowerDescReq_1:
   \   000026                ; Setup parameters for call to function ZDP_GenericRsp
   \   000026   75..03       MOV     ?V0,#0x3
   \   000029   75..80       MOV     ?V1,#-0x80
   \   00002C   78..         MOV     R0,#?V0
   \   00002E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000031   8C..         MOV     ?V0,R4
   \   000033   8D..         MOV     ?V1,R5
   \   000035   78..         MOV     R0,#?V0
   \   000037   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003A   12....       LCALL   ?Subroutine51 & 0xFFFF
    661            }
   \                     ??CrossCallReturnLabel_64:
   \   00003D   12....       LCALL   `??ZDP_GenericRsp::?relay`; Banked call to: ZDP_GenericRsp
   \   000040   7404         MOV     A,#0x4
   \   000042   12....       LCALL   ?DEALLOC_XSTACK8
    662          }
   \                     ??ZDO_ProcessPowerDescReq_2:
   \   000045   80..         SJMP    ??Subroutine186_0
    663          
    664          /*********************************************************************
    665           * @fn          ZDO_ProcessSimpleDescReq
    666           *
    667           * @brief       This function processes and responds to the
    668           *              Simple_Desc_req message.
    669           *
    670           * @param       inMsg - incoming message (request)
    671           *
    672           * @return      none
    673           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   7402         MOV     A,#0x2
   \   000002                REQUIRE ??Subroutine185_0
   \   000002                ; // Fall through to label ??Subroutine185_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine185_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine186_0
   \   000003                ; // Fall through to label ??Subroutine186_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    674          void ZDO_ProcessSimpleDescReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessSimpleDescReq:
    675          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    676            SimpleDescriptionFormat_t *sDesc = NULL;
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   E4           CLR     A
   \   000015   F0           MOVX    @DPTR,A
   \   000016   A3           INC     DPTR
   \   000017   F0           MOVX    @DPTR,A
    677            uint16 aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
   \   000018   12....       LCALL   ??Subroutine203_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_360:
   \   00001B   12....       LCALL   ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_86:
   \   00001E   FB           MOV     R3,A
   \   00001F   EC           MOV     A,R4
   \   000020   FA           MOV     R2,A
    678            byte endPoint = inMsg->asdu[2];
   \   000021   8882         MOV     DPL,R0
   \   000023   8983         MOV     DPH,R1
   \   000025   A3           INC     DPTR
   \   000026   A3           INC     DPTR
   \   000027   E0           MOVX    A,@DPTR
   \   000028   F9           MOV     R1,A
    679            byte free = false;
   \   000029   75..00       MOV     ?V1,#0x0
    680            byte stat = ZDP_SUCCESS;
   \   00002C   75..00       MOV     ?V0,#0x0
    681          
    682            if ( (endPoint == ZDO_EP) || (endPoint > MAX_ENDPOINTS) )
   \   00002F   6005         JZ      ??ZDO_ProcessSimpleDescReq_0
   \   000031   C3           CLR     C
   \   000032   94F1         SUBB    A,#-0xf
   \   000034   4005         JC      ??ZDO_ProcessSimpleDescReq_1
    683            {
    684              stat = ZDP_INVALID_EP;
   \                     ??ZDO_ProcessSimpleDescReq_0:
   \   000036   75..82       MOV     ?V0,#-0x7e
   \   000039   8024         SJMP    ??ZDO_ProcessSimpleDescReq_2
    685            }
    686            else if ( aoi == ZDAppNwkAddr.addr.shortAddr )
   \                     ??ZDO_ProcessSimpleDescReq_1:
   \   00003B   90....       MOV     DPTR,#ZDAppNwkAddr
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   6A           XRL     A,R2
   \   000040   7003         JNZ     ??ZDO_ProcessSimpleDescReq_3
   \   000042   A3           INC     DPTR
   \   000043   E0           MOVX    A,@DPTR
   \   000044   6B           XRL     A,R3
   \                     ??ZDO_ProcessSimpleDescReq_3:
   \   000045   7015         JNZ     ??ZDO_ProcessSimpleDescReq_4
    687            {
    688              free = afFindSimpleDesc( &sDesc, endPoint );
   \   000047                ; Setup parameters for call to function afFindSimpleDesc
   \   000047   AA..         MOV     R2,?XSP + 0
   \   000049   AB..         MOV     R3,?XSP + 1
   \   00004B   12....       LCALL   `??afFindSimpleDesc::?relay`; Banked call to: afFindSimpleDesc
   \   00004E   E9           MOV     A,R1
   \   00004F   FA           MOV     R2,A
    689              if ( sDesc == NULL )
   \   000050   12....       LCALL   ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_451:
   \   000053   7003         JNZ     ??ZDO_ProcessSimpleDescReq_5
    690              {
    691                stat = ZDP_NOT_ACTIVE;
   \   000055   75..83       MOV     ?V0,#-0x7d
   \                     ??ZDO_ProcessSimpleDescReq_5:
   \   000058   8A..         MOV     ?V1,R2
   \   00005A   8003         SJMP    ??ZDO_ProcessSimpleDescReq_2
    692              }
    693            }
    694            else
    695            {
    696              if ( ZSTACK_ROUTER_BUILD )
    697              {
    698                stat = ZDP_DEVICE_NOT_FOUND;
   \                     ??ZDO_ProcessSimpleDescReq_4:
   \   00005C   75..81       MOV     ?V0,#-0x7f
    699              }
    700              else if ( ZSTACK_END_DEVICE_BUILD )
    701              {
    702                stat = ZDP_INVALID_REQTYPE;
    703              }
    704            }
    705          
    706            ZDP_SimpleDescMsg( inMsg, stat, sDesc );
   \                     ??ZDO_ProcessSimpleDescReq_2:
   \   00005F                ; Setup parameters for call to function ZDP_SimpleDescMsg
   \   00005F   85..82       MOV     DPL,?XSP + 0
   \   000062   85..83       MOV     DPH,?XSP + 1
   \   000065   E0           MOVX    A,@DPTR
   \   000066   FC           MOV     R4,A
   \   000067   A3           INC     DPTR
   \   000068   E0           MOVX    A,@DPTR
   \   000069   FD           MOV     R5,A
   \   00006A   A9..         MOV     R1,?V0
   \   00006C   EE           MOV     A,R6
   \   00006D   FA           MOV     R2,A
   \   00006E   EF           MOV     A,R7
   \   00006F   FB           MOV     R3,A
   \   000070   12....       LCALL   `??ZDP_SimpleDescMsg::?relay`; Banked call to: ZDP_SimpleDescMsg
    707          
    708            if ( free && sDesc )
   \   000073   E5..         MOV     A,?V1
   \   000075   600B         JZ      ??ZDO_ProcessSimpleDescReq_6
   \   000077   12....       LCALL   ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_452:
   \   00007A   6006         JZ      ??ZDO_ProcessSimpleDescReq_6
    709            {
    710              osal_mem_free( sDesc );
   \   00007C                ; Setup parameters for call to function osal_mem_free
   \   00007C   12....       LCALL   ?Subroutine71 & 0xFFFF
    711            }
   \                     ??CrossCallReturnLabel_429:
   \   00007F   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    712          }
   \                     ??ZDO_ProcessSimpleDescReq_6:
   \   000082   02....       LJMP    ?Subroutine4 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine203_0:
   \   000000   12....       LCALL   ?Subroutine164 & 0xFFFF
   \                     ??CrossCallReturnLabel_363:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine66:
   \   000000   F583         MOV     DPH,A
   \   000002   12....       LCALL   ?Subroutine151 & 0xFFFF
   \                     ??CrossCallReturnLabel_291:
   \   000005   E0           MOVX    A,@DPTR
   \   000006   FC           MOV     R4,A
   \   000007   A3           INC     DPTR
   \   000008   E0           MOVX    A,@DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine71:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine214_0
   \   000006                ; // Fall through to label ??Subroutine214_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine214_0:
   \   000000   12....       LCALL   ??Subroutine230_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_536:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine43:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine216_0
   \   000006                ; // Fall through to label ??Subroutine216_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine216_0:
   \   000000   12....       LCALL   ?Subroutine152 & 0xFFFF
   \                     ??CrossCallReturnLabel_609:
   \   000003   E8           MOV     A,R0
   \   000004   49           ORL     A,R1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine230_0:
   \   000000   12....       LCALL   ??Subroutine239_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_591:
   \   000003   FB           MOV     R3,A
   \   000004   22           RET
    713          
    714          /*********************************************************************
    715           * @fn          ZDO_ProcessActiveEPReq
    716           *
    717           * @brief       This function processes and responds to the
    718           *              Active_EP_req message.
    719           *
    720           * @param       inMsg  - incoming message (request)
    721           *
    722           * @return      none
    723           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    724          void ZDO_ProcessActiveEPReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessActiveEPReq:
    725          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V4,R2
   \   000007   8B..         MOV     ?V5,R3
    726            byte cnt = 0;
   \   000009   75..00       MOV     ?V0,#0x0
    727            uint16 aoi;
    728            byte stat = ZDP_SUCCESS;
   \   00000C   75..00       MOV     ?V1,#0x0
    729          
    730            aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
   \   00000F   12....       LCALL   ?Subroutine110 & 0xFFFF
   \                     ??CrossCallReturnLabel_350:
   \   000012   35..         ADDC    A,?V5
   \   000014   12....       LCALL   ?Subroutine49 & 0xFFFF
    731          
    732            if ( aoi == NLME_GetShortAddr() )
   \                     ??CrossCallReturnLabel_59:
   \   000017                ; Setup parameters for call to function NLME_GetShortAddr
   \   000017   12....       LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   00001A   EA           MOV     A,R2
   \   00001B   6E           XRL     A,R6
   \   00001C   7002         JNZ     ??ZDO_ProcessActiveEPReq_0
   \   00001E   EB           MOV     A,R3
   \   00001F   6F           XRL     A,R7
   \                     ??ZDO_ProcessActiveEPReq_0:
   \   000020   7012         JNZ     ??ZDO_ProcessActiveEPReq_1
    733            {
    734              cnt = afNumEndPoints() - 1;  // -1 for ZDO endpoint descriptor
   \   000022                ; Setup parameters for call to function afNumEndPoints
   \   000022   12....       LCALL   `??afNumEndPoints::?relay`; Banked call to: afNumEndPoints
   \   000025   E9           MOV     A,R1
   \   000026   14           DEC     A
   \   000027   F5..         MOV     ?V0,A
    735              afEndPoints( (uint8 *)ZDOBuildBuf, true );
   \   000029                ; Setup parameters for call to function afEndPoints
   \   000029   7901         MOV     R1,#0x1
   \   00002B   7A..         MOV     R2,#ZDOBuildBuf & 0xff
   \   00002D   7B..         MOV     R3,#(ZDOBuildBuf >> 8) & 0xff
   \   00002F   12....       LCALL   `??afEndPoints::?relay`; Banked call to: afEndPoints
   \   000032   8003         SJMP    ??ZDO_ProcessActiveEPReq_2
    736            }
    737            else
    738            {
    739              stat = ZDP_INVALID_REQTYPE;
   \                     ??ZDO_ProcessActiveEPReq_1:
   \   000034   75..80       MOV     ?V1,#-0x80
    740            }
    741          
    742            ZDP_ActiveEPRsp( inMsg->TransSeq, &(inMsg->srcAddr), stat,
    743                            aoi, cnt, (uint8 *)ZDOBuildBuf, inMsg->SecurityUse );
   \                     ??ZDO_ProcessActiveEPReq_2:
   \   000037                ; Setup parameters for call to function ZDP_EPRsp
   \   000037   12....       LCALL   ?Subroutine112 & 0xFFFF
   \                     ??CrossCallReturnLabel_481:
   \   00003A   12....       LCALL   ??Subroutine219_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_460:
   \   00003D   F5..         MOV     ?V2,A
   \   00003F   78..         MOV     R0,#?V2
   \   000041   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000044   75....       MOV     ?V2,#ZDOBuildBuf & 0xff
   \   000047   75....       MOV     ?V3,#(ZDOBuildBuf >> 8) & 0xff
   \   00004A   78..         MOV     R0,#?V2
   \   00004C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004F   78..         MOV     R0,#?V0
   \   000051   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000054   8E..         MOV     ?V2,R6
   \   000056   8F..         MOV     ?V3,R7
   \   000058   78..         MOV     R0,#?V2
   \   00005A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005D   E5..         MOV     A,?V1
   \   00005F   F5..         MOV     ?V0,A
   \   000061   78..         MOV     R0,#?V0
   \   000063   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000066   12....       LCALL   ?Subroutine116 & 0xFFFF
   \                     ??CrossCallReturnLabel_169:
   \   000069   12....       LCALL   ?Subroutine119 & 0xFFFF
   \                     ??CrossCallReturnLabel_461:
   \   00006C   F9           MOV     R1,A
   \   00006D   7A05         MOV     R2,#0x5
   \   00006F   7B80         MOV     R3,#-0x80
   \   000071   12....       LCALL   `??ZDP_EPRsp::?relay`; Banked call to: ZDP_EPRsp
   \   000074   7407         MOV     A,#0x7
   \   000076   02....       LJMP    ?Subroutine5 & 0xFFFF
    744          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine110:
   \   000000   EA           MOV     A,R2
   \   000001                REQUIRE ??Subroutine201_0
   \   000001                ; // Fall through to label ??Subroutine201_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine201_0:
   \   000000   12....       LCALL   ?Subroutine165 & 0xFFFF
   \                     ??CrossCallReturnLabel_356:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine165:
   \   000000   12....       LCALL   ??Subroutine226_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_497:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine49:
   \   000000   12....       LCALL   ?Subroutine145 & 0xFFFF
   \                     ??CrossCallReturnLabel_225:
   \   000003   FE           MOV     R6,A
   \   000004   E4           CLR     A
   \   000005   39           ADDC    A,R1
   \   000006   FF           MOV     R7,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine116:
   \   000000   E5..         MOV     A,?V4
   \   000002   2402         ADD     A,#0x2
   \   000004   FC           MOV     R4,A
   \   000005   E4           CLR     A
   \   000006   35..         ADDC    A,?V5
   \   000008   FD           MOV     R5,A
   \   000009   E5..         MOV     A,?V4
   \   00000B   240F         ADD     A,#0xf
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine210_0
   \   000003                ; // Fall through to label ??Subroutine210_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine210_0:
   \   000000   7F06         MOV     R7,#0x6
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine119:
   \   000000   F582         MOV     DPL,A
   \   000002   E4           CLR     A
   \   000003                REQUIRE ??Subroutine219_0
   \   000003                ; // Fall through to label ??Subroutine219_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine219_0:
   \   000000   35..         ADDC    A,?V5
   \   000002   F583         MOV     DPH,A
   \   000004   E0           MOVX    A,@DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine112:
   \   000000   E5..         MOV     A,?V4
   \   000002                REQUIRE ??Subroutine223_0
   \   000002                ; // Fall through to label ??Subroutine223_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine223_0:
   \   000000   240E         ADD     A,#0xe
   \   000002   F582         MOV     DPL,A
   \   000004   E4           CLR     A
   \   000005   22           RET
    745          
    746          /*********************************************************************
    747           * @fn          ZDO_ConvertOTAClusters
    748           *
    749           * @brief       This function will convert the over-the-air cluster list
    750           *              format to an internal format.
    751           *
    752           * @param       inMsg  - incoming message (request)
    753           *
    754           * @return      pointer to incremented inBuf
    755           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    756          uint8 *ZDO_ConvertOTAClusters( uint8 cnt, uint8 *inBuf, uint16 *outList )
   \                     ZDO_ConvertOTAClusters:
    757          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    758            uint8 x;
    759          
    760            for ( x = 0; x < cnt; x++ )
   \   000007   7F00         MOV     R7,#0x0
   \   000009   802C         SJMP    ??ZDO_ConvertOTAClusters_0
    761            {
    762              // convert ota format to internal
    763              outList[x] = BUILD_UINT16( inBuf[0], inBuf[1] );
   \                     ??ZDO_ConvertOTAClusters_1:
   \   00000B   8A82         MOV     DPL,R2
   \   00000D   8B83         MOV     DPH,R3
   \   00000F   12....       LCALL   ??Subroutine184_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_267:
   \   000012   F8           MOV     R0,A
   \   000013   E4           CLR     A
   \   000014   C8           XCH     A,R0
   \   000015   F9           MOV     R1,A
   \   000016   E5..         MOV     A,?V0
   \   000018   28           ADD     A,R0
   \   000019   E4           CLR     A
   \   00001A   39           ADDC    A,R1
   \   00001B   F5..         MOV     ?V1,A
   \   00001D   12....       LCALL   ?Subroutine104 & 0xFFFF
   \                     ??CrossCallReturnLabel_266:
   \   000020   EC           MOV     A,R4
   \   000021   28           ADD     A,R0
   \   000022   F582         MOV     DPL,A
   \   000024   ED           MOV     A,R5
   \   000025   39           ADDC    A,R1
   \   000026   F583         MOV     DPH,A
   \   000028   E5..         MOV     A,?V0
   \   00002A   F0           MOVX    @DPTR,A
   \   00002B   A3           INC     DPTR
   \   00002C   E5..         MOV     A,?V1
   \   00002E   F0           MOVX    @DPTR,A
    764              inBuf += sizeof( uint16 );
   \   00002F   EA           MOV     A,R2
   \   000030   2402         ADD     A,#0x2
   \   000032   FA           MOV     R2,A
   \   000033   5001         JNC     ??ZDO_ConvertOTAClusters_2
   \   000035   0B           INC     R3
    765            }
   \                     ??ZDO_ConvertOTAClusters_2:
   \   000036   0F           INC     R7
   \                     ??ZDO_ConvertOTAClusters_0:
   \   000037   EF           MOV     A,R7
   \   000038   C3           CLR     C
   \   000039   9E           SUBB    A,R6
   \   00003A   40CF         JC      ??ZDO_ConvertOTAClusters_1
    766            return ( inBuf );
   \   00003C   02....       LJMP    ??Subroutine186_0 & 0xFFFF
    767          }
    768          
    769          /*********************************************************************
    770           * @fn          ZDO_ProcessMatchDescReq
    771           *
    772           * @brief       This function processes and responds to the
    773           *              Match_Desc_req message.
    774           *
    775           * @param       inMsg  - incoming message (request)
    776           *
    777           * @return      none
    778           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    779          void ZDO_ProcessMatchDescReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMatchDescReq:
    780          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 11
   \   000005   74F5         MOV     A,#-0xb
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   7403         MOV     A,#0x3
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   12....       LCALL   ??Subroutine198_0 & 0xFFFF
    781            uint8 epCnt = 0;
   \                     ??CrossCallReturnLabel_331:
   \   000012   7402         MOV     A,#0x2
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   E4           CLR     A
   \   000018   F0           MOVX    @DPTR,A
    782            uint8 numInClusters;
    783            uint16 *inClusters = NULL;
   \   000019   7409         MOV     A,#0x9
   \   00001B   12....       LCALL   ?XSTACK_DISP0_8
   \   00001E   E4           CLR     A
   \   00001F   F0           MOVX    @DPTR,A
   \   000020   A3           INC     DPTR
   \   000021   F0           MOVX    @DPTR,A
    784            uint8 numOutClusters;
    785            uint16 *outClusters = NULL;
   \   000022   7407         MOV     A,#0x7
   \   000024   12....       LCALL   ?XSTACK_DISP0_8
   \   000027   E4           CLR     A
   \   000028   F0           MOVX    @DPTR,A
   \   000029   A3           INC     DPTR
   \   00002A   F0           MOVX    @DPTR,A
    786            epList_t *epDesc;
    787            SimpleDescriptionFormat_t *sDesc = NULL;
    788            uint8 allocated;
    789            uint8 *msg;
    790            uint16 aoi;
    791            uint16 profileID;
    792          
    793            // Parse the incoming message
    794            msg = inMsg->asdu;
   \   00002B   7403         MOV     A,#0x3
   \   00002D   12....       LCALL   ?XSTACK_DISP0_8
   \   000030   12....       LCALL   ??Subroutine229_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_505:
   \   000033   12....       LCALL   ??Subroutine201_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_349:
   \   000036   12....       LCALL   ??Subroutine212_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_396:
   \   000039   F5..         MOV     ?V2,A
   \   00003B   A3           INC     DPTR
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   F5..         MOV     ?V3,A
    795            aoi = BUILD_UINT16( msg[0], msg[1] );
   \   00003F   85..82       MOV     DPL,?V2
   \   000042   F583         MOV     DPH,A
   \   000044   12....       LCALL   ?Subroutine86 & 0xFFFF
   \                     ??CrossCallReturnLabel_275:
   \   000047   28           ADD     A,R0
   \   000048   F5..         MOV     ?V0,A
   \   00004A   E4           CLR     A
   \   00004B   39           ADDC    A,R1
   \   00004C   F5..         MOV     ?V1,A
    796            profileID = BUILD_UINT16( msg[2], msg[3] );
   \   00004E   85..82       MOV     DPL,?V2
   \   000051   85..83       MOV     DPH,?V3
   \   000054   A3           INC     DPTR
   \   000055   A3           INC     DPTR
   \   000056   E0           MOVX    A,@DPTR
   \   000057   FA           MOV     R2,A
   \   000058   85..82       MOV     DPL,?V2
   \   00005B   85..83       MOV     DPH,?V3
   \   00005E   A3           INC     DPTR
   \   00005F   A3           INC     DPTR
   \   000060   A3           INC     DPTR
   \   000061   E0           MOVX    A,@DPTR
   \   000062   F9           MOV     R1,A
   \   000063   EA           MOV     A,R2
   \   000064   FE           MOV     R6,A
   \   000065   E4           CLR     A
   \   000066   39           ADDC    A,R1
   \   000067   FF           MOV     R7,A
   \   000068                ; Setup parameters for call to function NLME_IsAddressBroadcast
   \   000068   AA..         MOV     R2,?V0
   \   00006A   AB..         MOV     R3,?V1
    797            msg += 4;
    798          
    799            if ( ADDR_BCAST_NOT_ME == NLME_IsAddressBroadcast(aoi) )
   \   00006C   12....       LCALL   `??NLME_IsAddressBroadcast::?relay`; Banked call to: NLME_IsAddressBroadcast
   \   00006F   E9           MOV     A,R1
   \   000070   6401         XRL     A,#0x1
   \   000072   6018         JZ      ??ZDO_ProcessMatchDescReq_0
    800            {
    801              ZDP_MatchDescRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZDP_INVALID_REQTYPE,
    802                                    ZDAppNwkAddr.addr.shortAddr, 0, NULL, inMsg->SecurityUse );
    803              return;
    804            }
    805            else if ( (ADDR_NOT_BCAST == NLME_IsAddressBroadcast(aoi)) && (aoi != ZDAppNwkAddr.addr.shortAddr) )
   \   000074                ; Setup parameters for call to function NLME_IsAddressBroadcast
   \   000074   AA..         MOV     R2,?V0
   \   000076   AB..         MOV     R3,?V1
   \   000078   12....       LCALL   `??NLME_IsAddressBroadcast::?relay`; Banked call to: NLME_IsAddressBroadcast
   \   00007B   E9           MOV     A,R1
   \   00007C   704F         JNZ     ??ZDO_ProcessMatchDescReq_1
   \   00007E   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000081   E0           MOVX    A,@DPTR
   \   000082   65..         XRL     A,?V0
   \   000084   7004         JNZ     ??ZDO_ProcessMatchDescReq_2
   \   000086   A3           INC     DPTR
   \   000087   E0           MOVX    A,@DPTR
   \   000088   65..         XRL     A,?V1
   \                     ??ZDO_ProcessMatchDescReq_2:
   \   00008A   6041         JZ      ??ZDO_ProcessMatchDescReq_1
    806            {
    807              ZDP_MatchDescRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZDP_INVALID_REQTYPE,
    808                                       ZDAppNwkAddr.addr.shortAddr, 0, NULL, inMsg->SecurityUse );
   \                     ??ZDO_ProcessMatchDescReq_0:
   \   00008C                ; Setup parameters for call to function ZDP_EPRsp
   \   00008C   7403         MOV     A,#0x3
   \   00008E   12....       LCALL   ?XSTACK_DISP0_8
   \   000091   12....       LCALL   ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_375:
   \   000094   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000097   E4           CLR     A
   \   000098   F5..         MOV     ?V0,A
   \   00009A   F5..         MOV     ?V1,A
   \   00009C   78..         MOV     R0,#?V0
   \   00009E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A1   78..         MOV     R0,#?V0
   \   0000A3   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000A6   90....       MOV     DPTR,#ZDAppNwkAddr
   \   0000A9   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   0000AC   75..80       MOV     ?V0,#-0x80
   \   0000AF   78..         MOV     R0,#?V0
   \   0000B1   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000B4   740A         MOV     A,#0xa
   \   0000B6   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B9   12....       LCALL   ?Subroutine80 & 0xFFFF
   \                     ??CrossCallReturnLabel_103:
   \   0000BC   12....       LCALL   ?XSTACK_DISP0_8
   \   0000BF   12....       LCALL   ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   0000C2   12....       LCALL   `??ZDP_EPRsp::?relay`; Banked call to: ZDP_EPRsp
   \   0000C5   7407         MOV     A,#0x7
   \   0000C7   12....       LCALL   ?DEALLOC_XSTACK8
    809              return;
   \   0000CA   02....       LJMP    ??ZDO_ProcessMatchDescReq_3 & 0xFFFF
    810            }
    811          
    812            if ((numInClusters = *msg++) &&
    813                (inClusters = (uint16*)osal_mem_alloc( numInClusters * sizeof( uint16 ) )))
   \                     ??ZDO_ProcessMatchDescReq_1:
   \   0000CD   85..82       MOV     DPL,?V2
   \   0000D0   85..83       MOV     DPH,?V3
   \   0000D3   A3           INC     DPTR
   \   0000D4   A3           INC     DPTR
   \   0000D5   A3           INC     DPTR
   \   0000D6   A3           INC     DPTR
   \   0000D7   E0           MOVX    A,@DPTR
   \   0000D8   F5..         MOV     ?V7,A
   \   0000DA   E5..         MOV     A,?V2
   \   0000DC   2405         ADD     A,#0x5
   \   0000DE   F5..         MOV     ?V2,A
   \   0000E0   5002         JNC     ??ZDO_ProcessMatchDescReq_4
   \   0000E2   05..         INC     ?V3
   \                     ??ZDO_ProcessMatchDescReq_4:
   \   0000E4   E5..         MOV     A,?V7
   \   0000E6   602B         JZ      ??ZDO_ProcessMatchDescReq_5
   \   0000E8                ; Setup parameters for call to function osal_mem_alloc
   \   0000E8   12....       LCALL   ?Subroutine100 & 0xFFFF
   \                     ??CrossCallReturnLabel_140:
   \   0000EB   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   0000EE   7409         MOV     A,#0x9
   \   0000F0   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F3   12....       LCALL   ??Subroutine198_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_332:
   \   0000F6   7409         MOV     A,#0x9
   \   0000F8   12....       LCALL   ?XSTACK_DISP0_8
   \   0000FB   12....       LCALL   ??Subroutine216_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_436:
   \   0000FE   6013         JZ      ??ZDO_ProcessMatchDescReq_5
    814            {
    815              msg = ZDO_ConvertOTAClusters( numInClusters, msg, inClusters );
   \   000100                ; Setup parameters for call to function ZDO_ConvertOTAClusters
   \   000100   7409         MOV     A,#0x9
   \   000102   12....       LCALL   ?XSTACK_DISP0_8
   \   000105   12....       LCALL   ?Subroutine84 & 0xFFFF
    816            }
   \                     ??CrossCallReturnLabel_109:
   \   000108   A9..         MOV     R1,?V7
   \   00010A   12....       LCALL   `??ZDO_ConvertOTAClusters::?relay`; Banked call to: ZDO_ConvertOTAClusters
   \   00010D   8A..         MOV     ?V2,R2
   \   00010F   8B..         MOV     ?V3,R3
   \   000111   8003         SJMP    ??ZDO_ProcessMatchDescReq_6
    817            else
    818            {
    819              numInClusters = 0;
   \                     ??ZDO_ProcessMatchDescReq_5:
   \   000113   75..00       MOV     ?V7,#0x0
    820            }
    821          
    822            if ((numOutClusters = *msg++) &&
    823                (outClusters = (uint16 *)osal_mem_alloc( numOutClusters * sizeof( uint16 ) )))
   \                     ??ZDO_ProcessMatchDescReq_6:
   \   000116   85..82       MOV     DPL,?V2
   \   000119   85..83       MOV     DPH,?V3
   \   00011C   E0           MOVX    A,@DPTR
   \   00011D   F5..         MOV     ?V6,A
   \   00011F   A3           INC     DPTR
   \   000120   8582..       MOV     ?V2,DPL
   \   000123   8583..       MOV     ?V3,DPH
   \   000126   6027         JZ      ??ZDO_ProcessMatchDescReq_7
   \   000128                ; Setup parameters for call to function osal_mem_alloc
   \   000128   12....       LCALL   ?Subroutine100 & 0xFFFF
   \                     ??CrossCallReturnLabel_141:
   \   00012B   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00012E   7407         MOV     A,#0x7
   \   000130   12....       LCALL   ?XSTACK_DISP0_8
   \   000133   12....       LCALL   ??Subroutine198_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_333:
   \   000136   7407         MOV     A,#0x7
   \   000138   12....       LCALL   ?XSTACK_DISP0_8
   \   00013B   12....       LCALL   ??Subroutine216_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_437:
   \   00013E   600F         JZ      ??ZDO_ProcessMatchDescReq_7
    824            {
    825              msg = ZDO_ConvertOTAClusters( numOutClusters, msg, outClusters );
   \   000140                ; Setup parameters for call to function ZDO_ConvertOTAClusters
   \   000140   7407         MOV     A,#0x7
   \   000142   12....       LCALL   ?XSTACK_DISP0_8
   \   000145   12....       LCALL   ?Subroutine84 & 0xFFFF
    826            }
   \                     ??CrossCallReturnLabel_110:
   \   000148   A9..         MOV     R1,?V6
   \   00014A   12....       LCALL   `??ZDO_ConvertOTAClusters::?relay`; Banked call to: ZDO_ConvertOTAClusters
   \   00014D   8003         SJMP    ??ZDO_ProcessMatchDescReq_8
    827            else
    828            {
    829              numOutClusters = 0;
   \                     ??ZDO_ProcessMatchDescReq_7:
   \   00014F   75..00       MOV     ?V6,#0x0
    830            }
    831          
    832            // First count the number of endpoints that match.
    833            epDesc = epList;
   \                     ??ZDO_ProcessMatchDescReq_8:
   \   000152   90....       MOV     DPTR,#epList
   \   000155   8058         SJMP    ??ZDO_ProcessMatchDescReq_9
    834            while ( epDesc )
    835            {
    836              // Don't search endpoint 0 and check if response is allowed
    837              if ( epDesc->epDesc->endPoint != ZDO_EP && (epDesc->flags&eEP_AllowMatch) )
    838              {
    839                if ( epDesc->pfnDescCB )
    840                {
    841                  sDesc = (SimpleDescriptionFormat_t *)epDesc->pfnDescCB( AF_DESCRIPTOR_SIMPLE, epDesc->epDesc->endPoint );
    842                  allocated = TRUE;
    843                }
    844                else
    845                {
    846                  sDesc = epDesc->epDesc->simpleDesc;
    847                  allocated = FALSE;
    848                }
    849          
    850                if ( sDesc && sDesc->AppProfId == profileID )
    851                {
    852                  uint8 *uint8Buf = (uint8 *)ZDOBuildBuf;
    853          
    854                  // If there are no search input/ouput clusters - respond
    855                  if ( ((numInClusters == 0) && (numOutClusters == 0))
    856                      // Are there matching input clusters?
    857                       || (ZDO_AnyClusterMatches( numInClusters, inClusters,
    858                            sDesc->AppNumInClusters, sDesc->pAppInClusterList ))
    859                      // Are there matching output clusters?
    860                       || (ZDO_AnyClusterMatches( numOutClusters, outClusters,
    861                            sDesc->AppNumOutClusters, sDesc->pAppOutClusterList ))     )
    862                  {
    863                    // Notify the endpoint of the match.
    864                    uint8 bufLen = sizeof( ZDO_MatchDescRspSent_t ) + (numOutClusters + numInClusters) * sizeof(uint16);
    865                    ZDO_MatchDescRspSent_t *pRspSent = (ZDO_MatchDescRspSent_t *) osal_msg_allocate( bufLen );
    866          
    867                    if (pRspSent)
    868                    {
    869                      pRspSent->hdr.event = ZDO_MATCH_DESC_RSP_SENT;
    870                      pRspSent->nwkAddr = inMsg->srcAddr.addr.shortAddr;
    871                      pRspSent->numInClusters = numInClusters;
    872                      pRspSent->numOutClusters = numOutClusters;
    873          
    874                      if (numInClusters)
    875                      {
    876                        pRspSent->pInClusters = (uint16*) (pRspSent + 1);
    877                        osal_memcpy(pRspSent->pInClusters, inClusters, numInClusters * sizeof(uint16));
    878                      }
    879                      else
    880                      {
    881                        pRspSent->pInClusters = NULL;
    882                      }
    883          
    884                      if (numOutClusters)
    885                      {
    886                        pRspSent->pOutClusters = (uint16*)(pRspSent + 1) + numInClusters;
    887                        osal_memcpy(pRspSent->pOutClusters, outClusters, numOutClusters * sizeof(uint16));
    888                      }
    889                      else
    890                      {
    891                        pRspSent->pOutClusters = NULL;
   \                     ??ZDO_ProcessMatchDescReq_10:
   \   000157   E4           CLR     A
   \   000158   F0           MOVX    @DPTR,A
   \   000159   A3           INC     DPTR
   \   00015A   F0           MOVX    @DPTR,A
    892                      }
    893          
    894                      osal_msg_send( *epDesc->epDesc->task_id, (uint8 *)pRspSent );
   \                     ??ZDO_ProcessMatchDescReq_11:
   \   00015B                ; Setup parameters for call to function osal_msg_send
   \   00015B   AA..         MOV     R2,?V4
   \   00015D   AB..         MOV     R3,?V5
   \   00015F   7405         MOV     A,#0x5
   \   000161   12....       LCALL   ?XSTACK_DISP0_8
   \   000164   12....       LCALL   ??Subroutine188_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_279:
   \   000167   F8           MOV     R0,A
   \   000168   12....       LCALL   ?Subroutine89 & 0xFFFF
   \                     ??CrossCallReturnLabel_115:
   \   00016B   12....       LCALL   ??Subroutine188_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_280:
   \   00016E   F9           MOV     R1,A
   \   00016F   12....       LCALL   `??osal_msg_send::?relay`; Banked call to: osal_msg_send
    895                    }
    896          
    897                    uint8Buf[epCnt++] = sDesc->EndPoint;
   \                     ??ZDO_ProcessMatchDescReq_12:
   \   000172   85..82       MOV     DPL,?XSP + 0
   \   000175   85..83       MOV     DPH,?XSP + 1
   \   000178   12....       LCALL   ??Subroutine188_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_281:
   \   00017B   C0E0         PUSH    A
   \   00017D   7402         MOV     A,#0x2
   \   00017F   12....       LCALL   ?XSTACK_DISP0_8
   \   000182   E0           MOVX    A,@DPTR
   \   000183   F8           MOV     R0,A
   \   000184   74..         MOV     A,#ZDOBuildBuf & 0xff
   \   000186   28           ADD     A,R0
   \   000187   F582         MOV     DPL,A
   \   000189   E4           CLR     A
   \   00018A   34..         ADDC    A,#(ZDOBuildBuf >> 8) & 0xff
   \   00018C   F583         MOV     DPH,A
   \   00018E   D0E0         POP     A
   \   000190   F0           MOVX    @DPTR,A
   \   000191   7402         MOV     A,#0x2
   \   000193   12....       LCALL   ?XSTACK_DISP0_8
   \   000196   E0           MOVX    A,@DPTR
   \   000197   04           INC     A
   \   000198   F0           MOVX    @DPTR,A
    898                  }
    899                }
    900          
    901                if ( allocated )
   \                     ??ZDO_ProcessMatchDescReq_13:
   \   000199   A2..         MOV     C,?VB.0
   \   00019B   5006         JNC     ??ZDO_ProcessMatchDescReq_14
    902                  osal_mem_free( sDesc );
   \   00019D                ; Setup parameters for call to function osal_mem_free
   \   00019D   12....       LCALL   ?Subroutine71 & 0xFFFF
   \                     ??CrossCallReturnLabel_430:
   \   0001A0   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    903              }
    904              epDesc = epDesc->nextDesc;
   \                     ??ZDO_ProcessMatchDescReq_14:
   \   0001A3   7405         MOV     A,#0x5
   \   0001A5   12....       LCALL   ?XSTACK_DISP0_8
   \   0001A8   12....       LCALL   ?Subroutine85 & 0xFFFF
   \                     ??CrossCallReturnLabel_111:
   \   0001AB   A3           INC     DPTR
   \   0001AC   A3           INC     DPTR
   \   0001AD   A3           INC     DPTR
   \   0001AE   A3           INC     DPTR
   \                     ??ZDO_ProcessMatchDescReq_9:
   \   0001AF   12....       LCALL   ?Subroutine152 & 0xFFFF
   \                     ??CrossCallReturnLabel_605:
   \   0001B2   7405         MOV     A,#0x5
   \   0001B4   12....       LCALL   ?XSTACK_DISP0_8
   \   0001B7   12....       LCALL   ??Subroutine196_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_314:
   \   0001BA   7405         MOV     A,#0x5
   \   0001BC   12....       LCALL   ?XSTACK_DISP0_8
   \   0001BF   12....       LCALL   ??Subroutine216_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_438:
   \   0001C2   7003         JNZ     $+5
   \   0001C4   02....       LJMP    ??ZDO_ProcessMatchDescReq_15 & 0xFFFF
   \   0001C7   7405         MOV     A,#0x5
   \   0001C9   12....       LCALL   ?XSTACK_DISP0_8
   \   0001CC   12....       LCALL   ??Subroutine194_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_305:
   \   0001CF   E8           MOV     A,R0
   \   0001D0   FA           MOV     R2,A
   \   0001D1   E9           MOV     A,R1
   \   0001D2   FB           MOV     R3,A
   \   0001D3   8A82         MOV     DPL,R2
   \   0001D5   8B83         MOV     DPH,R3
   \   0001D7   E0           MOVX    A,@DPTR
   \   0001D8   FC           MOV     R4,A
   \   0001D9   60C8         JZ      ??ZDO_ProcessMatchDescReq_14
   \   0001DB   7405         MOV     A,#0x5
   \   0001DD   12....       LCALL   ?XSTACK_DISP0_8
   \   0001E0   12....       LCALL   ?Subroutine63 & 0xFFFF
   \                     ??CrossCallReturnLabel_78:
   \   0001E3   A2E0         MOV     C,0xE0 /* A   */.0
   \   0001E5   50BC         JNC     ??ZDO_ProcessMatchDescReq_14
   \   0001E7   7405         MOV     A,#0x5
   \   0001E9   12....       LCALL   ?XSTACK_DISP0_8
   \   0001EC   12....       LCALL   ?Subroutine89 & 0xFFFF
   \                     ??CrossCallReturnLabel_116:
   \   0001EF   A3           INC     DPTR
   \   0001F0   A3           INC     DPTR
   \   0001F1   12....       LCALL   ?Subroutine151 & 0xFFFF
   \                     ??CrossCallReturnLabel_293:
   \   0001F4   E582         MOV     A,DPL
   \   0001F6   4583         ORL     A,DPH
   \   0001F8   6014         JZ      ??ZDO_ProcessMatchDescReq_16
   \   0001FA                ; Setup parameters for indirect call
   \   0001FA   EC           MOV     A,R4
   \   0001FB   FA           MOV     R2,A
   \   0001FC   7901         MOV     R1,#0x1
   \   0001FE   12....       LCALL   ?CALL_IND
   \   000201   85..82       MOV     DPL,?XSP + 0
   \   000204   85..83       MOV     DPH,?XSP + 1
   \   000207   12....       LCALL   ??Subroutine198_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_334:
   \   00020A   D2..         SETB    ?VB.0
   \   00020C   800F         SJMP    ??ZDO_ProcessMatchDescReq_17
   \                     ??ZDO_ProcessMatchDescReq_16:
   \   00020E   8A82         MOV     DPL,R2
   \   000210   8B83         MOV     DPH,R3
   \   000212   A3           INC     DPTR
   \   000213   A3           INC     DPTR
   \   000214   A3           INC     DPTR
   \   000215   12....       LCALL   ?Subroutine175 & 0xFFFF
   \                     ??CrossCallReturnLabel_611:
   \   000218   12....       LCALL   ??Subroutine195_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_325:
   \   00021B   C2..         CLR     ?VB.0
   \                     ??ZDO_ProcessMatchDescReq_17:
   \   00021D   12....       LCALL   ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_453:
   \   000220   7003         JNZ     $+5
   \   000222   02....       LJMP    ??ZDO_ProcessMatchDescReq_13 & 0xFFFF
   \   000225   85..82       MOV     DPL,?XSP + 0
   \   000228   85..83       MOV     DPH,?XSP + 1
   \   00022B   12....       LCALL   ?Subroutine89 & 0xFFFF
   \                     ??CrossCallReturnLabel_117:
   \   00022E   E0           MOVX    A,@DPTR
   \   00022F   6E           XRL     A,R6
   \   000230   7003         JNZ     ??ZDO_ProcessMatchDescReq_18
   \   000232   A3           INC     DPTR
   \   000233   E0           MOVX    A,@DPTR
   \   000234   6F           XRL     A,R7
   \                     ??ZDO_ProcessMatchDescReq_18:
   \   000235   6003         JZ      $+5
   \   000237   02....       LJMP    ??ZDO_ProcessMatchDescReq_13 & 0xFFFF
   \   00023A   E5..         MOV     A,?V7
   \   00023C   7004         JNZ     ??ZDO_ProcessMatchDescReq_19
   \   00023E   E5..         MOV     A,?V6
   \   000240   6060         JZ      ??ZDO_ProcessMatchDescReq_20
   \                     ??ZDO_ProcessMatchDescReq_19:
   \   000242                ; Setup parameters for call to function ZDO_AnyClusterMatches
   \   000242   85..82       MOV     DPL,?XSP + 0
   \   000245   85..83       MOV     DPH,?XSP + 1
   \   000248   A3           INC     DPTR
   \   000249   E0           MOVX    A,@DPTR
   \   00024A   C8           XCH     A,R0
   \   00024B   12....       LCALL   ?Subroutine123 & 0xFFFF
   \                     ??CrossCallReturnLabel_182:
   \   00024E   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000251   7402         MOV     A,#0x2
   \   000253   12....       LCALL   ?XSTACK_DISP0_8
   \   000256   12....       LCALL   ??Subroutine229_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_506:
   \   000259   2406         ADD     A,#0x6
   \   00025B   12....       LCALL   ?Subroutine118 & 0xFFFF
   \                     ??CrossCallReturnLabel_397:
   \   00025E   FC           MOV     R4,A
   \   00025F   740B         MOV     A,#0xb
   \   000261   12....       LCALL   ?XSTACK_DISP0_8
   \   000264   12....       LCALL   ??Subroutine214_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_411:
   \   000267   A9..         MOV     R1,?V7
   \   000269   12....       LCALL   `??ZDO_AnyClusterMatches::?relay`; Banked call to: ZDO_AnyClusterMatches
   \   00026C   7402         MOV     A,#0x2
   \   00026E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000271   E9           MOV     A,R1
   \   000272   702E         JNZ     ??ZDO_ProcessMatchDescReq_20
   \   000274                ; Setup parameters for call to function ZDO_AnyClusterMatches
   \   000274   85..82       MOV     DPL,?XSP + 0
   \   000277   85..83       MOV     DPH,?XSP + 1
   \   00027A   12....       LCALL   ?Subroutine68 & 0xFFFF
   \                     ??CrossCallReturnLabel_87:
   \   00027D   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000280   7402         MOV     A,#0x2
   \   000282   12....       LCALL   ?XSTACK_DISP0_8
   \   000285   12....       LCALL   ?Subroutine69 & 0xFFFF
   \                     ??CrossCallReturnLabel_89:
   \   000288   E0           MOVX    A,@DPTR
   \   000289   FC           MOV     R4,A
   \   00028A   7409         MOV     A,#0x9
   \   00028C   12....       LCALL   ?XSTACK_DISP0_8
   \   00028F   12....       LCALL   ??Subroutine214_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_412:
   \   000292   A9..         MOV     R1,?V6
   \   000294   12....       LCALL   `??ZDO_AnyClusterMatches::?relay`; Banked call to: ZDO_AnyClusterMatches
   \   000297   7402         MOV     A,#0x2
   \   000299   12....       LCALL   ?DEALLOC_XSTACK8
   \   00029C   E9           MOV     A,R1
   \   00029D   7003         JNZ     $+5
   \   00029F   02....       LJMP    ??ZDO_ProcessMatchDescReq_13 & 0xFFFF
   \                     ??ZDO_ProcessMatchDescReq_20:
   \   0002A2                ; Setup parameters for call to function osal_msg_allocate
   \   0002A2   E5..         MOV     A,?V6
   \   0002A4   25..         ADD     A,?V7
   \   0002A6   C3           CLR     C
   \   0002A7   33           RLC     A
   \   0002A8   240A         ADD     A,#0xa
   \   0002AA   FA           MOV     R2,A
   \   0002AB   7B00         MOV     R3,#0x0
   \   0002AD   12....       LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   0002B0   8A..         MOV     ?V4,R2
   \   0002B2   8B..         MOV     ?V5,R3
   \   0002B4   EA           MOV     A,R2
   \   0002B5   45..         ORL     A,?V5
   \   0002B7   7003         JNZ     $+5
   \   0002B9   02....       LJMP    ??ZDO_ProcessMatchDescReq_12 & 0xFFFF
   \   0002BC   8A82         MOV     DPL,R2
   \   0002BE   8B83         MOV     DPH,R3
   \   0002C0   74D2         MOV     A,#-0x2e
   \   0002C2   F0           MOVX    @DPTR,A
   \   0002C3   7403         MOV     A,#0x3
   \   0002C5   12....       LCALL   ?XSTACK_DISP0_8
   \   0002C8   12....       LCALL   ?Subroutine63 & 0xFFFF
   \                     ??CrossCallReturnLabel_79:
   \   0002CB   F8           MOV     R0,A
   \   0002CC   A3           INC     DPTR
   \   0002CD   E0           MOVX    A,@DPTR
   \   0002CE   F9           MOV     R1,A
   \   0002CF   8A82         MOV     DPL,R2
   \   0002D1   8B83         MOV     DPH,R3
   \   0002D3   A3           INC     DPTR
   \   0002D4   A3           INC     DPTR
   \   0002D5   12....       LCALL   ??Subroutine196_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_315:
   \   0002D8   8A82         MOV     DPL,R2
   \   0002DA   8B83         MOV     DPH,R3
   \   0002DC   A3           INC     DPTR
   \   0002DD   A3           INC     DPTR
   \   0002DE   A3           INC     DPTR
   \   0002DF   A3           INC     DPTR
   \   0002E0   E5..         MOV     A,?V7
   \   0002E2   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   0002E5   E5..         MOV     A,?V6
   \   0002E7   F0           MOVX    @DPTR,A
   \   0002E8   EA           MOV     A,R2
   \   0002E9   2405         ADD     A,#0x5
   \   0002EB   F582         MOV     DPL,A
   \   0002ED   E4           CLR     A
   \   0002EE   35..         ADDC    A,?V5
   \   0002F0   F583         MOV     DPH,A
   \   0002F2   E5..         MOV     A,?V7
   \   0002F4   6027         JZ      ??ZDO_ProcessMatchDescReq_21
   \   0002F6   EA           MOV     A,R2
   \   0002F7   240A         ADD     A,#0xa
   \   0002F9   FA           MOV     R2,A
   \   0002FA   E4           CLR     A
   \   0002FB   35..         ADDC    A,?V5
   \   0002FD   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_344:
   \   000300                ; Setup parameters for call to function osal_memcpy
   \   000300   7409         MOV     A,#0x9
   \   000302   12....       LCALL   ?XSTACK_DISP0_8
   \   000305   12....       LCALL   ?Subroutine52 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   000308   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00030B   AC..         MOV     R4,?V7
   \   00030D   EC           MOV     A,R4
   \   00030E   2C           ADD     A,R4
   \   00030F   FC           MOV     R4,A
   \   000310   E4           CLR     A
   \   000311   33           RLC     A
   \   000312   FD           MOV     R5,A
   \   000313   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000316   7403         MOV     A,#0x3
   \   000318   12....       LCALL   ?DEALLOC_XSTACK8
   \   00031B   8004         SJMP    ??ZDO_ProcessMatchDescReq_22
   \                     ??ZDO_ProcessMatchDescReq_21:
   \   00031D   E4           CLR     A
   \   00031E   F0           MOVX    @DPTR,A
   \   00031F   A3           INC     DPTR
   \   000320   F0           MOVX    @DPTR,A
   \                     ??ZDO_ProcessMatchDescReq_22:
   \   000321   E5..         MOV     A,?V4
   \   000323   2408         ADD     A,#0x8
   \   000325   F582         MOV     DPL,A
   \   000327   E4           CLR     A
   \   000328   35..         ADDC    A,?V5
   \   00032A   F583         MOV     DPH,A
   \   00032C   E5..         MOV     A,?V6
   \   00032E   7003         JNZ     $+5
   \   000330   02....       LJMP    ??ZDO_ProcessMatchDescReq_10 & 0xFFFF
   \   000333   A8..         MOV     R0,?V7
   \   000335   12....       LCALL   ?Subroutine161 & 0xFFFF
   \                     ??CrossCallReturnLabel_241:
   \   000338   E5..         MOV     A,?V4
   \   00033A   28           ADD     A,R0
   \   00033B   F8           MOV     R0,A
   \   00033C   E5..         MOV     A,?V5
   \   00033E   39           ADDC    A,R1
   \   00033F   F9           MOV     R1,A
   \   000340   E8           MOV     A,R0
   \   000341   240A         ADD     A,#0xa
   \   000343   FA           MOV     R2,A
   \   000344   E4           CLR     A
   \   000345   39           ADDC    A,R1
   \   000346   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_345:
   \   000349                ; Setup parameters for call to function osal_memcpy
   \   000349   7407         MOV     A,#0x7
   \   00034B   12....       LCALL   ?XSTACK_DISP0_8
   \   00034E   12....       LCALL   ?Subroutine52 & 0xFFFF
    905            }
   \                     ??CrossCallReturnLabel_66:
   \   000351   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000354   AC..         MOV     R4,?V6
   \   000356   EC           MOV     A,R4
   \   000357   2C           ADD     A,R4
   \   000358   FC           MOV     R4,A
   \   000359   E4           CLR     A
   \   00035A   33           RLC     A
   \   00035B   FD           MOV     R5,A
   \   00035C   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00035F   7403         MOV     A,#0x3
   \   000361   12....       LCALL   ?DEALLOC_XSTACK8
   \   000364   02....       LJMP    ??ZDO_ProcessMatchDescReq_11 & 0xFFFF
    906          
    907            // Send the message only if at least one match found.
    908            if ( epCnt )
   \                     ??ZDO_ProcessMatchDescReq_15:
   \   000367   7402         MOV     A,#0x2
   \   000369   12....       LCALL   ?XSTACK_DISP0_8
   \   00036C   E0           MOVX    A,@DPTR
   \   00036D   604E         JZ      ??ZDO_ProcessMatchDescReq_23
    909            {
    910              if ( ZSuccess == ZDP_MatchDescRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZDP_SUCCESS,
    911                        ZDAppNwkAddr.addr.shortAddr, epCnt, (uint8 *)ZDOBuildBuf, inMsg->SecurityUse ) )
   \   00036F                ; Setup parameters for call to function ZDP_EPRsp
   \   00036F   7403         MOV     A,#0x3
   \   000371   12....       LCALL   ?XSTACK_DISP0_8
   \   000374   12....       LCALL   ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_376:
   \   000377   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00037A   75....       MOV     ?V0,#ZDOBuildBuf & 0xff
   \   00037D   75....       MOV     ?V1,#(ZDOBuildBuf >> 8) & 0xff
   \   000380   78..         MOV     R0,#?V0
   \   000382   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000385   7405         MOV     A,#0x5
   \   000387   12....       LCALL   ?XSTACK_DISP0_8
   \   00038A   12....       LCALL   ??Subroutine207_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_367:
   \   00038D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000390   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000393   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000396   75..00       MOV     ?V0,#0x0
   \   000399   78..         MOV     R0,#?V0
   \   00039B   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00039E   740A         MOV     A,#0xa
   \   0003A0   12....       LCALL   ?XSTACK_DISP0_8
   \   0003A3   12....       LCALL   ?Subroutine80 & 0xFFFF
   \                     ??CrossCallReturnLabel_104:
   \   0003A6   12....       LCALL   ?XSTACK_DISP0_8
   \   0003A9   12....       LCALL   ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_69:
   \   0003AC   12....       LCALL   `??ZDP_EPRsp::?relay`; Banked call to: ZDP_EPRsp
   \   0003AF   7407         MOV     A,#0x7
   \   0003B1   12....       LCALL   ?DEALLOC_XSTACK8
   \   0003B4   E9           MOV     A,R1
   \   0003B5   7011         JNZ     ??ZDO_ProcessMatchDescReq_24
    912              {
    913          #if defined( LCD_SUPPORTED )
    914                HalLcdWriteScreen( "Match Desc Req", "Rsp Sent" );
   \   0003B7                ; Setup parameters for call to function HalLcdWriteScreen
   \   0003B7   7C..         MOV     R4,#`?<Constant "Rsp Sent">` & 0xff
   \   0003B9   7D..         MOV     R5,#(`?<Constant "Rsp Sent">` >> 8) & 0xff
   \   0003BB   8004         SJMP    ??ZDO_ProcessMatchDescReq_25
    915          #endif
    916              }
    917            }
    918            else
    919            {
    920          #if defined( LCD_SUPPORTED )
    921              HalLcdWriteScreen( "Match Desc Req", "Non Matched" );
   \                     ??ZDO_ProcessMatchDescReq_23:
   \   0003BD                ; Setup parameters for call to function HalLcdWriteScreen
   \   0003BD   7C..         MOV     R4,#`?<Constant "Non Matched">` & 0xff
   \   0003BF   7D..         MOV     R5,#(`?<Constant "Non Matched">` >> 8) & 0xff
   \                     ??ZDO_ProcessMatchDescReq_25:
   \   0003C1   7A..         MOV     R2,#`?<Constant "Match Desc Req">` & 0xff
   \   0003C3   7B..         MOV     R3,#(`?<Constant "Match Desc Req">` >> 8) & 0xff
   \   0003C5   12....       LCALL   `??HalLcdWriteScreen::?relay`; Banked call to: HalLcdWriteScreen
    922          #endif
    923            }
    924          
    925            if ( inClusters != NULL )
   \                     ??ZDO_ProcessMatchDescReq_24:
   \   0003C8   7409         MOV     A,#0x9
   \   0003CA   12....       LCALL   ?XSTACK_DISP0_8
   \   0003CD   12....       LCALL   ??Subroutine216_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_439:
   \   0003D0   600B         JZ      ??ZDO_ProcessMatchDescReq_26
    926              osal_mem_free( inClusters );
   \   0003D2                ; Setup parameters for call to function osal_mem_free
   \   0003D2   7409         MOV     A,#0x9
   \   0003D4   12....       LCALL   ?XSTACK_DISP0_8
   \   0003D7   12....       LCALL   ??Subroutine214_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_413:
   \   0003DA   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    927            if ( outClusters != NULL )
   \                     ??ZDO_ProcessMatchDescReq_26:
   \   0003DD   7407         MOV     A,#0x7
   \   0003DF   12....       LCALL   ?XSTACK_DISP0_8
   \   0003E2   12....       LCALL   ??Subroutine216_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_440:
   \   0003E5   600B         JZ      ??ZDO_ProcessMatchDescReq_3
    928              osal_mem_free( outClusters );
   \   0003E7                ; Setup parameters for call to function osal_mem_free
   \   0003E7   7407         MOV     A,#0x7
   \   0003E9   12....       LCALL   ?XSTACK_DISP0_8
   \   0003EC   12....       LCALL   ??Subroutine214_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_414:
   \   0003EF   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    929          }
   \                     ??ZDO_ProcessMatchDescReq_3:
   \   0003F2   740B         MOV     A,#0xb
   \   0003F4   02....       LJMP    ?Subroutine6 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine89:
   \   000000   12....       LCALL   ??Subroutine240_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_593:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine86:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002                REQUIRE ??Subroutine187_0
   \   000002                ; // Fall through to label ??Subroutine187_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine187_0:
   \   000000   A3           INC     DPTR
   \   000001   E0           MOVX    A,@DPTR
   \   000002   F8           MOV     R0,A
   \   000003   E4           CLR     A
   \   000004   C8           XCH     A,R0
   \   000005   F9           MOV     R1,A
   \   000006   EA           MOV     A,R2
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine84:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FC           MOV     R4,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FD           MOV     R5,A
   \   000005   AA..         MOV     R2,?V2
   \   000007   AB..         MOV     R3,?V3
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine80:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   2402         ADD     A,#0x2
   \   000003   FC           MOV     R4,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   3400         ADDC    A,#0x0
   \   000008   FD           MOV     R5,A
   \   000009   740A         MOV     A,#0xa
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine54:
   \   000000   12....       LCALL   ?Subroutine147 & 0xFFFF
   \                     ??CrossCallReturnLabel_228:
   \   000003   7A06         MOV     R2,#0x6
   \   000005   7B80         MOV     R3,#-0x80
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine68:
   \   000000   12....       LCALL   ??Subroutine231_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_539:
   \   000003   240A         ADD     A,#0xa
   \   000005   F582         MOV     DPL,A
   \   000007   E4           CLR     A
   \   000008   38           ADDC    A,R0
   \   000009   F583         MOV     DPH,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine194_0:
   \   000000   12....       LCALL   ?Subroutine176 & 0xFFFF
   \                     ??CrossCallReturnLabel_598:
   \   000003   12....       LCALL   ?Subroutine152 & 0xFFFF
   \                     ??CrossCallReturnLabel_607:
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine195_0:
   \   000000   F9           MOV     R1,A
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007                REQUIRE ??Subroutine196_0
   \   000007                ; // Fall through to label ??Subroutine196_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine196_0:
   \   000000   E8           MOV     A,R0
   \   000001                REQUIRE ??Subroutine197_0
   \   000001                ; // Fall through to label ??Subroutine197_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine197_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   E9           MOV     A,R1
   \   000003   F0           MOVX    @DPTR,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   FB           MOV     R3,A
   \   000001                REQUIRE ??Subroutine198_0
   \   000001                ; // Fall through to label ??Subroutine198_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   80..         SJMP    ??Subroutine202_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine147:
   \   000000   12....       LCALL   ?Subroutine175 & 0xFFFF
   \                     ??CrossCallReturnLabel_615:
   \   000003   C8           XCH     A,R0
   \   000004   240F         ADD     A,#0xf
   \   000006   F582         MOV     DPL,A
   \   000008   E4           CLR     A
   \   000009   38           ADDC    A,R0
   \   00000A   F583         MOV     DPH,A
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   F9           MOV     R1,A
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine53:
   \   000000   12....       LCALL   ??Subroutine231_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_538:
   \   000003   240E         ADD     A,#0xe
   \   000005                REQUIRE ??Subroutine205_0
   \   000005                ; // Fall through to label ??Subroutine205_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine205_0:
   \   000000   F582         MOV     DPL,A
   \   000002   E4           CLR     A
   \   000003   38           ADDC    A,R0
   \   000004                REQUIRE ??Subroutine206_0
   \   000004                ; // Fall through to label ??Subroutine206_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine206_0:
   \   000000   F583         MOV     DPH,A
   \   000002                REQUIRE ??Subroutine207_0
   \   000002                ; // Fall through to label ??Subroutine207_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine207_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0,A
   \   000003   78..         MOV     R0,#?V0
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine118:
   \   000000   F582         MOV     DPL,A
   \   000002   E4           CLR     A
   \   000003                REQUIRE ??Subroutine212_0
   \   000003                ; // Fall through to label ??Subroutine212_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine212_0:
   \   000000   38           ADDC    A,R0
   \   000001   F583         MOV     DPH,A
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine100:
   \   000000   25E0         ADD     A,0xE0 /* A   */
   \   000002   FA           MOV     R2,A
   \   000003   E4           CLR     A
   \   000004   33           RLC     A
   \   000005   FB           MOV     R3,A
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine229_0:
   \   000000   12....       LCALL   ??Subroutine231_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_544:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine231_0:
   \   000000   12....       LCALL   ?Subroutine175 & 0xFFFF
   \                     ??CrossCallReturnLabel_618:
   \   000003   C8           XCH     A,R0
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine172:
   \   000000   12....       LCALL   ?Subroutine180 & 0xFFFF
   \                     ??CrossCallReturnLabel_580:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   12....       LCALL   ?Subroutine136 & 0xFFFF
   \                     ??CrossCallReturnLabel_210:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine136:
   \   000000   12....       LCALL   ?Subroutine172 & 0xFFFF
   \                     ??CrossCallReturnLabel_258:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine180:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   A3           INC     DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine123:
   \   000000   2407         ADD     A,#0x7
   \   000002   F582         MOV     DPL,A
   \   000004   E4           CLR     A
   \   000005   38           ADDC    A,R0
   \   000006   F583         MOV     DPH,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine85:
   \   000000   12....       LCALL   ?Subroutine153 & 0xFFFF
   \                     ??CrossCallReturnLabel_595:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine153:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002                REQUIRE ??Subroutine240_0
   \   000002                ; // Fall through to label ??Subroutine240_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine240_0:
   \   000000   12....       LCALL   ?Subroutine176 & 0xFFFF
   \                     ??CrossCallReturnLabel_599:
   \   000003   A3           INC     DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine69:
   \   000000   12....       LCALL   ??Subroutine231_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_540:
   \   000003   2409         ADD     A,#0x9
   \   000005   F582         MOV     DPL,A
   \   000007   E4           CLR     A
   \   000008   38           ADDC    A,R0
   \   000009   F583         MOV     DPH,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine63:
   \   000000   12....       LCALL   ?Subroutine153 & 0xFFFF
   \                     ??CrossCallReturnLabel_594:
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine52:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V1,A
   \   000007   75..00       MOV     ?V2,#0x0
   \   00000A   78..         MOV     R0,#?V0
   \   00000C   22           RET
    930          
    931          
    932          /*********************************************************************
    933           * @fn      ZDO_ProcessBindUnbindReq()
    934           *
    935           * @brief   Called to process a Bind or Unbind Request message.
    936           *
    937           * @param   inMsg  - incoming message (request)
    938           * @param   pReq - place to put parsed information
    939           *
    940           * @return  none
    941           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    942          void ZDO_ProcessBindUnbindReq( zdoIncomingMsg_t *inMsg, ZDO_BindUnbindReq_t *pReq )
   \                     ZDO_ProcessBindUnbindReq:
    943          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV     A,#-0xc
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V2,R2
   \   00000C   8B..         MOV     ?V3,R3
   \   00000E   EC           MOV     A,R4
   \   00000F   FE           MOV     R6,A
   \   000010   ED           MOV     A,R5
   \   000011   FF           MOV     R7,A
    944            zAddrType_t SourceAddr;       // Binding Source addres
    945            byte bindStat;
    946          
    947            SourceAddr.addrMode = Addr64Bit;
   \   000012   740B         MOV     A,#0xb
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   7403         MOV     A,#0x3
   \   000019   F0           MOVX    @DPTR,A
    948            osal_cpyExtAddr( SourceAddr.addr.extAddr, pReq->srcAddress );
   \   00001A                ; Setup parameters for call to function sAddrExtCpy
   \   00001A   12....       LCALL   ?XSTACK_DISP101_8
   \   00001D   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
    949          
    950          
    951            // If the local device is not the primary binding cache
    952            // check the src address of the bind request.
    953            // If it is not the local device's extended address
    954            // discard the request.
    955            if ( !osal_ExtAddrEqual( SourceAddr.addr.extAddr, NLME_GetExtAddr()) ||
    956                  (pReq->dstAddress.addrMode != Addr64Bit &&
    957                   pReq->dstAddress.addrMode != AddrGroup) )
   \   000020                ; Setup parameters for call to function NLME_GetExtAddr
   \   000020   12....       LCALL   `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
   \   000023   8A..         MOV     ?V0,R2
   \   000025   8B..         MOV     ?V1,R3
   \   000027   AC..         MOV     R4,?V0
   \   000029   AD..         MOV     R5,?V1
   \   00002B                ; Setup parameters for call to function sAddrExtCmp
   \   00002B   7403         MOV     A,#0x3
   \   00002D   12....       LCALL   ?XSTACK_DISP101_8
   \   000030   12....       LCALL   `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   000033   E9           MOV     A,R1
   \   000034   600E         JZ      ??ZDO_ProcessBindUnbindReq_0
   \   000036   12....       LCALL   ?Subroutine107 & 0xFFFF
   \                     ??CrossCallReturnLabel_157:
   \   000039   F8           MOV     R0,A
   \   00003A   7403         MOV     A,#0x3
   \   00003C   68           XRL     A,R0
   \   00003D   6010         JZ      ??ZDO_ProcessBindUnbindReq_1
   \   00003F   7401         MOV     A,#0x1
   \   000041   68           XRL     A,R0
   \   000042   600B         JZ      ??ZDO_ProcessBindUnbindReq_1
    958            {
    959              bindStat = ZDP_NOT_SUPPORTED;
   \                     ??ZDO_ProcessBindUnbindReq_0:
   \   000044   85..82       MOV     DPL,?XSP + 0
   \   000047   85..83       MOV     DPH,?XSP + 1
   \   00004A   7484         MOV     A,#-0x7c
   \   00004C   02....       LJMP    ??ZDO_ProcessBindUnbindReq_2 & 0xFFFF
    960            }
   \                     ??ZDO_ProcessBindUnbindReq_1:
   \   00004F   8E82         MOV     DPL,R6
   \   000051   8F83         MOV     DPH,R7
   \   000053   A3           INC     DPTR
   \   000054   A3           INC     DPTR
   \   000055   A3           INC     DPTR
   \   000056   A3           INC     DPTR
   \   000057   A3           INC     DPTR
   \   000058   A3           INC     DPTR
   \   000059   A3           INC     DPTR
   \   00005A   A3           INC     DPTR
   \   00005B   E0           MOVX    A,@DPTR
   \   00005C   F9           MOV     R1,A
   \   00005D   6021         JZ      ??ZDO_ProcessBindUnbindReq_3
   \   00005F   C3           CLR     C
   \   000060   94F1         SUBB    A,#-0xf
   \   000062   501C         JNC     ??ZDO_ProcessBindUnbindReq_3
   \   000064   EE           MOV     A,R6
   \   000065   2414         ADD     A,#0x14
   \   000067   F5..         MOV     ?V0,A
   \   000069   E4           CLR     A
   \   00006A   3F           ADDC    A,R7
   \   00006B   F5..         MOV     ?V1,A
   \   00006D   7403         MOV     A,#0x3
   \   00006F   68           XRL     A,R0
   \   000070   7019         JNZ     ??ZDO_ProcessBindUnbindReq_4
   \   000072   85..82       MOV     DPL,?V0
   \   000075   85..83       MOV     DPH,?V1
   \   000078   E0           MOVX    A,@DPTR
   \   000079   6005         JZ      ??ZDO_ProcessBindUnbindReq_3
   \   00007B   C3           CLR     C
   \   00007C   94F1         SUBB    A,#-0xf
   \   00007E   400B         JC      ??ZDO_ProcessBindUnbindReq_4
    961            else
    962            {
    963              // Check source & destination endpoints
    964              if ( (pReq->srcEndpoint == 0 || pReq->srcEndpoint > MAX_ENDPOINTS)
    965                  || (( pReq->dstAddress.addrMode == Addr64Bit ) &&
    966                      (pReq->dstEndpoint == 0 || pReq->dstEndpoint > MAX_ENDPOINTS)) )
    967              {
    968                bindStat = ZDP_INVALID_EP;
   \                     ??ZDO_ProcessBindUnbindReq_3:
   \   000080   85..82       MOV     DPL,?XSP + 0
   \   000083   85..83       MOV     DPH,?XSP + 1
   \   000086   7482         MOV     A,#-0x7e
   \   000088   02....       LJMP    ??ZDO_ProcessBindUnbindReq_2 & 0xFFFF
    969              }
   \                     ??ZDO_ProcessBindUnbindReq_4:
   \   00008B   EE           MOV     A,R6
   \   00008C   240B         ADD     A,#0xb
   \   00008E   F5..         MOV     ?V6,A
   \   000090   E4           CLR     A
   \   000091   3F           ADDC    A,R7
   \   000092   F5..         MOV     ?V7,A
   \   000094   E5..         MOV     A,?V2
   \   000096   240C         ADD     A,#0xc
   \   000098   F582         MOV     DPL,A
   \   00009A   E4           CLR     A
   \   00009B   35..         ADDC    A,?V3
   \   00009D   F583         MOV     DPH,A
   \   00009F   E0           MOVX    A,@DPTR
   \   0000A0   6421         XRL     A,#0x21
   \   0000A2   7002         JNZ     ??ZDO_ProcessBindUnbindReq_5
   \   0000A4   A3           INC     DPTR
   \   0000A5   E0           MOVX    A,@DPTR
   \                     ??ZDO_ProcessBindUnbindReq_5:
   \   0000A6   6003         JZ      $+5
   \   0000A8   02....       LJMP    ??ZDO_ProcessBindUnbindReq_6 & 0xFFFF
    970              else
    971              {
    972                if ( inMsg->clusterID == Bind_req )
    973                {
    974                  // Assume the table is full
    975                  bindStat = ZDP_TABLE_FULL;
   \   0000AB   85..82       MOV     DPL,?XSP + 0
   \   0000AE   85..83       MOV     DPH,?XSP + 1
   \   0000B1   7487         MOV     A,#-0x79
   \   0000B3   F0           MOVX    @DPTR,A
    976          
    977                  if ( bindNumOfEntries() < gNWK_MAX_BINDING_ENTRIES )
   \   0000B4                ; Setup parameters for call to function bindNumOfEntries
   \   0000B4   12....       LCALL   `??bindNumOfEntries::?relay`; Banked call to: bindNumOfEntries
   \   0000B7   90....       MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   0000BA   E4           CLR     A
   \   0000BB   93           MOVC    A,@A+DPTR
   \   0000BC   F8           MOV     R0,A
   \   0000BD   7401         MOV     A,#0x1
   \   0000BF   93           MOVC    A,@A+DPTR
   \   0000C0   F9           MOV     R1,A
   \   0000C1   C3           CLR     C
   \   0000C2   EA           MOV     A,R2
   \   0000C3   98           SUBB    A,R0
   \   0000C4   EB           MOV     A,R3
   \   0000C5   99           SUBB    A,R1
   \   0000C6   4003         JC      $+5
   \   0000C8   02....       LJMP    ??ZDO_ProcessBindUnbindReq_7 & 0xFFFF
    978                  {
    979                    if ( APSME_BindRequest( pReq->srcEndpoint, pReq->clusterID,
    980                                   &(pReq->dstAddress), pReq->dstEndpoint ) == ZSuccess )
   \   0000CB                ; Setup parameters for call to function APSME_BindRequest
   \   0000CB   85..82       MOV     DPL,?V0
   \   0000CE   85..83       MOV     DPH,?V1
   \   0000D1   12....       LCALL   ??Subroutine207_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_368:
   \   0000D4   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000D7   AC..         MOV     R4,?V6
   \   0000D9   AD..         MOV     R5,?V7
   \   0000DB   8E82         MOV     DPL,R6
   \   0000DD   8F83         MOV     DPH,R7
   \   0000DF   A3           INC     DPTR
   \   0000E0   A3           INC     DPTR
   \   0000E1   A3           INC     DPTR
   \   0000E2   A3           INC     DPTR
   \   0000E3   A3           INC     DPTR
   \   0000E4   A3           INC     DPTR
   \   0000E5   A3           INC     DPTR
   \   0000E6   A3           INC     DPTR
   \   0000E7   A3           INC     DPTR
   \   0000E8   12....       LCALL   ??Subroutine214_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_415:
   \   0000EB   8E82         MOV     DPL,R6
   \   0000ED   8F83         MOV     DPH,R7
   \   0000EF   A3           INC     DPTR
   \   0000F0   A3           INC     DPTR
   \   0000F1   A3           INC     DPTR
   \   0000F2   A3           INC     DPTR
   \   0000F3   A3           INC     DPTR
   \   0000F4   A3           INC     DPTR
   \   0000F5   A3           INC     DPTR
   \   0000F6   A3           INC     DPTR
   \   0000F7   E0           MOVX    A,@DPTR
   \   0000F8   F9           MOV     R1,A
   \   0000F9   12....       LCALL   `??APSME_BindRequest::?relay`; Banked call to: APSME_BindRequest
   \   0000FC   7401         MOV     A,#0x1
   \   0000FE   12....       LCALL   ?DEALLOC_XSTACK8
   \   000101   E9           MOV     A,R1
   \   000102   706B         JNZ     ??ZDO_ProcessBindUnbindReq_7
    981                    {
    982                      uint16 nwkAddr;
    983          
    984                      // valid entry
    985                      bindStat = ZDP_SUCCESS;
   \   000104   85..82       MOV     DPL,?XSP + 0
   \   000107   85..83       MOV     DPH,?XSP + 1
   \   00010A   E4           CLR     A
   \   00010B   F0           MOVX    @DPTR,A
    986          
    987                      // Notify to save info into NV
    988                      ZDApp_NVUpdate();
   \   00010C                ; Setup parameters for call to function ZDApp_NVUpdate
   \   00010C   12....       LCALL   `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
    989          
    990                      // Check for the destination address
    991                      if ( pReq->dstAddress.addrMode == Addr64Bit )
   \   00010F   12....       LCALL   ?Subroutine107 & 0xFFFF
   \                     ??CrossCallReturnLabel_158:
   \   000112   6403         XRL     A,#0x3
   \   000114   7059         JNZ     ??ZDO_ProcessBindUnbindReq_7
    992                      {
    993                        if ( APSME_LookupNwkAddr( pReq->dstAddress.addr.extAddr, &nwkAddr ) == FALSE )
   \   000116                ; Setup parameters for call to function APSME_LookupNwkAddr
   \   000116   7401         MOV     A,#0x1
   \   000118   12....       LCALL   ?XSTACK_DISP102_8
   \   00011B   AA..         MOV     R2,?V6
   \   00011D   AB..         MOV     R3,?V7
   \   00011F   12....       LCALL   `??APSME_LookupNwkAddr::?relay`; Banked call to: APSME_LookupNwkAddr
   \   000122   E9           MOV     A,R1
   \   000123   704A         JNZ     ??ZDO_ProcessBindUnbindReq_7
    994                        {
    995                          ZDP_NwkAddrReq( pReq->dstAddress.addr.extAddr, ZDP_ADDR_REQTYPE_SINGLE, 0, 0 );
   \   000125                ; Setup parameters for call to function ZDP_NwkAddrReq
   \   000125   7D00         MOV     R5,#0x0
   \   000127   7C00         MOV     R4,#0x0
   \   000129   7900         MOV     R1,#0x0
   \   00012B   AA..         MOV     R2,?V6
   \   00012D   AB..         MOV     R3,?V7
   \   00012F   12....       LCALL   `??ZDP_NwkAddrReq::?relay`; Banked call to: ZDP_NwkAddrReq
   \   000132   803B         SJMP    ??ZDO_ProcessBindUnbindReq_7
    996                        }
    997                      }
    998                    }
    999                  }
   1000                }
   1001                else // Unbind_req
   1002                {
   1003                  if ( APSME_UnBindRequest( pReq->srcEndpoint, pReq->clusterID,
   1004                                 &(pReq->dstAddress), pReq->dstEndpoint ) == ZSuccess )
   \                     ??ZDO_ProcessBindUnbindReq_6:
   \   000134                ; Setup parameters for call to function APSME_UnBindRequest
   \   000134   85..82       MOV     DPL,?V0
   \   000137   85..83       MOV     DPH,?V1
   \   00013A   12....       LCALL   ??Subroutine207_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_369:
   \   00013D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000140   AC..         MOV     R4,?V6
   \   000142   AD..         MOV     R5,?V7
   \   000144   8E82         MOV     DPL,R6
   \   000146   8F83         MOV     DPH,R7
   \   000148   A3           INC     DPTR
   \   000149   A3           INC     DPTR
   \   00014A   A3           INC     DPTR
   \   00014B   A3           INC     DPTR
   \   00014C   A3           INC     DPTR
   \   00014D   A3           INC     DPTR
   \   00014E   A3           INC     DPTR
   \   00014F   A3           INC     DPTR
   \   000150   A3           INC     DPTR
   \   000151   12....       LCALL   ??Subroutine214_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_416:
   \   000154   12....       LCALL   `??APSME_UnBindRequest::?relay`; Banked call to: APSME_UnBindRequest
   \   000157   7401         MOV     A,#0x1
   \   000159   12....       LCALL   ?DEALLOC_XSTACK8
   \   00015C   E9           MOV     A,R1
   \   00015D   85..82       MOV     DPL,?XSP + 0
   \   000160   85..83       MOV     DPH,?XSP + 1
   \   000163   7007         JNZ     ??ZDO_ProcessBindUnbindReq_8
   1005                  {
   1006                    bindStat = ZDP_SUCCESS;
   \   000165   E4           CLR     A
   \   000166   F0           MOVX    @DPTR,A
   1007          
   1008                    // Notify to save info into NV
   1009                    ZDApp_NVUpdate();
   \   000167                ; Setup parameters for call to function ZDApp_NVUpdate
   \   000167   12....       LCALL   `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
   \   00016A   8003         SJMP    ??ZDO_ProcessBindUnbindReq_7
   1010                  }
   1011                  else
   1012                    bindStat = ZDP_NO_ENTRY;
   \                     ??ZDO_ProcessBindUnbindReq_8:
   \   00016C   7488         MOV     A,#-0x78
   \                     ??ZDO_ProcessBindUnbindReq_2:
   \   00016E   F0           MOVX    @DPTR,A
   1013                }
   1014              }
   1015            }
   1016          
   1017            // Send back a response message
   1018            ZDP_SendData( &(inMsg->TransSeq), &(inMsg->srcAddr),
   1019                         (inMsg->clusterID | ZDO_RESPONSE_BIT), 1, &bindStat,
   1020                         inMsg->SecurityUse );
   \                     ??ZDO_ProcessBindUnbindReq_7:
   \   00016F                ; Setup parameters for call to function ZDP_SendData
   \   00016F   E5..         MOV     A,?V2
   \   000171   12....       LCALL   ??Subroutine223_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_476:
   \   000174   35..         ADDC    A,?V3
   \   000176   12....       LCALL   ??Subroutine206_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_371:
   \   000179   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00017C   7401         MOV     A,#0x1
   \   00017E   12....       LCALL   ?XSTACK_DISP100_8
   \   000181   88..         MOV     ?V0,R0
   \   000183   89..         MOV     ?V1,R1
   \   000185   78..         MOV     R0,#?V0
   \   000187   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00018A   E5..         MOV     A,?V2
   \   00018C   240C         ADD     A,#0xc
   \   00018E   F582         MOV     DPL,A
   \   000190   E4           CLR     A
   \   000191   35..         ADDC    A,?V3
   \   000193   12....       LCALL   ??Subroutine183_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_271:
   \   000196   4480         ORL     A,#0x80
   \   000198   F5..         MOV     ?V1,A
   \   00019A   78..         MOV     R0,#?V0
   \   00019C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00019F   7901         MOV     R1,#0x1
   \   0001A1   E5..         MOV     A,?V2
   \   0001A3   2402         ADD     A,#0x2
   \   0001A5   FC           MOV     R4,A
   \   0001A6   E4           CLR     A
   \   0001A7   35..         ADDC    A,?V3
   \   0001A9   FD           MOV     R5,A
   \   0001AA   E5..         MOV     A,?V2
   \   0001AC   240F         ADD     A,#0xf
   \   0001AE   FA           MOV     R2,A
   \   0001AF   E4           CLR     A
   \   0001B0   35..         ADDC    A,?V3
   \   0001B2   FB           MOV     R3,A
   \   0001B3   12....       LCALL   `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   0001B6   7405         MOV     A,#0x5
   \   0001B8   12....       LCALL   ?DEALLOC_XSTACK8
   1021          }
   \   0001BB   740C         MOV     A,#0xc
   \   0001BD   02....       LJMP    ?Subroutine6 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine107:
   \   000000   12....       LCALL   ?Subroutine164 & 0xFFFF
   \                     ??CrossCallReturnLabel_362:
   \   000003   F583         MOV     DPH,A
   \   000005   E0           MOVX    A,@DPTR
   \   000006   22           RET
   1022          
   1023          /*********************************************************************
   1024           * @fn      ZDO_UpdateAddrManager
   1025           *
   1026           * @brief   Update the Address Manager.
   1027           *
   1028           * @param   nwkAddr - network address
   1029           * @param   extAddr - extended address
   1030           *
   1031           * @return  none
   1032           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine181_0
   \   000003                ; // Fall through to label ??Subroutine181_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1033          void ZDO_UpdateAddrManager( uint16 nwkAddr, uint8 *extAddr )
   \                     ZDO_UpdateAddrManager:
   1034          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 13
   \   000004   74F3         MOV     A,#-0xd
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
   1035            AddrMgrEntry_t addrEntry;
   1036          
   1037            // Update the address manager
   1038            addrEntry.user = ADDRMGR_USER_DEFAULT;
   \   000009   85..82       MOV     DPL,?XSP + 0
   \   00000C   85..83       MOV     DPH,?XSP + 1
   \   00000F   E4           CLR     A
   \   000010   F0           MOVX    @DPTR,A
   1039            addrEntry.nwkAddr = nwkAddr;
   \   000011   04           INC     A
   \   000012   12....       LCALL   ?XSTACK_DISP0_8
   \   000015   12....       LCALL   ??Subroutine198_0 & 0xFFFF
   1040            AddrMgrExtAddrSet( addrEntry.extAddr, extAddr );
   \                     ??CrossCallReturnLabel_335:
   \   000018                ; Setup parameters for call to function AddrMgrExtAddrSet
   \   000018   7403         MOV     A,#0x3
   \   00001A   12....       LCALL   ?XSTACK_DISP0_8
   \   00001D   AA82         MOV     R2,DPL
   \   00001F   AB83         MOV     R3,DPH
   \   000021   12....       LCALL   `??AddrMgrExtAddrSet::?relay`; Banked call to: AddrMgrExtAddrSet
   1041            AddrMgrEntryUpdate( &addrEntry );
   \   000024                ; Setup parameters for call to function AddrMgrEntryUpdate
   \   000024   AA..         MOV     R2,?XSP + 0
   \   000026   AB..         MOV     R3,?XSP + 1
   \   000028   12....       LCALL   `??AddrMgrEntryUpdate::?relay`; Banked call to: AddrMgrEntryUpdate
   1042          }
   \   00002B   740D         MOV     A,#0xd
   \   00002D   02....       LJMP    ?Subroutine0 & 0xFFFF
   1043          
   1044          /*********************************************************************
   1045           * @fn      ZDO_ProcessServerDiscReq
   1046           *
   1047           * @brief   Process the Server_Discovery_req message.
   1048           *
   1049           * @param   inMsg  - incoming message (request)
   1050           *
   1051           * @return  none
   1052           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1053          void ZDO_ProcessServerDiscReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessServerDiscReq:
   1054          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL   ?Subroutine108 & 0xFFFF
   1055            uint16 serverMask = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
   1056            uint16 matchMask = serverMask & ZDO_Config_Node_Descriptor.ServerMask;
   \                     ??CrossCallReturnLabel_357:
   \   000008   12....       LCALL   ?Subroutine67 & 0xFFFF
   \                     ??CrossCallReturnLabel_289:
   \   00000B   FA           MOV     R2,A
   \   00000C   A3           INC     DPTR
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   F9           MOV     R1,A
   \   00000F   EA           MOV     A,R2
   \   000010   F8           MOV     R0,A
   \   000011   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 8
   \   000014   E0           MOVX    A,@DPTR
   \   000015   58           ANL     A,R0
   \   000016   F5..         MOV     ?V0,A
   \   000018   A3           INC     DPTR
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   59           ANL     A,R1
   \   00001B   F5..         MOV     ?V1,A
   1057          
   1058            if ( matchMask )
   \   00001D   E5..         MOV     A,?V0
   \   00001F   45..         ORL     A,?V1
   \   000021   602A         JZ      ??ZDO_ProcessServerDiscReq_0
   1059            {
   1060              ZDP_ServerDiscRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZSUCCESS,
   1061                          ZDAppNwkAddr.addr.shortAddr, matchMask, inMsg->SecurityUse );
   \   000023                ; Setup parameters for call to function ZDP_ServerDiscRsp
   \   000023   78..         MOV     R0,#?V0
   \   000025   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000028   90....       MOV     DPTR,#ZDAppNwkAddr
   \   00002B   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00002E   EE           MOV     A,R6
   \   00002F   12....       LCALL   ??Subroutine223_0 & 0xFFFF
   1062            }
   \                     ??CrossCallReturnLabel_477:
   \   000032   3F           ADDC    A,R7
   \   000033   F583         MOV     DPH,A
   \   000035   E0           MOVX    A,@DPTR
   \   000036   FD           MOV     R5,A
   \   000037   7C00         MOV     R4,#0x0
   \   000039   12....       LCALL   ?Subroutine166 & 0xFFFF
   \                     ??CrossCallReturnLabel_248:
   \   00003C   EE           MOV     A,R6
   \   00003D   12....       LCALL   ?Subroutine117 & 0xFFFF
   \                     ??CrossCallReturnLabel_171:
   \   000040   3F           ADDC    A,R7
   \   000041   F583         MOV     DPH,A
   \   000043   E0           MOVX    A,@DPTR
   \   000044   F9           MOV     R1,A
   \   000045   12....       LCALL   `??ZDP_ServerDiscRsp::?relay`; Banked call to: ZDP_ServerDiscRsp
   \   000048   7404         MOV     A,#0x4
   \   00004A   12....       LCALL   ?DEALLOC_XSTACK8
   1063          }
   \                     ??ZDO_ProcessServerDiscReq_0:
   \   00004D   02....       LJMP    ??Subroutine186_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine67:
   \   000000   F583         MOV     DPH,A
   \   000002                REQUIRE ??Subroutine190_0
   \   000002                ; // Fall through to label ??Subroutine190_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine108:
   \   000000   EA           MOV     A,R2
   \   000001   FE           MOV     R6,A
   \   000002   EB           MOV     A,R3
   \   000003   FF           MOV     R7,A
   \   000004                ; Setup parameters for call to function NLME_PermitJoiningRequest
   \   000004                REQUIRE ??Subroutine203_0
   \   000004                ; // Fall through to label ??Subroutine203_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine117:
   \   000000   240F         ADD     A,#0xf
   \   000002   F582         MOV     DPL,A
   \   000004   E4           CLR     A
   \   000005   22           RET
   1064          
   1065          /*********************************************************************
   1066           * Call Back Functions from APS  - API
   1067           */
   1068          
   1069          /*********************************************************************
   1070           * @fn          ZDO_EndDeviceTimeoutCB
   1071           *
   1072           * @brief       This function handles the binding timer for the End
   1073           *              Device Bind command.
   1074           *
   1075           * @param       none
   1076           *
   1077           * @return      none
   1078           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1079          void ZDO_EndDeviceTimeoutCB( void )
   \                     ZDO_EndDeviceTimeoutCB:
   1080          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1081          #if defined ( REFLECTOR )
   1082            byte stat;
   1083            if ( ZDO_EDBind )
   \   00000A   90....       MOV     DPTR,#ZDO_EDBind
   \   00000D   12....       LCALL   ??Subroutine216_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_441:
   \   000010   7003         JNZ     $+5
   \   000012   02....       LJMP    ??ZDO_EndDeviceTimeoutCB_0 & 0xFFFF
   1084            {
   1085              stat = ZDO_EDBind->status;
   1086          
   1087              // Send the response message to the first sent
   1088              ZDO_SendEDBindRsp( ZDO_EDBind->SrcTransSeq, &(ZDO_EDBind->SrcAddr),
   1089                                  stat, ZDO_EDBind->SecurityUse );
   \   000015   E0           MOVX    A,@DPTR
   \   000016   C8           XCH     A,R0
   \   000017   2416         ADD     A,#0x16
   \   000019   12....       LCALL   ?Subroutine118 & 0xFFFF
   \                     ??CrossCallReturnLabel_398:
   \   00001C   85..82       MOV     DPL,?XSP + 0
   \   00001F   85..83       MOV     DPH,?XSP + 1
   \   000022   12....       LCALL   ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_47:
   \   000025   F583         MOV     DPH,A
   \   000027   8882         MOV     DPL,R0
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   C0E0         PUSH    A
   \   00002C   7401         MOV     A,#0x1
   \   00002E   12....       LCALL   ?XSTACK_DISP0_8
   \   000031   D0E0         POP     A
   \   000033   12....       LCALL   ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_46:
   \   000036   C8           XCH     A,R0
   \   000037   2415         ADD     A,#0x15
   \   000039   12....       LCALL   ??Subroutine205_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_373:
   \   00003C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00003F   7401         MOV     A,#0x1
   \   000041   12....       LCALL   ?XSTACK_DISP100_8
   \   000044   88..         MOV     ?V0,R0
   \   000046   89..         MOV     ?V1,R1
   \   000048   78..         MOV     R0,#?V0
   \   00004A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004D   75..20       MOV     ?V0,#0x20
   \   000050   75..80       MOV     ?V1,#-0x80
   \   000053   78..         MOV     R0,#?V0
   \   000055   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000058   7901         MOV     R1,#0x1
   \   00005A   90....       MOV     DPTR,#ZDO_EDBind
   \   00005D   E0           MOVX    A,@DPTR
   \   00005E   29           ADD     A,R1
   \   00005F   FC           MOV     R4,A
   \   000060   A3           INC     DPTR
   \   000061   E0           MOVX    A,@DPTR
   \   000062   3400         ADDC    A,#0x0
   \   000064   FD           MOV     R5,A
   \   000065   7406         MOV     A,#0x6
   \   000067   12....       LCALL   ?XSTACK_DISP101_8
   \   00006A   12....       LCALL   `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   00006D   7405         MOV     A,#0x5
   \   00006F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000072                ; Setup parameters for call to function HalLcdWriteString
   \   000072   7901         MOV     R1,#0x1
   \   000074   7A..         MOV     R2,#`?<Constant "End Device Bind">` & 0xff
   \   000076   7B..         MOV     R3,#(`?<Constant "End Device Bind">` >> 8) & 0xff
   \   000078   12....       LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
   \   00007B   85..82       MOV     DPL,?XSP + 0
   \   00007E   85..83       MOV     DPH,?XSP + 1
   \   000081   E0           MOVX    A,@DPTR
   \   000082   7902         MOV     R1,#0x2
   \   000084   7006         JNZ     ??ZDO_EndDeviceTimeoutCB_1
   \   000086                ; Setup parameters for call to function HalLcdWriteString
   \   000086   7A..         MOV     R2,#`?<Constant "Success Sent">` & 0xff
   \   000088   7B..         MOV     R3,#(`?<Constant "Success Sent">` >> 8) & 0xff
   \   00008A   8004         SJMP    ??ZDO_EndDeviceTimeoutCB_2
   \                     ??ZDO_EndDeviceTimeoutCB_1:
   \   00008C                ; Setup parameters for call to function HalLcdWriteString
   \   00008C   7A..         MOV     R2,#`?<Constant "Timeout">` & 0xff
   \   00008E   7B..         MOV     R3,#(`?<Constant "Timeout">` >> 8) & 0xff
   \                     ??ZDO_EndDeviceTimeoutCB_2:
   \   000090   12....       LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
   1090          
   1091              ZDO_RemoveEndDeviceBind();
   \   000093   90....       MOV     DPTR,#ZDO_EDBind
   \   000096   12....       LCALL   ??Subroutine216_0 & 0xFFFF
   1092            }
   \                     ??CrossCallReturnLabel_442:
   \   000099   602C         JZ      ??ZDO_EndDeviceTimeoutCB_0
   \   00009B   E0           MOVX    A,@DPTR
   \   00009C   C8           XCH     A,R0
   \   00009D   2410         ADD     A,#0x10
   \   00009F   12....       LCALL   ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_297:
   \   0000A2   6003         JZ      ??ZDO_EndDeviceTimeoutCB_3
   \   0000A4                ; Setup parameters for call to function osal_mem_free
   \   0000A4   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \                     ??ZDO_EndDeviceTimeoutCB_3:
   \   0000A7   90....       MOV     DPTR,#ZDO_EDBind
   \   0000AA   12....       LCALL   ??Subroutine229_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_507:
   \   0000AD   2413         ADD     A,#0x13
   \   0000AF   12....       LCALL   ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_298:
   \   0000B2   6003         JZ      ??ZDO_EndDeviceTimeoutCB_4
   \   0000B4                ; Setup parameters for call to function osal_mem_free
   \   0000B4   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \                     ??ZDO_EndDeviceTimeoutCB_4:
   \   0000B7                ; Setup parameters for call to function osal_mem_free
   \   0000B7   90....       MOV     DPTR,#ZDO_EDBind
   \   0000BA   12....       LCALL   ??Subroutine214_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_417:
   \   0000BD   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0000C0   90....       MOV     DPTR,#ZDO_EDBind
   \   0000C3   E4           CLR     A
   \   0000C4   F0           MOVX    @DPTR,A
   \   0000C5   A3           INC     DPTR
   \   0000C6   F0           MOVX    @DPTR,A
   1093          #endif  // REFLECTOR
   1094          }
   \                     ??ZDO_EndDeviceTimeoutCB_0:
   \   0000C7   02....       LJMP    ?Subroutine4 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine44:
   \   000000   F582         MOV     DPL,A
   \   000002   E4           CLR     A
   \   000003   38           ADDC    A,R0
   \   000004                REQUIRE ??Subroutine192_0
   \   000004                ; // Fall through to label ??Subroutine192_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine192_0:
   \   000000   F583         MOV     DPH,A
   \   000002                REQUIRE ??Subroutine193_0
   \   000002                ; // Fall through to label ??Subroutine193_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine193_0:
   \   000000   12....       LCALL   ??Subroutine230_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_535:
   \   000003   EA           MOV     A,R2
   \   000004   4B           ORL     A,R3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function ZDP_SendData
   \   000001   90....       MOV     DPTR,#ZDO_EDBind
   \   000004   12....       LCALL   ?Subroutine175 & 0xFFFF
   \                     ??CrossCallReturnLabel_612:
   \   000007   22           RET
   1095          
   1096          /*********************************************************************
   1097           * Optional Management Messages
   1098           */
   1099          
   1100          /*********************************************************************
   1101           * @fn          ZDO_ProcessMgmtLqiReq
   1102           *
   1103           * @brief       This function handles parsing the incoming Management
   1104           *              LQI request and generate the response.
   1105           *
   1106           *   Note:      This function will limit the number of items returned
   1107           *              to ZDO_MAX_LQI_ITEMS items.
   1108           *
   1109           * @param       inMsg - incoming message (request)
   1110           *
   1111           * @return      none
   1112           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1113          void ZDO_ProcessMgmtLqiReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtLqiReq:
   1114          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 43
   \   000005   74D5         MOV     A,#-0x2b
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   7405         MOV     A,#0x5
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   12....       LCALL   ??Subroutine198_0 & 0xFFFF
   1115            byte x;
   1116            byte index;
   1117            byte numItems;
   1118            byte maxItems;
   1119            ZDP_MgmtLqiItem_t* table = NULL;
   \                     ??CrossCallReturnLabel_336:
   \   000012   7401         MOV     A,#0x1
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   E4           CLR     A
   \   000018   F0           MOVX    @DPTR,A
   \   000019   A3           INC     DPTR
   \   00001A   F0           MOVX    @DPTR,A
   1120            ZDP_MgmtLqiItem_t* item;
   1121            neighborEntry_t    entry;
   1122            byte aItems;
   1123            associated_devices_t *aDevice;
   1124            AddrMgrEntry_t  nwkEntry;
   1125            uint8 StartIndex = inMsg->asdu[0];
   \   00001B   7405         MOV     A,#0x5
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   12....       LCALL   ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   000023   F5..         MOV     ?V3,A
   1126          
   1127            // Get the number of neighbor items
   1128            NLME_GetRequest( nwkNumNeighborTableEntries, 0, &maxItems );
   \   000025                ; Setup parameters for call to function NLME_GetRequest
   \   000025   AC..         MOV     R4,?XSP + 0
   \   000027   AD..         MOV     R5,?XSP + 1
   \   000029   7A00         MOV     R2,#0x0
   \   00002B   7B00         MOV     R3,#0x0
   \   00002D   799C         MOV     R1,#-0x64
   \   00002F   12....       LCALL   `??NLME_GetRequest::?relay`; Banked call to: NLME_GetRequest
   1129          
   1130            // Get the number of associated items
   1131            aItems = (uint8)AssocCount( PARENT, CHILD_FFD_RX_IDLE );
   \   000032                ; Setup parameters for call to function AssocCount
   \   000032   7A04         MOV     R2,#0x4
   \   000034   7900         MOV     R1,#0x0
   \   000036   12....       LCALL   `??AssocCount::?relay`; Banked call to: AssocCount
   \   000039   EA           MOV     A,R2
   \   00003A   F5..         MOV     ?V4,A
   1132          
   1133            // Total number of items
   1134            maxItems += aItems;
   \   00003C   85..82       MOV     DPL,?XSP + 0
   \   00003F   85..83       MOV     DPH,?XSP + 1
   \   000042   E0           MOVX    A,@DPTR
   \   000043   2A           ADD     A,R2
   \   000044   F0           MOVX    @DPTR,A
   1135          
   1136            // Start with the supplied index
   1137            if ( maxItems > StartIndex )
   \   000045   F8           MOV     R0,A
   \   000046   E5..         MOV     A,?V3
   \   000048   C3           CLR     C
   \   000049   98           SUBB    A,R0
   \   00004A   4003         JC      $+5
   \   00004C   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_0 & 0xFFFF
   1138            {
   1139              numItems = maxItems - StartIndex;
   \   00004F   E0           MOVX    A,@DPTR
   \   000050   C3           CLR     C
   \   000051   95..         SUBB    A,?V3
   \   000053   F5..         MOV     ?V1,A
   1140          
   1141              // limit the size of the list
   1142              if ( numItems > ZDO_MAX_LQI_ITEMS )
   \   000055   C3           CLR     C
   \   000056   9404         SUBB    A,#0x4
   \   000058   4003         JC      ??ZDO_ProcessMgmtLqiReq_1
   1143                numItems = ZDO_MAX_LQI_ITEMS;
   \   00005A   75..03       MOV     ?V1,#0x3
   1144          
   1145              // Allocate the memory to build the table
   1146              table = (ZDP_MgmtLqiItem_t*)osal_mem_alloc( (short)
   1147                        ( numItems * sizeof( ZDP_MgmtLqiItem_t ) ) );
   \                     ??ZDO_ProcessMgmtLqiReq_1:
   \   00005D                ; Setup parameters for call to function osal_mem_alloc
   \   00005D   E5..         MOV     A,?V1
   \   00005F   75F01A       MOV     B,#0x1a
   \   000062   A4           MUL     AB
   \   000063   FA           MOV     R2,A
   \   000064   ABF0         MOV     R3,B
   \   000066   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000069   7401         MOV     A,#0x1
   \   00006B   12....       LCALL   ?XSTACK_DISP0_8
   \   00006E   12....       LCALL   ??Subroutine198_0 & 0xFFFF
   1148          
   1149              if ( table != NULL )
   \                     ??CrossCallReturnLabel_337:
   \   000071   7401         MOV     A,#0x1
   \   000073   12....       LCALL   ?XSTACK_DISP0_8
   \   000076   12....       LCALL   ??Subroutine216_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_443:
   \   000079   7003         JNZ     $+5
   \   00007B   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_2 & 0xFFFF
   1150              {
   1151                x = 0;
   \   00007E   75..00       MOV     ?V2,#0x0
   1152                item = table;
   \   000081   7401         MOV     A,#0x1
   \   000083   12....       LCALL   ?XSTACK_DISP0_8
   \   000086   12....       LCALL   ??Subroutine208_0 & 0xFFFF
   1153                index = StartIndex;
   \                     ??CrossCallReturnLabel_378:
   \   000089   85....       MOV     ?V0,?V3
   \   00008C   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_3 & 0xFFFF
   1154          
   1155                // Loop through associated items and build list
   1156                for ( ; x < numItems; x++ )
   1157                {
   1158                  if ( index < aItems )
   1159                  {
   1160                    // get next associated device
   1161                    aDevice = AssocFindDevice( index++ );
   1162          
   1163                    // set basic fields
   1164                    item->panID   = _NIB.nwkPanId;
   1165                    osal_cpyExtAddr( item->extPanID, _NIB.extendedPANID );
   1166                    item->nwkAddr = aDevice->shortAddr;
   1167                    item->permit  = ZDP_MGMT_BOOL_UNKNOWN;
   1168                    item->depth   = 0xFF;
   1169                    item->lqi     = aDevice->linkInfo.rxLqi;
   1170          
   1171                    // set extented address
   1172                    nwkEntry.user    = ADDRMGR_USER_DEFAULT;
   1173                    nwkEntry.nwkAddr = aDevice->shortAddr;
   1174          
   1175                    if ( AddrMgrEntryLookupNwk( &nwkEntry ) == TRUE )
   1176                    {
   1177                      osal_cpyExtAddr( item->extAddr, nwkEntry.extAddr );
   1178                    }
   1179                    else
   1180                    {
   1181                      osal_memset( item->extAddr, 0xFF, Z_EXTADDR_LEN );
   \                     ??ZDO_ProcessMgmtLqiReq_4:
   \   00008F                ; Setup parameters for call to function osal_memset
   \   00008F   7C08         MOV     R4,#0x8
   \   000091   7D00         MOV     R5,#0x0
   \   000093   79FF         MOV     R1,#-0x1
   \   000095   AA..         MOV     R2,?V6
   \   000097   AB..         MOV     R3,?V7
   \   000099   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   1182                    }
   1183          
   1184                    // use association info to set other fields
   1185                    if ( aDevice->nodeRelation == PARENT )
   \                     ??ZDO_ProcessMgmtLqiReq_5:
   \   00009C   7403         MOV     A,#0x3
   \   00009E   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A1   E0           MOVX    A,@DPTR
   \   0000A2   2404         ADD     A,#0x4
   \   0000A4   F8           MOV     R0,A
   \   0000A5   A3           INC     DPTR
   \   0000A6   E0           MOVX    A,@DPTR
   \   0000A7   3400         ADDC    A,#0x0
   \   0000A9   F9           MOV     R1,A
   \   0000AA   EE           MOV     A,R6
   \   0000AB   2415         ADD     A,#0x15
   \   0000AD   FA           MOV     R2,A
   \   0000AE   E4           CLR     A
   \   0000AF   3F           ADDC    A,R7
   \   0000B0   FB           MOV     R3,A
   \   0000B1   EE           MOV     A,R6
   \   0000B2   2414         ADD     A,#0x14
   \   0000B4   FC           MOV     R4,A
   \   0000B5   E4           CLR     A
   \   0000B6   3F           ADDC    A,R7
   \   0000B7   FD           MOV     R5,A
   \   0000B8   8882         MOV     DPL,R0
   \   0000BA   8983         MOV     DPH,R1
   \   0000BC   E0           MOVX    A,@DPTR
   \   0000BD   7033         JNZ     ??ZDO_ProcessMgmtLqiReq_6
   1186                    {
   1187                      if (  aDevice->shortAddr == 0 )
   \   0000BF   7403         MOV     A,#0x3
   \   0000C1   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C4   12....       LCALL   ?Subroutine98 & 0xFFFF
   \                     ??CrossCallReturnLabel_136:
   \   0000C7   12....       LCALL   ??Subroutine216_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_444:
   \   0000CA   8C82         MOV     DPL,R4
   \   0000CC   8D83         MOV     DPH,R5
   \   0000CE   7008         JNZ     ??ZDO_ProcessMgmtLqiReq_7
   1188                      {
   1189                        item->devType = ZDP_MGMT_DT_COORD;
   \   0000D0   E4           CLR     A
   \   0000D1   F0           MOVX    @DPTR,A
   1190                        item->depth = 0;
   \   0000D2   12....       LCALL   ?Subroutine124 & 0xFFFF
   1191                      }
   \                     ??CrossCallReturnLabel_184:
   \   0000D5   E4           CLR     A
   \   0000D6   800F         SJMP    ??ZDO_ProcessMgmtLqiReq_8
   1192                      else
   1193                      {
   1194                        item->devType = ZDP_MGMT_DT_ROUTER;
   \                     ??ZDO_ProcessMgmtLqiReq_7:
   \   0000D8   7401         MOV     A,#0x1
   \   0000DA   F0           MOVX    @DPTR,A
   1195                        item->depth = _NIB.nodeDepth - 1;
   \   0000DB   90....       MOV     DPTR,#_NIB + 52
   \   0000DE   E0           MOVX    A,@DPTR
   \   0000DF   14           DEC     A
   \   0000E0   C0E0         PUSH    A
   \   0000E2   12....       LCALL   ?Subroutine124 & 0xFFFF
   1196                      }
   \                     ??CrossCallReturnLabel_185:
   \   0000E5   D0E0         POP     A
   \                     ??ZDO_ProcessMgmtLqiReq_8:
   \   0000E7   F0           MOVX    @DPTR,A
   1197          
   1198                      item->rxOnIdle = ZDP_MGMT_BOOL_UNKNOWN;
   \   0000E8   8A82         MOV     DPL,R2
   \   0000EA   8B83         MOV     DPH,R3
   \   0000EC   12....       LCALL   ?Subroutine16 & 0xFFFF
   1199                      item->relation = ZDP_MGMT_REL_PARENT;
   1200                    }
   \                     ??CrossCallReturnLabel_346:
   \   0000EF   E4           CLR     A
   \   0000F0   8032         SJMP    ??ZDO_ProcessMgmtLqiReq_9
   1201                    else
   1202                    {
   1203                      // If not parent, then it's a child
   1204                      item->depth = _NIB.nodeDepth + 1;
   \                     ??ZDO_ProcessMgmtLqiReq_6:
   \   0000F2   90....       MOV     DPTR,#_NIB + 52
   \   0000F5   E0           MOVX    A,@DPTR
   \   0000F6   04           INC     A
   \   0000F7   C0E0         PUSH    A
   \   0000F9   12....       LCALL   ?Subroutine124 & 0xFFFF
   \                     ??CrossCallReturnLabel_186:
   \   0000FC   D0E0         POP     A
   \   0000FE   12....       LCALL   ?Subroutine37 & 0xFFFF
   1205          
   1206                      if ( aDevice->nodeRelation < CHILD_FFD )
   \                     ??CrossCallReturnLabel_38:
   \   000101   C3           CLR     C
   \   000102   9403         SUBB    A,#0x3
   \   000104   8C82         MOV     DPL,R4
   \   000106   8D83         MOV     DPH,R5
   \   000108   4003         JC      $+5
   \   00010A   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_10 & 0xFFFF
   1207                      {
   1208                        item->devType = ZDP_MGMT_DT_ENDDEV;
   \   00010D   7402         MOV     A,#0x2
   \   00010F   12....       LCALL   ?Subroutine37 & 0xFFFF
   1209          
   1210                        if ( aDevice->nodeRelation == CHILD_RFD )
   1211                        {
   1212                          item->rxOnIdle = FALSE;
   1213                        }
   1214                        else
   1215                        {
   1216                          item->rxOnIdle = TRUE;
   1217                        }
   1218                      }
   \                     ??CrossCallReturnLabel_39:
   \   000112   6401         XRL     A,#0x1
   \   000114   7003         JNZ     $+5
   \   000116   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_11 & 0xFFFF
   1219                      else
   1220                      {
   1221                        item->devType = ZDP_MGMT_DT_ROUTER;
   1222          
   1223                        if ( aDevice->nodeRelation == CHILD_FFD )
   1224                        {
   1225                          item->rxOnIdle = FALSE;
   1226                        }
   1227                        else
   1228                        {
   1229                          item->rxOnIdle = TRUE;
   \                     ??ZDO_ProcessMgmtLqiReq_12:
   \   000119   8A82         MOV     DPL,R2
   \   00011B   8B83         MOV     DPH,R3
   \   00011D   7401         MOV     A,#0x1
   1230                        }
   \                     ??ZDO_ProcessMgmtLqiReq_13:
   \   00011F   12....       LCALL   ??Subroutine200_0 & 0xFFFF
   1231                      }
   1232          
   1233                      item->relation = ZDP_MGMT_REL_CHILD;
   \                     ??CrossCallReturnLabel_348:
   \   000122   7401         MOV     A,#0x1
   \                     ??ZDO_ProcessMgmtLqiReq_9:
   \   000124   F0           MOVX    @DPTR,A
   1234                    }
   1235          
   1236                    item++;
   \   000125   EE           MOV     A,R6
   \   000126   241A         ADD     A,#0x1a
   \   000128   FE           MOV     R6,A
   \   000129   5001         JNC     ??ZDO_ProcessMgmtLqiReq_14
   \   00012B   0F           INC     R7
   \                     ??ZDO_ProcessMgmtLqiReq_14:
   \   00012C   05..         INC     ?V2
   \                     ??ZDO_ProcessMgmtLqiReq_3:
   \   00012E   E5..         MOV     A,?V2
   \   000130   C3           CLR     C
   \   000131   95..         SUBB    A,?V1
   \   000133   4003         JC      $+5
   \   000135   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_15 & 0xFFFF
   \   000138   E5..         MOV     A,?V0
   \   00013A   C3           CLR     C
   \   00013B   95..         SUBB    A,?V4
   \   00013D   4003         JC      $+5
   \   00013F   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_16 & 0xFFFF
   \   000142                ; Setup parameters for call to function AssocFindDevice
   \   000142   A9..         MOV     R1,?V0
   \   000144   12....       LCALL   `??AssocFindDevice::?relay`; Banked call to: AssocFindDevice
   \   000147   7403         MOV     A,#0x3
   \   000149   12....       LCALL   ?XSTACK_DISP0_8
   \   00014C   12....       LCALL   ??Subroutine198_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_338:
   \   00014F   05..         INC     ?V0
   \   000151   90....       MOV     DPTR,#_NIB + 33
   \   000154   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   000157   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   00015A   7403         MOV     A,#0x3
   \   00015C   12....       LCALL   ?XSTACK_DISP0_8
   \   00015F   12....       LCALL   ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_306:
   \   000162   EE           MOV     A,R6
   \   000163   12....       LCALL   ??Subroutine211_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_392:
   \   000166   3F           ADDC    A,R7
   \   000167   F583         MOV     DPH,A
   \   000169   E8           MOV     A,R0
   \   00016A   F0           MOVX    @DPTR,A
   \   00016B   A3           INC     DPTR
   \   00016C   E9           MOV     A,R1
   \   00016D   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   000170   7403         MOV     A,#0x3
   \   000172   12....       LCALL   ?XSTACK_DISP0_8
   \   000175   12....       LCALL   ?Subroutine68 & 0xFFFF
   \                     ??CrossCallReturnLabel_88:
   \   000178   E0           MOVX    A,@DPTR
   \   000179   C0E0         PUSH    A
   \   00017B   12....       LCALL   ?Subroutine130 & 0xFFFF
   \                     ??CrossCallReturnLabel_200:
   \   00017E   D0E0         POP     A
   \   000180   F0           MOVX    @DPTR,A
   \   000181   7407         MOV     A,#0x7
   \   000183   12....       LCALL   ?XSTACK_DISP0_8
   \   000186   E4           CLR     A
   \   000187   F0           MOVX    @DPTR,A
   \   000188   7403         MOV     A,#0x3
   \   00018A   12....       LCALL   ?XSTACK_DISP0_8
   \   00018D   12....       LCALL   ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_307:
   \   000190   7408         MOV     A,#0x8
   \   000192   12....       LCALL   ?XSTACK_DISP0_8
   \   000195   12....       LCALL   ??Subroutine196_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_316:
   \   000198   EE           MOV     A,R6
   \   000199   240A         ADD     A,#0xa
   \   00019B   F5..         MOV     ?V6,A
   \   00019D   E4           CLR     A
   \   00019E   3F           ADDC    A,R7
   \   00019F   F5..         MOV     ?V7,A
   \   0001A1                ; Setup parameters for call to function AddrMgrEntryLookupNwk
   \   0001A1   7407         MOV     A,#0x7
   \   0001A3   12....       LCALL   ?XSTACK_DISP101_8
   \   0001A6   12....       LCALL   `??AddrMgrEntryLookupNwk::?relay`; Banked call to: AddrMgrEntryLookupNwk
   \   0001A9   E9           MOV     A,R1
   \   0001AA   6401         XRL     A,#0x1
   \   0001AC   6003         JZ      $+5
   \   0001AE   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_4 & 0xFFFF
   \   0001B1                ; Setup parameters for call to function sAddrExtCpy
   \   0001B1   740A         MOV     A,#0xa
   \   0001B3   12....       LCALL   ?XSTACK_DISP0_8
   \   0001B6   AC82         MOV     R4,DPL
   \   0001B8   AD83         MOV     R5,DPH
   \   0001BA   AA..         MOV     R2,?V6
   \   0001BC   AB..         MOV     R3,?V7
   \   0001BE   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   0001C1   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_5 & 0xFFFF
   \                     ??ZDO_ProcessMgmtLqiReq_10:
   \   0001C4   7401         MOV     A,#0x1
   \   0001C6   12....       LCALL   ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   0001C9   6403         XRL     A,#0x3
   \   0001CB   6003         JZ      $+5
   \   0001CD   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_12 & 0xFFFF
   \                     ??ZDO_ProcessMgmtLqiReq_11:
   \   0001D0   8A82         MOV     DPL,R2
   \   0001D2   8B83         MOV     DPH,R3
   \   0001D4   E4           CLR     A
   \   0001D5   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_13 & 0xFFFF
   1237                  }
   1238                  else
   1239                  {
   1240                    if ( StartIndex <= aItems )
   \                     ??ZDO_ProcessMgmtLqiReq_16:
   \   0001D8   E5..         MOV     A,?V4
   \   0001DA   C3           CLR     C
   \   0001DB   95..         SUBB    A,?V3
   \   0001DD   4005         JC      ??ZDO_ProcessMgmtLqiReq_17
   1241                      // Start with 1st neighbor
   1242                      index = 0;
   \   0001DF   75..00       MOV     ?V0,#0x0
   \   0001E2   801C         SJMP    ??ZDO_ProcessMgmtLqiReq_18
   1243                    else
   1244                      // Start with >1st neighbor
   1245                      index = StartIndex - aItems;
   \                     ??ZDO_ProcessMgmtLqiReq_17:
   \   0001E4   E5..         MOV     A,?V3
   \   0001E6   C3           CLR     C
   \   0001E7   95..         SUBB    A,?V4
   \   0001E9   F5..         MOV     ?V0,A
   \   0001EB   8013         SJMP    ??ZDO_ProcessMgmtLqiReq_18
   1246                    break;
   1247                  }
   1248                }
   1249          
   1250                // Loop through neighbor items and finish list
   1251                for ( ; x < numItems; x++ )
   1252                {
   1253                  // Add next neighbor table item
   1254                  NLME_GetRequest( nwkNeighborTable, index++, &entry );
   1255          
   1256                  // set ZDP_MgmtLqiItem_t fields
   1257                  item->panID    = entry.panId;
   1258                  osal_cpyExtAddr( item->extPanID, _NIB.extendedPANID );
   1259                  osal_memset( item->extAddr, 0xFF, Z_EXTADDR_LEN );
   1260                  item->nwkAddr  = entry.neighborAddress;
   1261                  item->rxOnIdle = ZDP_MGMT_BOOL_UNKNOWN;
   1262                  item->relation = ZDP_MGMT_REL_UNKNOWN;
   1263                  item->permit   = ZDP_MGMT_BOOL_UNKNOWN;
   1264                  item->depth    = 0xFF;
   1265                  item->lqi      = entry.linkInfo.rxLqi;
   1266          
   1267                  if ( item->nwkAddr == 0 )
   1268                  {
   1269                    item->devType = ZDP_MGMT_DT_COORD;
   1270                  }
   1271                  else
   1272                  {
   1273                    item->devType = ZDP_MGMT_DT_ROUTER;
   \                     ??ZDO_ProcessMgmtLqiReq_19:
   \   0001ED   7401         MOV     A,#0x1
   \                     ??ZDO_ProcessMgmtLqiReq_20:
   \   0001EF   F0           MOVX    @DPTR,A
   1274                  }
   1275          
   1276                  item++;
   \   0001F0   EE           MOV     A,R6
   \   0001F1   241A         ADD     A,#0x1a
   \   0001F3   FE           MOV     R6,A
   \   0001F4   5001         JNC     ??ZDO_ProcessMgmtLqiReq_21
   \   0001F6   0F           INC     R7
   \                     ??ZDO_ProcessMgmtLqiReq_21:
   \   0001F7   05..         INC     ?V2
   \                     ??ZDO_ProcessMgmtLqiReq_15:
   \   0001F9   E5..         MOV     A,?V2
   \   0001FB   C3           CLR     C
   \   0001FC   95..         SUBB    A,?V1
   \   0001FE   507C         JNC     ??ZDO_ProcessMgmtLqiReq_2
   \                     ??ZDO_ProcessMgmtLqiReq_18:
   \   000200                ; Setup parameters for call to function NLME_GetRequest
   \   000200   7414         MOV     A,#0x14
   \   000202   12....       LCALL   ?XSTACK_DISP102_8
   \   000205   AA..         MOV     R2,?V0
   \   000207   7B00         MOV     R3,#0x0
   \   000209   7987         MOV     R1,#-0x79
   \   00020B   12....       LCALL   `??NLME_GetRequest::?relay`; Banked call to: NLME_GetRequest
   \   00020E   05..         INC     ?V0
   \   000210   741E         MOV     A,#0x1e
   \   000212   12....       LCALL   ?XSTACK_DISP0_8
   \   000215   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   000218   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   00021B                ; Setup parameters for call to function osal_memset
   \   00021B   7C08         MOV     R4,#0x8
   \   00021D   7D00         MOV     R5,#0x0
   \   00021F   79FF         MOV     R1,#-0x1
   \   000221   EE           MOV     A,R6
   \   000222   240A         ADD     A,#0xa
   \   000224   FA           MOV     R2,A
   \   000225   E4           CLR     A
   \   000226   3F           ADDC    A,R7
   \   000227   FB           MOV     R3,A
   \   000228   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   \   00022B   EE           MOV     A,R6
   \   00022C   2412         ADD     A,#0x12
   \   00022E   F8           MOV     R0,A
   \   00022F   E4           CLR     A
   \   000230   3F           ADDC    A,R7
   \   000231   F9           MOV     R1,A
   \   000232   7414         MOV     A,#0x14
   \   000234   12....       LCALL   ?XSTACK_DISP0_8
   \   000237   12....       LCALL   ??Subroutine214_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_418:
   \   00023A   8882         MOV     DPL,R0
   \   00023C   8983         MOV     DPH,R1
   \   00023E   12....       LCALL   ??Subroutine198_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_339:
   \   000241   EE           MOV     A,R6
   \   000242   12....       LCALL   ??Subroutine222_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_472:
   \   000245   3F           ADDC    A,R7
   \   000246   F583         MOV     DPH,A
   \   000248   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_347:
   \   00024B   7403         MOV     A,#0x3
   \   00024D   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   000250   7423         MOV     A,#0x23
   \   000252   12....       LCALL   ?XSTACK_DISP0_8
   \   000255   E0           MOVX    A,@DPTR
   \   000256   C0E0         PUSH    A
   \   000258   12....       LCALL   ?Subroutine130 & 0xFFFF
   \                     ??CrossCallReturnLabel_201:
   \   00025B   D0E0         POP     A
   \   00025D   F0           MOVX    @DPTR,A
   \   00025E   EE           MOV     A,R6
   \   00025F   2414         ADD     A,#0x14
   \   000261   FA           MOV     R2,A
   \   000262   E4           CLR     A
   \   000263   3F           ADDC    A,R7
   \   000264   FB           MOV     R3,A
   \   000265   8882         MOV     DPL,R0
   \   000267   8983         MOV     DPH,R1
   \   000269   12....       LCALL   ??Subroutine216_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_445:
   \   00026C   8A82         MOV     DPL,R2
   \   00026E   8B83         MOV     DPH,R3
   \   000270   6003         JZ      $+5
   \   000272   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_19 & 0xFFFF
   \   000275   E4           CLR     A
   \   000276   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_20 & 0xFFFF
   1277                }
   1278              }
   1279            }
   1280            else
   1281            {
   1282              numItems = 0;
   \                     ??ZDO_ProcessMgmtLqiReq_0:
   \   000279   75..00       MOV     ?V1,#0x0
   1283            }
   1284          
   1285            // Send response
   1286            ZDP_MgmtLqiRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZSuccess, maxItems,
   1287                            StartIndex, numItems, table, false );
   \                     ??ZDO_ProcessMgmtLqiReq_2:
   \   00027C                ; Setup parameters for call to function ZDP_MgmtLqiRsp
   \   00027C   75..00       MOV     ?V2,#0x0
   \   00027F   78..         MOV     R0,#?V2
   \   000281   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000284   7402         MOV     A,#0x2
   \   000286   12....       LCALL   ?XSTACK_DISP0_8
   \   000289   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00028C   78..         MOV     R0,#?V1
   \   00028E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000291   E5..         MOV     A,?V3
   \   000293   F5..         MOV     ?V1,A
   \   000295   78..         MOV     R0,#?V1
   \   000297   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00029A   7405         MOV     A,#0x5
   \   00029C   12....       LCALL   ?XSTACK_DISP0_8
   \   00029F   E0           MOVX    A,@DPTR
   \   0002A0   FD           MOV     R5,A
   \   0002A1   7C00         MOV     R4,#0x0
   \   0002A3   740A         MOV     A,#0xa
   \   0002A5   12....       LCALL   ?XSTACK_DISP0_8
   \   0002A8   12....       LCALL   ?Subroutine91 & 0xFFFF
   \                     ??CrossCallReturnLabel_120:
   \   0002AB   740A         MOV     A,#0xa
   \   0002AD   12....       LCALL   ?XSTACK_DISP0_8
   \   0002B0   12....       LCALL   ?Subroutine64 & 0xFFFF
   \                     ??CrossCallReturnLabel_81:
   \   0002B3   12....       LCALL   `??ZDP_MgmtLqiRsp::?relay`; Banked call to: ZDP_MgmtLqiRsp
   \   0002B6   7405         MOV     A,#0x5
   \   0002B8   12....       LCALL   ?DEALLOC_XSTACK8
   1288          
   1289            if ( table )
   \   0002BB   7401         MOV     A,#0x1
   \   0002BD   12....       LCALL   ?XSTACK_DISP0_8
   \   0002C0   12....       LCALL   ??Subroutine216_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_446:
   \   0002C3   600B         JZ      ??ZDO_ProcessMgmtLqiReq_22
   1290            {
   1291              osal_mem_free( table );
   \   0002C5                ; Setup parameters for call to function osal_mem_free
   \   0002C5   7401         MOV     A,#0x1
   \   0002C7   12....       LCALL   ?XSTACK_DISP0_8
   \   0002CA   12....       LCALL   ??Subroutine214_0 & 0xFFFF
   1292            }
   \                     ??CrossCallReturnLabel_419:
   \   0002CD   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   1293          }
   \                     ??ZDO_ProcessMgmtLqiReq_22:
   \   0002D0   742B         MOV     A,#0x2b
   \   0002D2   02....       LJMP    ?Subroutine6 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine130:
   \   000000   EE           MOV     A,R6
   \   000001   2419         ADD     A,#0x19
   \   000003   F582         MOV     DPL,A
   \   000005   E4           CLR     A
   \   000006   3F           ADDC    A,R7
   \   000007   F583         MOV     DPH,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine124:
   \   000000   12....       LCALL   ?Subroutine170 & 0xFFFF
   \                     ??CrossCallReturnLabel_254:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine170:
   \   000000   EE           MOV     A,R6
   \   000001   2418         ADD     A,#0x18
   \   000003   F582         MOV     DPL,A
   \   000005   E4           CLR     A
   \   000006   3F           ADDC    A,R7
   \   000007   F583         MOV     DPH,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine58:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002                REQUIRE ??Subroutine194_0
   \   000002                ; // Fall through to label ??Subroutine194_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   12....       LCALL   ?Subroutine152 & 0xFFFF
   \                     ??CrossCallReturnLabel_606:
   \   000003   8E82         MOV     DPL,R6
   \   000005   8F83         MOV     DPH,R7
   \   000007   E8           MOV     A,R0
   \   000008   F0           MOVX    @DPTR,A
   \   000009   A3           INC     DPTR
   \   00000A   E9           MOV     A,R1
   \   00000B   F0           MOVX    @DPTR,A
   \   00000C                ; Setup parameters for call to function sAddrExtCpy
   \   00000C                ; Setup parameters for call to function sAddrExtCpy
   \   00000C   7C..         MOV     R4,#(_NIB + 53) & 0xff
   \   00000E   7D..         MOV     R5,#((_NIB + 53) >> 8) & 0xff
   \   000010   12....       LCALL   ?Subroutine166 & 0xFFFF
   \                     ??CrossCallReturnLabel_249:
   \   000013   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   7402         MOV     A,#0x2
   \   000002                REQUIRE ??Subroutine200_0
   \   000002                ; // Fall through to label ??Subroutine200_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine200_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   EE           MOV     A,R6
   \   000002   2416         ADD     A,#0x16
   \   000004   F582         MOV     DPL,A
   \   000006   E4           CLR     A
   \   000007   3F           ADDC    A,R7
   \   000008   F583         MOV     DPH,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   EE           MOV     A,R6
   \   000002   2417         ADD     A,#0x17
   \   000004   F582         MOV     DPL,A
   \   000006   E4           CLR     A
   \   000007   3F           ADDC    A,R7
   \   000008   F583         MOV     DPH,A
   \   00000A   7402         MOV     A,#0x2
   \   00000C   F0           MOVX    @DPTR,A
   \   00000D   12....       LCALL   ?Subroutine170 & 0xFFFF
   \                     ??CrossCallReturnLabel_253:
   \   000010   74FF         MOV     A,#-0x1
   \   000012   F0           MOVX    @DPTR,A
   \   000013   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine91:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   2402         ADD     A,#0x2
   \   000003   FA           MOV     R2,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   3400         ADDC    A,#0x0
   \   000008   FB           MOV     R3,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine64:
   \   000000   12....       LCALL   ?Subroutine147 & 0xFFFF
   \                     ??CrossCallReturnLabel_229:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine50:
   \   000000   12....       LCALL   ??Subroutine231_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_537:
   \   000003   12....       LCALL   ?Subroutine165 & 0xFFFF
   \                     ??CrossCallReturnLabel_354:
   \   000006   38           ADDC    A,R0
   \   000007   F583         MOV     DPH,A
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   12....       LCALL   ?Subroutine158 & 0xFFFF
   \                     ??CrossCallReturnLabel_285:
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine211_0:
   \   000000   2412         ADD     A,#0x12
   \   000002   F582         MOV     DPL,A
   \   000004   E4           CLR     A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine98:
   \   000000   12....       LCALL   ?Subroutine175 & 0xFFFF
   \                     ??CrossCallReturnLabel_613:
   \   000003   F583         MOV     DPH,A
   \   000005   8882         MOV     DPL,R0
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine222_0:
   \   000000   2415         ADD     A,#0x15
   \   000002   F582         MOV     DPL,A
   \   000004   E4           CLR     A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   12....       LCALL   ?Subroutine141 & 0xFFFF
   \                     ??CrossCallReturnLabel_217:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine141:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8882         MOV     DPL,R0
   \   000003   8983         MOV     DPH,R1
   \   000005   E0           MOVX    A,@DPTR
   \   000006   22           RET
   1294          
   1295          /*********************************************************************
   1296           * @fn          ZDO_ProcessMgmtNwkDiscReq
   1297           *
   1298           * @brief       This function handles parsing the incoming Management
   1299           *              Network Discover request and starts the request.
   1300           *
   1301           * @param       inMsg - incoming message (request)
   1302           *
   1303           * @return      none
   1304           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1305          void ZDO_ProcessMgmtNwkDiscReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtNwkDiscReq:
   1306          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 7
   \   000005   74F9         MOV     A,#-0x7
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   12....       LCALL   ?Subroutine106 & 0xFFFF
   1307            NLME_ScanFields_t scan;
   1308            uint8             index;
   1309            uint8             *msg;
   1310          
   1311            msg = inMsg->asdu;
   \                     ??CrossCallReturnLabel_154:
   \   00000D   12....       LCALL   ?Subroutine78 & 0xFFFF
   1312            scan.channels = osal_build_uint32( msg, 4 );
   \                     ??CrossCallReturnLabel_101:
   \   000010   12....       LCALL   `??osal_build_uint32::?relay`; Banked call to: osal_build_uint32
   \   000013   EA           MOV     A,R2
   \   000014   F8           MOV     R0,A
   \   000015   EB           MOV     A,R3
   \   000016   F9           MOV     R1,A
   \   000017   EC           MOV     A,R4
   \   000018   FA           MOV     R2,A
   \   000019   ED           MOV     A,R5
   \   00001A   FB           MOV     R3,A
   \   00001B   85..82       MOV     DPL,?XSP + 0
   \   00001E   85..83       MOV     DPH,?XSP + 1
   \   000021   12....       LCALL   ?XSTORE_R0123
   1313            msg += 4;
   1314            scan.duration = *msg++;
   \   000024   8E82         MOV     DPL,R6
   \   000026   8F83         MOV     DPH,R7
   \   000028   A3           INC     DPTR
   \   000029   A3           INC     DPTR
   \   00002A   A3           INC     DPTR
   \   00002B   A3           INC     DPTR
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   C0E0         PUSH    A
   \   00002F   7404         MOV     A,#0x4
   \   000031   12....       LCALL   ?XSTACK_DISP0_8
   \   000034   D0E0         POP     A
   \   000036   12....       LCALL   ?Subroutine137 & 0xFFFF
   1315            index         = *msg;
   \                     ??CrossCallReturnLabel_212:
   \   000039   E0           MOVX    A,@DPTR
   \   00003A   F8           MOV     R0,A
   1316            scan.scanType = ZMAC_ACTIVE_SCAN;
   \   00003B   7405         MOV     A,#0x5
   \   00003D   12....       LCALL   ?XSTACK_DISP0_8
   \   000040   7401         MOV     A,#0x1
   \   000042   F0           MOVX    @DPTR,A
   1317            scan.scanApp  = NLME_DISC_SCAN;
   \   000043   7406         MOV     A,#0x6
   \   000045   12....       LCALL   ?XSTACK_DISP0_8
   \   000048   7401         MOV     A,#0x1
   \   00004A   F0           MOVX    @DPTR,A
   1318          
   1319            // Save off the information to be used for the response
   1320            zdappMgmtNwkDiscReqInProgress          = true;
   \   00004B   90....       MOV     DPTR,#zdappMgmtNwkDiscReqInProgress
   \   00004E   F0           MOVX    @DPTR,A
   1321            zdappMgmtNwkDiscRspAddr.addrMode       = Addr16Bit;
   \   00004F   90....       MOV     DPTR,#zdappMgmtNwkDiscRspAddr + 8
   \   000052   04           INC     A
   \   000053   12....       LCALL   ?Subroutine39 & 0xFFFF
   1322            zdappMgmtNwkDiscRspAddr.addr.shortAddr = inMsg->srcAddr.addr.shortAddr;
   \                     ??CrossCallReturnLabel_44:
   \   000056   12....       LCALL   ??Subroutine214_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_420:
   \   000059   90....       MOV     DPTR,#zdappMgmtNwkDiscRspAddr
   \   00005C   12....       LCALL   ??Subroutine198_0 & 0xFFFF
   1323            zdappMgmtNwkDiscStartIndex             = index;
   \                     ??CrossCallReturnLabel_340:
   \   00005F   E8           MOV     A,R0
   \   000060   90....       MOV     DPTR,#zdappMgmtNwkDiscStartIndex
   \   000063   F0           MOVX    @DPTR,A
   1324            zdappMgmtNwkDiscRspTransSeq            = inMsg->TransSeq;
   \   000064   12....       LCALL   ?Subroutine114 & 0xFFFF
   \                     ??CrossCallReturnLabel_164:
   \   000067   E0           MOVX    A,@DPTR
   \   000068   90....       MOV     DPTR,#zdappMgmtNwkDiscRspTransSeq
   \   00006B   F0           MOVX    @DPTR,A
   1325          
   1326            if ( NLME_NwkDiscReq2( &scan ) != ZSuccess )
   \   00006C                ; Setup parameters for call to function NLME_NwkDiscReq2
   \   00006C   AA..         MOV     R2,?XSP + 0
   \   00006E   AB..         MOV     R3,?XSP + 1
   \   000070   12....       LCALL   `??NLME_NwkDiscReq2::?relay`; Banked call to: NLME_NwkDiscReq2
   \   000073   E9           MOV     A,R1
   \   000074   6003         JZ      ??ZDO_ProcessMgmtNwkDiscReq_0
   1327            {
   1328              NLME_NwkDiscTerm();
   \   000076                ; Setup parameters for call to function NLME_NwkDiscTerm
   \   000076   12....       LCALL   `??NLME_NwkDiscTerm::?relay`; Banked call to: NLME_NwkDiscTerm
   1329          
   1330              // zdappMgmtNwkDiscReqInProgress will be reset in the confirm callback
   1331            }
   1332          }
   \                     ??ZDO_ProcessMgmtNwkDiscReq_0:
   \   000079   7407         MOV     A,#0x7
   \   00007B   02....       LJMP    ??Subroutine185_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine106:
   \   000000   8A..         MOV     ?V0,R2
   \   000002   8B..         MOV     ?V1,R3
   \   000004   EA           MOV     A,R2
   \   000005   12....       LCALL   ?Subroutine165 & 0xFFFF
   \                     ??CrossCallReturnLabel_355:
   \   000008   35..         ADDC    A,?V1
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine155:
   \   000000   F583         MOV     DPH,A
   \   000002                REQUIRE ??Subroutine208_0
   \   000002                ; // Fall through to label ??Subroutine208_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine114:
   \   000000   E5..         MOV     A,?V0
   \   000002   240F         ADD     A,#0xf
   \   000004   12....       LCALL   ?Subroutine168 & 0xFFFF
   \                     ??CrossCallReturnLabel_550:
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function osal_memcpy
   \   000001   85..82       MOV     DPL,?V0
   \   000004   85..83       MOV     DPH,?V1
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine168:
   \   000000   F582         MOV     DPL,A
   \   000002   E4           CLR     A
   \   000003                REQUIRE ??Subroutine232_0
   \   000003                ; // Fall through to label ??Subroutine232_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine232_0:
   \   000000   35..         ADDC    A,?V1
   \   000002   F583         MOV     DPH,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine137:
   \   000000   12....       LCALL   ?Subroutine173 & 0xFFFF
   \                     ??CrossCallReturnLabel_389:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine173:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine78:
   \   000000   12....       LCALL   ?Subroutine155 & 0xFFFF
   \                     ??CrossCallReturnLabel_381:
   \   000003                ; Setup parameters for call to function osal_build_uint32
   \   000003                ; Setup parameters for call to function osal_build_uint32
   \   000003   7904         MOV     R1,#0x4
   \   000005   EE           MOV     A,R6
   \   000006   FA           MOV     R2,A
   \   000007   EF           MOV     A,R7
   \   000008   FB           MOV     R3,A
   \   000009   22           RET
   1333          
   1334          #if defined ( ZDO_MGMT_NWKDISC_RESPONSE )
   1335          /*********************************************************************
   1336           * @fn          ZDO_FinishProcessingMgmtNwkDiscReq
   1337           *
   1338           * @brief       This function finishes the processing of the Management
   1339           *              Network Discover Request and generates the response.
   1340           *
   1341           *   Note:      This function will limit the number of items returned
   1342           *              to ZDO_MAX_NWKDISC_ITEMS items.
   1343           *
   1344           * @param       ResultCountSrcAddr - source of the request
   1345           * @param       msg - pointer to incoming message
   1346           * @param       SecurityUse -
   1347           *
   1348           * @return      none
   1349           */
   1350          void ZDO_FinishProcessingMgmtNwkDiscReq( byte ResultCount,
   1351                                                   networkDesc_t *NetworkList )
   1352          {
   1353            byte count, i;
   1354            networkDesc_t *newDesc = NULL, *pList = NetworkList;
   1355          
   1356            if ( ZSTACK_ROUTER_BUILD )
   1357            {
   1358              // Look for my PanID.
   1359              while ( pList )
   1360              {
   1361                if ( pList->panId == _NIB.nwkPanId )
   1362                {
   1363                  break;
   1364                }
   1365          
   1366          
   1367                if ( !pList->nextDesc )
   1368                {
   1369                  break;
   1370                }
   1371                pList = pList->nextDesc;
   1372              }
   1373          
   1374          
   1375              // If my Pan not present (query to a star network ZC or an isolated ZR?),
   1376              // prepend it.
   1377              if ( !pList || (pList->panId != _NIB.nwkPanId) )
   1378              {
   1379                newDesc = (networkDesc_t *)osal_mem_alloc( sizeof( networkDesc_t ) );
   1380                if ( newDesc )
   1381                {
   1382                  byte pJoin;
   1383          
   1384                  newDesc->panId = _NIB.nwkPanId;
   1385                  newDesc->logicalChannel = _NIB.nwkLogicalChannel;
   1386                  newDesc->beaconOrder = _NIB.beaconOrder;
   1387                  newDesc->superFrameOrder = _NIB.superFrameOrder;
   1388                  newDesc->version = NLME_GetProtocolVersion();
   1389                  newDesc->stackProfile = zgStackProfile;
   1390                  //Extended PanID
   1391                  osal_cpyExtAddr( newDesc->extendedPANID, _NIB.extendedPANID);
   1392          
   1393                  ZMacGetReq( ZMacAssociationPermit, &pJoin );
   1394                  newDesc->chosenRouter = ((pJoin) ? ZDAppNwkAddr.addr.shortAddr :
   1395                                                     INVALID_NODE_ADDR);
   1396          
   1397                  newDesc->nextDesc = NetworkList;
   1398                  NetworkList = newDesc;
   1399                  ResultCount++;
   1400                }
   1401              }
   1402            }
   1403          
   1404            // Calc the count and apply a max count.
   1405            if ( zdappMgmtNwkDiscStartIndex > ResultCount )
   1406            {
   1407              count = 0;
   1408            }
   1409            else
   1410            {
   1411              count = ResultCount - zdappMgmtNwkDiscStartIndex;
   1412              if ( count > ZDO_MAX_NWKDISC_ITEMS )
   1413              {
   1414                count = ZDO_MAX_NWKDISC_ITEMS;
   1415              }
   1416          
   1417              // Move the list pointer up to the start index.
   1418              for ( i = 0; i < zdappMgmtNwkDiscStartIndex; i++ )
   1419              {
   1420                NetworkList = NetworkList->nextDesc;
   1421              }
   1422            }
   1423          
   1424            ZDP_MgmtNwkDiscRsp( zdappMgmtNwkDiscRspTransSeq,
   1425                               &zdappMgmtNwkDiscRspAddr, ZSuccess, ResultCount,
   1426                                zdappMgmtNwkDiscStartIndex,
   1427                                count,
   1428                                NetworkList,
   1429                                false );
   1430          
   1431            if ( ZSTACK_ROUTER_BUILD )
   1432            {
   1433              if ( newDesc != NULL )
   1434              {
   1435                osal_mem_free( newDesc );
   1436              }
   1437            }
   1438          
   1439            NLME_NwkDiscTerm();
   1440          }
   1441          #endif
   1442          
   1443          /*********************************************************************
   1444           * @fn          ZDO_ProcessMgmtRtgReq
   1445           *
   1446           * @brief       This function finishes the processing of the Management
   1447           *              Routing Request and generates the response.
   1448           *
   1449           *   Note:      This function will limit the number of items returned
   1450           *              to ZDO_MAX_RTG_ITEMS items.
   1451           *
   1452           * @param       inMsg - incoming message (request)
   1453           *
   1454           * @return      none
   1455           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine59:
   \   000000   F583         MOV     DPH,A
   \   000002                REQUIRE ??Subroutine188_0
   \   000002                ; // Fall through to label ??Subroutine188_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1456          void ZDO_ProcessMgmtRtgReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtRtgReq:
   1457          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V6,R2
   \   00000C   8B..         MOV     ?V7,R3
   1458            byte x;
   1459            byte maxNumItems;
   1460            byte numItems = 0;
   \   00000E   7E00         MOV     R6,#0x0
   1461            uint8 *pBuf = NULL;
   \   000010   8E..         MOV     ?V4,R6
   \   000012   8E..         MOV     ?V5,R6
   1462            rtgItem_t *pList;
   1463            uint8 StartIndex = inMsg->asdu[0];
   \   000014   12....       LCALL   ?Subroutine110 & 0xFFFF
   \                     ??CrossCallReturnLabel_351:
   \   000017   35..         ADDC    A,?V7
   \   000019   12....       LCALL   ?Subroutine59 & 0xFFFF
   \                     ??CrossCallReturnLabel_282:
   \   00001C   F5..         MOV     ?V2,A
   1464          
   1465            // Get the number of table items
   1466            NLME_GetRequest( nwkNumRoutingTableEntries, 0, &maxNumItems );
   \   00001E                ; Setup parameters for call to function NLME_GetRequest
   \   00001E   AC..         MOV     R4,?XSP + 0
   \   000020   AD..         MOV     R5,?XSP + 1
   \   000022   7A00         MOV     R2,#0x0
   \   000024   7B00         MOV     R3,#0x0
   \   000026   799D         MOV     R1,#-0x63
   \   000028   12....       LCALL   `??NLME_GetRequest::?relay`; Banked call to: NLME_GetRequest
   1467          
   1468            if ( maxNumItems > StartIndex )
   \   00002B   85..82       MOV     DPL,?XSP + 0
   \   00002E   85..83       MOV     DPH,?XSP + 1
   \   000031   E0           MOVX    A,@DPTR
   \   000032   F8           MOV     R0,A
   \   000033   E5..         MOV     A,?V2
   \   000035   C3           CLR     C
   \   000036   98           SUBB    A,R0
   \   000037   506C         JNC     ??ZDO_ProcessMgmtRtgReq_0
   1469            {
   1470              numItems = maxNumItems - StartIndex;    // Start at the passed in index
   \   000039   E0           MOVX    A,@DPTR
   \   00003A   C3           CLR     C
   \   00003B   95..         SUBB    A,?V2
   \   00003D   FE           MOV     R6,A
   1471          
   1472              // limit the size of the list
   1473              if ( numItems > ZDO_MAX_RTG_ITEMS )
   \   00003E   C3           CLR     C
   \   00003F   940B         SUBB    A,#0xb
   \   000041   4002         JC      ??ZDO_ProcessMgmtRtgReq_1
   1474              {
   1475                numItems = ZDO_MAX_RTG_ITEMS;
   \   000043   7E0A         MOV     R6,#0xa
   1476              }
   1477          
   1478              // Allocate the memory to build the table
   1479              pBuf = osal_mem_alloc( (short)(sizeof( rtgItem_t ) * numItems) );
   \                     ??ZDO_ProcessMgmtRtgReq_1:
   \   000045                ; Setup parameters for call to function osal_mem_alloc
   \   000045   EE           MOV     A,R6
   \   000046   75F006       MOV     B,#0x6
   \   000049   A4           MUL     AB
   \   00004A   FA           MOV     R2,A
   \   00004B   ABF0         MOV     R3,B
   \   00004D   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000050   8A..         MOV     ?V0,R2
   \   000052   8B..         MOV     ?V1,R3
   \   000054   8A..         MOV     ?V4,R2
   \   000056   8B..         MOV     ?V5,R3
   1480          
   1481              if ( pBuf != NULL )
   \   000058   EA           MOV     A,R2
   \   000059   45..         ORL     A,?V5
   \   00005B   6046         JZ      ??ZDO_ProcessMgmtRtgReq_2
   1482              {
   1483                // Convert buffer to list
   1484                pList = (rtgItem_t *)pBuf;
   1485          
   1486                // Loop through items and build list
   1487                for ( x = 0; x < numItems; x++ )
   \   00005D   7F00         MOV     R7,#0x0
   \   00005F   8011         SJMP    ??ZDO_ProcessMgmtRtgReq_3
   1488                {
   1489                  NLME_GetRequest( nwkRoutingTable, (uint16)(x + StartIndex), (void*)pList );
   1490          
   1491                  // Remap the status to the RoutingTableList Record Format defined in the ZigBee spec
   1492                  switch( pList->status )
   1493                  {
   1494                    case RT_ACTIVE:
   1495                      pList->status = ZDO_MGMT_RTG_ENTRY_ACTIVE;
   1496                      break;
   1497          
   1498                    case RT_DISC:
   1499                      pList->status = ZDO_MGMT_RTG_ENTRY_DISCOVERY_UNDERWAY;
   1500                      break;
   1501          
   1502                    case RT_LINK_FAIL:
   1503                      pList->status = ZDO_MGMT_RTG_ENTRY_DISCOVERY_FAILED;
   \                     ??ZDO_ProcessMgmtRtgReq_4:
   \   000061   7402         MOV     A,#0x2
   \   000063   F0           MOVX    @DPTR,A
   1504          
   1505                    case RT_INIT:
   1506                    case RT_REPAIR:
   1507                    default:
   1508                      pList->status = ZDO_MGMT_RTG_ENTRY_INACTIVE;
   \                     ??ZDO_ProcessMgmtRtgReq_5:
   \   000064   7403         MOV     A,#0x3
   \                     ??ZDO_ProcessMgmtRtgReq_6:
   \   000066   F0           MOVX    @DPTR,A
   1509                      break;
   1510                  }
   1511          
   1512                  // Increment pointer to next record
   1513                  pList++;
   \   000067   E5..         MOV     A,?V0
   \   000069   2406         ADD     A,#0x6
   \   00006B   F5..         MOV     ?V0,A
   \   00006D   5002         JNC     ??ZDO_ProcessMgmtRtgReq_7
   \   00006F   05..         INC     ?V1
   \                     ??ZDO_ProcessMgmtRtgReq_7:
   \   000071   0F           INC     R7
   \                     ??ZDO_ProcessMgmtRtgReq_3:
   \   000072   EF           MOV     A,R7
   \   000073   C3           CLR     C
   \   000074   9E           SUBB    A,R6
   \   000075   502E         JNC     ??ZDO_ProcessMgmtRtgReq_0
   \   000077                ; Setup parameters for call to function NLME_GetRequest
   \   000077   AC..         MOV     R4,?V0
   \   000079   AD..         MOV     R5,?V1
   \   00007B   EF           MOV     A,R7
   \   00007C   AA..         MOV     R2,?V2
   \   00007E   2A           ADD     A,R2
   \   00007F   FA           MOV     R2,A
   \   000080   E4           CLR     A
   \   000081   3400         ADDC    A,#0x0
   \   000083   FB           MOV     R3,A
   \   000084   798B         MOV     R1,#-0x75
   \   000086   12....       LCALL   `??NLME_GetRequest::?relay`; Banked call to: NLME_GetRequest
   \   000089   E5..         MOV     A,?V0
   \   00008B   2405         ADD     A,#0x5
   \   00008D   12....       LCALL   ?Subroutine168 & 0xFFFF
   \                     ??CrossCallReturnLabel_547:
   \   000090   E0           MOVX    A,@DPTR
   \   000091   14           DEC     A
   \   000092   6008         JZ      ??ZDO_ProcessMgmtRtgReq_8
   \   000094   14           DEC     A
   \   000095   6008         JZ      ??ZDO_ProcessMgmtRtgReq_9
   \   000097   14           DEC     A
   \   000098   60C7         JZ      ??ZDO_ProcessMgmtRtgReq_4
   \   00009A   80C8         SJMP    ??ZDO_ProcessMgmtRtgReq_5
   \                     ??ZDO_ProcessMgmtRtgReq_8:
   \   00009C   E4           CLR     A
   \   00009D   80C7         SJMP    ??ZDO_ProcessMgmtRtgReq_6
   \                     ??ZDO_ProcessMgmtRtgReq_9:
   \   00009F   7401         MOV     A,#0x1
   \   0000A1   80C3         SJMP    ??ZDO_ProcessMgmtRtgReq_6
   1514                }
   1515              }
   1516              else
   1517              {
   1518                numItems = 0;
   \                     ??ZDO_ProcessMgmtRtgReq_2:
   \   0000A3   7E00         MOV     R6,#0x0
   1519              }
   1520            }
   1521          
   1522            // Send response
   1523            ZDP_MgmtRtgRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZSuccess, maxNumItems, StartIndex, numItems,
   1524                                  (rtgItem_t *)pBuf, false );
   \                     ??ZDO_ProcessMgmtRtgReq_0:
   \   0000A5                ; Setup parameters for call to function ZDP_MgmtRtgRsp
   \   0000A5   75..00       MOV     ?V0,#0x0
   \   0000A8   78..         MOV     R0,#?V0
   \   0000AA   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000AD   78..         MOV     R0,#?V4
   \   0000AF   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000B2   EE           MOV     A,R6
   \   0000B3   F5..         MOV     ?V0,A
   \   0000B5   78..         MOV     R0,#?V0
   \   0000B7   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000BA   E5..         MOV     A,?V2
   \   0000BC   F5..         MOV     ?V0,A
   \   0000BE   78..         MOV     R0,#?V0
   \   0000C0   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000C3   7405         MOV     A,#0x5
   \   0000C5   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C8   E0           MOVX    A,@DPTR
   \   0000C9   FD           MOV     R5,A
   \   0000CA   7C00         MOV     R4,#0x0
   \   0000CC   E5..         MOV     A,?V6
   \   0000CE   2402         ADD     A,#0x2
   \   0000D0   FA           MOV     R2,A
   \   0000D1   E4           CLR     A
   \   0000D2   35..         ADDC    A,?V7
   \   0000D4   FB           MOV     R3,A
   \   0000D5   E5..         MOV     A,?V6
   \   0000D7   12....       LCALL   ?Subroutine117 & 0xFFFF
   \                     ??CrossCallReturnLabel_172:
   \   0000DA   35..         ADDC    A,?V7
   \   0000DC   F583         MOV     DPH,A
   \   0000DE   E0           MOVX    A,@DPTR
   \   0000DF   F9           MOV     R1,A
   \   0000E0   12....       LCALL   `??ZDP_MgmtRtgRsp::?relay`; Banked call to: ZDP_MgmtRtgRsp
   \   0000E3   7405         MOV     A,#0x5
   \   0000E5   12....       LCALL   ?DEALLOC_XSTACK8
   1525          
   1526            if ( pBuf )
   \   0000E8   E5..         MOV     A,?V4
   \   0000EA   45..         ORL     A,?V5
   \   0000EC   6007         JZ      ??ZDO_ProcessMgmtRtgReq_10
   1527            {
   1528              osal_mem_free( pBuf );
   \   0000EE                ; Setup parameters for call to function osal_mem_free
   \   0000EE   AA..         MOV     R2,?V4
   \   0000F0   AB..         MOV     R3,?V5
   \   0000F2   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   1529            }
   1530          }
   \                     ??ZDO_ProcessMgmtRtgReq_10:
   \   0000F5   7401         MOV     A,#0x1
   \   0000F7                REQUIRE ?Subroutine6
   \   0000F7                ; // Fall through to label ?Subroutine6
   1531          
   1532          /*********************************************************************
   1533           * @fn          ZDO_ProcessMgmtBindReq
   1534           *
   1535           * @brief       This function finishes the processing of the Management
   1536           *              Bind Request and generates the response.
   1537           *
   1538           *   Note:      This function will limit the number of items returned
   1539           *              to ZDO_MAX_BIND_ITEMS items.
   1540           *
   1541           * @param       inMsg - incoming message (request)
   1542           *
   1543           * @return      none
   1544           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1545          void ZDO_ProcessMgmtBindReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtBindReq:
   1546          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   7402         MOV     A,#0x2
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   12....       LCALL   ??Subroutine198_0 & 0xFFFF
   1547          #if defined ( REFLECTOR )
   1548            byte x;
   1549            uint16 maxNumItems;
   1550            uint16 numItems;
   1551            uint8 *pBuf = NULL;
   \                     ??CrossCallReturnLabel_341:
   \   000012   75..00       MOV     ?V2,#0x0
   \   000015   75..00       MOV     ?V3,#0x0
   1552            apsBindingItem_t *pList;
   1553            uint8 StartIndex = inMsg->asdu[0];
   \   000018   7402         MOV     A,#0x2
   \   00001A   12....       LCALL   ?XSTACK_DISP0_8
   \   00001D   12....       LCALL   ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   000020   F5..         MOV     ?V6,A
   1554            uint8 status;
   1555          
   1556            // Get the number of table items
   1557            APSME_GetRequest( apsNumBindingTableEntries, 0, (byte*)(&maxNumItems) );
   \   000022                ; Setup parameters for call to function APSME_GetRequest
   \   000022   AC..         MOV     R4,?XSP + 0
   \   000024   AD..         MOV     R5,?XSP + 1
   \   000026   7A00         MOV     R2,#0x0
   \   000028   7B00         MOV     R3,#0x0
   \   00002A   79A3         MOV     R1,#-0x5d
   \   00002C   12....       LCALL   `??APSME_GetRequest::?relay`; Banked call to: APSME_GetRequest
   1558          
   1559            if ( maxNumItems > StartIndex )
   \   00002F   A8..         MOV     R0,?V6
   \   000031   12....       LCALL   ?Subroutine71 & 0xFFFF
   \                     ??CrossCallReturnLabel_431:
   \   000034   C3           CLR     C
   \   000035   E8           MOV     A,R0
   \   000036   9A           SUBB    A,R2
   \   000037   E4           CLR     A
   \   000038   9B           SUBB    A,R3
   \   000039   5078         JNC     ??ZDO_ProcessMgmtBindReq_0
   1560            {
   1561              numItems = maxNumItems - StartIndex;    // Start at the passed in index
   \   00003B   85..82       MOV     DPL,?XSP + 0
   \   00003E   85..83       MOV     DPH,?XSP + 1
   \   000041   E0           MOVX    A,@DPTR
   \   000042   C3           CLR     C
   \   000043   98           SUBB    A,R0
   \   000044   FE           MOV     R6,A
   \   000045   A3           INC     DPTR
   \   000046   E0           MOVX    A,@DPTR
   \   000047   9400         SUBB    A,#0x0
   \   000049   FF           MOV     R7,A
   1562            }
   1563            else
   1564            {
   1565              numItems = 0;
   1566            }
   1567          
   1568            // limit the size of the list
   1569            if ( numItems > ZDO_MAX_BIND_ITEMS )
   \   00004A   C3           CLR     C
   \   00004B   EE           MOV     A,R6
   \   00004C   9404         SUBB    A,#0x4
   \   00004E   EF           MOV     A,R7
   \   00004F   9400         SUBB    A,#0x0
   \   000051   4006         JC      ??ZDO_ProcessMgmtBindReq_1
   1570            {
   1571              numItems = ZDO_MAX_BIND_ITEMS;
   \   000053   7E03         MOV     R6,#0x3
   \   000055   7F00         MOV     R7,#0x0
   \   000057   8004         SJMP    ??ZDO_ProcessMgmtBindReq_2
   1572            }
   1573          
   1574            // Allocate the memory to build the table
   1575            if ( numItems && (pBuf = osal_mem_alloc( sizeof( apsBindingItem_t ) * numItems )) )
   \                     ??ZDO_ProcessMgmtBindReq_1:
   \   000059   EE           MOV     A,R6
   \   00005A   4F           ORL     A,R7
   \   00005B   6056         JZ      ??ZDO_ProcessMgmtBindReq_0
   \                     ??ZDO_ProcessMgmtBindReq_2:
   \   00005D                ; Setup parameters for call to function osal_mem_alloc
   \   00005D   EE           MOV     A,R6
   \   00005E   FA           MOV     R2,A
   \   00005F   EF           MOV     A,R7
   \   000060   FB           MOV     R3,A
   \   000061   EA           MOV     A,R2
   \   000062   75F015       MOV     B,#0x15
   \   000065   A4           MUL     AB
   \   000066   FA           MOV     R2,A
   \   000067   A8F0         MOV     R0,B
   \   000069   75F015       MOV     B,#0x15
   \   00006C   EB           MOV     A,R3
   \   00006D   A4           MUL     AB
   \   00006E   28           ADD     A,R0
   \   00006F   FB           MOV     R3,A
   \   000070   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000073   8A..         MOV     ?V2,R2
   \   000075   8B..         MOV     ?V3,R3
   \   000077   EA           MOV     A,R2
   \   000078   45..         ORL     A,?V3
   \   00007A   6037         JZ      ??ZDO_ProcessMgmtBindReq_0
   1576            {
   1577              status = ZSuccess;
   \   00007C   75..00       MOV     ?V1,#0x0
   1578          
   1579              // Convert buffer to list
   1580              pList = (apsBindingItem_t *)pBuf;
   \   00007F   8A..         MOV     ?V4,R2
   \   000081   8B..         MOV     ?V5,R3
   1581          
   1582              // Loop through items and build list
   1583              for ( x = 0; x < numItems; x++ )
   \   000083   75..00       MOV     ?V0,#0x0
   \   000086   801F         SJMP    ??ZDO_ProcessMgmtBindReq_3
   1584              {
   1585                APSME_GetRequest( apsBindingTable, (x + StartIndex), (void*)pList );
   \                     ??ZDO_ProcessMgmtBindReq_4:
   \   000088                ; Setup parameters for call to function APSME_GetRequest
   \   000088   AC..         MOV     R4,?V4
   \   00008A   AD..         MOV     R5,?V5
   \   00008C   AA..         MOV     R2,?V6
   \   00008E   E5..         MOV     A,?V0
   \   000090   2A           ADD     A,R2
   \   000091   FA           MOV     R2,A
   \   000092   E4           CLR     A
   \   000093   3400         ADDC    A,#0x0
   \   000095   FB           MOV     R3,A
   \   000096   79A2         MOV     R1,#-0x5e
   \   000098   12....       LCALL   `??APSME_GetRequest::?relay`; Banked call to: APSME_GetRequest
   1586                pList++;
   \   00009B   E5..         MOV     A,?V4
   \   00009D   2415         ADD     A,#0x15
   \   00009F   F5..         MOV     ?V4,A
   \   0000A1   5002         JNC     ??ZDO_ProcessMgmtBindReq_5
   \   0000A3   05..         INC     ?V5
   1587              }
   \                     ??ZDO_ProcessMgmtBindReq_5:
   \   0000A5   05..         INC     ?V0
   \                     ??ZDO_ProcessMgmtBindReq_3:
   \   0000A7   C3           CLR     C
   \   0000A8   E5..         MOV     A,?V0
   \   0000AA   9E           SUBB    A,R6
   \   0000AB   E4           CLR     A
   \   0000AC   9F           SUBB    A,R7
   \   0000AD   40D9         JC      ??ZDO_ProcessMgmtBindReq_4
   \   0000AF   EE           MOV     A,R6
   \   0000B0   F9           MOV     R1,A
   \   0000B1   8005         SJMP    ??ZDO_ProcessMgmtBindReq_6
   1588          
   1589            }
   1590            else
   1591            {
   1592              status = ZDP_NOT_PERMITTED;
   \                     ??ZDO_ProcessMgmtBindReq_0:
   \   0000B3   75..8B       MOV     ?V1,#-0x75
   1593              numItems = 0;
   \   0000B6   7900         MOV     R1,#0x0
   1594            }
   1595          
   1596            // Send response
   1597            ZDP_MgmtBindRsp( inMsg->TransSeq, &(inMsg->srcAddr), status, (byte)maxNumItems, StartIndex,
   1598                             (byte)numItems, (apsBindingItem_t *)pBuf, false );
   \                     ??ZDO_ProcessMgmtBindReq_6:
   \   0000B8                ; Setup parameters for call to function ZDP_MgmtBindRsp
   \   0000B8   75..00       MOV     ?V0,#0x0
   \   0000BB   78..         MOV     R0,#?V0
   \   0000BD   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000C0   78..         MOV     R0,#?V2
   \   0000C2   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000C5   E9           MOV     A,R1
   \   0000C6   F5..         MOV     ?V0,A
   \   0000C8   78..         MOV     R0,#?V0
   \   0000CA   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000CD   E5..         MOV     A,?V6
   \   0000CF   F5..         MOV     ?V0,A
   \   0000D1   78..         MOV     R0,#?V0
   \   0000D3   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000D6   7405         MOV     A,#0x5
   \   0000D8   12....       LCALL   ?XSTACK_DISP0_8
   \   0000DB   E0           MOVX    A,@DPTR
   \   0000DC   FD           MOV     R5,A
   \   0000DD   AC..         MOV     R4,?V1
   \   0000DF   7407         MOV     A,#0x7
   \   0000E1   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E4   12....       LCALL   ?Subroutine91 & 0xFFFF
   \                     ??CrossCallReturnLabel_121:
   \   0000E7   7407         MOV     A,#0x7
   \   0000E9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000EC   12....       LCALL   ?Subroutine64 & 0xFFFF
   \                     ??CrossCallReturnLabel_82:
   \   0000EF   12....       LCALL   `??ZDP_MgmtBindRsp::?relay`; Banked call to: ZDP_MgmtBindRsp
   \   0000F2   7405         MOV     A,#0x5
   \   0000F4   12....       LCALL   ?DEALLOC_XSTACK8
   1599          
   1600            if ( pBuf )
   \   0000F7   E5..         MOV     A,?V2
   \   0000F9   45..         ORL     A,?V3
   \   0000FB   6007         JZ      ??ZDO_ProcessMgmtBindReq_7
   1601            {
   1602              osal_mem_free( pBuf );
   \   0000FD                ; Setup parameters for call to function osal_mem_free
   \   0000FD   AA..         MOV     R2,?V2
   \   0000FF   AB..         MOV     R3,?V3
   \   000101   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   1603            }
   1604          #else
   1605            (void)inMsg;
   1606          #endif
   1607          }
   \                     ??ZDO_ProcessMgmtBindReq_7:
   \   000104   7404         MOV     A,#0x4
   \   000106   12....       LCALL   ?DEALLOC_XSTACK8
   \   000109   7F07         MOV     R7,#0x7
   \   00010B   02....       LJMP    ?BANKED_LEAVE_XDATA
   1608          
   1609          /*********************************************************************
   1610           * @fn          ZDO_ProcessMgmtDirectJoinReq
   1611           *
   1612           * @brief       This function finishes the processing of the Management
   1613           *              Direct Join Request and generates the response.
   1614           *
   1615           * @param       inMsg - incoming message (request)
   1616           *
   1617           * @return      none
   1618           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1619          void ZDO_ProcessMgmtDirectJoinReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtDirectJoinReq:
   1620          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   12....       LCALL   ?Subroutine108 & 0xFFFF
   1621            uint8 *deviceAddr;
   1622            uint8 capInfo;
   1623            uint8 stat;
   1624          
   1625            // Parse the message
   1626            deviceAddr = inMsg->asdu;
   1627            capInfo = inMsg->asdu[Z_EXTADDR_LEN];
   1628          
   1629            stat = (byte) NLME_DirectJoinRequest( deviceAddr, capInfo );
   \                     ??CrossCallReturnLabel_358:
   \   00000D   F583         MOV     DPH,A
   \   00000F   12....       LCALL   ??Subroutine214_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_421:
   \   000012                ; Setup parameters for call to function NLME_DirectJoinRequest
   \   000012   8A82         MOV     DPL,R2
   \   000014   8B83         MOV     DPH,R3
   \   000016   A3           INC     DPTR
   \   000017   A3           INC     DPTR
   \   000018   A3           INC     DPTR
   \   000019   A3           INC     DPTR
   \   00001A   A3           INC     DPTR
   \   00001B   A3           INC     DPTR
   \   00001C   A3           INC     DPTR
   \   00001D   A3           INC     DPTR
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   F9           MOV     R1,A
   \   000020   12....       LCALL   `??NLME_DirectJoinRequest::?relay`; Banked call to: NLME_DirectJoinRequest
   \   000023   E9           MOV     A,R1
   \   000024   85..82       MOV     DPL,?XSP + 0
   \   000027   85..83       MOV     DPH,?XSP + 1
   \   00002A   F0           MOVX    @DPTR,A
   1630          
   1631            ZDP_MgmtDirectJoinRsp( inMsg->TransSeq, &(inMsg->srcAddr), stat, false );
   \   00002B                ; Setup parameters for call to function ZDP_SendData
   \   00002B   75..00       MOV     ?V0,#0x0
   \   00002E   78..         MOV     R0,#?V0
   \   000030   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000033   7401         MOV     A,#0x1
   \   000035   12....       LCALL   ?XSTACK_DISP100_8
   \   000038   88..         MOV     ?V0,R0
   \   00003A   89..         MOV     ?V1,R1
   \   00003C   78..         MOV     R0,#?V0
   \   00003E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000041   75..35       MOV     ?V0,#0x35
   \   000044   75..80       MOV     ?V1,#-0x80
   \   000047   78..         MOV     R0,#?V0
   \   000049   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004C   7901         MOV     R1,#0x1
   \   00004E   EE           MOV     A,R6
   \   00004F   2402         ADD     A,#0x2
   \   000051   FC           MOV     R4,A
   \   000052   E4           CLR     A
   \   000053   3F           ADDC    A,R7
   \   000054   FD           MOV     R5,A
   \   000055   EE           MOV     A,R6
   \   000056   240F         ADD     A,#0xf
   \   000058   FA           MOV     R2,A
   \   000059   E4           CLR     A
   \   00005A   3F           ADDC    A,R7
   \   00005B   FB           MOV     R3,A
   \   00005C   12....       LCALL   `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   00005F   7405         MOV     A,#0x5
   \   000061   12....       LCALL   ?DEALLOC_XSTACK8
   1632          }
   \   000064                REQUIRE ?Subroutine7
   \   000064                ; // Fall through to label ?Subroutine7

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   7401         MOV     A,#0x1
   \   000002   02....       LJMP    ??Subroutine185_0 & 0xFFFF
   1633          
   1634          /*********************************************************************
   1635           * @fn          ZDO_ProcessMgmtLeaveReq
   1636           *
   1637           * @brief       This function processes a Management Leave Request
   1638           *              and generates the response.
   1639           *
   1640           * @param       inMsg - incoming message (request)
   1641           *
   1642           * @return      none
   1643           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1644          void ZDO_ProcessMgmtLeaveReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtLeaveReq:
   1645          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 6
   \   000005   74FA         MOV     A,#-0x6
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   12....       LCALL   ?Subroutine106 & 0xFFFF
   1646            NLME_LeaveReq_t req;
   1647            ZStatus_t       status;
   1648            uint8           option;
   1649            uint8 *msg = inMsg->asdu;
   \                     ??CrossCallReturnLabel_155:
   \   00000D   12....       LCALL   ?Subroutine83 & 0xFFFF
   1650          
   1651            if ( ( AddrMgrExtAddrValid( msg ) == FALSE                 ) ||
   1652                 ( osal_ExtAddrEqual( msg, NLME_GetExtAddr() ) == TRUE )    )
   \                     ??CrossCallReturnLabel_364:
   \   000010   FA           MOV     R2,A
   \   000011   EF           MOV     A,R7
   \   000012   FB           MOV     R3,A
   \   000013   12....       LCALL   `??AddrMgrExtAddrValid::?relay`; Banked call to: AddrMgrExtAddrValid
   \   000016   E9           MOV     A,R1
   \   000017   6017         JZ      ??ZDO_ProcessMgmtLeaveReq_0
   \   000019                ; Setup parameters for call to function NLME_GetExtAddr
   \   000019   12....       LCALL   `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
   \   00001C   8A..         MOV     ?V2,R2
   \   00001E   8B..         MOV     ?V3,R3
   \   000020   AC..         MOV     R4,?V2
   \   000022   AD..         MOV     R5,?V3
   \   000024                ; Setup parameters for call to function sAddrExtCmp
   \   000024   EE           MOV     A,R6
   \   000025   FA           MOV     R2,A
   \   000026   EF           MOV     A,R7
   \   000027   FB           MOV     R3,A
   \   000028   12....       LCALL   `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   00002B   E9           MOV     A,R1
   \   00002C   6401         XRL     A,#0x1
   \   00002E   700A         JNZ     ??ZDO_ProcessMgmtLeaveReq_1
   1653            {
   1654              // Remove this device
   1655              req.extAddr = NULL;
   \                     ??ZDO_ProcessMgmtLeaveReq_0:
   \   000030   7401         MOV     A,#0x1
   \   000032   12....       LCALL   ?XSTACK_DISP0_8
   \   000035   E4           CLR     A
   \   000036   F0           MOVX    @DPTR,A
   \   000037   A3           INC     DPTR
   \   000038   8009         SJMP    ??ZDO_ProcessMgmtLeaveReq_2
   1656            }
   1657            else
   1658            {
   1659              // Remove child device
   1660              req.extAddr = msg;
   \                     ??ZDO_ProcessMgmtLeaveReq_1:
   \   00003A   7401         MOV     A,#0x1
   \   00003C   12....       LCALL   ?XSTACK_DISP0_8
   \   00003F   EE           MOV     A,R6
   \   000040   F0           MOVX    @DPTR,A
   \   000041   A3           INC     DPTR
   \   000042   EF           MOV     A,R7
   1661            }
   \                     ??ZDO_ProcessMgmtLeaveReq_2:
   \   000043   12....       LCALL   ?Subroutine20 & 0xFFFF
   1662          
   1663            option = msg[Z_EXTADDR_LEN];
   \                     ??CrossCallReturnLabel_15:
   \   000046   F8           MOV     R0,A
   1664            if ( option & ZDP_MGMT_LEAVE_REQ_RC )
   \   000047   A2E6         MOV     C,0xE0 /* A   */.6
   \   000049   5008         JNC     ??ZDO_ProcessMgmtLeaveReq_3
   1665            {
   1666              req.removeChildren = TRUE;
   \   00004B   7403         MOV     A,#0x3
   \   00004D   12....       LCALL   ?XSTACK_DISP0_8
   \   000050   7401         MOV     A,#0x1
   \   000052   F0           MOVX    @DPTR,A
   1667            }
   1668          
   1669            if ( option & ZDP_MGMT_LEAVE_REQ_REJOIN )
   \                     ??ZDO_ProcessMgmtLeaveReq_3:
   \   000053   E8           MOV     A,R0
   \   000054   A2E7         MOV     C,0xE0 /* A   */.7
   \   000056   5008         JNC     ??ZDO_ProcessMgmtLeaveReq_4
   1670            {
   1671               req.rejoin = TRUE;
   \   000058   7404         MOV     A,#0x4
   \   00005A   12....       LCALL   ?XSTACK_DISP0_8
   \   00005D   7401         MOV     A,#0x1
   \   00005F   F0           MOVX    @DPTR,A
   1672            }
   1673          
   1674            req.silent = FALSE;
   \                     ??ZDO_ProcessMgmtLeaveReq_4:
   \   000060   7405         MOV     A,#0x5
   \   000062   12....       LCALL   ?XSTACK_DISP0_8
   \   000065   E4           CLR     A
   \   000066   F0           MOVX    @DPTR,A
   1675          
   1676            status = NLME_LeaveReq( &req );
   \   000067                ; Setup parameters for call to function NLME_LeaveReq
   \   000067   04           INC     A
   \   000068   12....       LCALL   ?XSTACK_DISP101_8
   \   00006B   12....       LCALL   `??NLME_LeaveReq::?relay`; Banked call to: NLME_LeaveReq
   \   00006E   E9           MOV     A,R1
   \   00006F   85..82       MOV     DPL,?XSP + 0
   \   000072   85..83       MOV     DPH,?XSP + 1
   \   000075   F0           MOVX    @DPTR,A
   1677          
   1678            ZDP_MgmtLeaveRsp( inMsg->TransSeq, &(inMsg->srcAddr), status, FALSE );
   \   000076                ; Setup parameters for call to function ZDP_SendData
   \   000076   75..00       MOV     ?V2,#0x0
   \   000079   78..         MOV     R0,#?V2
   \   00007B   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00007E   7401         MOV     A,#0x1
   \   000080   12....       LCALL   ?XSTACK_DISP100_8
   \   000083   88..         MOV     ?V2,R0
   \   000085   89..         MOV     ?V3,R1
   \   000087   78..         MOV     R0,#?V2
   \   000089   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00008C   75..34       MOV     ?V2,#0x34
   \   00008F   75..80       MOV     ?V3,#-0x80
   \   000092   78..         MOV     R0,#?V2
   \   000094   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000097   7901         MOV     R1,#0x1
   \   000099   E5..         MOV     A,?V0
   \   00009B   2402         ADD     A,#0x2
   \   00009D   FC           MOV     R4,A
   \   00009E   E4           CLR     A
   \   00009F   35..         ADDC    A,?V1
   \   0000A1   FD           MOV     R5,A
   \   0000A2   E5..         MOV     A,?V0
   \   0000A4   240F         ADD     A,#0xf
   \   0000A6   FA           MOV     R2,A
   \   0000A7   E4           CLR     A
   \   0000A8   35..         ADDC    A,?V1
   \   0000AA   FB           MOV     R3,A
   \   0000AB   12....       LCALL   `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   0000AE   7405         MOV     A,#0x5
   \   0000B0   12....       LCALL   ?DEALLOC_XSTACK8
   1679          }
   \   0000B3   7406         MOV     A,#0x6
   \   0000B5   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000B8                REQUIRE ?Subroutine2
   \   0000B8                ; // Fall through to label ?Subroutine2

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine83:
   \   000000   F583         MOV     DPH,A
   \   000002                REQUIRE ??Subroutine204_0
   \   000002                ; // Fall through to label ??Subroutine204_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   12....       LCALL   ?Subroutine137 & 0xFFFF
   \                     ??CrossCallReturnLabel_213:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   22           RET
   1680          
   1681          
   1682          /*********************************************************************
   1683           * @fn          ZDO_ProcessMgmtPermitJoinReq
   1684           *
   1685           * @brief       This function processes a Management Permit Join Request
   1686           *              and generates the response.
   1687           *
   1688           * @param       inMsg - incoming message (request)
   1689           *
   1690           * @return      none
   1691           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1692          void ZDO_ProcessMgmtPermitJoinReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtPermitJoinReq:
   1693          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   12....       LCALL   ?Subroutine108 & 0xFFFF
   1694            uint8 stat;
   1695            uint8 duration;
   1696            uint8 tcsig;
   1697          
   1698            duration = inMsg->asdu[ZDP_MGMT_PERMIT_JOIN_REQ_DURATION];
   1699            tcsig    = inMsg->asdu[ZDP_MGMT_PERMIT_JOIN_REQ_TC_SIG];
   1700          
   1701            // Set the network layer permit join duration
   1702            stat = (byte) NLME_PermitJoiningRequest( duration );
   \                     ??CrossCallReturnLabel_359:
   \   00000D   12....       LCALL   ?Subroutine59 & 0xFFFF
   \                     ??CrossCallReturnLabel_283:
   \   000010   F9           MOV     R1,A
   \   000011   12....       LCALL   `??NLME_PermitJoiningRequest::?relay`; Banked call to: NLME_PermitJoiningRequest
   \   000014   E9           MOV     A,R1
   \   000015   85..82       MOV     DPL,?XSP + 0
   \   000018   85..83       MOV     DPH,?XSP + 1
   \   00001B   F0           MOVX    @DPTR,A
   1703          
   1704            // Handle the Trust Center Significance
   1705            if ( ZG_SECURE_ENABLED && ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
   1706            {
   1707              if ( tcsig == TRUE )
   1708              {
   1709                ZDSecMgrPermitJoining( duration );
   1710              }
   1711            }
   1712          
   1713            // Send a response if unicast
   1714            if (inMsg->srcAddr.addr.shortAddr != NWK_BROADCAST_SHORTADDR)
   \   00001C   EE           MOV     A,R6
   \   00001D   2402         ADD     A,#0x2
   \   00001F   FC           MOV     R4,A
   \   000020   E4           CLR     A
   \   000021   3F           ADDC    A,R7
   \   000022   FD           MOV     R5,A
   \   000023   8C82         MOV     DPL,R4
   \   000025   8D83         MOV     DPH,R5
   \   000027   E0           MOVX    A,@DPTR
   \   000028   F4           CPL     A
   \   000029   7003         JNZ     ??ZDO_ProcessMgmtPermitJoinReq_0
   \   00002B   A3           INC     DPTR
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   F4           CPL     A
   \                     ??ZDO_ProcessMgmtPermitJoinReq_0:
   \   00002E   6032         JZ      ??ZDO_ProcessMgmtPermitJoinReq_1
   1715            {
   1716              ZDP_MgmtPermitJoinRsp( inMsg->TransSeq, &(inMsg->srcAddr), stat, false );
   \   000030                ; Setup parameters for call to function ZDP_SendData
   \   000030   75..00       MOV     ?V0,#0x0
   \   000033   78..         MOV     R0,#?V0
   \   000035   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000038   7401         MOV     A,#0x1
   \   00003A   12....       LCALL   ?XSTACK_DISP100_8
   \   00003D   88..         MOV     ?V0,R0
   \   00003F   89..         MOV     ?V1,R1
   \   000041   78..         MOV     R0,#?V0
   \   000043   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000046   75..36       MOV     ?V0,#0x36
   \   000049   75..80       MOV     ?V1,#-0x80
   \   00004C   78..         MOV     R0,#?V0
   \   00004E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000051   7901         MOV     R1,#0x1
   \   000053   EE           MOV     A,R6
   \   000054   240F         ADD     A,#0xf
   \   000056   FA           MOV     R2,A
   \   000057   E4           CLR     A
   \   000058   3F           ADDC    A,R7
   \   000059   FB           MOV     R3,A
   \   00005A   12....       LCALL   `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   00005D   7405         MOV     A,#0x5
   \   00005F   12....       LCALL   ?DEALLOC_XSTACK8
   1717            }
   1718          }
   \                     ??ZDO_ProcessMgmtPermitJoinReq_1:
   \   000062   02....       LJMP    ?Subroutine7 & 0xFFFF
   1719          
   1720          /*
   1721           * This function stub allows the next higher layer to be notified of
   1722           * a permit joining timeout.
   1723           */
   1724          /*********************************************************************
   1725           * @fn          ZDO_ProcessMgmtPermitJoinTimeout
   1726           *
   1727           * @brief       This function stub allows the next higher layer to be
   1728           *              notified of a permit joining timeout. Currently, this
   1729           *              directly bypasses the APS layer.
   1730           *
   1731           * @param       none
   1732           *
   1733           * @return      none
   1734           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1735          void ZDO_ProcessMgmtPermitJoinTimeout( void )
   \                     NLME_PermitJoiningTimeout:
   1736          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   1737            #if defined( ZDO_MGMT_PERMIT_JOIN_RESPONSE )
   1738            // Currently, only the ZDSecMgr needs to be notified
   1739            if ( ZG_SECURE_ENABLED && ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
   1740            {
   1741              ZDSecMgrPermitJoiningTimeout();
   1742            }
   1743            #endif
   1744          }
   \   000000   02....       LJMP    ?BRET
   1745          
   1746          /*********************************************************************
   1747           * @fn          ZDO_ProcessUserDescReq
   1748           *
   1749           * @brief       This function finishes the processing of the User
   1750           *              Descriptor Request and generates the response.
   1751           *
   1752           * @param       inMsg - incoming message (request)
   1753           *
   1754           * @return      none
   1755           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1756          void ZDO_ProcessUserDescReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessUserDescReq:
   1757          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 17
   \   000005   74EF         MOV     A,#-0x11
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   12....       LCALL   ?Subroutine106 & 0xFFFF
   1758            uint16 aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
   \                     ??CrossCallReturnLabel_156:
   \   00000D   12....       LCALL   ?Subroutine49 & 0xFFFF
   1759            UserDescriptorFormat_t userDesc;
   1760          
   1761            if ( (aoi == ZDAppNwkAddr.addr.shortAddr) && (ZSUCCESS == osal_nv_read(
   1762                       ZCD_NV_USERDESC, 0, sizeof(UserDescriptorFormat_t), &userDesc )) )
   \                     ??CrossCallReturnLabel_60:
   \   000010   E5..         MOV     A,?V0
   \   000012   240F         ADD     A,#0xf
   \   000014   F5..         MOV     ?V6,A
   \   000016   E4           CLR     A
   \   000017   35..         ADDC    A,?V1
   \   000019   F5..         MOV     ?V7,A
   \   00001B   E5..         MOV     A,?V0
   \   00001D   2402         ADD     A,#0x2
   \   00001F   F5..         MOV     ?V2,A
   \   000021   E4           CLR     A
   \   000022   35..         ADDC    A,?V1
   \   000024   F5..         MOV     ?V3,A
   \   000026   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   6E           XRL     A,R6
   \   00002B   7003         JNZ     ??ZDO_ProcessUserDescReq_0
   \   00002D   A3           INC     DPTR
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   6F           XRL     A,R7
   \                     ??ZDO_ProcessUserDescReq_0:
   \   000030   705B         JNZ     ??ZDO_ProcessUserDescReq_1
   \   000032                ; Setup parameters for call to function osal_nv_read
   \   000032   A8..         MOV     R0,?XSP + 0
   \   000034   A9..         MOV     R1,?XSP + 1
   \   000036   88..         MOV     ?V4,R0
   \   000038   89..         MOV     ?V5,R1
   \   00003A   78..         MOV     R0,#?V4
   \   00003C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003F   75..11       MOV     ?V4,#0x11
   \   000042   75..00       MOV     ?V5,#0x0
   \   000045   78..         MOV     R0,#?V4
   \   000047   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004A   7C00         MOV     R4,#0x0
   \   00004C   7D00         MOV     R5,#0x0
   \   00004E   7A81         MOV     R2,#-0x7f
   \   000050   7B00         MOV     R3,#0x0
   \   000052   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000055   7404         MOV     A,#0x4
   \   000057   12....       LCALL   ?DEALLOC_XSTACK8
   \   00005A   E9           MOV     A,R1
   \   00005B   7030         JNZ     ??ZDO_ProcessUserDescReq_1
   1763            {
   1764              ZDP_UserDescRsp( inMsg->TransSeq, &(inMsg->srcAddr), aoi, &userDesc, false );
   \   00005D                ; Setup parameters for call to function ZDP_UserDescRsp
   \   00005D   75..00       MOV     ?V0,#0x0
   \   000060   78..         MOV     R0,#?V0
   \   000062   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000065   7401         MOV     A,#0x1
   \   000067   12....       LCALL   ?XSTACK_DISP100_8
   \   00006A   88..         MOV     ?V0,R0
   \   00006C   89..         MOV     ?V1,R1
   \   00006E   78..         MOV     R0,#?V0
   \   000070   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000073   EE           MOV     A,R6
   \   000074   FC           MOV     R4,A
   \   000075   EF           MOV     A,R7
   \   000076   FD           MOV     R5,A
   \   000077   AA..         MOV     R2,?V2
   \   000079   AB..         MOV     R3,?V3
   \   00007B   85..82       MOV     DPL,?V6
   \   00007E   85..83       MOV     DPH,?V7
   \   000081   E0           MOVX    A,@DPTR
   \   000082   F9           MOV     R1,A
   \   000083   12....       LCALL   `??ZDP_UserDescRsp::?relay`; Banked call to: ZDP_UserDescRsp
   \   000086   7403         MOV     A,#0x3
   \   000088   12....       LCALL   ?DEALLOC_XSTACK8
   \   00008B   802F         SJMP    ??ZDO_ProcessUserDescReq_2
   1765            }
   1766            else
   1767            {
   1768              ZDP_GenericRsp(inMsg->TransSeq, &(inMsg->srcAddr),
   1769                     ZDP_NOT_SUPPORTED, aoi, User_Desc_rsp, inMsg->SecurityUse );
   \                     ??ZDO_ProcessUserDescReq_1:
   \   00008D                ; Setup parameters for call to function ZDP_GenericRsp
   \   00008D   75..11       MOV     ?V4,#0x11
   \   000090   75..80       MOV     ?V5,#-0x80
   \   000093   78..         MOV     R0,#?V4
   \   000095   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000098   8E..         MOV     ?V4,R6
   \   00009A   8F..         MOV     ?V5,R7
   \   00009C   78..         MOV     R0,#?V4
   \   00009E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A1   12....       LCALL   ?Subroutine111 & 0xFFFF
   1770            }
   \                     ??CrossCallReturnLabel_159:
   \   0000A4   E0           MOVX    A,@DPTR
   \   0000A5   FD           MOV     R5,A
   \   0000A6   7C84         MOV     R4,#-0x7c
   \   0000A8   AA..         MOV     R2,?V2
   \   0000AA   AB..         MOV     R3,?V3
   \   0000AC   85..82       MOV     DPL,?V6
   \   0000AF   85..83       MOV     DPH,?V7
   \   0000B2   E0           MOVX    A,@DPTR
   \   0000B3   F9           MOV     R1,A
   \   0000B4   12....       LCALL   `??ZDP_GenericRsp::?relay`; Banked call to: ZDP_GenericRsp
   \   0000B7   7404         MOV     A,#0x4
   \   0000B9   12....       LCALL   ?DEALLOC_XSTACK8
   1771          }
   \                     ??ZDO_ProcessUserDescReq_2:
   \   0000BC   7411         MOV     A,#0x11
   \   0000BE   02....       LJMP    ?Subroutine6 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine111:
   \   000000   E5..         MOV     A,?V0
   \   000002   240E         ADD     A,#0xe
   \   000004   12....       LCALL   ?Subroutine168 & 0xFFFF
   \                     ??CrossCallReturnLabel_549:
   \   000007   22           RET
   1772          
   1773          /*********************************************************************
   1774           * @fn          ZDO_ProcessUserDescSet
   1775           *
   1776           * @brief       This function finishes the processing of the User
   1777           *              Descriptor Set and generates the response.
   1778           *
   1779           * @param       inMsg - incoming message (request)
   1780           *
   1781           * @return      none
   1782           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1783          void ZDO_ProcessUserDescSet( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessUserDescSet:
   1784          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV     A,#-0x15
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V4,R2
   \   00000C   8B..         MOV     ?V5,R3
   1785            uint8 *msg;
   1786            uint16 aoi;
   1787            UserDescriptorFormat_t userDesc;
   1788            uint8 outMsg[3];
   1789            uint8 status;
   1790          
   1791            msg = inMsg->asdu;
   \   00000E   12....       LCALL   ?Subroutine110 & 0xFFFF
   \                     ??CrossCallReturnLabel_352:
   \   000011   35..         ADDC    A,?V5
   \   000013   12....       LCALL   ?Subroutine66 & 0xFFFF
   1792            aoi = BUILD_UINT16( msg[0], msg[1] );
   \                     ??CrossCallReturnLabel_85:
   \   000016   FA           MOV     R2,A
   \   000017   E4           CLR     A
   \   000018   CA           XCH     A,R2
   \   000019   FB           MOV     R3,A
   \   00001A   EC           MOV     A,R4
   \   00001B   2A           ADD     A,R2
   \   00001C   FE           MOV     R6,A
   \   00001D   E4           CLR     A
   \   00001E   3B           ADDC    A,R3
   \   00001F   FF           MOV     R7,A
   1793          
   1794            if ( aoi == ZDAppNwkAddr.addr.shortAddr )
   \   000020   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000023   E0           MOVX    A,@DPTR
   \   000024   6E           XRL     A,R6
   \   000025   7003         JNZ     ??ZDO_ProcessUserDescSet_0
   \   000027   A3           INC     DPTR
   \   000028   E0           MOVX    A,@DPTR
   \   000029   6F           XRL     A,R7
   \                     ??ZDO_ProcessUserDescSet_0:
   \   00002A   6003         JZ      $+5
   \   00002C   02....       LJMP    ??ZDO_ProcessUserDescSet_1 & 0xFFFF
   1795            {
   1796              userDesc.len = (msg[2] < AF_MAX_USER_DESCRIPTOR_LEN) ? msg[2] : AF_MAX_USER_DESCRIPTOR_LEN;
   \   00002F   8882         MOV     DPL,R0
   \   000031   8983         MOV     DPH,R1
   \   000033   A3           INC     DPTR
   \   000034   A3           INC     DPTR
   \   000035   E0           MOVX    A,@DPTR
   \   000036   FA           MOV     R2,A
   \   000037   9410         SUBB    A,#0x10
   \   000039   5004         JNC     ??ZDO_ProcessUserDescSet_2
   \   00003B   8A..         MOV     ?V3,R2
   \   00003D   8003         SJMP    ??ZDO_ProcessUserDescSet_3
   \                     ??ZDO_ProcessUserDescSet_2:
   \   00003F   75..10       MOV     ?V3,#0x10
   \                     ??ZDO_ProcessUserDescSet_3:
   \   000042   7404         MOV     A,#0x4
   \   000044   12....       LCALL   ?XSTACK_DISP0_8
   \   000047   E5..         MOV     A,?V3
   \   000049   F0           MOVX    @DPTR,A
   1797              msg ++;  // increment one for the length field
   1798          
   1799              osal_memcpy( userDesc.desc, &msg[2], userDesc.len );
   \   00004A                ; Setup parameters for call to function osal_memcpy
   \   00004A   8882         MOV     DPL,R0
   \   00004C   8983         MOV     DPH,R1
   \   00004E   A3           INC     DPTR
   \   00004F   A3           INC     DPTR
   \   000050   A3           INC     DPTR
   \   000051   A982         MOV     R1,DPL
   \   000053   AA83         MOV     R2,DPH
   \   000055   89..         MOV     ?V0,R1
   \   000057   8A..         MOV     ?V1,R2
   \   000059   75..00       MOV     ?V2,#0x0
   \   00005C   78..         MOV     R0,#?V0
   \   00005E   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000061   7407         MOV     A,#0x7
   \   000063   12....       LCALL   ?XSTACK_DISP0_8
   \   000066   E0           MOVX    A,@DPTR
   \   000067   FC           MOV     R4,A
   \   000068   7D00         MOV     R5,#0x0
   \   00006A   7408         MOV     A,#0x8
   \   00006C   12....       LCALL   ?XSTACK_DISP0_8
   \   00006F   AA82         MOV     R2,DPL
   \   000071   AB83         MOV     R3,DPH
   \   000073   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000076   7403         MOV     A,#0x3
   \   000078   12....       LCALL   ?DEALLOC_XSTACK8
   1800              osal_nv_write( ZCD_NV_USERDESC, 0, sizeof(UserDescriptorFormat_t), &userDesc );
   \   00007B                ; Setup parameters for call to function osal_nv_write
   \   00007B   7404         MOV     A,#0x4
   \   00007D   12....       LCALL   ?XSTACK_DISP100_8
   \   000080   88..         MOV     ?V0,R0
   \   000082   89..         MOV     ?V1,R1
   \   000084   78..         MOV     R0,#?V0
   \   000086   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000089   75..11       MOV     ?V0,#0x11
   \   00008C   75..00       MOV     ?V1,#0x0
   \   00008F   78..         MOV     R0,#?V0
   \   000091   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000094   7C00         MOV     R4,#0x0
   \   000096   7D00         MOV     R5,#0x0
   \   000098   7A81         MOV     R2,#-0x7f
   \   00009A   7B00         MOV     R3,#0x0
   \   00009C   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   00009F   7404         MOV     A,#0x4
   \   0000A1   12....       LCALL   ?DEALLOC_XSTACK8
   1801              if ( userDesc.len != 0 )
   \   0000A4   7404         MOV     A,#0x4
   \   0000A6   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A9   E0           MOVX    A,@DPTR
   \   0000AA   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   0000AD   6005         JZ      ??ZDO_ProcessUserDescSet_4
   1802              {
   1803                ZDO_Config_Node_Descriptor.UserDescAvail = TRUE;
   \   0000AF   E0           MOVX    A,@DPTR
   \   0000B0   D2E4         SETB    0xE0 /* A   */.4
   \   0000B2   8003         SJMP    ??ZDO_ProcessUserDescSet_5
   1804              }
   1805              else
   1806              {
   1807                ZDO_Config_Node_Descriptor.UserDescAvail = FALSE;
   \                     ??ZDO_ProcessUserDescSet_4:
   \   0000B4   E0           MOVX    A,@DPTR
   \   0000B5   C2E4         CLR     0xE0 /* A   */.4
   \                     ??ZDO_ProcessUserDescSet_5:
   \   0000B7   F0           MOVX    @DPTR,A
   1808              }
   1809          
   1810              status = ZDP_SUCCESS;
   \   0000B8   85..82       MOV     DPL,?XSP + 0
   \   0000BB   85..83       MOV     DPH,?XSP + 1
   \   0000BE   E4           CLR     A
   \   0000BF   8008         SJMP    ??ZDO_ProcessUserDescSet_6
   1811            }
   1812            else
   1813            {
   1814              status =  ZDP_NOT_SUPPORTED;
   \                     ??ZDO_ProcessUserDescSet_1:
   \   0000C1   85..82       MOV     DPL,?XSP + 0
   \   0000C4   85..83       MOV     DPH,?XSP + 1
   \   0000C7   7484         MOV     A,#-0x7c
   \                     ??ZDO_ProcessUserDescSet_6:
   \   0000C9   F0           MOVX    @DPTR,A
   1815            }
   1816          
   1817            outMsg[0] = status;
   \   0000CA   E0           MOVX    A,@DPTR
   \   0000CB   C0E0         PUSH    A
   \   0000CD   7401         MOV     A,#0x1
   \   0000CF   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D2   D0E0         POP     A
   \   0000D4   F0           MOVX    @DPTR,A
   1818            outMsg[1] = LO_UINT16( aoi );
   \   0000D5   7402         MOV     A,#0x2
   \   0000D7   12....       LCALL   ?XSTACK_DISP0_8
   \   0000DA   EE           MOV     A,R6
   \   0000DB   F0           MOVX    @DPTR,A
   1819            outMsg[2] = LO_UINT16( aoi );
   \   0000DC   7403         MOV     A,#0x3
   \   0000DE   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E1   EE           MOV     A,R6
   \   0000E2   F0           MOVX    @DPTR,A
   1820          
   1821            ZDP_SendData( &(inMsg->TransSeq), &(inMsg->srcAddr), User_Desc_conf, 3, outMsg,
   1822                         inMsg->SecurityUse );
   \   0000E3                ; Setup parameters for call to function ZDP_SendData
   \   0000E3   12....       LCALL   ?Subroutine112 & 0xFFFF
   \                     ??CrossCallReturnLabel_482:
   \   0000E6   35..         ADDC    A,?V5
   \   0000E8   12....       LCALL   ??Subroutine206_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_372:
   \   0000EB   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000EE   7402         MOV     A,#0x2
   \   0000F0   12....       LCALL   ?XSTACK_DISP100_8
   \   0000F3   88..         MOV     ?V0,R0
   \   0000F5   89..         MOV     ?V1,R1
   \   0000F7   78..         MOV     R0,#?V0
   \   0000F9   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000FC   75..14       MOV     ?V0,#0x14
   \   0000FF   75..80       MOV     ?V1,#-0x80
   \   000102   78..         MOV     R0,#?V0
   \   000104   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000107   7903         MOV     R1,#0x3
   \   000109   12....       LCALL   ?Subroutine116 & 0xFFFF
   \                     ??CrossCallReturnLabel_170:
   \   00010C   FA           MOV     R2,A
   \   00010D   E4           CLR     A
   \   00010E   35..         ADDC    A,?V5
   \   000110   FB           MOV     R3,A
   \   000111   12....       LCALL   `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   000114   7405         MOV     A,#0x5
   \   000116   12....       LCALL   ?DEALLOC_XSTACK8
   1823          }
   \   000119   7415         MOV     A,#0x15
   \   00011B   02....       LJMP    ?Subroutine5 & 0xFFFF
   1824          
   1825          /*********************************************************************
   1826           * @fn          ZDO_ProcessDeviceAnnce
   1827           *
   1828           * @brief       This function processes a device annouce message.
   1829           *
   1830           * @param       inMsg - incoming message
   1831           *
   1832           * @return      none
   1833           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1834          void ZDO_ProcessDeviceAnnce( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessDeviceAnnce:
   1835          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 32
   \   000004   74E0         MOV     A,#-0x20
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
   1836            ZDO_DeviceAnnce_t Annce;
   1837            AddrMgrEntry_t addrEntry;
   1838            uint8 parentExt[Z_EXTADDR_LEN];
   1839          
   1840            // Parse incoming message
   1841            ZDO_ParseDeviceAnnce( inMsg, &Annce );
   \   000009                ; Setup parameters for call to function ZDO_ParseDeviceAnnce
   \   000009   7415         MOV     A,#0x15
   \   00000B   12....       LCALL   ?XSTACK_DISP102_8
   \   00000E   12....       LCALL   `??ZDO_ParseDeviceAnnce::?relay`; Banked call to: ZDO_ParseDeviceAnnce
   1842          
   1843            if ( ZSTACK_END_DEVICE_BUILD )
   1844            {
   1845              // Make sure the message didn't come from myself - end device only
   1846              if ( osal_ExtAddrEqual( NLME_GetExtAddr(), Annce.extAddr ) && Annce.nwkAddr == NLME_GetShortAddr() )
   1847              {
   1848                return;
   1849              }
   1850            }
   1851          
   1852          #if defined ( ZIGBEE_STOCHASTIC_ADDRESSING )
   1853            // Clean up the neighbor table
   1854            nwkNeighborRemoveAllStranded();
   1855          
   1856            // If address conflict is detected, no need to update the address manager
   1857            if ( NLME_CheckNewAddrSet( Annce.nwkAddr, Annce.extAddr )== ZFailure )
   1858            {
   1859              return;
   1860            }
   1861          #endif
   1862          
   1863          #if defined ( ZIGBEE_STOCHASTIC_ADDRESSING )
   1864            // Check for parent's address
   1865            NLME_GetCoordExtAddr( parentExt );
   1866            if ( osal_ExtAddrEqual( parentExt, Annce.extAddr ) )
   1867            {
   1868              if ( Annce.nwkAddr != NLME_GetCoordShortAddr() )
   1869              {
   1870                // Set the Parent's MAC's new short address
   1871                _NIB.nwkCoordAddress = Annce.nwkAddr;
   1872                ZMacSetReq( ZMacCoordShortAddress, (byte*)&(_NIB.nwkCoordAddress) );
   1873              }
   1874            }
   1875          
   1876            if ( ZSTACK_ROUTER_BUILD )
   1877            {
   1878              // If the device annce comes from a end device child that has moved
   1879              // to another parent, remove it from associated device list
   1880          
   1881              // If the dev annce is coming from other device's children,
   1882              // (The dev annce from its own children shall be unicast to itself,
   1883              // So check the mac destination address)
   1884              // Remove it from the associated device list. If it is not
   1885              // a child, no action will be taken in AssocRemove() anyway.
   1886              if ( inMsg->macDestAddr != NLME_GetShortAddr() )
   1887              {
   1888                associated_devices_t *dev_ptr;
   1889          
   1890                // If it's an end device child
   1891                dev_ptr = AssocGetWithExt( Annce.extAddr );
   1892                if ( dev_ptr )
   1893                {
   1894                  if ( dev_ptr->nodeRelation == CHILD_RFD ||
   1895                       dev_ptr->nodeRelation == CHILD_RFD_RX_IDLE )
   1896                  {
   1897                    AssocRemove( Annce.extAddr );
   1898                  }
   1899                }
   1900              }
   1901          
   1902              if ( Annce.nwkAddr != NLME_GetShortAddr() )
   1903              {
   1904                // If an associated device is found with matched extended Address,
   1905                // update its short address
   1906                if ( AssocChangeNwkAddr( Annce.nwkAddr, Annce.extAddr ) )
   1907                {
   1908                  // Update the neighbor table
   1909                  nwkNeighborUpdateNwkAddr( Annce.nwkAddr, Annce.extAddr );
   1910          
   1911                  // Set event to save NV
   1912                  ZDApp_NVUpdate();
   1913                }
   1914              }
   1915            }
   1916            
   1917            // Assume that the device has moved, remove existing routing entries
   1918            RTG_RemoveRtgEntry( Annce.nwkAddr, 0 );
   1919            
   1920          #endif // ZIGBEE_STOCHASTIC_ADDRESSING
   1921          
   1922          
   1923            // Fill in the extended address in address manager if we don't have it already.
   1924            addrEntry.user = ADDRMGR_USER_DEFAULT;
   \   000011   85..82       MOV     DPL,?XSP + 0
   \   000014   85..83       MOV     DPH,?XSP + 1
   \   000017   E4           CLR     A
   \   000018   F0           MOVX    @DPTR,A
   1925            addrEntry.nwkAddr = Annce.nwkAddr;
   \   000019   7415         MOV     A,#0x15
   \   00001B   12....       LCALL   ?XSTACK_DISP0_8
   \   00001E   12....       LCALL   ??Subroutine213_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_408:
   \   000021   12....       LCALL   ?XSTACK_DISP0_8
   \   000024   12....       LCALL   ??Subroutine196_0 & 0xFFFF
   1926            if ( AddrMgrEntryLookupNwk( &addrEntry ) )
   \                     ??CrossCallReturnLabel_317:
   \   000027                ; Setup parameters for call to function AddrMgrEntryLookupNwk
   \   000027   AA..         MOV     R2,?XSP + 0
   \   000029   AB..         MOV     R3,?XSP + 1
   \   00002B   12....       LCALL   `??AddrMgrEntryLookupNwk::?relay`; Banked call to: AddrMgrEntryLookupNwk
   \   00002E   E9           MOV     A,R1
   \   00002F   603E         JZ      ??ZDO_ProcessDeviceAnnce_0
   1927            {
   1928              osal_memset( parentExt, 0, Z_EXTADDR_LEN );
   \   000031                ; Setup parameters for call to function osal_memset
   \   000031   7C08         MOV     R4,#0x8
   \   000033   7D00         MOV     R5,#0x0
   \   000035   7900         MOV     R1,#0x0
   \   000037   740D         MOV     A,#0xd
   \   000039   12....       LCALL   ?XSTACK_DISP101_8
   \   00003C   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   1929              if ( osal_ExtAddrEqual( parentExt, addrEntry.extAddr ) )
   \   00003F                ; Setup parameters for call to function sAddrExtCmp
   \   00003F   7403         MOV     A,#0x3
   \   000041   12....       LCALL   ?XSTACK_DISP0_8
   \   000044   AC82         MOV     R4,DPL
   \   000046   AD83         MOV     R5,DPH
   \   000048   740D         MOV     A,#0xd
   \   00004A   12....       LCALL   ?XSTACK_DISP101_8
   \   00004D   12....       LCALL   `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   000050   E9           MOV     A,R1
   \   000051   601C         JZ      ??ZDO_ProcessDeviceAnnce_0
   1930              {
   1931                AddrMgrExtAddrSet( addrEntry.extAddr, Annce.extAddr );
   \   000053                ; Setup parameters for call to function AddrMgrExtAddrSet
   \   000053   7417         MOV     A,#0x17
   \   000055   12....       LCALL   ?XSTACK_DISP0_8
   \   000058   AC82         MOV     R4,DPL
   \   00005A   AD83         MOV     R5,DPH
   \   00005C   7403         MOV     A,#0x3
   \   00005E   12....       LCALL   ?XSTACK_DISP0_8
   \   000061   AA82         MOV     R2,DPL
   \   000063   AB83         MOV     R3,DPH
   \   000065   12....       LCALL   `??AddrMgrExtAddrSet::?relay`; Banked call to: AddrMgrExtAddrSet
   1932                AddrMgrEntryUpdate( &addrEntry );
   \   000068                ; Setup parameters for call to function AddrMgrEntryUpdate
   \   000068   AA..         MOV     R2,?XSP + 0
   \   00006A   AB..         MOV     R3,?XSP + 1
   \   00006C   12....       LCALL   `??AddrMgrEntryUpdate::?relay`; Banked call to: AddrMgrEntryUpdate
   1933              }
   1934            }
   1935          }
   \                     ??ZDO_ProcessDeviceAnnce_0:
   \   00006F   7420         MOV     A,#0x20
   \   000071   02....       LJMP    ?Subroutine0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine213_0:
   \   000000   12....       LCALL   ?Subroutine152 & 0xFFFF
   \                     ??CrossCallReturnLabel_608:
   \   000003   7401         MOV     A,#0x1
   \   000005   22           RET
   1936          
   1937          /*********************************************************************
   1938           * @fn          ZDO_BuildSimpleDescBuf
   1939           *
   1940           * @brief       Build a byte sequence representation of a Simple Descriptor.
   1941           *
   1942           * @param       buf  - pointer to a byte array big enough for data.
   1943           * @param       desc - SimpleDescriptionFormat_t *
   1944           *
   1945           * @return      none
   1946           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1947          void ZDO_BuildSimpleDescBuf( uint8 *buf, SimpleDescriptionFormat_t *desc )
   \                     ZDO_BuildSimpleDescBuf:
   1948          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   1949            byte cnt;
   1950            uint16 *ptr;
   1951          
   1952            *buf++ = desc->EndPoint;
   \   000005   8C82         MOV     DPL,R4
   \   000007   8D83         MOV     DPH,R5
   \   000009   12....       LCALL   ?Subroutine92 & 0xFFFF
   1953            *buf++ = HI_UINT16( desc->AppProfId );
   \                     ??CrossCallReturnLabel_122:
   \   00000C   8C82         MOV     DPL,R4
   \   00000E   8D83         MOV     DPH,R5
   \   000010   A3           INC     DPTR
   \   000011   A882         MOV     R0,DPL
   \   000013   A983         MOV     R1,DPH
   \   000015   12....       LCALL   ?Subroutine93 & 0xFFFF
   \                     ??CrossCallReturnLabel_502:
   \   000018   12....       LCALL   ?Subroutine29 & 0xFFFF
   1954            *buf++ = LO_UINT16( desc->AppProfId );
   \                     ??CrossCallReturnLabel_26:
   \   00001B   F0           MOVX    @DPTR,A
   1955            *buf++ = HI_UINT16( desc->AppDeviceId );
   \   00001C   EC           MOV     A,R4
   \   00001D   2403         ADD     A,#0x3
   \   00001F   F8           MOV     R0,A
   \   000020   E4           CLR     A
   \   000021   3D           ADDC    A,R5
   \   000022   F9           MOV     R1,A
   \   000023   8882         MOV     DPL,R0
   \   000025   8983         MOV     DPH,R1
   \   000027   12....       LCALL   ?Subroutine93 & 0xFFFF
   \                     ??CrossCallReturnLabel_503:
   \   00002A   A3           INC     DPTR
   \   00002B   A3           INC     DPTR
   \   00002C   12....       LCALL   ?Subroutine29 & 0xFFFF
   1956            *buf++ = LO_UINT16( desc->AppDeviceId );
   \                     ??CrossCallReturnLabel_27:
   \   00002F   A3           INC     DPTR
   \   000030   A3           INC     DPTR
   \   000031   F0           MOVX    @DPTR,A
   1957          
   1958            *buf++ = (byte)(desc->AppDevVer << 4);
   \   000032   8C82         MOV     DPL,R4
   \   000034   8D83         MOV     DPH,R5
   \   000036   A3           INC     DPTR
   \   000037   A3           INC     DPTR
   \   000038   A3           INC     DPTR
   \   000039   A3           INC     DPTR
   \   00003A   A3           INC     DPTR
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   C4           SWAP    A
   \   00003D   54F0         ANL     A,#0xf0
   \   00003F   8A82         MOV     DPL,R2
   \   000041   8B83         MOV     DPH,R3
   \   000043   A3           INC     DPTR
   \   000044   A3           INC     DPTR
   \   000045   A3           INC     DPTR
   \   000046   A3           INC     DPTR
   \   000047   A3           INC     DPTR
   \   000048   F0           MOVX    @DPTR,A
   1959          
   1960            *buf++ = desc->AppNumInClusters;
   \   000049   EC           MOV     A,R4
   \   00004A   2406         ADD     A,#0x6
   \   00004C   12....       LCALL   ?Subroutine133 & 0xFFFF
   \                     ??CrossCallReturnLabel_206:
   \   00004F   12....       LCALL   ??Subroutine227_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_501:
   \   000052   A3           INC     DPTR
   \   000053   A3           INC     DPTR
   \   000054   A3           INC     DPTR
   \   000055   A3           INC     DPTR
   \   000056   A3           INC     DPTR
   \   000057   A3           INC     DPTR
   \   000058   F0           MOVX    @DPTR,A
   \   000059   EA           MOV     A,R2
   \   00005A   2407         ADD     A,#0x7
   \   00005C   FA           MOV     R2,A
   \   00005D   5001         JNC     ??ZDO_BuildSimpleDescBuf_0
   \   00005F   0B           INC     R3
   1961            ptr = desc->pAppInClusterList;
   \                     ??ZDO_BuildSimpleDescBuf_0:
   \   000060   8C82         MOV     DPL,R4
   \   000062   8D83         MOV     DPH,R5
   \   000064   12....       LCALL   ?Subroutine97 & 0xFFFF
   1962            for ( cnt = 0; cnt < desc->AppNumInClusters; ptr++, cnt++ )
   \                     ??CrossCallReturnLabel_134:
   \   000067   8018         SJMP    ??ZDO_BuildSimpleDescBuf_1
   1963            {
   1964              *buf++ = HI_UINT16( *ptr );
   \                     ??ZDO_BuildSimpleDescBuf_2:
   \   000069   12....       LCALL   ?Subroutine27 & 0xFFFF
   1965              *buf++ = LO_UINT16( *ptr );
   1966            }
   \                     ??CrossCallReturnLabel_383:
   \   00006C   8882         MOV     DPL,R0
   \   00006E   8983         MOV     DPH,R1
   \   000070   F0           MOVX    @DPTR,A
   \   000071   EA           MOV     A,R2
   \   000072   2402         ADD     A,#0x2
   \   000074   FA           MOV     R2,A
   \   000075   5001         JNC     ??ZDO_BuildSimpleDescBuf_3
   \   000077   0B           INC     R3
   \                     ??ZDO_BuildSimpleDescBuf_3:
   \   000078   EE           MOV     A,R6
   \   000079   2402         ADD     A,#0x2
   \   00007B   FE           MOV     R6,A
   \   00007C   5001         JNC     ??ZDO_BuildSimpleDescBuf_4
   \   00007E   0F           INC     R7
   \                     ??ZDO_BuildSimpleDescBuf_4:
   \   00007F   05..         INC     ?V0
   \                     ??ZDO_BuildSimpleDescBuf_1:
   \   000081   8A82         MOV     DPL,R2
   \   000083   8B83         MOV     DPH,R3
   \   000085   A3           INC     DPTR
   \   000086   A882         MOV     R0,DPL
   \   000088   A983         MOV     R1,DPH
   \   00008A   85..82       MOV     DPL,?V2
   \   00008D   85..83       MOV     DPH,?V3
   \   000090   E0           MOVX    A,@DPTR
   \   000091   F5..         MOV     ?V1,A
   \   000093   E5..         MOV     A,?V0
   \   000095   C3           CLR     C
   \   000096   95..         SUBB    A,?V1
   \   000098   40CF         JC      ??ZDO_BuildSimpleDescBuf_2
   1967          
   1968            *buf++ = desc->AppNumOutClusters;
   \   00009A   EC           MOV     A,R4
   \   00009B   2409         ADD     A,#0x9
   \   00009D   12....       LCALL   ?Subroutine133 & 0xFFFF
   \                     ??CrossCallReturnLabel_207:
   \   0000A0   12....       LCALL   ?Subroutine92 & 0xFFFF
   \                     ??CrossCallReturnLabel_123:
   \   0000A3   E8           MOV     A,R0
   \   0000A4   FA           MOV     R2,A
   \   0000A5   E9           MOV     A,R1
   \   0000A6   FB           MOV     R3,A
   1969            ptr = desc->pAppOutClusterList;
   \   0000A7   8C82         MOV     DPL,R4
   \   0000A9   8D83         MOV     DPH,R5
   \   0000AB   A3           INC     DPTR
   \   0000AC   A3           INC     DPTR
   \   0000AD   A3           INC     DPTR
   \   0000AE   12....       LCALL   ?Subroutine97 & 0xFFFF
   1970            for ( cnt = 0; cnt < desc->AppNumOutClusters; ptr++, cnt++ )
   \                     ??CrossCallReturnLabel_135:
   \   0000B1   8019         SJMP    ??ZDO_BuildSimpleDescBuf_5
   1971            {
   1972              *buf++ = HI_UINT16( *ptr );
   \                     ??ZDO_BuildSimpleDescBuf_6:
   \   0000B3   12....       LCALL   ?Subroutine27 & 0xFFFF
   1973              *buf++ = LO_UINT16( *ptr );
   1974            }
   \                     ??CrossCallReturnLabel_384:
   \   0000B6   8A82         MOV     DPL,R2
   \   0000B8   8B83         MOV     DPH,R3
   \   0000BA   A3           INC     DPTR
   \   0000BB   F0           MOVX    @DPTR,A
   \   0000BC   EA           MOV     A,R2
   \   0000BD   2402         ADD     A,#0x2
   \   0000BF   FA           MOV     R2,A
   \   0000C0   5001         JNC     ??ZDO_BuildSimpleDescBuf_7
   \   0000C2   0B           INC     R3
   \                     ??ZDO_BuildSimpleDescBuf_7:
   \   0000C3   EE           MOV     A,R6
   \   0000C4   2402         ADD     A,#0x2
   \   0000C6   FE           MOV     R6,A
   \   0000C7   5001         JNC     ??ZDO_BuildSimpleDescBuf_8
   \   0000C9   0F           INC     R7
   \                     ??ZDO_BuildSimpleDescBuf_8:
   \   0000CA   05..         INC     ?V0
   \                     ??ZDO_BuildSimpleDescBuf_5:
   \   0000CC   85..82       MOV     DPL,?V2
   \   0000CF   85..83       MOV     DPH,?V3
   \   0000D2   E0           MOVX    A,@DPTR
   \   0000D3   F8           MOV     R0,A
   \   0000D4   E5..         MOV     A,?V0
   \   0000D6   C3           CLR     C
   \   0000D7   98           SUBB    A,R0
   \   0000D8   40D9         JC      ??ZDO_BuildSimpleDescBuf_6
   1975          }
   \   0000DA   80..         SJMP    ??Subroutine210_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine133:
   \   000000   F5..         MOV     ?V2,A
   \   000002   E4           CLR     A
   \   000003   3D           ADDC    A,R5
   \   000004   F5..         MOV     ?V3,A
   \   000006   85..82       MOV     DPL,?V2
   \   000009   F583         MOV     DPH,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine97:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   12....       LCALL   ??Subroutine208_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_379:
   \   00000A   75..00       MOV     ?V0,#0x0
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   A3           INC     DPTR
   \   000001   12....       LCALL   ?Subroutine141 & 0xFFFF
   \                     ??CrossCallReturnLabel_216:
   \   000004   8A82         MOV     DPL,R2
   \   000006   8B83         MOV     DPH,R3
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   8A82         MOV     DPL,R2
   \   000008   8B83         MOV     DPH,R3
   \   00000A                REQUIRE ??Subroutine209_0
   \   00000A                ; // Fall through to label ??Subroutine209_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine209_0:
   \   000000   12....       LCALL   ?Subroutine173 & 0xFFFF
   \                     ??CrossCallReturnLabel_388:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine93:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine227_0
   \   000001                ; // Fall through to label ??Subroutine227_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine227_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine92:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   F0           MOVX    @DPTR,A
   \   000006   22           RET
   1976          
   1977          /*********************************************************************
   1978           * @fn      ZDO_MatchEndDeviceBind()
   1979           *
   1980           * @brief
   1981           *
   1982           *   Called to match end device binding requests
   1983           *
   1984           * @param  bindReq  - binding request information
   1985           * @param  SecurityUse - Security enable/disable
   1986           *
   1987           * @return  none
   1988           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1989          void ZDO_MatchEndDeviceBind( ZDEndDeviceBind_t *bindReq )
   \                     ZDO_MatchEndDeviceBind:
   1990          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V6,R2
   \   00000C   8B..         MOV     ?V7,R3
   1991            zAddrType_t dstAddr;
   1992            uint8 sendRsp = FALSE;
   \   00000E   7E00         MOV     R6,#0x0
   1993            uint8 status;
   1994          
   1995            // Is this the first request?
   1996            if ( matchED == NULL )
   \   000010   90....       MOV     DPTR,#matchED
   \   000013   12....       LCALL   ??Subroutine216_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_447:
   \   000016   7052         JNZ     ??ZDO_MatchEndDeviceBind_0
   1997            {
   1998              // Create match info structure
   1999              matchED = (ZDMatchEndDeviceBind_t *)osal_mem_alloc( sizeof ( ZDMatchEndDeviceBind_t ) );
   \   000018                ; Setup parameters for call to function osal_mem_alloc
   \   000018   7A37         MOV     R2,#0x37
   \   00001A   7B00         MOV     R3,#0x0
   \   00001C   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00001F   90....       MOV     DPTR,#matchED
   \   000022   12....       LCALL   ??Subroutine198_0 & 0xFFFF
   2000              if ( matchED )
   \                     ??CrossCallReturnLabel_342:
   \   000025   90....       MOV     DPTR,#matchED
   \   000028   12....       LCALL   ??Subroutine216_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_448:
   \   00002B   6019         JZ      ??ZDO_MatchEndDeviceBind_1
   2001              {
   2002                // Clear the structure
   2003                osal_memset( (uint8 *)matchED, 0, sizeof ( ZDMatchEndDeviceBind_t ) );
   \   00002D                ; Setup parameters for call to function osal_memset
   \   00002D   7C37         MOV     R4,#0x37
   \   00002F   7D00         MOV     R5,#0x0
   \   000031   7900         MOV     R1,#0x0
   \   000033   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   2004          
   2005                // Copy the first request's information
   2006                if ( !ZDO_CopyMatchInfo( &(matchED->ed1), bindReq ) )
   \   000036                ; Setup parameters for call to function ZDO_CopyMatchInfo
   \   000036   AC..         MOV     R4,?V6
   \   000038   AD..         MOV     R5,?V7
   \   00003A   90....       MOV     DPTR,#matchED
   \   00003D   12....       LCALL   ??Subroutine214_0 & 0xFFFF
   2007                {
   2008          
   2009                  status = ZDP_NO_ENTRY;
   2010                  sendRsp = TRUE;
   2011                }
   2012              }
   \                     ??CrossCallReturnLabel_422:
   \   000040   12....       LCALL   `??ZDO_CopyMatchInfo::?relay`; Banked call to: ZDO_CopyMatchInfo
   \   000043   E9           MOV     A,R1
   \   000044   700B         JNZ     ??ZDO_MatchEndDeviceBind_2
   2013              else
   2014              {
   2015                status = ZDP_NO_ENTRY;
   \                     ??ZDO_MatchEndDeviceBind_1:
   \   000046   85..82       MOV     DPL,?XSP + 0
   \   000049   85..83       MOV     DPH,?XSP + 1
   \   00004C   7488         MOV     A,#-0x78
   \   00004E   02....       LJMP    ??ZDO_MatchEndDeviceBind_3 & 0xFFFF
   2016                sendRsp = TRUE;
   2017              }
   2018          
   2019              if ( !sendRsp )
   2020              {
   2021                // Set into the correct state
   2022                matchED->state = ZDMATCH_WAIT_REQ;
   \                     ??ZDO_MatchEndDeviceBind_2:
   \   000051   12....       LCALL   ??Subroutine228_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_511:
   \   000054   12....       LCALL   ?Subroutine134 & 0xFFFF
   \                     ??CrossCallReturnLabel_208:
   \   000057   7401         MOV     A,#0x1
   \   000059   F0           MOVX    @DPTR,A
   2023          
   2024                // Setup the timeout
   2025                APS_SetEndDeviceBindTimeout( AIB_MaxBindingTime, ZDO_EndDeviceBindMatchTimeoutCB );
   \   00005A                ; Setup parameters for call to function APS_SetEndDeviceBindTimeout
   \   00005A   7C..         MOV     R4,#`??ZDO_EndDeviceBindMatchTimeoutCB::?relay` & 0xff
   \   00005C   7D..         MOV     R5,#(`??ZDO_EndDeviceBindMatchTimeoutCB::?relay` >> 8) & 0xff
   \   00005E   90....       MOV     DPTR,#AIB_MaxBindingTime
   \   000061   12....       LCALL   ??Subroutine214_0 & 0xFFFF
   2026              }
   2027            }
   \                     ??CrossCallReturnLabel_423:
   \   000064   12....       LCALL   `??APS_SetEndDeviceBindTimeout::?relay`; Banked call to: APS_SetEndDeviceBindTimeout
   \   000067   02....       LJMP    ??ZDO_MatchEndDeviceBind_4 & 0xFFFF
   2028            else
   2029            {
   2030                matchED->state = ZDMATCH_SENDING_BINDS;
   \                     ??ZDO_MatchEndDeviceBind_0:
   \   00006A   E0           MOVX    A,@DPTR
   \   00006B   C8           XCH     A,R0
   \   00006C   12....       LCALL   ?Subroutine134 & 0xFFFF
   \                     ??CrossCallReturnLabel_209:
   \   00006F   7402         MOV     A,#0x2
   \   000071   F0           MOVX    @DPTR,A
   2031          
   2032                // Copy the 2nd request's information
   2033                if ( !ZDO_CopyMatchInfo( &(matchED->ed2), bindReq ) )
   \   000072                ; Setup parameters for call to function ZDO_CopyMatchInfo
   \   000072   AC..         MOV     R4,?V6
   \   000074   AD..         MOV     R5,?V7
   \   000076   12....       LCALL   ?Subroutine94 & 0xFFFF
   \                     ??CrossCallReturnLabel_125:
   \   000079   12....       LCALL   `??ZDO_CopyMatchInfo::?relay`; Banked call to: ZDO_CopyMatchInfo
   \   00007C   E9           MOV     A,R1
   \   00007D   700B         JNZ     ??ZDO_MatchEndDeviceBind_5
   2034                {
   2035                  status = ZDP_NO_ENTRY;
   \   00007F   85..82       MOV     DPL,?XSP + 0
   \   000082   85..83       MOV     DPH,?XSP + 1
   \   000085   7488         MOV     A,#-0x78
   \   000087   F0           MOVX    @DPTR,A
   2036                  sendRsp = TRUE;
   \   000088   7E01         MOV     R6,#0x1
   2037                }
   2038          
   2039                // Make a source match for ed1
   2040                matchED->ed1numMatched = ZDO_CompareClusterLists(
   2041                            matchED->ed1.numOutClusters, matchED->ed1.outClusters,
   2042                            matchED->ed2.numInClusters, matchED->ed2.inClusters, ZDOBuildBuf );
   \                     ??ZDO_MatchEndDeviceBind_5:
   \   00008A                ; Setup parameters for call to function ZDO_CompareClusterLists
   \   00008A   75....       MOV     ?V0,#ZDOBuildBuf & 0xff
   \   00008D   75....       MOV     ?V1,#(ZDOBuildBuf >> 8) & 0xff
   \   000090   78..         MOV     R0,#?V0
   \   000092   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000095   12....       LCALL   ??Subroutine228_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_512:
   \   000098   2429         ADD     A,#0x29
   \   00009A   F582         MOV     DPL,A
   \   00009C   E4           CLR     A
   \   00009D   38           ADDC    A,R0
   \   00009E   F583         MOV     DPH,A
   \   0000A0   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   0000A3   12....       LCALL   ??Subroutine228_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_513:
   \   0000A6   2428         ADD     A,#0x28
   \   0000A8   12....       LCALL   ?Subroutine118 & 0xFFFF
   \                     ??CrossCallReturnLabel_399:
   \   0000AB   FC           MOV     R4,A
   \   0000AC   12....       LCALL   ??Subroutine228_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_514:
   \   0000AF   2415         ADD     A,#0x15
   \   0000B1   12....       LCALL   ?Subroutine70 & 0xFFFF
   \                     ??CrossCallReturnLabel_531:
   \   0000B4   2414         ADD     A,#0x14
   \   0000B6   12....       LCALL   ?Subroutine118 & 0xFFFF
   \                     ??CrossCallReturnLabel_400:
   \   0000B9   F9           MOV     R1,A
   \   0000BA   12....       LCALL   `??ZDO_CompareClusterLists::?relay`; Banked call to: ZDO_CompareClusterLists
   \   0000BD   7404         MOV     A,#0x4
   \   0000BF   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000C2   12....       LCALL   ??Subroutine228_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_515:
   \   0000C5   2431         ADD     A,#0x31
   \   0000C7   12....       LCALL   ?Subroutine19 & 0xFFFF
   2043                if ( matchED->ed1numMatched )
   \                     ??CrossCallReturnLabel_454:
   \   0000CA   2431         ADD     A,#0x31
   \   0000CC   12....       LCALL   ?Subroutine118 & 0xFFFF
   \                     ??CrossCallReturnLabel_401:
   \   0000CF   FA           MOV     R2,A
   \   0000D0   75..00       MOV     ?V2,#0x0
   \   0000D3   6034         JZ      ??ZDO_MatchEndDeviceBind_6
   2044                {
   2045                  // Save the match list
   2046                  matchED->ed1Matched = osal_mem_alloc( (short)(matchED->ed1numMatched * sizeof ( uint16 )) );
   \   0000D5                ; Setup parameters for call to function osal_mem_alloc
   \   0000D5   12....       LCALL   ?Subroutine100 & 0xFFFF
   \                     ??CrossCallReturnLabel_142:
   \   0000D8   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   0000DB   12....       LCALL   ??Subroutine228_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_516:
   \   0000DE   2432         ADD     A,#0x32
   \   0000E0   F582         MOV     DPL,A
   \   0000E2   E4           CLR     A
   \   0000E3   38           ADDC    A,R0
   \   0000E4   12....       LCALL   ??Subroutine221_0 & 0xFFFF
   2047                  if ( matchED->ed1Matched )
   \                     ??CrossCallReturnLabel_470:
   \   0000E7   6015         JZ      ??ZDO_MatchEndDeviceBind_7
   2048                  {
   2049                    osal_memcpy( matchED->ed1Matched, ZDOBuildBuf, (matchED->ed1numMatched * sizeof ( uint16 )) );
   \   0000E9                ; Setup parameters for call to function osal_memcpy
   \   0000E9   78..         MOV     R0,#?V0
   \   0000EB   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000EE   12....       LCALL   ?Subroutine47 & 0xFFFF
   2050                  }
   \                     ??CrossCallReturnLabel_56:
   \   0000F1   12....       LCALL   ??Subroutine220_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_464:
   \   0000F4   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000F7   7403         MOV     A,#0x3
   \   0000F9   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000FC   800B         SJMP    ??ZDO_MatchEndDeviceBind_6
   2051                  else
   2052                  {
   2053                    // Allocation error, stop
   2054                    status = ZDP_NO_ENTRY;
   \                     ??ZDO_MatchEndDeviceBind_7:
   \   0000FE   85..82       MOV     DPL,?XSP + 0
   \   000101   85..83       MOV     DPH,?XSP + 1
   \   000104   7488         MOV     A,#-0x78
   \   000106   F0           MOVX    @DPTR,A
   2055                    sendRsp = TRUE;
   \   000107   7E01         MOV     R6,#0x1
   2056                  }
   2057                }
   2058          
   2059                // Make a source match for ed2
   2060                matchED->ed2numMatched = ZDO_CompareClusterLists(
   2061                            matchED->ed2.numOutClusters, matchED->ed2.outClusters,
   2062                            matchED->ed1.numInClusters, matchED->ed1.inClusters, ZDOBuildBuf );
   \                     ??ZDO_MatchEndDeviceBind_6:
   \   000109                ; Setup parameters for call to function ZDO_CompareClusterLists
   \   000109   75....       MOV     ?V4,#ZDOBuildBuf & 0xff
   \   00010C   75....       MOV     ?V5,#(ZDOBuildBuf >> 8) & 0xff
   \   00010F   78..         MOV     R0,#?V4
   \   000111   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000114   12....       LCALL   ??Subroutine228_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_517:
   \   000117   12....       LCALL   ??Subroutine211_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_393:
   \   00011A   38           ADDC    A,R0
   \   00011B   F583         MOV     DPH,A
   \   00011D   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000120   12....       LCALL   ??Subroutine228_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_518:
   \   000123   2411         ADD     A,#0x11
   \   000125   12....       LCALL   ?Subroutine118 & 0xFFFF
   \                     ??CrossCallReturnLabel_402:
   \   000128   FC           MOV     R4,A
   \   000129   12....       LCALL   ??Subroutine228_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_519:
   \   00012C   242C         ADD     A,#0x2c
   \   00012E   12....       LCALL   ?Subroutine70 & 0xFFFF
   \                     ??CrossCallReturnLabel_532:
   \   000131   242B         ADD     A,#0x2b
   \   000133   12....       LCALL   ?Subroutine118 & 0xFFFF
   \                     ??CrossCallReturnLabel_403:
   \   000136   F9           MOV     R1,A
   \   000137   12....       LCALL   `??ZDO_CompareClusterLists::?relay`; Banked call to: ZDO_CompareClusterLists
   \   00013A   7404         MOV     A,#0x4
   \   00013C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00013F   E9           MOV     A,R1
   \   000140   F8           MOV     R0,A
   \   000141   12....       LCALL   ??Subroutine228_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_520:
   \   000144   2434         ADD     A,#0x34
   \   000146   12....       LCALL   ?Subroutine19 & 0xFFFF
   2063                if ( matchED->ed2numMatched )
   \                     ??CrossCallReturnLabel_455:
   \   000149   2434         ADD     A,#0x34
   \   00014B   12....       LCALL   ?Subroutine118 & 0xFFFF
   \                     ??CrossCallReturnLabel_404:
   \   00014E   FA           MOV     R2,A
   \   00014F   6027         JZ      ??ZDO_MatchEndDeviceBind_8
   2064                {
   2065                  // Save the match list
   2066                  matchED->ed2Matched = osal_mem_alloc( (short)(matchED->ed2numMatched * sizeof ( uint16 )) );
   \   000151                ; Setup parameters for call to function osal_mem_alloc
   \   000151   12....       LCALL   ?Subroutine100 & 0xFFFF
   \                     ??CrossCallReturnLabel_143:
   \   000154   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000157   12....       LCALL   ??Subroutine228_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_521:
   \   00015A   2435         ADD     A,#0x35
   \   00015C   F582         MOV     DPL,A
   \   00015E   E4           CLR     A
   \   00015F   38           ADDC    A,R0
   \   000160   12....       LCALL   ??Subroutine221_0 & 0xFFFF
   2067                  if ( matchED->ed2Matched )
   \                     ??CrossCallReturnLabel_471:
   \   000163   602E         JZ      ??ZDO_MatchEndDeviceBind_9
   2068                  {
   2069                    osal_memcpy( matchED->ed2Matched, ZDOBuildBuf, (matchED->ed2numMatched * sizeof ( uint16 )) );
   \   000165                ; Setup parameters for call to function osal_memcpy
   \   000165   78..         MOV     R0,#?V0
   \   000167   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00016A   12....       LCALL   ?Subroutine48 & 0xFFFF
   2070                  }
   \                     ??CrossCallReturnLabel_434:
   \   00016D   12....       LCALL   ??Subroutine220_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_465:
   \   000170   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000173   7403         MOV     A,#0x3
   \   000175   12....       LCALL   ?DEALLOC_XSTACK8
   2071                  else
   2072                  {
   2073                    // Allocation error, stop
   2074                    status = ZDP_NO_ENTRY;
   2075                    sendRsp = TRUE;
   2076                  }
   2077                }
   2078          
   2079                if ( (sendRsp == FALSE) && (matchED->ed1numMatched || matchED->ed2numMatched) )
   \                     ??ZDO_MatchEndDeviceBind_8:
   \   000178   EE           MOV     A,R6
   \   000179   A2E0         MOV     C,0xE0 /* A   */.0
   \   00017B   401F         JC      ??ZDO_MatchEndDeviceBind_10
   \   00017D   12....       LCALL   ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   000180   7005         JNZ     ??ZDO_MatchEndDeviceBind_11
   \   000182   12....       LCALL   ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_435:
   \   000185   6015         JZ      ??ZDO_MatchEndDeviceBind_10
   2080                {
   2081                  // Do the first unbind/bind state
   2082                  ZDMatchSendState( ZDMATCH_REASON_START, ZDP_SUCCESS, 0 );
   \                     ??ZDO_MatchEndDeviceBind_11:
   \   000187                ; Setup parameters for call to function ZDMatchSendState
   \   000187   7B00         MOV     R3,#0x0
   \   000189   7A00         MOV     R2,#0x0
   \   00018B   7900         MOV     R1,#0x0
   \   00018D   12....       LCALL   `??ZDMatchSendState::?relay`; Banked call to: ZDMatchSendState
   2083                }
   2084                else
   2085                {
   2086                  status = ZDP_NO_MATCH;
   2087                  sendRsp = TRUE;
   2088                }
   2089            }
   2090          
   2091            if ( sendRsp )
   \   000190   02....       LJMP    ??ZDO_MatchEndDeviceBind_4 & 0xFFFF
   \                     ??ZDO_MatchEndDeviceBind_9:
   \   000193   85..82       MOV     DPL,?XSP + 0
   \   000196   85..83       MOV     DPH,?XSP + 1
   \   000199   7488         MOV     A,#-0x78
   \   00019B   F0           MOVX    @DPTR,A
   \                     ??ZDO_MatchEndDeviceBind_10:
   \   00019C   85..82       MOV     DPL,?XSP + 0
   \   00019F   85..83       MOV     DPH,?XSP + 1
   \   0001A2   7486         MOV     A,#-0x7a
   \                     ??ZDO_MatchEndDeviceBind_3:
   \   0001A4   F0           MOVX    @DPTR,A
   2092            {
   2093              // send response to this requester
   2094              dstAddr.addrMode = Addr16Bit;
   \   0001A5   7409         MOV     A,#0x9
   \   0001A7   12....       LCALL   ?XSTACK_DISP0_8
   \   0001AA   7402         MOV     A,#0x2
   \   0001AC   F0           MOVX    @DPTR,A
   2095              dstAddr.addr.shortAddr = bindReq->srcAddr;
   \   0001AD   85..82       MOV     DPL,?V6
   \   0001B0   85..83       MOV     DPH,?V7
   \   0001B3   12....       LCALL   ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_409:
   \   0001B6   12....       LCALL   ?XSTACK_DISP0_8
   \   0001B9   12....       LCALL   ??Subroutine196_0 & 0xFFFF
   2096              ZDP_EndDeviceBindRsp( bindReq->TransSeq, &dstAddr, status, bindReq->SecurityUse );
   \                     ??CrossCallReturnLabel_318:
   \   0001BC                ; Setup parameters for call to function ZDP_SendData
   \   0001BC   85..82       MOV     DPL,?V6
   \   0001BF   85..83       MOV     DPH,?V7
   \   0001C2   A3           INC     DPTR
   \   0001C3   12....       LCALL   ??Subroutine207_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_370:
   \   0001C6   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001C9   7401         MOV     A,#0x1
   \   0001CB   12....       LCALL   ?XSTACK_DISP100_8
   \   0001CE   88..         MOV     ?V0,R0
   \   0001D0   89..         MOV     ?V1,R1
   \   0001D2   78..         MOV     R0,#?V0
   \   0001D4   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001D7   75..20       MOV     ?V0,#0x20
   \   0001DA   75..80       MOV     ?V1,#-0x80
   \   0001DD   78..         MOV     R0,#?V0
   \   0001DF   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001E2   7901         MOV     R1,#0x1
   \   0001E4   7406         MOV     A,#0x6
   \   0001E6   12....       LCALL   ?XSTACK_DISP102_8
   \   0001E9   AA..         MOV     R2,?V6
   \   0001EB   AB..         MOV     R3,?V7
   \   0001ED   12....       LCALL   `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   0001F0   7405         MOV     A,#0x5
   \   0001F2   12....       LCALL   ?DEALLOC_XSTACK8
   2097          
   2098              if ( matchED->state == ZDMATCH_SENDING_BINDS )
   \   0001F5   12....       LCALL   ?Subroutine60 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   0001F8   7048         JNZ     ??ZDO_MatchEndDeviceBind_12
   2099              {
   2100                // send response to first requester
   2101                dstAddr.addrMode = Addr16Bit;
   \   0001FA   7409         MOV     A,#0x9
   \   0001FC   12....       LCALL   ?XSTACK_DISP0_8
   \   0001FF   7402         MOV     A,#0x2
   \   000201   12....       LCALL   ?Subroutine42 & 0xFFFF
   2102                dstAddr.addr.shortAddr = matchED->ed1.srcAddr;
   2103                ZDP_EndDeviceBindRsp( matchED->ed1.TransSeq, &dstAddr, status, matchED->ed1.SecurityUse );
   2104              }
   \                     ??CrossCallReturnLabel_50:
   \   000204   F583         MOV     DPH,A
   \   000206   8882         MOV     DPL,R0
   \   000208   12....       LCALL   ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_410:
   \   00020B   12....       LCALL   ?XSTACK_DISP0_8
   \   00020E   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   000211   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000214   7401         MOV     A,#0x1
   \   000216   12....       LCALL   ?XSTACK_DISP100_8
   \   000219   88..         MOV     ?V0,R0
   \   00021B   89..         MOV     ?V1,R1
   \   00021D   78..         MOV     R0,#?V0
   \   00021F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000222   75..20       MOV     ?V0,#0x20
   \   000225   75..80       MOV     ?V1,#-0x80
   \   000228   78..         MOV     R0,#?V0
   \   00022A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00022D   7901         MOV     R1,#0x1
   \   00022F   7406         MOV     A,#0x6
   \   000231   12....       LCALL   ?XSTACK_DISP102_8
   \   000234   90....       MOV     DPTR,#matchED
   \   000237   12....       LCALL   ??Subroutine214_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_424:
   \   00023A   12....       LCALL   `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   00023D   7405         MOV     A,#0x5
   \   00023F   12....       LCALL   ?DEALLOC_XSTACK8
   2105          
   2106              // Process ended - release memory used
   2107              ZDO_RemoveMatchMemory();
   \                     ??ZDO_MatchEndDeviceBind_12:
   \   000242                ; Setup parameters for call to function ZDO_RemoveMatchMemory
   \   000242   12....       LCALL   `??ZDO_RemoveMatchMemory::?relay`; Banked call to: ZDO_RemoveMatchMemory
   2108            }
   2109          }
   \                     ??ZDO_MatchEndDeviceBind_4:
   \   000245   740A         MOV     A,#0xa
   \   000247   02....       LJMP    ?Subroutine6 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine134:
   \   000000   12....       LCALL   ?Subroutine171 & 0xFFFF
   \                     ??CrossCallReturnLabel_256:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine171:
   \   000000   242E         ADD     A,#0x2e
   \   000002   F582         MOV     DPL,A
   \   000004   E4           CLR     A
   \   000005   38           ADDC    A,R0
   \   000006   F583         MOV     DPH,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine79:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002                REQUIRE ??Subroutine213_0
   \   000002                ; // Fall through to label ??Subroutine213_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine48:
   \   000000   90....       MOV     DPTR,#matchED
   \   000003                REQUIRE ??Subroutine215_0
   \   000003                ; // Fall through to label ??Subroutine215_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine215_0:
   \   000000   12....       LCALL   ??Subroutine231_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_543:
   \   000003   2434         ADD     A,#0x34
   \   000005   F582         MOV     DPL,A
   \   000007   E4           CLR     A
   \   000008   38           ADDC    A,R0
   \   000009   F583         MOV     DPH,A
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   F582         MOV     DPL,A
   \   000002   E4           CLR     A
   \   000003   38           ADDC    A,R0
   \   000004   F583         MOV     DPH,A
   \   000006                REQUIRE ??Subroutine217_0
   \   000006                ; // Fall through to label ??Subroutine217_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine217_0:
   \   000000   12....       LCALL   ?Subroutine135 & 0xFFFF
   \                     ??CrossCallReturnLabel_457:
   \   000003   C8           XCH     A,R0
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine135:
   \   000000   E9           MOV     A,R1
   \   000001                REQUIRE ??Subroutine218_0
   \   000001                ; // Fall through to label ??Subroutine218_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine218_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function ZDP_SendData
   \   000001                ; Setup parameters for call to function ZDP_SendData
   \   000001                ; Setup parameters for call to function ZDP_SendData
   \   000001   90....       MOV     DPTR,#matchED
   \   000004   12....       LCALL   ?Subroutine175 & 0xFFFF
   \                     ??CrossCallReturnLabel_617:
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine220_0:
   \   000000   25E0         ADD     A,0xE0 /* A   */
   \   000002   FC           MOV     R4,A
   \   000003   E4           CLR     A
   \   000004   33           RLC     A
   \   000005   FD           MOV     R5,A
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine221_0:
   \   000000   F583         MOV     DPH,A
   \   000002   EA           MOV     A,R2
   \   000003   F0           MOVX    @DPTR,A
   \   000004   A3           INC     DPTR
   \   000005   EB           MOV     A,R3
   \   000006   F0           MOVX    @DPTR,A
   \   000007   EA           MOV     A,R2
   \   000008   4B           ORL     A,R3
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine94:
   \   000000   90....       MOV     DPTR,#matchED
   \   000003   E0           MOVX    A,@DPTR
   \   000004   2417         ADD     A,#0x17
   \   000006   FA           MOV     R2,A
   \   000007   A3           INC     DPTR
   \   000008   E0           MOVX    A,@DPTR
   \   000009   3400         ADDC    A,#0x0
   \   00000B   FB           MOV     R3,A
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine60:
   \   000000   12....       LCALL   ?Subroutine149 & 0xFFFF
   \                     ??CrossCallReturnLabel_542:
   \   000003   12....       LCALL   ?Subroutine171 & 0xFFFF
   \                     ??CrossCallReturnLabel_255:
   \   000006   E0           MOVX    A,@DPTR
   \   000007   6402         XRL     A,#0x2
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine47:
   \   000000   12....       LCALL   ?Subroutine149 & 0xFFFF
   \                     ??CrossCallReturnLabel_541:
   \   000003   2431         ADD     A,#0x31
   \   000005   F582         MOV     DPL,A
   \   000007   E4           CLR     A
   \   000008   38           ADDC    A,R0
   \   000009   F583         MOV     DPH,A
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000   12....       LCALL   ??Subroutine218_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_459:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   E8           MOV     A,R0
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   12....       LCALL   ?Subroutine135 & 0xFFFF
   \                     ??CrossCallReturnLabel_458:
   \   000006   F583         MOV     DPH,A
   \   000008   8882         MOV     DPL,R0
   \   00000A   A3           INC     DPTR
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   F5..         MOV     ?V0,A
   \   00000E   78..         MOV     R0,#?V0
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine70:
   \   000000   F582         MOV     DPL,A
   \   000002   E4           CLR     A
   \   000003   38           ADDC    A,R0
   \   000004   12....       LCALL   ?Subroutine156 & 0xFFFF
   \                     ??CrossCallReturnLabel_534:
   \   000007                REQUIRE ??Subroutine228_0
   \   000007                ; // Fall through to label ??Subroutine228_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine228_0:
   \   000000   90....       MOV     DPTR,#matchED
   \   000003                REQUIRE ??Subroutine229_0
   \   000003                ; // Fall through to label ??Subroutine229_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine156:
   \   000000   F583         MOV     DPH,A
   \   000002                REQUIRE ??Subroutine230_0
   \   000002                ; // Fall through to label ??Subroutine230_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine149:
   \   000000   90....       MOV     DPTR,#matchED
   \   000003                REQUIRE ??Subroutine231_0
   \   000003                ; // Fall through to label ??Subroutine231_0
   2110          
   2111          /*********************************************************************
   2112           * @fn      ZDO_RemoveMatchMemory()
   2113           *
   2114           * @brief   Called to clear the memory used for the end device bind.
   2115           *
   2116           * @param  none
   2117           *
   2118           * @return  none
   2119           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2120          static void ZDO_RemoveMatchMemory( void )
   \                     ZDO_RemoveMatchMemory:
   2121          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2122            if ( matchED != NULL )
   \   000004   90....       MOV     DPTR,#matchED
   \   000007   12....       LCALL   ??Subroutine216_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_449:
   \   00000A   605D         JZ      ??ZDO_RemoveMatchMemory_0
   2123            {
   2124              if ( matchED->ed2Matched != NULL )
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   C8           XCH     A,R0
   \   00000E   2435         ADD     A,#0x35
   \   000010   12....       LCALL   ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_299:
   \   000013   6003         JZ      ??ZDO_RemoveMatchMemory_1
   2125                osal_mem_free( matchED->ed2Matched );
   \   000015                ; Setup parameters for call to function osal_mem_free
   \   000015   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2126              if ( matchED->ed1Matched != NULL )
   \                     ??ZDO_RemoveMatchMemory_1:
   \   000018   12....       LCALL   ??Subroutine228_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_522:
   \   00001B   2432         ADD     A,#0x32
   \   00001D   12....       LCALL   ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_300:
   \   000020   6003         JZ      ??ZDO_RemoveMatchMemory_2
   2127                osal_mem_free( matchED->ed1Matched );
   \   000022                ; Setup parameters for call to function osal_mem_free
   \   000022   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2128          
   2129              if ( matchED->ed1.inClusters != NULL )
   \                     ??ZDO_RemoveMatchMemory_2:
   \   000025   12....       LCALL   ??Subroutine228_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_523:
   \   000028   2412         ADD     A,#0x12
   \   00002A   12....       LCALL   ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_301:
   \   00002D   6003         JZ      ??ZDO_RemoveMatchMemory_3
   2130                osal_mem_free( matchED->ed1.inClusters );
   \   00002F                ; Setup parameters for call to function osal_mem_free
   \   00002F   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2131          
   2132              if ( matchED->ed1.outClusters != NULL )
   \                     ??ZDO_RemoveMatchMemory_3:
   \   000032   12....       LCALL   ??Subroutine228_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_524:
   \   000035   2415         ADD     A,#0x15
   \   000037   12....       LCALL   ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_302:
   \   00003A   6003         JZ      ??ZDO_RemoveMatchMemory_4
   2133                osal_mem_free( matchED->ed1.outClusters );
   \   00003C                ; Setup parameters for call to function osal_mem_free
   \   00003C   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2134          
   2135              if ( matchED->ed2.inClusters != NULL )
   \                     ??ZDO_RemoveMatchMemory_4:
   \   00003F   12....       LCALL   ??Subroutine228_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_525:
   \   000042   2429         ADD     A,#0x29
   \   000044   12....       LCALL   ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_303:
   \   000047   6003         JZ      ??ZDO_RemoveMatchMemory_5
   2136                osal_mem_free( matchED->ed2.inClusters );
   \   000049                ; Setup parameters for call to function osal_mem_free
   \   000049   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2137          
   2138              if ( matchED->ed2.outClusters != NULL )
   \                     ??ZDO_RemoveMatchMemory_5:
   \   00004C   12....       LCALL   ??Subroutine228_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_526:
   \   00004F   242C         ADD     A,#0x2c
   \   000051   12....       LCALL   ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_304:
   \   000054   6003         JZ      ??ZDO_RemoveMatchMemory_6
   2139                osal_mem_free( matchED->ed2.outClusters );
   \   000056                ; Setup parameters for call to function osal_mem_free
   \   000056   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2140          
   2141              osal_mem_free( matchED );
   \                     ??ZDO_RemoveMatchMemory_6:
   \   000059                ; Setup parameters for call to function osal_mem_free
   \   000059   90....       MOV     DPTR,#matchED
   \   00005C   12....       LCALL   ??Subroutine214_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_425:
   \   00005F   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2142          
   2143              matchED = (ZDMatchEndDeviceBind_t *)NULL;
   \   000062   90....       MOV     DPTR,#matchED
   \   000065   E4           CLR     A
   \   000066   F0           MOVX    @DPTR,A
   \   000067   A3           INC     DPTR
   \   000068   F0           MOVX    @DPTR,A
   2144            }
   2145          }
   \                     ??ZDO_RemoveMatchMemory_0:
   \   000069   02....       LJMP    ??Subroutine181_0 & 0xFFFF
   2146          
   2147          /*********************************************************************
   2148           * @fn      ZDO_CopyMatchInfo()
   2149           *
   2150           * @brief   Called to copy memory used for the end device bind.
   2151           *
   2152           * @param  srcReq - source information
   2153           * @param  dstReq - destination location
   2154           *
   2155           * @return  TRUE if copy was successful.
   2156           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine127:
   \   000000   E5..         MOV     A,?V6
   \   000002                REQUIRE ??Subroutine211_0
   \   000002                ; // Fall through to label ??Subroutine211_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2157          static uint8 ZDO_CopyMatchInfo( ZDEndDeviceBind_t *destReq, ZDEndDeviceBind_t *srcReq )
   \                     ZDO_CopyMatchInfo:
   2158          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V6,R2
   \   000007   8B..         MOV     ?V7,R3
   \   000009   8C..         MOV     ?V4,R4
   \   00000B   8D..         MOV     ?V5,R5
   2159            uint8 allOK = TRUE;
   \   00000D   7E01         MOV     R6,#0x1
   2160          
   2161            // Copy bind information into the match info structure
   2162            osal_memcpy( (uint8 *)destReq, srcReq, sizeof ( ZDEndDeviceBind_t ) );
   \   00000F                ; Setup parameters for call to function osal_memcpy
   \   00000F   8C..         MOV     ?V0,R4
   \   000011   8D..         MOV     ?V1,R5
   \   000013   75..00       MOV     ?V2,#0x0
   \   000016   78..         MOV     R0,#?V0
   \   000018   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00001B   7C17         MOV     R4,#0x17
   \   00001D   7D00         MOV     R5,#0x0
   \   00001F   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000022   7403         MOV     A,#0x3
   \   000024   12....       LCALL   ?DEALLOC_XSTACK8
   \   000027   12....       LCALL   ?Subroutine127 & 0xFFFF
   \                     ??CrossCallReturnLabel_394:
   \   00002A   12....       LCALL   ?Subroutine131 & 0xFFFF
   \                     ??CrossCallReturnLabel_202:
   \   00002D   12....       LCALL   ?Subroutine167 & 0xFFFF
   \                     ??CrossCallReturnLabel_474:
   \   000030   12....       LCALL   ?Subroutine131 & 0xFFFF
   \                     ??CrossCallReturnLabel_203:
   \   000033   E5..         MOV     A,?V4
   \   000035   2411         ADD     A,#0x11
   \   000037   12....       LCALL   ?Subroutine119 & 0xFFFF
   \                     ??CrossCallReturnLabel_462:
   \   00003A   FA           MOV     R2,A
   \   00003B   602C         JZ      ??ZDO_CopyMatchInfo_0
   2163          
   2164            // Initialize the destination cluster pointers
   2165            destReq->inClusters = NULL;
   2166            destReq->outClusters = NULL;
   2167          
   2168            // Copy input cluster IDs
   2169            if ( srcReq->numInClusters )
   2170            {
   2171              destReq->inClusters = osal_mem_alloc( (short)(srcReq->numInClusters * sizeof ( uint16 )) );
   \   00003D                ; Setup parameters for call to function osal_mem_alloc
   \   00003D   12....       LCALL   ?Subroutine100 & 0xFFFF
   \                     ??CrossCallReturnLabel_144:
   \   000040   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000043   E5..         MOV     A,?V6
   \   000045   2412         ADD     A,#0x12
   \   000047   12....       LCALL   ?Subroutine23 & 0xFFFF
   2172              if ( destReq->inClusters )
   \                     ??CrossCallReturnLabel_468:
   \   00004A   601B         JZ      ??ZDO_CopyMatchInfo_1
   2173              {
   2174                // Copy the clusters
   2175                osal_memcpy( (uint8*)(destReq->inClusters), (uint8 *)(srcReq->inClusters),
   2176                                (srcReq->numInClusters * sizeof ( uint16 )) );
   \   00004C                ; Setup parameters for call to function osal_memcpy
   \   00004C   E5..         MOV     A,?V4
   \   00004E   2412         ADD     A,#0x12
   \   000050   12....       LCALL   ?Subroutine87 & 0xFFFF
   2177              }
   \                     ??CrossCallReturnLabel_113:
   \   000053   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000056   E5..         MOV     A,?V4
   \   000058   2411         ADD     A,#0x11
   \   00005A   12....       LCALL   ?Subroutine105 & 0xFFFF
   \                     ??CrossCallReturnLabel_466:
   \   00005D   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000060   7403         MOV     A,#0x3
   \   000062   12....       LCALL   ?DEALLOC_XSTACK8
   \   000065   8002         SJMP    ??ZDO_CopyMatchInfo_0
   2178              else
   2179                allOK = FALSE;
   \                     ??ZDO_CopyMatchInfo_1:
   \   000067   7E00         MOV     R6,#0x0
   \                     ??ZDO_CopyMatchInfo_0:
   \   000069   E5..         MOV     A,?V4
   \   00006B   2414         ADD     A,#0x14
   2180            }
   \   00006D   12....       LCALL   ?Subroutine119 & 0xFFFF
   \                     ??CrossCallReturnLabel_463:
   \   000070   FA           MOV     R2,A
   \   000071   6028         JZ      ??ZDO_CopyMatchInfo_2
   2181          
   2182            // Copy output cluster IDs
   2183            if ( srcReq->numOutClusters )
   2184            {
   2185              destReq->outClusters = osal_mem_alloc( (short)(srcReq->numOutClusters * sizeof ( uint16 )) );
   \   000073                ; Setup parameters for call to function osal_mem_alloc
   \   000073   12....       LCALL   ?Subroutine100 & 0xFFFF
   \                     ??CrossCallReturnLabel_145:
   \   000076   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000079   E5..         MOV     A,?V6
   \   00007B   2415         ADD     A,#0x15
   \   00007D   12....       LCALL   ?Subroutine23 & 0xFFFF
   2186              if ( destReq->outClusters )
   \                     ??CrossCallReturnLabel_469:
   \   000080   603D         JZ      ??ZDO_CopyMatchInfo_3
   2187              {
   2188                // Copy the clusters
   2189                osal_memcpy( (uint8 *)(destReq->outClusters), (uint8 *)(srcReq->outClusters),
   2190                                (srcReq->numOutClusters * sizeof ( uint16 )) );
   \   000082                ; Setup parameters for call to function osal_memcpy
   \   000082   E5..         MOV     A,?V4
   \   000084   2415         ADD     A,#0x15
   \   000086   12....       LCALL   ?Subroutine87 & 0xFFFF
   2191              }
   \                     ??CrossCallReturnLabel_114:
   \   000089   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00008C   E5..         MOV     A,?V4
   \   00008E   2414         ADD     A,#0x14
   \   000090   12....       LCALL   ?Subroutine105 & 0xFFFF
   \                     ??CrossCallReturnLabel_467:
   \   000093   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000096   7403         MOV     A,#0x3
   \   000098   12....       LCALL   ?DEALLOC_XSTACK8
   2192              else
   2193                allOK = FALSE;
   2194            }
   2195          
   2196            if ( !allOK )
   \                     ??ZDO_CopyMatchInfo_2:
   \   00009B   EE           MOV     A,R6
   \   00009C   A2E0         MOV     C,0xE0 /* A   */.0
   \   00009E   401A         JC      ??ZDO_CopyMatchInfo_4
   2197            {
   2198              if ( destReq->inClusters != NULL )
   \                     ??ZDO_CopyMatchInfo_5:
   \   0000A0   12....       LCALL   ?Subroutine127 & 0xFFFF
   \                     ??CrossCallReturnLabel_395:
   \   0000A3   35..         ADDC    A,?V7
   \   0000A5   12....       LCALL   ??Subroutine192_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_295:
   \   0000A8   6003         JZ      ??ZDO_CopyMatchInfo_6
   2199                osal_mem_free( destReq->inClusters );
   \   0000AA                ; Setup parameters for call to function osal_mem_free
   \   0000AA   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2200              if ( destReq->outClusters != NULL )
   \                     ??ZDO_CopyMatchInfo_6:
   \   0000AD   12....       LCALL   ?Subroutine167 & 0xFFFF
   \                     ??CrossCallReturnLabel_475:
   \   0000B0   35..         ADDC    A,?V7
   \   0000B2   12....       LCALL   ??Subroutine192_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_296:
   \   0000B5   6003         JZ      ??ZDO_CopyMatchInfo_4
   2201                osal_mem_free( destReq->outClusters );
   \   0000B7                ; Setup parameters for call to function osal_mem_free
   \   0000B7   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2202            }
   2203          
   2204            return ( allOK );
   \                     ??ZDO_CopyMatchInfo_4:
   \   0000BA   EE           MOV     A,R6
   \   0000BB   F9           MOV     R1,A
   \   0000BC   02....       LJMP    ??Subroutine202_0 & 0xFFFF
   \                     ??ZDO_CopyMatchInfo_3:
   \   0000BF   7E00         MOV     R6,#0x0
   \   0000C1   80DD         SJMP    ??ZDO_CopyMatchInfo_5
   2205          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine131:
   \   000000   35..         ADDC    A,?V7
   \   000002   F583         MOV     DPH,A
   \   000004   E4           CLR     A
   \   000005   F0           MOVX    @DPTR,A
   \   000006   A3           INC     DPTR
   \   000007   F0           MOVX    @DPTR,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine105:
   \   000000   F582         MOV     DPL,A
   \   000002   E4           CLR     A
   \   000003   35..         ADDC    A,?V5
   \   000005   F583         MOV     DPH,A
   \   000007   E0           MOVX    A,@DPTR
   \   000008                REQUIRE ??Subroutine220_0
   \   000008                ; // Fall through to label ??Subroutine220_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine87:
   \   000000   F582         MOV     DPL,A
   \   000002   E4           CLR     A
   \   000003   35..         ADDC    A,?V5
   \   000005   F583         MOV     DPH,A
   \   000007   E0           MOVX    A,@DPTR
   \   000008   F5..         MOV     ?V0,A
   \   00000A   A3           INC     DPTR
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   F5..         MOV     ?V1,A
   \   00000E   78..         MOV     R0,#?V0
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   F582         MOV     DPL,A
   \   000002   E4           CLR     A
   \   000003   35..         ADDC    A,?V7
   \   000005                REQUIRE ??Subroutine221_0
   \   000005                ; // Fall through to label ??Subroutine221_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine167:
   \   000000   E5..         MOV     A,?V6
   \   000002                REQUIRE ??Subroutine222_0
   \   000002                ; // Fall through to label ??Subroutine222_0
   2206          
   2207          /*********************************************************************
   2208           * @fn      ZDMatchSendState()
   2209           *
   2210           * @brief   State machine for the End device match message algorithm.
   2211           *
   2212           * @param  reason - state of algoritm
   2213           * @param  status - initial message status
   2214           * @param  TransSeq - next transaction sequence number
   2215           *
   2216           * @return  FALSE if error and we are not currently matching, TRUE
   2217           *          if success.
   2218           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2219          uint8 ZDMatchSendState( uint8 reason, uint8 status, uint8 TransSeq )
   \                     ZDMatchSendState:
   2220          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV     A,#-0x15
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   7401         MOV     A,#0x1
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   EA           MOV     A,R2
   \   000010   F0           MOVX    @DPTR,A
   \   000011   7402         MOV     A,#0x2
   \   000013   12....       LCALL   ?XSTACK_DISP0_8
   \   000016   EB           MOV     A,R3
   \   000017   F0           MOVX    @DPTR,A
   \   000018   89..         MOV     ?V2,R1
   2221            uint8 *dstIEEEAddr = NULL;
   \   00001A   75..00       MOV     ?V4,#0x0
   \   00001D   75..00       MOV     ?V5,#0x0
   2222            uint8 dstEP = 0xFF;
   \   000020   75..FF       MOV     ?V3,#-0x1
   2223            zAddrType_t dstAddr;
   2224            zAddrType_t destinationAddr;
   2225            uint16 msgType;
   2226            uint16 clusterID = 0xFFFF;
   \   000023   7EFF         MOV     R6,#-0x1
   \   000025   7FFF         MOV     R7,#-0x1
   2227            ZDEndDeviceBind_t *ed = NULL;
   \   000027   75..00       MOV     ?V6,#0x0
   \   00002A   75..00       MOV     ?V7,#0x0
   2228            uint8 rspStatus = ZDP_SUCCESS;
   \   00002D   85..82       MOV     DPL,?XSP + 0
   \   000030   85..83       MOV     DPH,?XSP + 1
   \   000033   E4           CLR     A
   \   000034   12....       LCALL   ?Subroutine42 & 0xFFFF
   2229          
   2230            if ( matchED == NULL )
   \                     ??CrossCallReturnLabel_51:
   \   000037   F9           MOV     R1,A
   \   000038   E8           MOV     A,R0
   \   000039   49           ORL     A,R1
   \   00003A   6020         JZ      ??ZDMatchSendState_0
   2231              return ( FALSE );
   2232          
   2233            // Check sequence number
   2234            if ( reason == ZDMATCH_REASON_BIND_RSP || reason == ZDMATCH_REASON_UNBIND_RSP )
   \   00003C   7403         MOV     A,#0x3
   \   00003E   65..         XRL     A,?V2
   \   000040   6006         JZ      ??ZDMatchSendState_1
   \   000042   7402         MOV     A,#0x2
   \   000044   65..         XRL     A,?V2
   \   000046   7019         JNZ     ??ZDMatchSendState_2
   2235            {
   2236              if ( TransSeq != matchED->transSeq )
   \                     ??ZDMatchSendState_1:
   \   000048   7402         MOV     A,#0x2
   \   00004A   12....       LCALL   ?XSTACK_DISP0_8
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   F9           MOV     R1,A
   \   00004F   90....       MOV     DPTR,#matchED + 1
   \   000052   E0           MOVX    A,@DPTR
   \   000053   C8           XCH     A,R0
   \   000054   2430         ADD     A,#0x30
   \   000056   12....       LCALL   ?Subroutine118 & 0xFFFF
   \                     ??CrossCallReturnLabel_405:
   \   000059   69           XRL     A,R1
   \   00005A   6005         JZ      ??ZDMatchSendState_2
   2237                return( FALSE ); // ignore the message
   \                     ??ZDMatchSendState_0:
   \   00005C   7900         MOV     R1,#0x0
   \   00005E   02....       LJMP    ??ZDMatchSendState_3 & 0xFFFF
   2238            }
   2239          
   2240            // turn off timer
   2241            APS_SetEndDeviceBindTimeout( 0, ZDO_EndDeviceBindMatchTimeoutCB );
   \                     ??ZDMatchSendState_2:
   \   000061                ; Setup parameters for call to function APS_SetEndDeviceBindTimeout
   \   000061   7C..         MOV     R4,#`??ZDO_EndDeviceBindMatchTimeoutCB::?relay` & 0xff
   \   000063   7D..         MOV     R5,#(`??ZDO_EndDeviceBindMatchTimeoutCB::?relay` >> 8) & 0xff
   \   000065   7A00         MOV     R2,#0x0
   \   000067   7B00         MOV     R3,#0x0
   \   000069   12....       LCALL   `??APS_SetEndDeviceBindTimeout::?relay`; Banked call to: APS_SetEndDeviceBindTimeout
   2242          
   2243            if ( reason == ZDMATCH_REASON_TIMEOUT )
   \   00006C   7401         MOV     A,#0x1
   \   00006E   65..         XRL     A,?V2
   \   000070   700A         JNZ     ??ZDMatchSendState_4
   2244            {
   2245              rspStatus = ZDP_TIMEOUT;    // The process will stop
   \   000072   85..82       MOV     DPL,?XSP + 0
   \   000075   85..83       MOV     DPH,?XSP + 1
   \   000078   7485         MOV     A,#-0x7b
   \   00007A   8045         SJMP    ??ZDMatchSendState_5
   2246            }
   2247          
   2248            if ( reason == ZDMATCH_REASON_START || reason == ZDMATCH_REASON_BIND_RSP )
   \                     ??ZDMatchSendState_4:
   \   00007C   E5..         MOV     A,?V2
   \   00007E   6006         JZ      ??ZDMatchSendState_6
   \   000080   7403         MOV     A,#0x3
   \   000082   65..         XRL     A,?V2
   \   000084   701D         JNZ     ??ZDMatchSendState_7
   2249            {
   2250              matchED->sending = ZDMATCH_SENDING_UNBIND;
   \                     ??ZDMatchSendState_6:
   \   000086   90....       MOV     DPTR,#matchED
   \   000089   12....       LCALL   ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_83:
   \   00008C   F0           MOVX    @DPTR,A
   2251          
   2252              if ( reason == ZDMATCH_REASON_BIND_RSP && status != ZDP_SUCCESS )
   \   00008D   7403         MOV     A,#0x3
   \   00008F   65..         XRL     A,?V2
   \   000091   7031         JNZ     ??ZDMatchSendState_8
   \   000093   7401         MOV     A,#0x1
   \   000095   12....       LCALL   ?XSTACK_DISP0_8
   \   000098   E0           MOVX    A,@DPTR
   \   000099   602D         JZ      ??ZDMatchSendState_9
   2253              {
   2254                rspStatus = status;
   \   00009B   85..82       MOV     DPL,?XSP + 0
   \   00009E   85..83       MOV     DPH,?XSP + 1
   \   0000A1   801E         SJMP    ??ZDMatchSendState_5
   2255              }
   2256            }
   2257            else if ( reason == ZDMATCH_REASON_UNBIND_RSP )
   \                     ??ZDMatchSendState_7:
   \   0000A3   7402         MOV     A,#0x2
   \   0000A5   65..         XRL     A,?V2
   \   0000A7   701F         JNZ     ??ZDMatchSendState_9
   2258            {
   2259              if ( status == ZDP_SUCCESS )
   \   0000A9   7401         MOV     A,#0x1
   \   0000AB   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AE   E0           MOVX    A,@DPTR
   \   0000AF   90....       MOV     DPTR,#matchED
   \   0000B2   7005         JNZ     ??ZDMatchSendState_10
   2260              {
   2261                matchED->sending = ZDMATCH_SENDING_UNBIND;
   \   0000B4   12....       LCALL   ?Subroutine65 & 0xFFFF
   2262              }
   \                     ??CrossCallReturnLabel_84:
   \   0000B7   8008         SJMP    ??ZDMatchSendState_5
   2263              else
   2264              {
   2265                matchED->sending = ZDMATCH_SENDING_BIND;
   \                     ??ZDMatchSendState_10:
   \   0000B9   12....       LCALL   ??Subroutine229_0 & 0xFFFF
   2266              }
   2267            }
   \                     ??CrossCallReturnLabel_508:
   \   0000BC   12....       LCALL   ?Subroutine179 & 0xFFFF
   \                     ??CrossCallReturnLabel_261:
   \   0000BF   7402         MOV     A,#0x2
   \                     ??ZDMatchSendState_5:
   \   0000C1   F0           MOVX    @DPTR,A
   \   0000C2   8004         SJMP    ??ZDMatchSendState_9
   2268          
   2269            if ( reason != ZDMATCH_REASON_START && matchED->sending == ZDMATCH_SENDING_UNBIND )
   \                     ??ZDMatchSendState_8:
   \   0000C4   E5..         MOV     A,?V2
   \   0000C6   601D         JZ      ??ZDMatchSendState_11
   \                     ??ZDMatchSendState_9:
   \   0000C8   12....       LCALL   ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_76:
   \   0000CB   7018         JNZ     ??ZDMatchSendState_11
   2270            {
   2271              // Move to the next cluster ID
   2272              if ( matchED->ed1numMatched )
   \   0000CD   90....       MOV     DPTR,#matchED
   \   0000D0   E0           MOVX    A,@DPTR
   \   0000D1   2431         ADD     A,#0x31
   \   0000D3   12....       LCALL   ?Subroutine90 & 0xFFFF
   \                     ??CrossCallReturnLabel_118:
   \   0000D6   700B         JNZ     ??ZDMatchSendState_12
   2273                matchED->ed1numMatched--;
   2274              else if ( matchED->ed2numMatched )
   \   0000D8   90....       MOV     DPTR,#matchED
   \   0000DB   E0           MOVX    A,@DPTR
   \   0000DC   2434         ADD     A,#0x34
   \   0000DE   12....       LCALL   ?Subroutine90 & 0xFFFF
   \                     ??CrossCallReturnLabel_119:
   \   0000E1   6002         JZ      ??ZDMatchSendState_11
   2275                matchED->ed2numMatched--;
   \                     ??ZDMatchSendState_12:
   \   0000E3   2E           ADD     A,R6
   \   0000E4   F0           MOVX    @DPTR,A
   2276            }
   2277          
   2278            // What message do we send now
   2279            if ( matchED->ed1numMatched )
   \                     ??ZDMatchSendState_11:
   \   0000E5   12....       LCALL   ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   0000E8   F8           MOV     R0,A
   \   0000E9   90....       MOV     DPTR,#matchED
   \   0000EC   601E         JZ      ??ZDMatchSendState_13
   2280            {
   2281              ed = &(matchED->ed1);
   \   0000EE   E0           MOVX    A,@DPTR
   \   0000EF   F5..         MOV     ?V6,A
   \   0000F1   A3           INC     DPTR
   \   0000F2   E0           MOVX    A,@DPTR
   \   0000F3   12....       LCALL   ?Subroutine103 & 0xFFFF
   2282              clusterID = matchED->ed1Matched[matchED->ed1numMatched-1];
   \                     ??CrossCallReturnLabel_152:
   \   0000F6   2432         ADD     A,#0x32
   \   0000F8   12....       LCALL   ?Subroutine46 & 0xFFFF
   2283              dstIEEEAddr = matchED->ed2.ieeeAddr;
   \                     ??CrossCallReturnLabel_54:
   \   0000FB   241D         ADD     A,#0x1d
   \   0000FD   F5..         MOV     ?V4,A
   \   0000FF   A3           INC     DPTR
   \   000100   E0           MOVX    A,@DPTR
   \   000101   3400         ADDC    A,#0x0
   \   000103   F5..         MOV     ?V5,A
   2284              dstEP = matchED->ed2.endpoint;
   \   000105   12....       LCALL   ??Subroutine228_0 & 0xFFFF
   2285            }
   \                     ??CrossCallReturnLabel_527:
   \   000108   2425         ADD     A,#0x25
   \   00010A   8029         SJMP    ??ZDMatchSendState_14
   2286            else if ( matchED->ed2numMatched )
   \                     ??ZDMatchSendState_13:
   \   00010C   12....       LCALL   ??Subroutine215_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_433:
   \   00010F   F8           MOV     R0,A
   \   000110   6028         JZ      ??ZDMatchSendState_15
   2287            {
   2288              ed = &(matchED->ed2);
   \   000112   90....       MOV     DPTR,#matchED
   \   000115   E0           MOVX    A,@DPTR
   \   000116   2417         ADD     A,#0x17
   \   000118   F5..         MOV     ?V6,A
   \   00011A   A3           INC     DPTR
   \   00011B   E0           MOVX    A,@DPTR
   \   00011C   3400         ADDC    A,#0x0
   \   00011E   12....       LCALL   ?Subroutine103 & 0xFFFF
   2289              clusterID = matchED->ed2Matched[matchED->ed2numMatched-1];
   \                     ??CrossCallReturnLabel_153:
   \   000121   2435         ADD     A,#0x35
   \   000123   12....       LCALL   ?Subroutine46 & 0xFFFF
   2290              dstIEEEAddr = matchED->ed1.ieeeAddr;
   \                     ??CrossCallReturnLabel_55:
   \   000126   2406         ADD     A,#0x6
   \   000128   F5..         MOV     ?V4,A
   \   00012A   A3           INC     DPTR
   \   00012B   E0           MOVX    A,@DPTR
   \   00012C   3400         ADDC    A,#0x0
   \   00012E   F5..         MOV     ?V5,A
   2291              dstEP = matchED->ed1.endpoint;
   \   000130   12....       LCALL   ??Subroutine228_0 & 0xFFFF
   2292            }
   \                     ??CrossCallReturnLabel_528:
   \   000133   240E         ADD     A,#0xe
   \                     ??ZDMatchSendState_14:
   \   000135   12....       LCALL   ?Subroutine118 & 0xFFFF
   \                     ??CrossCallReturnLabel_406:
   \   000138   F5..         MOV     ?V3,A
   2293          
   2294            dstAddr.addrMode = Addr16Bit;
   \                     ??ZDMatchSendState_15:
   \   00013A   740B         MOV     A,#0xb
   \   00013C   12....       LCALL   ?XSTACK_DISP0_8
   \   00013F   7402         MOV     A,#0x2
   \   000141   12....       LCALL   ??Subroutine242_0 & 0xFFFF
   2295          
   2296            // Send the next message
   2297            if ( rspStatus == ZDP_SUCCESS && ed )
   \                     ??CrossCallReturnLabel_622:
   \   000144   6003         JZ      $+5
   \   000146   02....       LJMP    ??ZDMatchSendState_16 & 0xFFFF
   \   000149   E5..         MOV     A,?V6
   \   00014B   45..         ORL     A,?V7
   \   00014D   7003         JNZ     $+5
   \   00014F   02....       LJMP    ??ZDMatchSendState_16 & 0xFFFF
   2298            {
   2299              // Send unbind/bind message to source
   2300              if ( matchED->sending == ZDMATCH_SENDING_UNBIND )
   \   000152   12....       LCALL   ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_77:
   \   000155   7005         JNZ     ??ZDMatchSendState_17
   2301                msgType = Unbind_req;
   \   000157   75..22       MOV     ?V0,#0x22
   \   00015A   8003         SJMP    ??ZDMatchSendState_18
   2302              else
   2303                msgType = Bind_req;
   \                     ??ZDMatchSendState_17:
   \   00015C   75..21       MOV     ?V0,#0x21
   \                     ??ZDMatchSendState_18:
   \   00015F   75..00       MOV     ?V1,#0x0
   2304          
   2305              dstAddr.addr.shortAddr = ed->srcAddr;
   \   000162   85..82       MOV     DPL,?V6
   \   000165   85..83       MOV     DPH,?V7
   \   000168   12....       LCALL   ?Subroutine62 & 0xFFFF
   \                     ??CrossCallReturnLabel_602:
   \   00016B   12....       LCALL   ?XSTACK_DISP0_8
   \   00016E   12....       LCALL   ??Subroutine196_0 & 0xFFFF
   2306          
   2307              // Save off the transaction sequence number
   2308              matchED->transSeq = ZDP_TransID;
   \                     ??CrossCallReturnLabel_319:
   \   000171   90....       MOV     DPTR,#ZDP_TransID
   \   000174   E0           MOVX    A,@DPTR
   \   000175   C0E0         PUSH    A
   \   000177   12....       LCALL   ??Subroutine228_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_529:
   \   00017A   2430         ADD     A,#0x30
   \   00017C   F582         MOV     DPL,A
   \   00017E   E4           CLR     A
   \   00017F   38           ADDC    A,R0
   \   000180   F583         MOV     DPH,A
   \   000182   D0E0         POP     A
   \   000184   F0           MOVX    @DPTR,A
   2309          
   2310              destinationAddr.addrMode = Addr64Bit;
   \   000185   7414         MOV     A,#0x14
   \   000187   12....       LCALL   ?XSTACK_DISP0_8
   \   00018A   7403         MOV     A,#0x3
   \   00018C   F0           MOVX    @DPTR,A
   2311              osal_cpyExtAddr( destinationAddr.addr.extAddr, dstIEEEAddr );
   \   00018D                ; Setup parameters for call to function sAddrExtCpy
   \   00018D   AC..         MOV     R4,?V4
   \   00018F   AD..         MOV     R5,?V5
   \   000191   740C         MOV     A,#0xc
   \   000193   12....       LCALL   ?XSTACK_DISP101_8
   \   000196   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   2312          
   2313              ZDP_BindUnbindReq( msgType, &dstAddr, ed->ieeeAddr, ed->endpoint, clusterID,
   2314                  &destinationAddr, dstEP, ed->SecurityUse );
   \   000199                ; Setup parameters for call to function ZDP_BindUnbindReq
   \   000199   85..82       MOV     DPL,?V6
   \   00019C   85..83       MOV     DPH,?V7
   \   00019F   A3           INC     DPTR
   \   0001A0   E0           MOVX    A,@DPTR
   \   0001A1   F5..         MOV     ?V4,A
   \   0001A3   78..         MOV     R0,#?V4
   \   0001A5   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001A8   78..         MOV     R0,#?V3
   \   0001AA   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001AD   740E         MOV     A,#0xe
   \   0001AF   12....       LCALL   ?XSTACK_DISP100_8
   \   0001B2   88..         MOV     ?V4,R0
   \   0001B4   89..         MOV     ?V5,R1
   \   0001B6   78..         MOV     R0,#?V4
   \   0001B8   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001BB   8E..         MOV     ?V4,R6
   \   0001BD   8F..         MOV     ?V5,R7
   \   0001BF   78..         MOV     R0,#?V4
   \   0001C1   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001C4   E5..         MOV     A,?V6
   \   0001C6   2406         ADD     A,#0x6
   \   0001C8   F5..         MOV     ?V4,A
   \   0001CA   E4           CLR     A
   \   0001CB   35..         ADDC    A,?V7
   \   0001CD   F5..         MOV     ?V5,A
   \   0001CF   78..         MOV     R0,#?V4
   \   0001D1   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001D4   E5..         MOV     A,?V6
   \   0001D6   12....       LCALL   ??Subroutine223_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_478:
   \   0001D9   35..         ADDC    A,?V7
   \   0001DB   F583         MOV     DPH,A
   \   0001DD   E0           MOVX    A,@DPTR
   \   0001DE   F9           MOV     R1,A
   \   0001DF   740B         MOV     A,#0xb
   \   0001E1   12....       LCALL   ?XSTACK_DISP102_8
   \   0001E4   AA..         MOV     R2,?V0
   \   0001E6   AB..         MOV     R3,?V1
   \   0001E8   12....       LCALL   `??ZDP_BindUnbindReq::?relay`; Banked call to: ZDP_BindUnbindReq
   \   0001EB   7408         MOV     A,#0x8
   \   0001ED   12....       LCALL   ?DEALLOC_XSTACK8
   2315          
   2316              // Set timeout for response
   2317              APS_SetEndDeviceBindTimeout( AIB_MaxBindingTime, ZDO_EndDeviceBindMatchTimeoutCB );
   \   0001F0                ; Setup parameters for call to function APS_SetEndDeviceBindTimeout
   \   0001F0   7C..         MOV     R4,#`??ZDO_EndDeviceBindMatchTimeoutCB::?relay` & 0xff
   \   0001F2   7D..         MOV     R5,#(`??ZDO_EndDeviceBindMatchTimeoutCB::?relay` >> 8) & 0xff
   \   0001F4   90....       MOV     DPTR,#AIB_MaxBindingTime
   \   0001F7   12....       LCALL   ??Subroutine214_0 & 0xFFFF
   2318            }
   \                     ??CrossCallReturnLabel_426:
   \   0001FA   12....       LCALL   `??APS_SetEndDeviceBindTimeout::?relay`; Banked call to: APS_SetEndDeviceBindTimeout
   \   0001FD   02....       LJMP    ??ZDMatchSendState_19 & 0xFFFF
   2319            else
   2320            {
   2321              // Send the response messages to requesting devices
   2322              // send response to first requester
   2323              dstAddr.addr.shortAddr = matchED->ed1.srcAddr;
   \                     ??ZDMatchSendState_16:
   \   000200   90....       MOV     DPTR,#matchED
   \   000203   12....       LCALL   ?Subroutine98 & 0xFFFF
   \                     ??CrossCallReturnLabel_137:
   \   000206   12....       LCALL   ?Subroutine62 & 0xFFFF
   \                     ??CrossCallReturnLabel_603:
   \   000209   12....       LCALL   ?XSTACK_DISP0_8
   \   00020C   12....       LCALL   ?Subroutine13 & 0xFFFF
   2324              ZDP_EndDeviceBindRsp( matchED->ed1.TransSeq, &dstAddr, rspStatus, matchED->ed1.SecurityUse );
   \                     ??CrossCallReturnLabel_9:
   \   00020F   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000212   7401         MOV     A,#0x1
   \   000214   12....       LCALL   ?XSTACK_DISP100_8
   \   000217   88..         MOV     ?V0,R0
   \   000219   89..         MOV     ?V1,R1
   \   00021B   78..         MOV     R0,#?V0
   \   00021D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000220   75..20       MOV     ?V0,#0x20
   \   000223   75..80       MOV     ?V1,#-0x80
   \   000226   78..         MOV     R0,#?V0
   \   000228   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00022B   7901         MOV     R1,#0x1
   \   00022D   7408         MOV     A,#0x8
   \   00022F   12....       LCALL   ?XSTACK_DISP102_8
   \   000232   90....       MOV     DPTR,#matchED
   \   000235   12....       LCALL   ??Subroutine214_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_427:
   \   000238   12....       LCALL   `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   00023B   7405         MOV     A,#0x5
   \   00023D   12....       LCALL   ?DEALLOC_XSTACK8
   2325          
   2326              // send response to second requester
   2327              if ( matchED->state == ZDMATCH_SENDING_BINDS )
   \   000240   12....       LCALL   ?Subroutine60 & 0xFFFF
   \                     ??CrossCallReturnLabel_75:
   \   000243   704A         JNZ     ??ZDMatchSendState_20
   2328              {
   2329                dstAddr.addr.shortAddr = matchED->ed2.srcAddr;
   \   000245   12....       LCALL   ??Subroutine228_0 & 0xFFFF
   2330                ZDP_EndDeviceBindRsp( matchED->ed2.TransSeq, &dstAddr, rspStatus, matchED->ed2.SecurityUse );
   2331              }
   \                     ??CrossCallReturnLabel_530:
   \   000248   2419         ADD     A,#0x19
   \   00024A   F582         MOV     DPL,A
   \   00024C   E4           CLR     A
   \   00024D   38           ADDC    A,R0
   \   00024E   F583         MOV     DPH,A
   \   000250   12....       LCALL   ??Subroutine241_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_600:
   \   000253   12....       LCALL   ?XSTACK_DISP0_8
   \   000256   E8           MOV     A,R0
   \   000257   F0           MOVX    @DPTR,A
   \   000258   A3           INC     DPTR
   \   000259   12....       LCALL   ??Subroutine217_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_456:
   \   00025C   2418         ADD     A,#0x18
   \   00025E   12....       LCALL   ??Subroutine205_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_374:
   \   000261   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000264   7401         MOV     A,#0x1
   \   000266   12....       LCALL   ?XSTACK_DISP100_8
   \   000269   88..         MOV     ?V0,R0
   \   00026B   89..         MOV     ?V1,R1
   \   00026D   78..         MOV     R0,#?V0
   \   00026F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000272   75..20       MOV     ?V0,#0x20
   \   000275   75..80       MOV     ?V1,#-0x80
   \   000278   78..         MOV     R0,#?V0
   \   00027A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00027D   7901         MOV     R1,#0x1
   \   00027F   7408         MOV     A,#0x8
   \   000281   12....       LCALL   ?XSTACK_DISP102_8
   \   000284   12....       LCALL   ?Subroutine94 & 0xFFFF
   \                     ??CrossCallReturnLabel_126:
   \   000287   12....       LCALL   `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   00028A   7405         MOV     A,#0x5
   \   00028C   12....       LCALL   ?DEALLOC_XSTACK8
   2332          
   2333              // Process ended - release memory used
   2334              ZDO_RemoveMatchMemory();
   \                     ??ZDMatchSendState_20:
   \   00028F                ; Setup parameters for call to function ZDO_RemoveMatchMemory
   \   00028F   12....       LCALL   `??ZDO_RemoveMatchMemory::?relay`; Banked call to: ZDO_RemoveMatchMemory
   2335            }
   2336          
   2337            return ( TRUE );
   \                     ??ZDMatchSendState_19:
   \   000292   7901         MOV     R1,#0x1
   \                     ??ZDMatchSendState_3:
   \   000294   7415         MOV     A,#0x15
   \   000296   02....       LJMP    ?Subroutine6 & 0xFFFF
   2338          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine103:
   \   000000   F5..         MOV     ?V7,A
   \   000002   12....       LCALL   ?Subroutine161 & 0xFFFF
   \                     ??CrossCallReturnLabel_244:
   \   000005   90....       MOV     DPTR,#matchED
   \   000008   12....       LCALL   ??Subroutine239_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_587:
   \   00000B   CA           XCH     A,R2
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine90:
   \   000000   F8           MOV     R0,A
   \   000001   A3           INC     DPTR
   \   000002   E0           MOVX    A,@DPTR
   \   000003   3400         ADDC    A,#0x0
   \   000005   F9           MOV     R1,A
   \   000006   8882         MOV     DPL,R0
   \   000008   8983         MOV     DPH,R1
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine65:
   \   000000   12....       LCALL   ?Subroutine148 & 0xFFFF
   \                     ??CrossCallReturnLabel_231:
   \   000003   7401         MOV     A,#0x1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine61:
   \   000000   90....       MOV     DPTR,#matchED
   \   000003   12....       LCALL   ?Subroutine148 & 0xFFFF
   \                     ??CrossCallReturnLabel_230:
   \   000006   E0           MOVX    A,@DPTR
   \   000007   6401         XRL     A,#0x1
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine148:
   \   000000   12....       LCALL   ?Subroutine175 & 0xFFFF
   \                     ??CrossCallReturnLabel_616:
   \   000003   C8           XCH     A,R0
   \   000004   12....       LCALL   ?Subroutine179 & 0xFFFF
   \                     ??CrossCallReturnLabel_262:
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine179:
   \   000000   242F         ADD     A,#0x2f
   \   000002   F582         MOV     DPL,A
   \   000004   E4           CLR     A
   \   000005   38           ADDC    A,R0
   \   000006   F583         MOV     DPH,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine46:
   \   000000   F582         MOV     DPL,A
   \   000002   E4           CLR     A
   \   000003   3A           ADDC    A,R2
   \   000004   F583         MOV     DPH,A
   \   000006   E0           MOVX    A,@DPTR
   \   000007   28           ADD     A,R0
   \   000008   F8           MOV     R0,A
   \   000009   A3           INC     DPTR
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   39           ADDC    A,R1
   \   00000C   F9           MOV     R1,A
   \   00000D   E8           MOV     A,R0
   \   00000E   24FE         ADD     A,#-0x2
   \   000010   F582         MOV     DPL,A
   \   000012   E9           MOV     A,R1
   \   000013   34FF         ADDC    A,#-0x1
   \   000015   12....       LCALL   ?Subroutine155 & 0xFFFF
   \                     ??CrossCallReturnLabel_380:
   \   000018   90....       MOV     DPTR,#matchED
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine62:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002                REQUIRE ??Subroutine241_0
   \   000002                ; // Fall through to label ??Subroutine241_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine241_0:
   \   000000   12....       LCALL   ?Subroutine152 & 0xFFFF
   \                     ??CrossCallReturnLabel_610:
   \   000003   7403         MOV     A,#0x3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine242_0:
   \   000000   12....       LCALL   ?Subroutine144 & 0xFFFF
   \                     ??CrossCallReturnLabel_625:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine144:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007   E0           MOVX    A,@DPTR
   \   000008   22           RET
   2339          
   2340          /*********************************************************************
   2341           * @fn      ZDO_EndDeviceBindMatchTimeoutCB()
   2342           *
   2343           * @brief   End device bind timeout.
   2344           *
   2345           * @param  none
   2346           *
   2347           * @return  none
   2348           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2349          static void ZDO_EndDeviceBindMatchTimeoutCB( void )
   \                     ZDO_EndDeviceBindMatchTimeoutCB:
   2350          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2351            ZDMatchSendState( ZDMATCH_REASON_TIMEOUT, ZDP_TIMEOUT, 0 );
   \   000004                ; Setup parameters for call to function ZDMatchSendState
   \   000004   7B00         MOV     R3,#0x0
   \   000006   7A85         MOV     R2,#-0x7b
   \   000008   7901         MOV     R1,#0x1
   \   00000A   12....       LCALL   `??ZDMatchSendState::?relay`; Banked call to: ZDMatchSendState
   2352          }
   \   00000D   02....       LJMP    ??Subroutine181_0 & 0xFFFF
   2353          
   2354          /*********************************************************************
   2355           * ZDO MESSAGE PARSING API FUNCTIONS
   2356           */
   2357          
   2358          /*********************************************************************
   2359           * @fn          ZDO_ParseEndDeviceBindReq
   2360           *
   2361           * @brief       This function parses the End_Device_Bind_req message.
   2362           *
   2363           *     NOTE:  The clusters lists in bindReq are allocated in this
   2364           *            function and must be freed by that calling function.
   2365           *
   2366           * @param       inMsg  - incoming message (request)
   2367           * @param       bindReq - pointer to place to parse message to
   2368           *
   2369           * @return      none
   2370           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2371          void ZDO_ParseEndDeviceBindReq( zdoIncomingMsg_t *inMsg, ZDEndDeviceBind_t *bindReq )
   \                     ZDO_ParseEndDeviceBindReq:
   2372          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   8C..         MOV     ?V0,R4
   \   000007   8D..         MOV     ?V1,R5
   2373            uint8 *msg;
   2374          
   2375            // Parse the message
   2376            bindReq->TransSeq = inMsg->TransSeq;
   \   000009   EA           MOV     A,R2
   \   00000A   12....       LCALL   ?Subroutine117 & 0xFFFF
   \                     ??CrossCallReturnLabel_173:
   \   00000D   3B           ADDC    A,R3
   \   00000E   F583         MOV     DPH,A
   \   000010   12....       LCALL   ?Subroutine96 & 0xFFFF
   \                     ??CrossCallReturnLabel_130:
   \   000013   12....       LCALL   ?Subroutine41 & 0xFFFF
   2377            bindReq->srcAddr = inMsg->srcAddr.addr.shortAddr;
   \                     ??CrossCallReturnLabel_48:
   \   000016   F8           MOV     R0,A
   \   000017   A3           INC     DPTR
   \   000018   E0           MOVX    A,@DPTR
   \   000019   F9           MOV     R1,A
   \   00001A   8C82         MOV     DPL,R4
   \   00001C   8D83         MOV     DPH,R5
   \   00001E   A3           INC     DPTR
   \   00001F   A3           INC     DPTR
   \   000020   12....       LCALL   ??Subroutine196_0 & 0xFFFF
   2378            bindReq->SecurityUse = inMsg->SecurityUse;
   \                     ??CrossCallReturnLabel_320:
   \   000023   EA           MOV     A,R2
   \   000024   12....       LCALL   ??Subroutine223_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_479:
   \   000027   3B           ADDC    A,R3
   \   000028   F583         MOV     DPH,A
   \   00002A   12....       LCALL   ?Subroutine95 & 0xFFFF
   \                     ??CrossCallReturnLabel_127:
   \   00002D   12....       LCALL   ?Subroutine30 & 0xFFFF
   2379            msg = inMsg->asdu;
   \                     ??CrossCallReturnLabel_28:
   \   000030   FE           MOV     R6,A
   \   000031   A3           INC     DPTR
   \   000032   E0           MOVX    A,@DPTR
   \   000033   FF           MOV     R7,A
   2380          
   2381            bindReq->localCoordinator = BUILD_UINT16( msg[0], msg[1] );
   \   000034   12....       LCALL   ?Subroutine72 & 0xFFFF
   \                     ??CrossCallReturnLabel_91:
   \   000037   12....       LCALL   ?Subroutine15 & 0xFFFF
   2382            msg += 2;
   \                     ??CrossCallReturnLabel_483:
   \   00003A   5001         JNC     ??ZDO_ParseEndDeviceBindReq_0
   \   00003C   0F           INC     R7
   2383          
   2384            osal_cpyExtAddr( bindReq->ieeeAddr, msg );
   \                     ??ZDO_ParseEndDeviceBindReq_0:
   \   00003D                ; Setup parameters for call to function sAddrExtCpy
   \   00003D   FC           MOV     R4,A
   \   00003E   EF           MOV     A,R7
   \   00003F   FD           MOV     R5,A
   \   000040   E5..         MOV     A,?V0
   \   000042   2406         ADD     A,#0x6
   \   000044   FA           MOV     R2,A
   \   000045   E4           CLR     A
   \   000046   35..         ADDC    A,?V1
   \   000048   FB           MOV     R3,A
   \   000049   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   2385            msg += Z_EXTADDR_LEN;
   2386          
   2387            bindReq->endpoint = *msg++;
   \   00004C   8E82         MOV     DPL,R6
   \   00004E   8F83         MOV     DPH,R7
   \   000050   A3           INC     DPTR
   \   000051   A3           INC     DPTR
   \   000052   A3           INC     DPTR
   \   000053   A3           INC     DPTR
   \   000054   A3           INC     DPTR
   \   000055   A3           INC     DPTR
   \   000056   A3           INC     DPTR
   \   000057   A3           INC     DPTR
   \   000058   E0           MOVX    A,@DPTR
   \   000059   C0E0         PUSH    A
   \   00005B   12....       LCALL   ?Subroutine111 & 0xFFFF
   \                     ??CrossCallReturnLabel_160:
   \   00005E   D0E0         POP     A
   \   000060   12....       LCALL   ??Subroutine236_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_567:
   \   000063   5001         JNC     ??ZDO_ParseEndDeviceBindReq_1
   \   000065   0F           INC     R7
   2388            bindReq->profileID = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseEndDeviceBindReq_1:
   \   000066   12....       LCALL   ?Subroutine157 & 0xFFFF
   \                     ??CrossCallReturnLabel_234:
   \   000069   F8           MOV     R0,A
   \   00006A   12....       LCALL   ?Subroutine114 & 0xFFFF
   \                     ??CrossCallReturnLabel_165:
   \   00006D   12....       LCALL   ??Subroutine196_0 & 0xFFFF
   2389            msg += 2;
   2390          
   2391            bindReq->inClusters = NULL;
   \                     ??CrossCallReturnLabel_321:
   \   000070   E5..         MOV     A,?V0
   \   000072   2412         ADD     A,#0x12
   \   000074   F5..         MOV     ?V6,A
   \   000076   E4           CLR     A
   \   000077   35..         ADDC    A,?V1
   \   000079   F5..         MOV     ?V7,A
   \   00007B   85..82       MOV     DPL,?V6
   \   00007E   F583         MOV     DPH,A
   \   000080   E4           CLR     A
   \   000081   F0           MOVX    @DPTR,A
   \   000082   A3           INC     DPTR
   \   000083   F0           MOVX    @DPTR,A
   \   000084   12....       LCALL   ?Subroutine125 & 0xFFFF
   \                     ??CrossCallReturnLabel_187:
   \   000087   E4           CLR     A
   \   000088   F0           MOVX    @DPTR,A
   \   000089   A3           INC     DPTR
   \   00008A   12....       LCALL   ?Subroutine22 & 0xFFFF
   2392            bindReq->outClusters = NULL;
   2393          
   2394            if ((bindReq->numInClusters = *msg++) &&
   2395                (bindReq->inClusters = (uint16*)osal_mem_alloc( (bindReq->numInClusters * sizeof( uint16 )))))
   \                     ??CrossCallReturnLabel_19:
   \   00008D   FA           MOV     R2,A
   \   00008E   E5..         MOV     A,?V0
   \   000090   2411         ADD     A,#0x11
   \   000092   12....       LCALL   ?Subroutine129 & 0xFFFF
   \                     ??CrossCallReturnLabel_198:
   \   000095   F0           MOVX    @DPTR,A
   \   000096   EE           MOV     A,R6
   \   000097   2403         ADD     A,#0x3
   \   000099   FE           MOV     R6,A
   \   00009A   5001         JNC     ??ZDO_ParseEndDeviceBindReq_2
   \   00009C   0F           INC     R7
   \                     ??ZDO_ParseEndDeviceBindReq_2:
   \   00009D   EA           MOV     A,R2
   \   00009E   6038         JZ      ??ZDO_ParseEndDeviceBindReq_3
   \   0000A0                ; Setup parameters for call to function osal_mem_alloc
   \   0000A0   2A           ADD     A,R2
   \   0000A1   FA           MOV     R2,A
   \   0000A2   E4           CLR     A
   \   0000A3   33           RLC     A
   \   0000A4   FB           MOV     R3,A
   \   0000A5   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   0000A8   8A..         MOV     ?V4,R2
   \   0000AA   8B..         MOV     ?V5,R3
   \   0000AC   AC..         MOV     R4,?V4
   \   0000AE   AD..         MOV     R5,?V5
   \   0000B0   85..82       MOV     DPL,?V6
   \   0000B3   85..83       MOV     DPH,?V7
   \   0000B6   EC           MOV     A,R4
   \   0000B7   F0           MOVX    @DPTR,A
   \   0000B8   A3           INC     DPTR
   \   0000B9   ED           MOV     A,R5
   \   0000BA   F0           MOVX    @DPTR,A
   \   0000BB   EC           MOV     A,R4
   \   0000BC   4D           ORL     A,R5
   \   0000BD   6019         JZ      ??ZDO_ParseEndDeviceBindReq_3
   2396            {
   2397              msg = ZDO_ConvertOTAClusters( bindReq->numInClusters, msg, bindReq->inClusters );
   \   0000BF                ; Setup parameters for call to function ZDO_ConvertOTAClusters
   \   0000BF   EE           MOV     A,R6
   \   0000C0   FA           MOV     R2,A
   \   0000C1   EF           MOV     A,R7
   \   0000C2   FB           MOV     R3,A
   \   0000C3   85..82       MOV     DPL,?V2
   \   0000C6   85..83       MOV     DPH,?V3
   \   0000C9   E0           MOVX    A,@DPTR
   \   0000CA   F9           MOV     R1,A
   \   0000CB   12....       LCALL   `??ZDO_ConvertOTAClusters::?relay`; Banked call to: ZDO_ConvertOTAClusters
   \   0000CE   8A..         MOV     ?V2,R2
   \   0000D0   8B..         MOV     ?V3,R3
   \   0000D2   AE..         MOV     R6,?V2
   \   0000D4   AF..         MOV     R7,?V3
   \   0000D6   8008         SJMP    ??ZDO_ParseEndDeviceBindReq_4
   2398            }
   2399            else
   2400            {
   2401              bindReq->numInClusters = 0;
   \                     ??ZDO_ParseEndDeviceBindReq_3:
   \   0000D8   85..82       MOV     DPL,?V2
   \   0000DB   85..83       MOV     DPH,?V3
   \   0000DE   E4           CLR     A
   \   0000DF   F0           MOVX    @DPTR,A
   2402            }
   2403          
   2404            if ((bindReq->numOutClusters = *msg++) &&
   2405                (bindReq->outClusters = (uint16*)osal_mem_alloc((bindReq->numOutClusters * sizeof(uint16)))))
   \                     ??ZDO_ParseEndDeviceBindReq_4:
   \   0000E0   8E82         MOV     DPL,R6
   \   0000E2   8F83         MOV     DPH,R7
   \   0000E4   E0           MOVX    A,@DPTR
   \   0000E5   FA           MOV     R2,A
   \   0000E6   E5..         MOV     A,?V0
   \   0000E8   2414         ADD     A,#0x14
   \   0000EA   12....       LCALL   ?Subroutine129 & 0xFFFF
   \                     ??CrossCallReturnLabel_199:
   \   0000ED   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   0000F0   602D         JZ      ??ZDO_ParseEndDeviceBindReq_5
   \   0000F2                ; Setup parameters for call to function osal_mem_alloc
   \   0000F2   2A           ADD     A,R2
   \   0000F3   FA           MOV     R2,A
   \   0000F4   E4           CLR     A
   \   0000F5   33           RLC     A
   \   0000F6   FB           MOV     R3,A
   \   0000F7   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   0000FA   8A..         MOV     ?V4,R2
   \   0000FC   8B..         MOV     ?V5,R3
   \   0000FE   AC..         MOV     R4,?V4
   \   000100   AD..         MOV     R5,?V5
   \   000102   12....       LCALL   ?Subroutine125 & 0xFFFF
   \                     ??CrossCallReturnLabel_188:
   \   000105   EC           MOV     A,R4
   \   000106   F0           MOVX    @DPTR,A
   \   000107   A3           INC     DPTR
   \   000108   ED           MOV     A,R5
   \   000109   F0           MOVX    @DPTR,A
   \   00010A   EC           MOV     A,R4
   \   00010B   4D           ORL     A,R5
   \   00010C   6011         JZ      ??ZDO_ParseEndDeviceBindReq_5
   2406            {
   2407              msg = ZDO_ConvertOTAClusters( bindReq->numOutClusters, msg, bindReq->outClusters );
   \   00010E                ; Setup parameters for call to function ZDO_ConvertOTAClusters
   \   00010E   EE           MOV     A,R6
   \   00010F   FA           MOV     R2,A
   \   000110   EF           MOV     A,R7
   \   000111   FB           MOV     R3,A
   \   000112   85..82       MOV     DPL,?V2
   \   000115   85..83       MOV     DPH,?V3
   \   000118   E0           MOVX    A,@DPTR
   \   000119   F9           MOV     R1,A
   \   00011A   12....       LCALL   `??ZDO_ConvertOTAClusters::?relay`; Banked call to: ZDO_ConvertOTAClusters
   \   00011D   8008         SJMP    ??ZDO_ParseEndDeviceBindReq_6
   2408            }
   2409            else
   2410            {
   2411              bindReq->numOutClusters = 0;
   \                     ??ZDO_ParseEndDeviceBindReq_5:
   \   00011F   85..82       MOV     DPL,?V2
   \   000122   85..83       MOV     DPH,?V3
   \   000125   E4           CLR     A
   \   000126   F0           MOVX    @DPTR,A
   2412            }
   2413          }
   \                     ??ZDO_ParseEndDeviceBindReq_6:
   \   000127   02....       LJMP    ??Subroutine202_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine129:
   \   000000   F5..         MOV     ?V2,A
   \   000002   E4           CLR     A
   \   000003   35..         ADDC    A,?V1
   \   000005   F5..         MOV     ?V3,A
   \   000007   EA           MOV     A,R2
   \   000008   85..82       MOV     DPL,?V2
   \   00000B   85..83       MOV     DPH,?V3
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine125:
   \   000000   E5..         MOV     A,?V0
   \   000002   12....       LCALL   ??Subroutine222_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_473:
   \   000005   12....       LCALL   ??Subroutine232_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_546:
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine224_0
   \   000001                ; // Fall through to label ??Subroutine224_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine224_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   E9           MOV     A,R1
   \   000003   12....       LCALL   ?Subroutine140 & 0xFFFF
   \                     ??CrossCallReturnLabel_487:
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine140:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   EE           MOV     A,R6
   \   000002   2402         ADD     A,#0x2
   \   000004   FE           MOV     R6,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine178:
   \   000000   EA           MOV     A,R2
   \   000001                REQUIRE ??Subroutine226_0
   \   000001                ; // Fall through to label ??Subroutine226_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   12....       LCALL   ?Subroutine143 & 0xFFFF
   \                     ??CrossCallReturnLabel_223:
   \   000003   AE82         MOV     R6,DPL
   \   000005   AF83         MOV     R7,DPH
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine95:
   \   000000   12....       LCALL   ?Subroutine160 & 0xFFFF
   \                     ??CrossCallReturnLabel_239:
   \   000003   A3           INC     DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000   12....       LCALL   ?Subroutine139 & 0xFFFF
   \                     ??CrossCallReturnLabel_576:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine96:
   \   000000   12....       LCALL   ?Subroutine160 & 0xFFFF
   \                     ??CrossCallReturnLabel_240:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine160:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8C82         MOV     DPL,R4
   \   000003   8D83         MOV     DPH,R5
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine157:
   \   000000   12....       LCALL   ?Subroutine177 & 0xFFFF
   \                     ??CrossCallReturnLabel_590:
   \   000003   F9           MOV     R1,A
   \   000004   EA           MOV     A,R2
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine139:
   \   000000   12....       LCALL   ?Subroutine180 & 0xFFFF
   \                     ??CrossCallReturnLabel_581:
   \   000003   A3           INC     DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   12....       LCALL   ?Subroutine143 & 0xFFFF
   \                     ??CrossCallReturnLabel_221:
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine143:
   \   000000   12....       LCALL   ?Subroutine173 & 0xFFFF
   \                     ??CrossCallReturnLabel_390:
   \   000003   A3           INC     DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine162:
   \   000000   12....       LCALL   ?Subroutine178 & 0xFFFF
   \                     ??CrossCallReturnLabel_499:
   \   000003   3B           ADDC    A,R3
   \   000004   F583         MOV     DPH,A
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine236_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   EE           MOV     A,R6
   \   000002   2409         ADD     A,#0x9
   \   000004   FE           MOV     R6,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine72:
   \   000000   12....       LCALL   ?Subroutine157 & 0xFFFF
   \                     ??CrossCallReturnLabel_235:
   \   000003   8C82         MOV     DPL,R4
   \   000005   8D83         MOV     DPH,R5
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine177:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004                REQUIRE ??Subroutine239_0
   \   000004                ; // Fall through to label ??Subroutine239_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   12....       LCALL   ?Subroutine162 & 0xFFFF
   \                     ??CrossCallReturnLabel_245:
   \   000004   E0           MOVX    A,@DPTR
   \   000005   22           RET
   2414          
   2415          /*********************************************************************
   2416           * @fn          ZDO_ParseBindUnbindReq
   2417           *
   2418           * @brief       This function parses the Bind_req or Unbind_req message.
   2419           *
   2420           * @param       inMsg  - incoming message (request)
   2421           * @param       pReq - place to put parsed information
   2422           *
   2423           * @return      none
   2424           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2425          void ZDO_ParseBindUnbindReq( zdoIncomingMsg_t *inMsg, ZDO_BindUnbindReq_t *pReq )
   \                     ZDO_ParseBindUnbindReq:
   2426          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL   ?Subroutine109 & 0xFFFF
   2427            uint8 *msg;
   2428          
   2429            msg = inMsg->asdu;
   \                     ??CrossCallReturnLabel_491:
   \   000008   12....       LCALL   ?Subroutine83 & 0xFFFF
   2430            osal_cpyExtAddr( pReq->srcAddress, msg );
   \                     ??CrossCallReturnLabel_365:
   \   00000B   FC           MOV     R4,A
   \   00000C   EF           MOV     A,R7
   \   00000D   FD           MOV     R5,A
   \   00000E   AA..         MOV     R2,?V0
   \   000010   AB..         MOV     R3,?V1
   \   000012   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   2431            msg += Z_EXTADDR_LEN;
   2432            pReq->srcEndpoint = *msg++;
   \   000015   12....       LCALL   ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_569:
   \   000018   5001         JNC     ??ZDO_ParseBindUnbindReq_0
   \   00001A   0F           INC     R7
   2433            pReq->clusterID = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseBindUnbindReq_0:
   \   00001B   12....       LCALL   ?Subroutine10 & 0xFFFF
   2434            msg += 2;
   2435            pReq->dstAddress.addrMode = *msg++;
   \                     ??CrossCallReturnLabel_4:
   \   00001E   5001         JNC     ??ZDO_ParseBindUnbindReq_1
   \   000020   0F           INC     R7
   2436            if ( pReq->dstAddress.addrMode == Addr64Bit )
   \                     ??ZDO_ParseBindUnbindReq_1:
   \   000021   12....       LCALL   ?Subroutine121 & 0xFFFF
   \                     ??CrossCallReturnLabel_178:
   \   000024   701D         JNZ     ??ZDO_ParseBindUnbindReq_2
   2437            {
   2438              osal_cpyExtAddr( pReq->dstAddress.addr.extAddr, msg );
   \   000026                ; Setup parameters for call to function sAddrExtCpy
   \   000026   EE           MOV     A,R6
   \   000027   FC           MOV     R4,A
   \   000028   EF           MOV     A,R7
   \   000029   FD           MOV     R5,A
   \   00002A   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   2439              msg += Z_EXTADDR_LEN;
   2440              pReq->dstEndpoint = *msg;
   \   00002D   8E82         MOV     DPL,R6
   \   00002F   8F83         MOV     DPH,R7
   \   000031   A3           INC     DPTR
   \   000032   A3           INC     DPTR
   \   000033   A3           INC     DPTR
   \   000034   A3           INC     DPTR
   \   000035   A3           INC     DPTR
   \   000036   A3           INC     DPTR
   \   000037   A3           INC     DPTR
   \   000038   A3           INC     DPTR
   \   000039   E0           MOVX    A,@DPTR
   \   00003A   C0E0         PUSH    A
   \   00003C   12....       LCALL   ?Subroutine122 & 0xFFFF
   2441            }
   \                     ??CrossCallReturnLabel_180:
   \   00003F   D0E0         POP     A
   \   000041   8006         SJMP    ??ZDO_ParseBindUnbindReq_3
   2442            else
   2443            {
   2444              // copy group address
   2445              pReq->dstAddress.addr.shortAddr = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseBindUnbindReq_2:
   \   000043   12....       LCALL   ?Subroutine81 & 0xFFFF
   2446            }
   \                     ??CrossCallReturnLabel_105:
   \   000046   F0           MOVX    @DPTR,A
   \   000047   A3           INC     DPTR
   \   000048   E9           MOV     A,R1
   \                     ??ZDO_ParseBindUnbindReq_3:
   \   000049   F0           MOVX    @DPTR,A
   2447          }
   \   00004A   02....       LJMP    ??Subroutine186_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine109:
   \   000000   8C..         MOV     ?V0,R4
   \   000002   8D..         MOV     ?V1,R5
   \   000004                REQUIRE ??Subroutine225_0
   \   000004                ; // Fall through to label ??Subroutine225_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine225_0:
   \   000000   12....       LCALL   ?Subroutine163 & 0xFFFF
   \                     ??CrossCallReturnLabel_496:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine163:
   \   000000   12....       LCALL   ?Subroutine178 & 0xFFFF
   \                     ??CrossCallReturnLabel_500:
   \   000003   3B           ADDC    A,R3
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine122:
   \   000000   E5..         MOV     A,?V0
   \   000002   2414         ADD     A,#0x14
   \   000004   12....       LCALL   ?Subroutine168 & 0xFFFF
   \                     ??CrossCallReturnLabel_552:
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine121:
   \   000000   E5..         MOV     A,?V0
   \   000002   240B         ADD     A,#0xb
   \   000004   FA           MOV     R2,A
   \   000005   E4           CLR     A
   \   000006   35..         ADDC    A,?V1
   \   000008   FB           MOV     R3,A
   \   000009   7403         MOV     A,#0x3
   \   00000B   68           XRL     A,R0
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine81:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   E0           MOVX    A,@DPTR
   \   000005   FC           MOV     R4,A
   \   000006   A3           INC     DPTR
   \   000007   E0           MOVX    A,@DPTR
   \   000008   F9           MOV     R1,A
   \   000009   EC           MOV     A,R4
   \   00000A   8A82         MOV     DPL,R2
   \   00000C   8B83         MOV     DPH,R3
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   12....       LCALL   ?Subroutine150 & 0xFFFF
   \                     ??CrossCallReturnLabel_232:
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C                REQUIRE ??Subroutine236_0
   \   00000C                ; // Fall through to label ??Subroutine236_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   12....       LCALL   ?Subroutine146 & 0xFFFF
   \                     ??CrossCallReturnLabel_226:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   12....       LCALL   ?Subroutine142 & 0xFFFF
   \                     ??CrossCallReturnLabel_220:
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   F8           MOV     R0,A
   \   00000C   E5..         MOV     A,?V0
   \   00000E   12....       LCALL   ?Subroutine165 & 0xFFFF
   \                     ??CrossCallReturnLabel_353:
   \   000011   12....       LCALL   ??Subroutine232_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_545:
   \   000014   E8           MOV     A,R0
   \   000015   F0           MOVX    @DPTR,A
   \   000016   EE           MOV     A,R6
   \   000017   2403         ADD     A,#0x3
   \   000019   FE           MOV     R6,A
   \   00001A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine142:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   E9           MOV     A,R1
   \   000003   12....       LCALL   ?Subroutine173 & 0xFFFF
   \                     ??CrossCallReturnLabel_391:
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine150:
   \   000000   12....       LCALL   ?Subroutine174 & 0xFFFF
   \                     ??CrossCallReturnLabel_260:
   \   000003   A3           INC     DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine174:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   85..82       MOV     DPL,?V0
   \   000009   85..83       MOV     DPH,?V1
   \   00000C   A3           INC     DPTR
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine146:
   \   000000   12....       LCALL   ?Subroutine177 & 0xFFFF
   \                     ??CrossCallReturnLabel_589:
   \   000003   F9           MOV     R1,A
   \   000004   EA           MOV     A,R2
   \   000005   85..82       MOV     DPL,?V0
   \   000008   85..83       MOV     DPH,?V1
   \   00000B   A3           INC     DPTR
   \   00000C   A3           INC     DPTR
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   22           RET
   2448          
   2449          /*********************************************************************
   2450           * @fn      ZDO_ParseAddrRsp
   2451           *
   2452           * @brief   Turns the inMsg (incoming message) into the out parsed
   2453           *          structure.
   2454           *
   2455           * @param   inMsg - incoming message
   2456           *
   2457           * @return  pointer to parsed structures.  This structure was
   2458           *          allocated using osal_mem_alloc, so it must be freed
   2459           *          by the calling function [osal_mem_free()].
   2460           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2461          ZDO_NwkIEEEAddrResp_t *ZDO_ParseAddrRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseAddrRsp:
   2462          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   2463            ZDO_NwkIEEEAddrResp_t *rsp;
   2464            uint8 *msg;
   2465            byte cnt = 0;
   \   000005   75..00       MOV     ?V2,#0x0
   2466          
   2467            // Calculate the number of items in the list
   2468            if ( inMsg->asduLen > (1 + Z_EXTADDR_LEN + 2) )
   \   000008   EA           MOV     A,R2
   \   000009   2413         ADD     A,#0x13
   \   00000B   FE           MOV     R6,A
   \   00000C   E4           CLR     A
   \   00000D   3B           ADDC    A,R3
   \   00000E   FF           MOV     R7,A
   \   00000F   EA           MOV     A,R2
   \   000010   2410         ADD     A,#0x10
   \   000012   F582         MOV     DPL,A
   \   000014   E4           CLR     A
   \   000015   3B           ADDC    A,R3
   \   000016   F583         MOV     DPH,A
   \   000018   E0           MOVX    A,@DPTR
   \   000019   C3           CLR     C
   \   00001A   940C         SUBB    A,#0xc
   \   00001C   400E         JC      ??ZDO_ParseAddrRsp_0
   2469              cnt = inMsg->asdu[1 + Z_EXTADDR_LEN + 2];
   \   00001E   8E82         MOV     DPL,R6
   \   000020   8F83         MOV     DPH,R7
   \   000022   12....       LCALL   ??Subroutine229_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_509:
   \   000025   240B         ADD     A,#0xb
   \   000027   12....       LCALL   ?Subroutine118 & 0xFFFF
   \                     ??CrossCallReturnLabel_407:
   \   00002A   F5..         MOV     ?V2,A
   2470            else
   2471              cnt = 0;
   2472          
   2473            // Make buffer
   2474            rsp = (ZDO_NwkIEEEAddrResp_t *)osal_mem_alloc( sizeof(ZDO_NwkIEEEAddrResp_t) + (cnt * sizeof ( uint16 )) );
   \                     ??ZDO_ParseAddrRsp_0:
   \   00002C                ; Setup parameters for call to function osal_mem_alloc
   \   00002C   A8..         MOV     R0,?V2
   \   00002E   12....       LCALL   ?Subroutine161 & 0xFFFF
   \                     ??CrossCallReturnLabel_242:
   \   000031   E8           MOV     A,R0
   \   000032   240D         ADD     A,#0xd
   \   000034   FA           MOV     R2,A
   \   000035   E4           CLR     A
   \   000036   39           ADDC    A,R1
   \   000037   FB           MOV     R3,A
   \   000038   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00003B   8A..         MOV     ?V0,R2
   \   00003D   8B..         MOV     ?V1,R3
   2475          
   2476            if ( rsp )
   \   00003F   EA           MOV     A,R2
   \   000040   45..         ORL     A,?V1
   \   000042   7003         JNZ     $+5
   \   000044   02....       LJMP    ??ZDO_ParseAddrRsp_1 & 0xFFFF
   2477            {
   2478              msg = inMsg->asdu;
   \   000047   8E82         MOV     DPL,R6
   \   000049   8F83         MOV     DPH,R7
   \   00004B   12....       LCALL   ??Subroutine235_0 & 0xFFFF
   2479          
   2480              rsp->status = *msg++;
   \                     ??CrossCallReturnLabel_564:
   \   00004E   F8           MOV     R0,A
   \   00004F   8A82         MOV     DPL,R2
   \   000051   8B83         MOV     DPH,R3
   \   000053   12....       LCALL   ?Subroutine17 & 0xFFFF
   2481              if ( rsp->status == ZDO_SUCCESS )
   \                     ??CrossCallReturnLabel_11:
   \   000056   707E         JNZ     ??ZDO_ParseAddrRsp_1
   2482              {
   2483                osal_cpyExtAddr( rsp->extAddr, msg );
   \   000058                ; Setup parameters for call to function sAddrExtCpy
   \   000058   EE           MOV     A,R6
   \   000059   FC           MOV     R4,A
   \   00005A   EF           MOV     A,R7
   \   00005B   FD           MOV     R5,A
   \   00005C   EA           MOV     A,R2
   \   00005D   2403         ADD     A,#0x3
   \   00005F   FA           MOV     R2,A
   \   000060   E4           CLR     A
   \   000061   35..         ADDC    A,?V1
   \   000063   FB           MOV     R3,A
   \   000064   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   2484                msg += Z_EXTADDR_LEN;
   \   000067   EE           MOV     A,R6
   \   000068   2408         ADD     A,#0x8
   \   00006A   FE           MOV     R6,A
   \   00006B   5001         JNC     ??ZDO_ParseAddrRsp_2
   \   00006D   0F           INC     R7
   2485                rsp->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseAddrRsp_2:
   \   00006E   12....       LCALL   ?Subroutine75 & 0xFFFF
   \                     ??CrossCallReturnLabel_97:
   \   000071   A3           INC     DPTR
   \   000072   12....       LCALL   ??Subroutine197_0 & 0xFFFF
   2486          
   2487                msg += 2;
   2488                rsp->numAssocDevs = 0;
   \                     ??CrossCallReturnLabel_308:
   \   000075   E5..         MOV     A,?V0
   \   000077   240B         ADD     A,#0xb
   \   000079   F8           MOV     R0,A
   \   00007A   E4           CLR     A
   \   00007B   35..         ADDC    A,?V1
   \   00007D   F9           MOV     R1,A
   \   00007E   E8           MOV     A,R0
   \   00007F   FA           MOV     R2,A
   \   000080   E9           MOV     A,R1
   \   000081   FB           MOV     R3,A
   \   000082   8A82         MOV     DPL,R2
   \   000084   8B83         MOV     DPH,R3
   \   000086   E4           CLR     A
   \   000087   F0           MOVX    @DPTR,A
   2489          
   2490                // StartIndex field is only present if NumAssocDev field is non-zero.
   2491                if ( cnt > 0 )
   \   000088   E5..         MOV     A,?V2
   \   00008A   604A         JZ      ??ZDO_ParseAddrRsp_1
   2492                {
   2493                  uint16 *pList = &(rsp->devList[0]);
   \   00008C   E5..         MOV     A,?V0
   \   00008E   240D         ADD     A,#0xd
   \   000090   F8           MOV     R0,A
   \   000091   E4           CLR     A
   \   000092   35..         ADDC    A,?V1
   \   000094   F9           MOV     R1,A
   2494                  byte n = cnt;
   2495          
   2496                  rsp->numAssocDevs = *msg++;
   \   000095   8E82         MOV     DPL,R6
   \   000097   8F83         MOV     DPH,R7
   \   000099   A3           INC     DPTR
   \   00009A   12....       LCALL   ?Subroutine93 & 0xFFFF
   \                     ??CrossCallReturnLabel_504:
   \   00009D   12....       LCALL   ?Subroutine38 & 0xFFFF
   2497                  rsp->startIndex = *msg++;
   \                     ??CrossCallReturnLabel_42:
   \   0000A0   C0E0         PUSH    A
   \   0000A2   12....       LCALL   ?Subroutine120 & 0xFFFF
   \                     ??CrossCallReturnLabel_175:
   \   0000A5   D0E0         POP     A
   \   0000A7   F0           MOVX    @DPTR,A
   \   0000A8   EE           MOV     A,R6
   \   0000A9   2404         ADD     A,#0x4
   \   0000AB   FE           MOV     R6,A
   \   0000AC   5001         JNC     ??ZDO_ParseAddrRsp_3
   \   0000AE   0F           INC     R7
   \                     ??ZDO_ParseAddrRsp_3:
   \   0000AF   AC..         MOV     R4,?V2
   2498          
   2499                  while ( n != 0 )
   2500                  {
   2501                    *pList++ = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseAddrRsp_4:
   \   0000B1   8E82         MOV     DPL,R6
   \   0000B3   8F83         MOV     DPH,R7
   \   0000B5   E0           MOVX    A,@DPTR
   \   0000B6   F5..         MOV     ?V2,A
   \   0000B8   A3           INC     DPTR
   \   0000B9   E0           MOVX    A,@DPTR
   \   0000BA   FB           MOV     R3,A
   \   0000BB   E5..         MOV     A,?V2
   \   0000BD   8882         MOV     DPL,R0
   \   0000BF   8983         MOV     DPH,R1
   \   0000C1   12....       LCALL   ??Subroutine199_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_328:
   \   0000C4   E8           MOV     A,R0
   \   0000C5   2402         ADD     A,#0x2
   \   0000C7   F8           MOV     R0,A
   \   0000C8   5001         JNC     ??ZDO_ParseAddrRsp_5
   \   0000CA   09           INC     R1
   2502                    msg += sizeof( uint16 );
   \                     ??ZDO_ParseAddrRsp_5:
   \   0000CB   EE           MOV     A,R6
   \   0000CC   2402         ADD     A,#0x2
   \   0000CE   FE           MOV     R6,A
   \   0000CF   5001         JNC     ??ZDO_ParseAddrRsp_6
   \   0000D1   0F           INC     R7
   2503                    n--;
   2504                  }
   \                     ??ZDO_ParseAddrRsp_6:
   \   0000D2   1C           DEC     R4
   \   0000D3   EC           MOV     A,R4
   \   0000D4   70DB         JNZ     ??ZDO_ParseAddrRsp_4
   2505                }
   2506              }
   2507            }
   2508            return ( rsp );
   \                     ??ZDO_ParseAddrRsp_1:
   \   0000D6   AA..         MOV     R2,?V0
   \   0000D8   AB..         MOV     R3,?V1
   \   0000DA   02....       LJMP    ??Subroutine210_0 & 0xFFFF
   2509          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine120:
   \   000000   E5..         MOV     A,?V0
   \   000002   240C         ADD     A,#0xc
   \   000004   12....       LCALL   ?Subroutine168 & 0xFFFF
   \                     ??CrossCallReturnLabel_551:
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine75:
   \   000000   12....       LCALL   ?Subroutine157 & 0xFFFF
   \                     ??CrossCallReturnLabel_236:
   \   000003   85..82       MOV     DPL,?V0
   \   000006   85..83       MOV     DPH,?V1
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine235_0:
   \   000000   12....       LCALL   ?Subroutine154 & 0xFFFF
   \                     ??CrossCallReturnLabel_565:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine154:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FE           MOV     R6,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FF           MOV     R7,A
   \   000005   8E82         MOV     DPL,R6
   \   000007   8F83         MOV     DPH,R7
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   12....       LCALL   ?Subroutine143 & 0xFFFF
   \                     ??CrossCallReturnLabel_222:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   22           RET
   2510          
   2511          /*********************************************************************
   2512           * @fn          ZDO_ParseNodeDescRsp
   2513           *
   2514           * @brief       This function parses the Node_Desc_rsp message.
   2515           *
   2516           * @param       inMsg - incoming message
   2517           * @param       pNDRsp - place to parse the message into
   2518           *
   2519           * @return      none
   2520           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2521          void ZDO_ParseNodeDescRsp( zdoIncomingMsg_t *inMsg, ZDO_NodeDescRsp_t *pNDRsp )
   \                     ZDO_ParseNodeDescRsp:
   2522          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   2523            uint8 *msg;
   2524          
   2525            msg = inMsg->asdu;
   \   000005   12....       LCALL   ?Subroutine9 & 0xFFFF
   2526          
   2527            pNDRsp->status = *msg++;
   2528            pNDRsp->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   2529          
   2530            if ( pNDRsp->status == ZDP_SUCCESS )
   \                     ??CrossCallReturnLabel_2:
   \   000008   6003         JZ      $+5
   \   00000A   02....       LJMP    ??ZDO_ParseNodeDescRsp_0 & 0xFFFF
   2531            {
   2532              msg += 2;
   2533              pNDRsp->nodeDesc.LogicalType = *msg & 0x07;
   \   00000D   12....       LCALL   ?Subroutine115 & 0xFFFF
   \                     ??CrossCallReturnLabel_167:
   \   000010   F8           MOV     R0,A
   \   000011   E4           CLR     A
   \   000012   3D           ADDC    A,R5
   \   000013   F9           MOV     R1,A
   \   000014   88..         MOV     ?V0,R0
   \   000016   89..         MOV     ?V1,R1
   \   000018   8E82         MOV     DPL,R6
   \   00001A   8F83         MOV     DPH,R7
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   5407         ANL     A,#0x7
   \   00001F   F8           MOV     R0,A
   \   000020   85..82       MOV     DPL,?V0
   \   000023   8983         MOV     DPH,R1
   \   000025   E0           MOVX    A,@DPTR
   \   000026   54F8         ANL     A,#0xf8
   \   000028   48           ORL     A,R0
   \   000029   12....       LCALL   ??Subroutine209_0 & 0xFFFF
   2534          
   2535              pNDRsp->nodeDesc.ComplexDescAvail = ( *msg & 0x08 ) >> 3;
   \                     ??CrossCallReturnLabel_385:
   \   00002C   A2E3         MOV     C,0xE0 /* A   */.3
   \   00002E   E4           CLR     A
   \   00002F   33           RLC     A
   \   000030   F8           MOV     R0,A
   \   000031   85..82       MOV     DPL,?V0
   \   000034   C082         PUSH    DPL
   \   000036   8E82         MOV     DPL,R6
   \   000038   E0           MOVX    A,@DPTR
   \   000039   A2E3         MOV     C,0xE0 /* A   */.3
   \   00003B   8983         MOV     DPH,R1
   \   00003D   D082         POP     DPL
   \   00003F   E0           MOVX    A,@DPTR
   \   000040   92E3         MOV     0xE0 /* A   */.3,C
   \   000042   12....       LCALL   ??Subroutine209_0 & 0xFFFF
   2536              pNDRsp->nodeDesc.UserDescAvail = ( *msg & 0x10 ) >> 4;
   \                     ??CrossCallReturnLabel_386:
   \   000045   A2E4         MOV     C,0xE0 /* A   */.4
   \   000047   E4           CLR     A
   \   000048   33           RLC     A
   \   000049   F9           MOV     R1,A
   \   00004A   85..82       MOV     DPL,?V0
   \   00004D   85..83       MOV     DPH,?V1
   \   000050   C082         PUSH    DPL
   \   000052   C083         PUSH    DPH
   \   000054   8E82         MOV     DPL,R6
   \   000056   8F83         MOV     DPH,R7
   \   000058   E0           MOVX    A,@DPTR
   \   000059   A2E4         MOV     C,0xE0 /* A   */.4
   \   00005B   D083         POP     DPH
   \   00005D   D082         POP     DPL
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   92E4         MOV     0xE0 /* A   */.4,C
   \   000062   F0           MOVX    @DPTR,A
   2537          
   2538              msg++;  // Reserved bits.
   2539              pNDRsp->nodeDesc.FrequencyBand = (*msg >> 3) & 0x1f;
   \   000063   EA           MOV     A,R2
   \   000064   2403         ADD     A,#0x3
   \   000066   0E           INC     R6
   \   000067   E4           CLR     A
   \   000068   3B           ADDC    A,R3
   \   000069   FF           MOV     R7,A
   \   00006A   EC           MOV     A,R4
   \   00006B   2404         ADD     A,#0x4
   \   00006D   F5..         MOV     ?V0,A
   \   00006F   E4           CLR     A
   \   000070   3D           ADDC    A,R5
   \   000071   F5..         MOV     ?V1,A
   \   000073   8E82         MOV     DPL,R6
   \   000075   8F83         MOV     DPH,R7
   \   000077   E0           MOVX    A,@DPTR
   \   000078   54F8         ANL     A,#0xf8
   \   00007A   F5..         MOV     ?V2,A
   \   00007C   85..82       MOV     DPL,?V0
   \   00007F   85..83       MOV     DPH,?V1
   \   000082   E0           MOVX    A,@DPTR
   \   000083   5407         ANL     A,#0x7
   \   000085   45..         ORL     A,?V2
   \   000087   F5..         MOV     ?V2,A
   \   000089   12....       LCALL   ??Subroutine209_0 & 0xFFFF
   2540              pNDRsp->nodeDesc.APSFlags = *msg++ & 0x07;
   \                     ??CrossCallReturnLabel_387:
   \   00008C   5407         ANL     A,#0x7
   \   00008E   FE           MOV     R6,A
   \   00008F   74F8         MOV     A,#-0x8
   \   000091   55..         ANL     A,?V2
   \   000093   4E           ORL     A,R6
   \   000094   85..82       MOV     DPL,?V0
   \   000097   85..83       MOV     DPH,?V1
   \   00009A   12....       LCALL   ?Subroutine31 & 0xFFFF
   2541              pNDRsp->nodeDesc.CapabilityFlags = *msg++;
   \                     ??CrossCallReturnLabel_30:
   \   00009D   8C82         MOV     DPL,R4
   \   00009F   8D83         MOV     DPH,R5
   \   0000A1   12....       LCALL   ?Subroutine32 & 0xFFFF
   2542              pNDRsp->nodeDesc.ManufacturerCode[0] = *msg++;
   \                     ??CrossCallReturnLabel_32:
   \   0000A4   12....       LCALL   ?Subroutine95 & 0xFFFF
   \                     ??CrossCallReturnLabel_128:
   \   0000A7   12....       LCALL   ?Subroutine32 & 0xFFFF
   2543              pNDRsp->nodeDesc.ManufacturerCode[1] = *msg++;
   \                     ??CrossCallReturnLabel_33:
   \   0000AA   12....       LCALL   ?Subroutine76 & 0xFFFF
   \                     ??CrossCallReturnLabel_99:
   \   0000AD   12....       LCALL   ?Subroutine28 & 0xFFFF
   2544              pNDRsp->nodeDesc.MaxBufferSize = *msg++;
   \                     ??CrossCallReturnLabel_25:
   \   0000B0   12....       LCALL   ?Subroutine96 & 0xFFFF
   \                     ??CrossCallReturnLabel_131:
   \   0000B3   12....       LCALL   ?Subroutine21 & 0xFFFF
   2545              pNDRsp->nodeDesc.MaxInTransferSize[0] = *msg++;
   \                     ??CrossCallReturnLabel_17:
   \   0000B6   12....       LCALL   ?Subroutine95 & 0xFFFF
   \                     ??CrossCallReturnLabel_129:
   \   0000B9   12....       LCALL   ?Subroutine21 & 0xFFFF
   2546              pNDRsp->nodeDesc.MaxInTransferSize[1] = *msg++;
   \                     ??CrossCallReturnLabel_18:
   \   0000BC   12....       LCALL   ?Subroutine76 & 0xFFFF
   \                     ??CrossCallReturnLabel_100:
   \   0000BF   A3           INC     DPTR
   \   0000C0   A3           INC     DPTR
   \   0000C1   A3           INC     DPTR
   \   0000C2   F0           MOVX    @DPTR,A
   \   0000C3   EA           MOV     A,R2
   \   0000C4   240A         ADD     A,#0xa
   \   0000C6   FA           MOV     R2,A
   \   0000C7   5001         JNC     ??ZDO_ParseNodeDescRsp_1
   \   0000C9   0B           INC     R3
   2547              pNDRsp->nodeDesc.ServerMask = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseNodeDescRsp_1:
   \   0000CA   8A82         MOV     DPL,R2
   \   0000CC   8B83         MOV     DPH,R3
   \   0000CE   12....       LCALL   ??Subroutine184_0 & 0xFFFF
   2548              msg += 2;
   2549              pNDRsp->nodeDesc.MaxOutTransferSize[0] = *msg++;
   2550              pNDRsp->nodeDesc.MaxOutTransferSize[1] = *msg++;
   2551              pNDRsp->nodeDesc.DescriptorCapability = *msg;
   2552            }
   \                     ??CrossCallReturnLabel_268:
   \   0000D1   FF           MOV     R7,A
   \   0000D2   EC           MOV     A,R4
   \   0000D3   240B         ADD     A,#0xb
   \   0000D5   F582         MOV     DPL,A
   \   0000D7   E4           CLR     A
   \   0000D8   3D           ADDC    A,R5
   \   0000D9   F583         MOV     DPH,A
   \   0000DB   E5..         MOV     A,?V0
   \   0000DD   F0           MOVX    @DPTR,A
   \   0000DE   A3           INC     DPTR
   \   0000DF   EF           MOV     A,R7
   \   0000E0   12....       LCALL   ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   0000E3   C0E0         PUSH    A
   \   0000E5   EC           MOV     A,R4
   \   0000E6   240D         ADD     A,#0xd
   \   0000E8   F582         MOV     DPL,A
   \   0000EA   E4           CLR     A
   \   0000EB   3D           ADDC    A,R5
   \   0000EC   F583         MOV     DPH,A
   \   0000EE   D0E0         POP     A
   \   0000F0   12....       LCALL   ??Subroutine237_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_573:
   \   0000F3   E0           MOVX    A,@DPTR
   \   0000F4   C0E0         PUSH    A
   \   0000F6   EC           MOV     A,R4
   \   0000F7   12....       LCALL   ??Subroutine223_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_480:
   \   0000FA   3D           ADDC    A,R5
   \   0000FB   F583         MOV     DPH,A
   \   0000FD   D0E0         POP     A
   \   0000FF   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   000102   C0E0         PUSH    A
   \   000104   EC           MOV     A,R4
   \   000105   12....       LCALL   ?Subroutine117 & 0xFFFF
   \                     ??CrossCallReturnLabel_174:
   \   000108   3D           ADDC    A,R5
   \   000109   F583         MOV     DPH,A
   \   00010B   D0E0         POP     A
   \   00010D   F0           MOVX    @DPTR,A
   2553          }
   \                     ??ZDO_ParseNodeDescRsp_0:
   \   00010E   02....       LJMP    ?Subroutine2 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine76:
   \   000000   A3           INC     DPTR
   \   000001   12....       LCALL   ?Subroutine160 & 0xFFFF
   \                     ??CrossCallReturnLabel_238:
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   12....       LCALL   ?Subroutine138 & 0xFFFF
   \                     ??CrossCallReturnLabel_214:
   \   000008   A3           INC     DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   12....       LCALL   ?Subroutine138 & 0xFFFF
   \                     ??CrossCallReturnLabel_215:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine138:
   \   000000   12....       LCALL   ?Subroutine172 & 0xFFFF
   \                     ??CrossCallReturnLabel_257:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   12....       LCALL   ?Subroutine136 & 0xFFFF
   \                     ??CrossCallReturnLabel_211:
   \   00000B   A3           INC     DPTR
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine115:
   \   000000   EA           MOV     A,R2
   \   000001   2402         ADD     A,#0x2
   \   000003   F8           MOV     R0,A
   \   000004   E4           CLR     A
   \   000005   3B           ADDC    A,R3
   \   000006   F9           MOV     R1,A
   \   000007   E8           MOV     A,R0
   \   000008   FE           MOV     R6,A
   \   000009   E9           MOV     A,R1
   \   00000A   FF           MOV     R7,A
   \   00000B   EC           MOV     A,R4
   \   00000C   2403         ADD     A,#0x3
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   12....       LCALL   ?Subroutine163 & 0xFFFF
   \                     ??CrossCallReturnLabel_494:
   \   000003   12....       LCALL   ?Subroutine156 & 0xFFFF
   \                     ??CrossCallReturnLabel_533:
   \   000006   8A82         MOV     DPL,R2
   \   000008   8B83         MOV     DPH,R3
   \   00000A   12....       LCALL   ?Subroutine160 & 0xFFFF
   \                     ??CrossCallReturnLabel_237:
   \   00000D   12....       LCALL   ?Subroutine180 & 0xFFFF
   \                     ??CrossCallReturnLabel_582:
   \   000010   AA82         MOV     R2,DPL
   \   000012   AB83         MOV     R3,DPH
   \   000014   E0           MOVX    A,@DPTR
   \   000015   FE           MOV     R6,A
   \   000016   A3           INC     DPTR
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F9           MOV     R1,A
   \   000019   EE           MOV     A,R6
   \   00001A   8C82         MOV     DPL,R4
   \   00001C   8D83         MOV     DPH,R5
   \   00001E   A3           INC     DPTR
   \   00001F   F0           MOVX    @DPTR,A
   \   000020   A3           INC     DPTR
   \   000021   E9           MOV     A,R1
   \   000022   F0           MOVX    @DPTR,A
   \   000023   8C82         MOV     DPL,R4
   \   000025   8D83         MOV     DPH,R5
   \   000027   E0           MOVX    A,@DPTR
   \   000028   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine237_0:
   \   000000   12....       LCALL   ?Subroutine139 & 0xFFFF
   \                     ??CrossCallReturnLabel_579:
   \   000003   A3           INC     DPTR
   \   000004   22           RET
   2554          
   2555          /*********************************************************************
   2556           * @fn          ZDO_ParesPowerDescRsp
   2557           *
   2558           * @brief       This function parses the Power_Desc_rsp message.
   2559           *
   2560           * @param       inMsg  - incoming message
   2561           * @param       pNPRsp - place to parse the message into
   2562           *
   2563           * @return      none
   2564           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2565          void ZDO_ParsePowerDescRsp( zdoIncomingMsg_t *inMsg, ZDO_PowerRsp_t *pNPRsp )
   \                     ZDO_ParsePowerDescRsp:
   2566          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   2567            uint8 *msg;
   2568          
   2569            msg = inMsg->asdu;
   \   000005   12....       LCALL   ?Subroutine9 & 0xFFFF
   2570            pNPRsp->status = *msg++;
   2571            pNPRsp->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   2572          
   2573            if ( pNPRsp->status == ZDP_SUCCESS )
   \                     ??CrossCallReturnLabel_3:
   \   000008   6003         JZ      $+5
   \   00000A   02....       LJMP    ??ZDO_ParsePowerDescRsp_0 & 0xFFFF
   2574            {
   2575              msg += 2;
   2576              pNPRsp->pwrDesc.AvailablePowerSources = *msg >> 4;
   \   00000D   12....       LCALL   ?Subroutine115 & 0xFFFF
   \                     ??CrossCallReturnLabel_168:
   \   000010   E4           CLR     A
   \   000011   3D           ADDC    A,R5
   \   000012   0C           INC     R4
   \   000013   0C           INC     R4
   \   000014   0C           INC     R4
   \   000015   FD           MOV     R5,A
   \   000016   8C82         MOV     DPL,R4
   \   000018   8D83         MOV     DPH,R5
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   540F         ANL     A,#0xf
   \   00001D   F5..         MOV     ?V2,A
   \   00001F   A3           INC     DPTR
   \   000020   E0           MOVX    A,@DPTR
   \   000021   F5..         MOV     ?V3,A
   \   000023   8E82         MOV     DPL,R6
   \   000025   8F83         MOV     DPH,R7
   \   000027   E0           MOVX    A,@DPTR
   \   000028   C4           SWAP    A
   \   000029   540F         ANL     A,#0xf
   \   00002B   F5..         MOV     ?V0,A
   \   00002D   75..00       MOV     ?V1,#0x0
   \   000030   7404         MOV     A,#0x4
   \   000032   78..         MOV     R0,#?V0
   \   000034   12....       LCALL   ?S_SHL
   \   000037   E5..         MOV     A,?V2
   \   000039   45..         ORL     A,?V0
   \   00003B   A9..         MOV     R1,?V3
   \   00003D   8C82         MOV     DPL,R4
   \   00003F   8D83         MOV     DPH,R5
   \   000041   12....       LCALL   ?Subroutine25 & 0xFFFF
   2577              pNPRsp->pwrDesc.PowerMode = *msg++ & 0x0F;
   \                     ??CrossCallReturnLabel_22:
   \   000044   E5..         MOV     A,?V0
   \   000046   48           ORL     A,R0
   \   000047   F5..         MOV     ?V0,A
   \   000049   8C82         MOV     DPL,R4
   \   00004B   8D83         MOV     DPH,R5
   \   00004D   12....       LCALL   ??Subroutine197_0 & 0xFFFF
   2578              pNPRsp->pwrDesc.CurrentPowerSourceLevel = *msg >> 4;
   \                     ??CrossCallReturnLabel_309:
   \   000050   EA           MOV     A,R2
   \   000051   2403         ADD     A,#0x3
   \   000053   E4           CLR     A
   \   000054   3B           ADDC    A,R3
   \   000055   0E           INC     R6
   \   000056   FF           MOV     R7,A
   \   000057   E5..         MOV     A,?V0
   \   000059   F5..         MOV     ?V2,A
   \   00005B   E9           MOV     A,R1
   \   00005C   540F         ANL     A,#0xf
   \   00005E   F5..         MOV     ?V3,A
   \   000060   8E82         MOV     DPL,R6
   \   000062   8F83         MOV     DPH,R7
   \   000064   E0           MOVX    A,@DPTR
   \   000065   C4           SWAP    A
   \   000066   540F         ANL     A,#0xf
   \   000068   F5..         MOV     ?V0,A
   \   00006A   740C         MOV     A,#0xc
   \   00006C   78..         MOV     R0,#?V0
   \   00006E   12....       LCALL   ?S_SHL
   \   000071   E5..         MOV     A,?V3
   \   000073   45..         ORL     A,?V1
   \   000075   F9           MOV     R1,A
   \   000076   8C82         MOV     DPL,R4
   \   000078   8D83         MOV     DPH,R5
   \   00007A   E5..         MOV     A,?V2
   \   00007C   12....       LCALL   ?Subroutine25 & 0xFFFF
   2579              pNPRsp->pwrDesc.CurrentPowerSource = *msg++ & 0x0F;
   2580            }
   \                     ??CrossCallReturnLabel_23:
   \   00007F   EA           MOV     A,R2
   \   000080   2404         ADD     A,#0x4
   \   000082   8C82         MOV     DPL,R4
   \   000084   8D83         MOV     DPH,R5
   \   000086   A3           INC     DPTR
   \   000087   E0           MOVX    A,@DPTR
   \   000088   54F0         ANL     A,#0xf0
   \   00008A   F0           MOVX    @DPTR,A
   \   00008B   E8           MOV     A,R0
   \   00008C   F9           MOV     R1,A
   \   00008D   8C82         MOV     DPL,R4
   \   00008F   8D83         MOV     DPH,R5
   \   000091   A3           INC     DPTR
   \   000092   E0           MOVX    A,@DPTR
   \   000093   49           ORL     A,R1
   \   000094   F0           MOVX    @DPTR,A
   2581          }
   \                     ??ZDO_ParsePowerDescRsp_0:
   \   000095   02....       LJMP    ?Subroutine2 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   12....       LCALL   ?Subroutine142 & 0xFFFF
   \                     ??CrossCallReturnLabel_219:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   540F         ANL     A,#0xf
   \   000006   F8           MOV     R0,A
   \   000007   22           RET
   2582          
   2583          /*********************************************************************
   2584           * @fn          ZDO_ParseSimpleDescRsp
   2585           *
   2586           * @brief       This function parse the Simple_Desc_rsp message.
   2587           *
   2588           *   NOTE: The pAppInClusterList and pAppOutClusterList fields
   2589           *         in the SimpleDescriptionFormat_t structure are allocated
   2590           *         and the calling function needs to free [osal_msg_free()]
   2591           *         these buffers.
   2592           *
   2593           * @param       inMsg  - incoming message
   2594           * @param       pSimpleDescRsp - place to parse the message into
   2595           *
   2596           * @return      none
   2597           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2598          void ZDO_ParseSimpleDescRsp( zdoIncomingMsg_t *inMsg, ZDO_SimpleDescRsp_t *pSimpleDescRsp )
   \                     ZDO_ParseSimpleDescRsp:
   2599          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   2600            uint8 *msg;
   2601          
   2602            msg = inMsg->asdu;
   \   000005   12....       LCALL   ??Subroutine225_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_493:
   \   000008   12....       LCALL   ?Subroutine67 & 0xFFFF
   2603            pSimpleDescRsp->status = *msg++;
   \                     ??CrossCallReturnLabel_287:
   \   00000B   8C82         MOV     DPL,R4
   \   00000D   8D83         MOV     DPH,R5
   \   00000F   F0           MOVX    @DPTR,A
   \   000010   8882         MOV     DPL,R0
   \   000012   8983         MOV     DPH,R1
   \   000014   A3           INC     DPTR
   \   000015   A882         MOV     R0,DPL
   \   000017   A983         MOV     R1,DPH
   2604            pSimpleDescRsp->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   FE           MOV     R6,A
   \   00001B   A3           INC     DPTR
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   FB           MOV     R3,A
   \   00001E   EE           MOV     A,R6
   \   00001F   8C82         MOV     DPL,R4
   \   000021   8D83         MOV     DPH,R5
   \   000023   A3           INC     DPTR
   \   000024   12....       LCALL   ??Subroutine199_0 & 0xFFFF
   2605            msg += sizeof ( uint16 );
   2606            msg++; // Skip past the length field.
   2607          
   2608            if ( pSimpleDescRsp->status == ZDP_SUCCESS )
   \                     ??CrossCallReturnLabel_329:
   \   000027   8C82         MOV     DPL,R4
   \   000029   8D83         MOV     DPH,R5
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   7011         JNZ     ??ZDO_ParseSimpleDescRsp_0
   2609            {
   2610              ZDO_ParseSimpleDescBuf( msg, &(pSimpleDescRsp->simpleDesc) );
   \   00002E                ; Setup parameters for call to function ZDO_ParseSimpleDescBuf
   \   00002E   EC           MOV     A,R4
   \   00002F   2403         ADD     A,#0x3
   \   000031   FC           MOV     R4,A
   \   000032   5001         JNC     ??ZDO_ParseSimpleDescRsp_1
   \   000034   0D           INC     R5
   \                     ??ZDO_ParseSimpleDescRsp_1:
   \   000035   E8           MOV     A,R0
   \   000036   2403         ADD     A,#0x3
   \   000038   FA           MOV     R2,A
   \   000039   E4           CLR     A
   \   00003A   39           ADDC    A,R1
   \   00003B   FB           MOV     R3,A
   \   00003C   12....       LCALL   `??ZDO_ParseSimpleDescBuf::?relay`; Banked call to: ZDO_ParseSimpleDescBuf
   2611            }
   2612          }
   \                     ??ZDO_ParseSimpleDescRsp_0:
   \   00003F   02....       LJMP    ?Subroutine1 & 0xFFFF
   2613          
   2614          /*********************************************************************
   2615           * @fn          ZDO_ParseEPListRsp
   2616           *
   2617           * @brief       This parse the Active_EP_rsp or Match_Desc_rsp message.
   2618           *
   2619           * @param       inMsg  - incoming message
   2620           *
   2621           * @return      none
   2622           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine88:
   \   000000   12....       LCALL   ?Subroutine163 & 0xFFFF
   \                     ??CrossCallReturnLabel_495:
   \   000003                REQUIRE ??Subroutine183_0
   \   000003                ; // Fall through to label ??Subroutine183_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2623          ZDO_ActiveEndpointRsp_t *ZDO_ParseEPListRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseEPListRsp:
   2624          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   2625            ZDO_ActiveEndpointRsp_t *pRsp;
   2626            uint8 *msg;
   2627            uint8 Status;
   2628            uint8 cnt;
   2629          
   2630            msg = inMsg->asdu;
   \   000005   12....       LCALL   ?Subroutine88 & 0xFFFF
   2631            Status = *msg++;
   \                     ??CrossCallReturnLabel_272:
   \   000008   85..82       MOV     DPL,?V0
   \   00000B   F583         MOV     DPH,A
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   F5..         MOV     ?V7,A
   \   000010   A3           INC     DPTR
   \   000011   8582..       MOV     ?V0,DPL
   \   000014   8583..       MOV     ?V1,DPH
   2632            cnt = msg[2];
   \   000017   A3           INC     DPTR
   \   000018   A3           INC     DPTR
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   F5..         MOV     ?V6,A
   2633          
   2634            pRsp = (ZDO_ActiveEndpointRsp_t *)osal_mem_alloc( sizeof(  ZDO_ActiveEndpointRsp_t ) + cnt );
   \   00001C   FE           MOV     R6,A
   \   00001D                ; Setup parameters for call to function osal_mem_alloc
   \   00001D   12....       LCALL   ?Subroutine128 & 0xFFFF
   \                     ??CrossCallReturnLabel_192:
   \   000020   3400         ADDC    A,#0x0
   \   000022   FB           MOV     R3,A
   \   000023   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000026   8A..         MOV     ?V4,R2
   \   000028   8B..         MOV     ?V5,R3
   2635            if ( pRsp )
   \   00002A   EA           MOV     A,R2
   \   00002B   45..         ORL     A,?V5
   \   00002D   6049         JZ      ??ZDO_ParseEPListRsp_0
   2636            {
   2637              pRsp->status = Status;
   \   00002F   8A82         MOV     DPL,R2
   \   000031   8B83         MOV     DPH,R3
   \   000033   E5..         MOV     A,?V7
   \   000035   F0           MOVX    @DPTR,A
   2638              pRsp->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   \   000036   85..82       MOV     DPL,?V0
   \   000039   85..83       MOV     DPH,?V1
   \   00003C   12....       LCALL   ?Subroutine86 & 0xFFFF
   \                     ??CrossCallReturnLabel_276:
   \   00003F   85..82       MOV     DPL,?V4
   \   000042   8B83         MOV     DPH,R3
   \   000044   A3           INC     DPTR
   \   000045   12....       LCALL   ??Subroutine197_0 & 0xFFFF
   2639              msg += sizeof( uint16 );
   2640              pRsp->cnt = cnt;
   \                     ??CrossCallReturnLabel_310:
   \   000048   85..82       MOV     DPL,?V4
   \   00004B   8B83         MOV     DPH,R3
   \   00004D   A3           INC     DPTR
   \   00004E   A3           INC     DPTR
   \   00004F   A3           INC     DPTR
   \   000050   EE           MOV     A,R6
   \   000051   12....       LCALL   ?Subroutine39 & 0xFFFF
   2641              msg++; // pass cnt
   2642              osal_memcpy( pRsp->epList, msg, cnt );
   2643            }
   \                     ??CrossCallReturnLabel_45:
   \   000054   A3           INC     DPTR
   \   000055   A982         MOV     R1,DPL
   \   000057   AA83         MOV     R2,DPH
   \   000059   89..         MOV     ?V0,R1
   \   00005B   8A..         MOV     ?V1,R2
   \   00005D   88..         MOV     ?V2,R0
   \   00005F   78..         MOV     R0,#?V0
   \   000061   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000064   EE           MOV     A,R6
   \   000065   FC           MOV     R4,A
   \   000066   7D00         MOV     R5,#0x0
   \   000068   E5..         MOV     A,?V4
   \   00006A   12....       LCALL   ?Subroutine128 & 0xFFFF
   \                     ??CrossCallReturnLabel_193:
   \   00006D   35..         ADDC    A,?V5
   \   00006F   FB           MOV     R3,A
   \   000070   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000073   7403         MOV     A,#0x3
   \   000075   12....       LCALL   ?DEALLOC_XSTACK8
   2644          
   2645            return ( pRsp );
   \                     ??ZDO_ParseEPListRsp_0:
   \   000078   AA..         MOV     R2,?V4
   \   00007A   AB..         MOV     R3,?V5
   \   00007C   02....       LJMP    ??Subroutine202_0 & 0xFFFF
   2646          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine128:
   \   000000   2404         ADD     A,#0x4
   \   000002   FA           MOV     R2,A
   \   000003   E4           CLR     A
   \   000004   22           RET
   2647          
   2648          /*********************************************************************
   2649           * @fn          ZDO_ParseServerDiscRsp
   2650           *
   2651           * @brief       Parse the Server_Discovery_rsp message.
   2652           *
   2653           * @param       inMsg - incoming message.
   2654           * @param       pRsp - place to put the parsed information.
   2655           *
   2656           * @return      none
   2657           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2658          void ZDO_ParseServerDiscRsp( zdoIncomingMsg_t *inMsg, ZDO_ServerDiscRsp_t *pRsp )
   \                     ZDO_ParseServerDiscRsp:
   2659          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   2660            pRsp->status = inMsg->asdu[0];
   \   000005   EA           MOV     A,R2
   \   000006   2413         ADD     A,#0x13
   \   000008   F8           MOV     R0,A
   \   000009   E4           CLR     A
   \   00000A   3B           ADDC    A,R3
   \   00000B   F9           MOV     R1,A
   \   00000C   8882         MOV     DPL,R0
   \   00000E   8983         MOV     DPH,R1
   \   000010   12....       LCALL   ?Subroutine99 & 0xFFFF
   \                     ??CrossCallReturnLabel_138:
   \   000013   12....       LCALL   ?Subroutine96 & 0xFFFF
   \                     ??CrossCallReturnLabel_132:
   \   000016   12....       LCALL   ?Subroutine37 & 0xFFFF
   2661            pRsp->serverMask = BUILD_UINT16( inMsg->asdu[1], inMsg->asdu[2] );
   \                     ??CrossCallReturnLabel_41:
   \   000019   12....       LCALL   ??Subroutine191_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_292:
   \   00001C   A3           INC     DPTR
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   FA           MOV     R2,A
   \   00001F   8882         MOV     DPL,R0
   \   000021   8983         MOV     DPH,R1
   \   000023   A3           INC     DPTR
   \   000024   12....       LCALL   ??Subroutine238_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_583:
   \   000027   A3           INC     DPTR
   \   000028   12....       LCALL   ??Subroutine197_0 & 0xFFFF
   2662          }
   \                     ??CrossCallReturnLabel_311:
   \   00002B   02....       LJMP    ?Subroutine1 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine238_0:
   \   000000   A3           INC     DPTR
   \   000001   E0           MOVX    A,@DPTR
   \   000002   F9           MOV     R1,A
   \   000003   EA           MOV     A,R2
   \   000004   8C82         MOV     DPL,R4
   \   000006   8D83         MOV     DPH,R5
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine99:
   \   000000   12....       LCALL   ??Subroutine239_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_586:
   \   000003   F583         MOV     DPH,A
   \   000005   8A82         MOV     DPL,R2
   \   000007   22           RET
   2663          
   2664          /*********************************************************************
   2665           * @fn          ZDO_ParseMgmtLqiRsp
   2666           *
   2667           * @brief       This function parses the incoming Management
   2668           *              LQI response
   2669           *
   2670           * @param       inMsg - incoming message
   2671           *
   2672           * @return      a pointer to parsed response structure (NULL if not allocated).
   2673           *          This structure was allocated using osal_mem_alloc, so it must be freed
   2674           *          by the calling function [osal_mem_free()].
   2675           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   AA..         MOV     R2,?V2
   \   000002   AB..         MOV     R3,?V3
   \   000004                REQUIRE ??Subroutine202_0
   \   000004                ; // Fall through to label ??Subroutine202_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2676          ZDO_MgmtLqiRsp_t *ZDO_ParseMgmtLqiRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseMgmtLqiRsp:
   2677          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   2678            ZDO_MgmtLqiRsp_t *pRsp;
   2679            uint8 status;
   2680            uint8 startIndex = 0;
   \   000005   75..00       MOV     ?V6,#0x0
   2681            uint8 neighborLqiCount = 0;
   \   000008   75..00       MOV     ?V5,#0x0
   2682            uint8 neighborLqiEntries = 0;
   \   00000B   75..00       MOV     ?V4,#0x0
   2683            uint8 *msg;
   2684          
   2685            msg = inMsg->asdu;
   \   00000E   12....       LCALL   ?Subroutine56 & 0xFFFF
   2686          
   2687            status = *msg++;
   2688            if ( status == ZSuccess )
   \                     ??CrossCallReturnLabel_72:
   \   000011   7015         JNZ     ??ZDO_ParseMgmtLqiRsp_0
   2689            {
   2690              neighborLqiEntries = *msg++;
   \   000013   12....       LCALL   ??Subroutine234_0 & 0xFFFF
   2691              startIndex = *msg++;
   \                     ??CrossCallReturnLabel_557:
   \   000016   F5..         MOV     ?V6,A
   2692              neighborLqiCount = *msg++;
   \   000018   8E82         MOV     DPL,R6
   \   00001A   8F83         MOV     DPH,R7
   \   00001C   A3           INC     DPTR
   \   00001D   A3           INC     DPTR
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   F5..         MOV     ?V5,A
   \   000021   EE           MOV     A,R6
   \   000022   2403         ADD     A,#0x3
   \   000024   FE           MOV     R6,A
   \   000025   5001         JNC     ??ZDO_ParseMgmtLqiRsp_0
   \   000027   0F           INC     R7
   2693            }
   2694          
   2695            // Allocate a buffer big enough to handle the list.
   2696            pRsp = (ZDO_MgmtLqiRsp_t *)osal_mem_alloc(
   2697                      sizeof( ZDO_MgmtLqiRsp_t ) + (neighborLqiCount * sizeof( neighborLqiItem_t )) );
   \                     ??ZDO_ParseMgmtLqiRsp_0:
   \   000028                ; Setup parameters for call to function osal_mem_alloc
   \   000028   E5..         MOV     A,?V5
   \   00002A   75F00E       MOV     B,#0xe
   \   00002D   12....       LCALL   ?Subroutine126 & 0xFFFF
   \                     ??CrossCallReturnLabel_189:
   \   000030   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000033   8A..         MOV     ?V2,R2
   \   000035   8B..         MOV     ?V3,R3
   2698            if ( pRsp )
   \   000037   EA           MOV     A,R2
   \   000038   45..         ORL     A,?V3
   \   00003A   605D         JZ      ??ZDO_ParseMgmtLqiRsp_1
   2699            {
   2700              uint8 x;
   2701              neighborLqiItem_t *pList = pRsp->list;
   \   00003C   12....       LCALL   ?Subroutine14 & 0xFFFF
   2702              pRsp->status = status;
   2703              pRsp->neighborLqiEntries = neighborLqiEntries;
   2704              pRsp->startIndex = startIndex;
   \                     ??CrossCallReturnLabel_554:
   \   00003F   E5..         MOV     A,?V6
   \   000041   12....       LCALL   ??Subroutine237_0 & 0xFFFF
   2705              pRsp->neighborLqiCount = neighborLqiCount;
   \                     ??CrossCallReturnLabel_574:
   \   000044   E5..         MOV     A,?V5
   \   000046   F0           MOVX    @DPTR,A
   2706          
   2707              for ( x = 0; x < neighborLqiCount; x++ )
   \   000047   75..00       MOV     ?V4,#0x0
   \   00004A   8046         SJMP    ??ZDO_ParseMgmtLqiRsp_2
   2708              {
   2709                osal_cpyExtAddr(pList->extPANId, msg);   //Copy extended PAN ID
   \                     ??ZDO_ParseMgmtLqiRsp_3:
   \   00004C                ; Setup parameters for call to function sAddrExtCpy
   \   00004C   EE           MOV     A,R6
   \   00004D   FC           MOV     R4,A
   \   00004E   EF           MOV     A,R7
   \   00004F   FD           MOV     R5,A
   \   000050   E5..         MOV     A,?V0
   \   000052   12....       LCALL   ?Subroutine128 & 0xFFFF
   \                     ??CrossCallReturnLabel_194:
   \   000055   35..         ADDC    A,?V1
   \   000057   FB           MOV     R3,A
   \   000058   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   2710                msg += Z_EXTADDR_LEN;
   2711          
   2712                msg += Z_EXTADDR_LEN;  // Throwing away IEEE.
   \   00005B   EE           MOV     A,R6
   \   00005C   2410         ADD     A,#0x10
   \   00005E   FE           MOV     R6,A
   \   00005F   5001         JNC     ??ZDO_ParseMgmtLqiRsp_4
   \   000061   0F           INC     R7
   2713                pList->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseMgmtLqiRsp_4:
   \   000062   12....       LCALL   ?Subroutine75 & 0xFFFF
   \                     ??CrossCallReturnLabel_98:
   \   000065   12....       LCALL   ??Subroutine197_0 & 0xFFFF
   2714                msg += 2 + 1 + 1 + 1;      // Skip DeviceType, RxOnIdle, Rlationship, PermitJoining and Depth
   2715                pList->rxLqi = *msg++;
   \                     ??CrossCallReturnLabel_312:
   \   000068   8E82         MOV     DPL,R6
   \   00006A   8F83         MOV     DPH,R7
   \   00006C   A3           INC     DPTR
   \   00006D   A3           INC     DPTR
   \   00006E   A3           INC     DPTR
   \   00006F   A3           INC     DPTR
   \   000070   A3           INC     DPTR
   \   000071   E0           MOVX    A,@DPTR
   \   000072   C0E0         PUSH    A
   \   000074   12....       LCALL   ?Subroutine132 & 0xFFFF
   \                     ??CrossCallReturnLabel_204:
   \   000077   D0E0         POP     A
   \   000079   F0           MOVX    @DPTR,A
   \   00007A   EE           MOV     A,R6
   \   00007B   2406         ADD     A,#0x6
   \   00007D   FE           MOV     R6,A
   \   00007E   5001         JNC     ??ZDO_ParseMgmtLqiRsp_5
   \   000080   0F           INC     R7
   2716                pList->txQuality = 0;  // This is not specified OTA by ZigBee 1.1.
   \                     ??ZDO_ParseMgmtLqiRsp_5:
   \   000081   12....       LCALL   ?Subroutine120 & 0xFFFF
   \                     ??CrossCallReturnLabel_176:
   \   000084   E4           CLR     A
   \   000085   F0           MOVX    @DPTR,A
   2717                pList++;
   \   000086   E5..         MOV     A,?V0
   \   000088   240E         ADD     A,#0xe
   \   00008A   F5..         MOV     ?V0,A
   \   00008C   5002         JNC     ??ZDO_ParseMgmtLqiRsp_6
   \   00008E   05..         INC     ?V1
   2718              }
   \                     ??ZDO_ParseMgmtLqiRsp_6:
   \   000090   05..         INC     ?V4
   \                     ??ZDO_ParseMgmtLqiRsp_2:
   \   000092   E5..         MOV     A,?V4
   \   000094   C3           CLR     C
   \   000095   95..         SUBB    A,?V5
   \   000097   40B3         JC      ??ZDO_ParseMgmtLqiRsp_3
   2719            }
   2720          
   2721            return ( pRsp );
   \                     ??ZDO_ParseMgmtLqiRsp_1:
   \   000099   02....       LJMP    ?Subroutine3 & 0xFFFF
   2722          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   12....       LCALL   ?Subroutine169 & 0xFFFF
   \                     ??CrossCallReturnLabel_252:
   \   000003   8A82         MOV     DPL,R2
   \   000005   8B83         MOV     DPH,R3
   \   000007   E5..         MOV     A,?V7
   \   000009                REQUIRE ??Subroutine233_0
   \   000009                ; // Fall through to label ??Subroutine233_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine233_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   E5..         MOV     A,?V4
   \   000004   12....       LCALL   ?Subroutine139 & 0xFFFF
   \                     ??CrossCallReturnLabel_577:
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine169:
   \   000000   EA           MOV     A,R2
   \   000001   2404         ADD     A,#0x4
   \   000003   F5..         MOV     ?V0,A
   \   000005   E4           CLR     A
   \   000006   35..         ADDC    A,?V3
   \   000008   F5..         MOV     ?V1,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine132:
   \   000000   E5..         MOV     A,?V0
   \   000002   240D         ADD     A,#0xd
   \   000004   12....       LCALL   ?Subroutine168 & 0xFFFF
   \                     ??CrossCallReturnLabel_553:
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine126:
   \   000000   A4           MUL     AB
   \   000001   A9F0         MOV     R1,B
   \   000003   2404         ADD     A,#0x4
   \   000005   FA           MOV     R2,A
   \   000006   E4           CLR     A
   \   000007   39           ADDC    A,R1
   \   000008   FB           MOV     R3,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine234_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V4,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine56:
   \   000000   12....       LCALL   ?Subroutine162 & 0xFFFF
   \                     ??CrossCallReturnLabel_246:
   \   000003   12....       LCALL   ?Subroutine154 & 0xFFFF
   \                     ??CrossCallReturnLabel_566:
   \   000006   F5..         MOV     ?V7,A
   \   000008   A3           INC     DPTR
   \   000009   AE82         MOV     R6,DPL
   \   00000B   AF83         MOV     R7,DPH
   \   00000D   22           RET
   2723          
   2724          /*********************************************************************
   2725           * @fn          ZDO_ParseMgmNwkDiscRsp
   2726           *
   2727           * @brief       This function parses the incoming Management
   2728           *              Network Discover response.
   2729           *
   2730           * @param       inMsg - incoming message
   2731           *
   2732           * @return      pointer to parsed response.  This structure was
   2733           *          allocated using osal_mem_alloc, so it must be freed
   2734           *          by the calling function [osal_mem_free()].
   2735           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2736          ZDO_MgmNwkDiscRsp_t *ZDO_ParseMgmNwkDiscRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseMgmNwkDiscRsp:
   2737          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   2738            ZDO_MgmNwkDiscRsp_t *pRsp;
   2739            uint8 status;
   2740            uint8 networkCount = 0;
   \   000005   75..00       MOV     ?V0,#0x0
   2741            uint8 startIndex = 0;
   \   000008   75..00       MOV     ?V1,#0x0
   2742            uint8 networkListCount = 0;
   \   00000B   75..00       MOV     ?V7,#0x0
   2743            uint8 *msg;
   2744          
   2745            msg = inMsg->asdu;
   \   00000E   12....       LCALL   ?Subroutine57 & 0xFFFF
   2746            status = *msg++;
   \                     ??CrossCallReturnLabel_561:
   \   000011   F5..         MOV     ?V6,A
   \   000013   A3           INC     DPTR
   \   000014   AE82         MOV     R6,DPL
   \   000016   AF83         MOV     R7,DPH
   2747          
   2748            if ( status == ZSuccess )
   \   000018   700F         JNZ     ??ZDO_ParseMgmNwkDiscRsp_0
   2749            {
   2750              networkCount = *msg++;
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   F5..         MOV     ?V0,A
   2751              startIndex = *msg++;
   \   00001D   12....       LCALL   ?Subroutine82 & 0xFFFF
   2752              networkListCount = *msg++;
   2753            }
   \                     ??CrossCallReturnLabel_107:
   \   000020   F5..         MOV     ?V7,A
   \   000022   EE           MOV     A,R6
   \   000023   2403         ADD     A,#0x3
   \   000025   FE           MOV     R6,A
   \   000026   5001         JNC     ??ZDO_ParseMgmNwkDiscRsp_0
   \   000028   0F           INC     R7
   2754          
   2755            // Allocate a buffer big enough to handle the list.
   2756            pRsp = (ZDO_MgmNwkDiscRsp_t *)osal_mem_alloc( sizeof( ZDO_MgmNwkDiscRsp_t )
   2757                                            + (networkListCount * sizeof( mgmtNwkDiscItem_t )) );
   \                     ??ZDO_ParseMgmNwkDiscRsp_0:
   \   000029                ; Setup parameters for call to function osal_mem_alloc
   \   000029   85....       MOV     ?V2,?V7
   \   00002C   75..00       MOV     ?V3,#0x0
   \   00002F   7404         MOV     A,#0x4
   \   000031   78..         MOV     R0,#?V2
   \   000033   12....       LCALL   ?S_SHL
   \   000036   E5..         MOV     A,?V2
   \   000038   12....       LCALL   ?Subroutine128 & 0xFFFF
   \                     ??CrossCallReturnLabel_195:
   \   00003B   35..         ADDC    A,?V3
   \   00003D   FB           MOV     R3,A
   \   00003E   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000041   8A..         MOV     ?V2,R2
   \   000043   8B..         MOV     ?V3,R3
   2758            if ( pRsp )
   \   000045   EA           MOV     A,R2
   \   000046   45..         ORL     A,?V3
   \   000048   7003         JNZ     $+5
   \   00004A   02....       LJMP    ??ZDO_ParseMgmNwkDiscRsp_1 & 0xFFFF
   2759            {
   2760              uint8 x;
   2761              mgmtNwkDiscItem_t *pList;
   2762          
   2763              pRsp->status = status;
   \   00004D   8A82         MOV     DPL,R2
   \   00004F   8B83         MOV     DPH,R3
   \   000051   E5..         MOV     A,?V6
   \   000053   F0           MOVX    @DPTR,A
   2764              pRsp->networkCount = networkCount;
   \   000054   A3           INC     DPTR
   \   000055   E5..         MOV     A,?V0
   \   000057   12....       LCALL   ?Subroutine139 & 0xFFFF
   2765              pRsp->startIndex = startIndex;
   \                     ??CrossCallReturnLabel_578:
   \   00005A   12....       LCALL   ?Subroutine33 & 0xFFFF
   2766              pRsp->networkListCount = networkListCount;
   \                     ??CrossCallReturnLabel_571:
   \   00005D   E5..         MOV     A,?V7
   \   00005F   F0           MOVX    @DPTR,A
   2767              pList = pRsp->list;
   \   000060   12....       LCALL   ?Subroutine169 & 0xFFFF
   2768          
   2769              for ( x = 0; x < networkListCount; x++ )
   \                     ??CrossCallReturnLabel_251:
   \   000063   75..00       MOV     ?V4,#0x0
   \   000066   02....       LJMP    ??ZDO_ParseMgmNwkDiscRsp_2 & 0xFFFF
   2770              {
   2771                osal_cpyExtAddr(pList->extendedPANID, msg);   //Copy extended PAN ID
   \                     ??ZDO_ParseMgmNwkDiscRsp_3:
   \   000069                ; Setup parameters for call to function sAddrExtCpy
   \   000069   EE           MOV     A,R6
   \   00006A   FC           MOV     R4,A
   \   00006B   EF           MOV     A,R7
   \   00006C   FD           MOV     R5,A
   \   00006D   AA..         MOV     R2,?V0
   \   00006F   AB..         MOV     R3,?V1
   \   000071   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   2772                pList->PANId = BUILD_UINT16( msg[0], msg[1] );
   \   000074   12....       LCALL   ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   000077   A3           INC     DPTR
   \   000078   F0           MOVX    @DPTR,A
   \   000079   A3           INC     DPTR
   \   00007A   E9           MOV     A,R1
   \   00007B   12....       LCALL   ?Subroutine20 & 0xFFFF
   2773                msg += Z_EXTADDR_LEN;
   2774          
   2775                pList->logicalChannel = *msg++;
   \                     ??CrossCallReturnLabel_16:
   \   00007E   85..82       MOV     DPL,?V0
   \   000081   85..83       MOV     DPH,?V1
   \   000084   A3           INC     DPTR
   \   000085   A3           INC     DPTR
   \   000086   A3           INC     DPTR
   \   000087   A3           INC     DPTR
   \   000088   A3           INC     DPTR
   \   000089   A3           INC     DPTR
   \   00008A   A3           INC     DPTR
   \   00008B   A3           INC     DPTR
   \   00008C   A3           INC     DPTR
   \   00008D   A3           INC     DPTR
   \   00008E   F0           MOVX    @DPTR,A
   2776                pList->stackProfile = (*msg) & 0x0F;
   \   00008F   EE           MOV     A,R6
   \   000090   2409         ADD     A,#0x9
   \   000092   F8           MOV     R0,A
   \   000093   12....       LCALL   ?Subroutine113 & 0xFFFF
   \                     ??CrossCallReturnLabel_162:
   \   000096   C0E0         PUSH    A
   \   000098   E5..         MOV     A,?V0
   \   00009A   240B         ADD     A,#0xb
   \   00009C   12....       LCALL   ?Subroutine168 & 0xFFFF
   \                     ??CrossCallReturnLabel_548:
   \   00009F   D0E0         POP     A
   \   0000A1   12....       LCALL   ?Subroutine36 & 0xFFFF
   2777                pList->version = (*msg++ >> 4) & 0x0F;
   \                     ??CrossCallReturnLabel_36:
   \   0000A4   C0E0         PUSH    A
   \   0000A6   12....       LCALL   ?Subroutine120 & 0xFFFF
   \                     ??CrossCallReturnLabel_177:
   \   0000A9   D0E0         POP     A
   \   0000AB   F0           MOVX    @DPTR,A
   2778                pList->beaconOrder = (*msg) & 0x0F;
   \   0000AC   EE           MOV     A,R6
   \   0000AD   240A         ADD     A,#0xa
   \   0000AF   08           INC     R0
   \   0000B0   12....       LCALL   ?Subroutine113 & 0xFFFF
   \                     ??CrossCallReturnLabel_163:
   \   0000B3   C0E0         PUSH    A
   \   0000B5   12....       LCALL   ?Subroutine132 & 0xFFFF
   \                     ??CrossCallReturnLabel_205:
   \   0000B8   D0E0         POP     A
   \   0000BA   12....       LCALL   ?Subroutine36 & 0xFFFF
   2779                pList->superFrameOrder = (*msg++ >> 4) & 0x0F;
   \                     ??CrossCallReturnLabel_37:
   \   0000BD   C0E0         PUSH    A
   \   0000BF   12....       LCALL   ?Subroutine111 & 0xFFFF
   \                     ??CrossCallReturnLabel_161:
   \   0000C2   D0E0         POP     A
   \   0000C4   F0           MOVX    @DPTR,A
   2780                pList->permitJoining = *msg++;
   \   0000C5   EE           MOV     A,R6
   \   0000C6   240B         ADD     A,#0xb
   \   0000C8   F582         MOV     DPL,A
   \   0000CA   E4           CLR     A
   \   0000CB   3F           ADDC    A,R7
   \   0000CC   F583         MOV     DPH,A
   \   0000CE   E0           MOVX    A,@DPTR
   \   0000CF   C0E0         PUSH    A
   \   0000D1   12....       LCALL   ?Subroutine114 & 0xFFFF
   \                     ??CrossCallReturnLabel_166:
   \   0000D4   D0E0         POP     A
   \   0000D6   F0           MOVX    @DPTR,A
   \   0000D7   EE           MOV     A,R6
   \   0000D8   240C         ADD     A,#0xc
   \   0000DA   FE           MOV     R6,A
   \   0000DB   5001         JNC     ??ZDO_ParseMgmNwkDiscRsp_4
   \   0000DD   0F           INC     R7
   2781                pList++;
   \                     ??ZDO_ParseMgmNwkDiscRsp_4:
   \   0000DE   E5..         MOV     A,?V0
   \   0000E0   2410         ADD     A,#0x10
   \   0000E2   F5..         MOV     ?V0,A
   \   0000E4   5002         JNC     ??ZDO_ParseMgmNwkDiscRsp_5
   \   0000E6   05..         INC     ?V1
   2782              }
   \                     ??ZDO_ParseMgmNwkDiscRsp_5:
   \   0000E8   05..         INC     ?V4
   \                     ??ZDO_ParseMgmNwkDiscRsp_2:
   \   0000EA   E5..         MOV     A,?V4
   \   0000EC   C3           CLR     C
   \   0000ED   95..         SUBB    A,?V7
   \   0000EF   5003         JNC     $+5
   \   0000F1   02....       LJMP    ??ZDO_ParseMgmNwkDiscRsp_3 & 0xFFFF
   2783            }
   2784          
   2785            return ( pRsp );
   \                     ??ZDO_ParseMgmNwkDiscRsp_1:
   \   0000F4   02....       LJMP    ?Subroutine3 & 0xFFFF
   2786          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine113:
   \   000000   E4           CLR     A
   \   000001   3F           ADDC    A,R7
   \   000002   F9           MOV     R1,A
   \   000003   8882         MOV     DPL,R0
   \   000005   8983         MOV     DPH,R1
   \   000007   E0           MOVX    A,@DPTR
   \   000008   540F         ANL     A,#0xf
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   12....       LCALL   ?Subroutine141 & 0xFFFF
   \                     ??CrossCallReturnLabel_218:
   \   000003   C4           SWAP    A
   \   000004   540F         ANL     A,#0xf
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine82:
   \   000000   A3           INC     DPTR
   \   000001   E0           MOVX    A,@DPTR
   \   000002   F5..         MOV     ?V1,A
   \   000004   8E82         MOV     DPL,R6
   \   000006   8F83         MOV     DPH,R7
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine57:
   \   000000   12....       LCALL   ?Subroutine162 & 0xFFFF
   \                     ??CrossCallReturnLabel_247:
   \   000003                REQUIRE ??Subroutine235_0
   \   000003                ; // Fall through to label ??Subroutine235_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   E5..         MOV     A,?V1
   \   000002                REQUIRE ??Subroutine237_0
   \   000002                ; // Fall through to label ??Subroutine237_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine55:
   \   000000   12....       LCALL   ?Subroutine146 & 0xFFFF
   \                     ??CrossCallReturnLabel_227:
   \   000003   22           RET
   2787          
   2788          /*********************************************************************
   2789           * @fn          ZDO_ParseMgmtRtgRsp
   2790           *
   2791           * @brief       This function parses the incoming Management
   2792           *              Routing response.
   2793           *
   2794           * @param       inMsg - incoming message
   2795           *
   2796           * @return      a pointer to parsed response structure (NULL if not allocated).
   2797           *          This structure was allocated using osal_mem_alloc, so it must be freed
   2798           *          by the calling function [osal_mem_free()].
   2799           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2800          ZDO_MgmtRtgRsp_t *ZDO_ParseMgmtRtgRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseMgmtRtgRsp:
   2801          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   2802            ZDO_MgmtRtgRsp_t *pRsp;
   2803            uint8 status;
   2804            uint8 rtgCount = 0;
   \   000005   75..00       MOV     ?V4,#0x0
   2805            uint8 startIndex = 0;
   \   000008   75..00       MOV     ?V1,#0x0
   2806            uint8 rtgListCount = 0;
   \   00000B   75..00       MOV     ?V0,#0x0
   2807            uint8 *msg;
   2808          
   2809            msg = inMsg->asdu;
   \   00000E   12....       LCALL   ?Subroutine57 & 0xFFFF
   2810          
   2811            status = *msg++;
   \                     ??CrossCallReturnLabel_562:
   \   000011   F5..         MOV     ?V5,A
   \   000013   A3           INC     DPTR
   \   000014   AE82         MOV     R6,DPL
   \   000016   AF83         MOV     R7,DPH
   2812            if ( status == ZSuccess )
   \   000018   700F         JNZ     ??ZDO_ParseMgmtRtgRsp_0
   2813            {
   2814              rtgCount = *msg++;
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   F5..         MOV     ?V4,A
   2815              startIndex = *msg++;
   \   00001D   12....       LCALL   ?Subroutine82 & 0xFFFF
   2816              rtgListCount = *msg++;
   2817            }
   \                     ??CrossCallReturnLabel_108:
   \   000020   F5..         MOV     ?V0,A
   \   000022   EE           MOV     A,R6
   \   000023   2403         ADD     A,#0x3
   \   000025   FE           MOV     R6,A
   \   000026   5001         JNC     ??ZDO_ParseMgmtRtgRsp_0
   \   000028   0F           INC     R7
   2818          
   2819            // Allocate a buffer big enough to handle the list
   2820            pRsp = (ZDO_MgmtRtgRsp_t *)osal_mem_alloc(
   2821                    sizeof( ZDO_MgmtRtgRsp_t ) + (rtgListCount * sizeof( rtgItem_t )) );
   \                     ??ZDO_ParseMgmtRtgRsp_0:
   \   000029                ; Setup parameters for call to function osal_mem_alloc
   \   000029   E5..         MOV     A,?V0
   \   00002B   75F006       MOV     B,#0x6
   \   00002E   12....       LCALL   ?Subroutine126 & 0xFFFF
   \                     ??CrossCallReturnLabel_190:
   \   000031   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   2822            if ( pRsp )
   \   000034   EA           MOV     A,R2
   \   000035   4B           ORL     A,R3
   \   000036   6052         JZ      ??ZDO_ParseMgmtRtgRsp_1
   2823            {
   2824              uint8 x;
   2825              rtgItem_t *pList = pRsp->list;
   \   000038   EA           MOV     A,R2
   \   000039   2404         ADD     A,#0x4
   \   00003B   F8           MOV     R0,A
   \   00003C   E4           CLR     A
   \   00003D   3B           ADDC    A,R3
   \   00003E   F9           MOV     R1,A
   2826              pRsp->status = status;
   \   00003F   8A82         MOV     DPL,R2
   \   000041   8B83         MOV     DPH,R3
   \   000043   E5..         MOV     A,?V5
   \   000045   12....       LCALL   ??Subroutine233_0 & 0xFFFF
   2827              pRsp->rtgCount = rtgCount;
   2828              pRsp->startIndex = startIndex;
   \                     ??CrossCallReturnLabel_556:
   \   000048   12....       LCALL   ?Subroutine33 & 0xFFFF
   2829              pRsp->rtgListCount = rtgListCount;
   \                     ??CrossCallReturnLabel_572:
   \   00004B   E5..         MOV     A,?V0
   \   00004D   F0           MOVX    @DPTR,A
   2830          
   2831              for ( x = 0; x < rtgListCount; x++ )
   \   00004E   7C00         MOV     R4,#0x0
   \   000050   8032         SJMP    ??ZDO_ParseMgmtRtgRsp_2
   2832              {
   2833                pList->dstAddress = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseMgmtRtgRsp_3:
   \   000052   12....       LCALL   ?Subroutine73 & 0xFFFF
   \                     ??CrossCallReturnLabel_93:
   \   000055   F0           MOVX    @DPTR,A
   \   000056   A3           INC     DPTR
   \   000057   E5..         MOV     A,?V3
   \   000059   12....       LCALL   ?Subroutine22 & 0xFFFF
   2834                msg += 2;
   2835                pList->status = *msg++;
   \                     ??CrossCallReturnLabel_20:
   \   00005C   8882         MOV     DPL,R0
   \   00005E   8983         MOV     DPH,R1
   \   000060   A3           INC     DPTR
   \   000061   A3           INC     DPTR
   \   000062   A3           INC     DPTR
   \   000063   A3           INC     DPTR
   \   000064   A3           INC     DPTR
   \   000065   F0           MOVX    @DPTR,A
   \   000066   EE           MOV     A,R6
   \   000067   2403         ADD     A,#0x3
   \   000069   FE           MOV     R6,A
   \   00006A   5001         JNC     ??ZDO_ParseMgmtRtgRsp_4
   \   00006C   0F           INC     R7
   2836                pList->nextHopAddress = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseMgmtRtgRsp_4:
   \   00006D   12....       LCALL   ?Subroutine73 & 0xFFFF
   \                     ??CrossCallReturnLabel_94:
   \   000070   A3           INC     DPTR
   \   000071   A3           INC     DPTR
   \   000072   F0           MOVX    @DPTR,A
   \   000073   A3           INC     DPTR
   \   000074   E5..         MOV     A,?V3
   \   000076   12....       LCALL   ?Subroutine140 & 0xFFFF
   2837                msg += 2;
   \                     ??CrossCallReturnLabel_488:
   \   000079   5001         JNC     ??ZDO_ParseMgmtRtgRsp_5
   \   00007B   0F           INC     R7
   2838                pList++;
   \                     ??ZDO_ParseMgmtRtgRsp_5:
   \   00007C   E8           MOV     A,R0
   \   00007D   2406         ADD     A,#0x6
   \   00007F   F8           MOV     R0,A
   \   000080   5001         JNC     ??ZDO_ParseMgmtRtgRsp_6
   \   000082   09           INC     R1
   2839              }
   \                     ??ZDO_ParseMgmtRtgRsp_6:
   \   000083   0C           INC     R4
   \                     ??ZDO_ParseMgmtRtgRsp_2:
   \   000084   EC           MOV     A,R4
   \   000085   C3           CLR     C
   \   000086   95..         SUBB    A,?V0
   \   000088   40C8         JC      ??ZDO_ParseMgmtRtgRsp_3
   2840            }
   2841          
   2842            return ( pRsp );
   \                     ??ZDO_ParseMgmtRtgRsp_1:
   \   00008A   02....       LJMP    ??Subroutine210_0 & 0xFFFF
   2843          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine73:
   \   000000   12....       LCALL   ?Subroutine159 & 0xFFFF
   \                     ??CrossCallReturnLabel_560:
   \   000003   F5..         MOV     ?V3,A
   \   000005   E5..         MOV     A,?V4
   \   000007   8882         MOV     DPL,R0
   \   000009   8983         MOV     DPH,R1
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine159:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004                REQUIRE ??Subroutine234_0
   \   000004                ; // Fall through to label ??Subroutine234_0
   2844          
   2845          /*********************************************************************
   2846           * @fn          ZDO_ParseMgmtBindRsp
   2847           *
   2848           * @brief       This function parses the incoming Management
   2849           *              Binding response.
   2850           *
   2851           * @param       inMsg - pointer to message to parse
   2852           *
   2853           * @return      a pointer to parsed response structure (NULL if not allocated).
   2854           *          This structure was allocated using osal_mem_alloc, so it must be freed
   2855           *          by the calling function [osal_mem_free()].
   2856           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2857          ZDO_MgmtBindRsp_t *ZDO_ParseMgmtBindRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseMgmtBindRsp:
   2858          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   2859            ZDO_MgmtBindRsp_t *pRsp;
   2860            uint8 status;
   2861            uint8 bindingCount = 0;
   \   000005   75..00       MOV     ?V4,#0x0
   2862            uint8 startIndex = 0;
   \   000008   75..00       MOV     ?V5,#0x0
   2863            uint8 bindingListCount = 0;
   \   00000B   75..00       MOV     ?V6,#0x0
   2864            uint8 *msg;
   2865          
   2866            msg = inMsg->asdu;
   \   00000E   12....       LCALL   ?Subroutine56 & 0xFFFF
   2867          
   2868            status = *msg++;
   2869            if ( status == ZSuccess )
   \                     ??CrossCallReturnLabel_73:
   \   000011   7015         JNZ     ??ZDO_ParseMgmtBindRsp_0
   2870            {
   2871              bindingCount = *msg++;
   \   000013   12....       LCALL   ??Subroutine234_0 & 0xFFFF
   2872              startIndex = *msg++;
   \                     ??CrossCallReturnLabel_558:
   \   000016   F5..         MOV     ?V5,A
   2873              bindingListCount = *msg++;
   \   000018   8E82         MOV     DPL,R6
   \   00001A   8F83         MOV     DPH,R7
   \   00001C   A3           INC     DPTR
   \   00001D   A3           INC     DPTR
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   F5..         MOV     ?V6,A
   \   000021   EE           MOV     A,R6
   \   000022   2403         ADD     A,#0x3
   \   000024   FE           MOV     R6,A
   \   000025   5001         JNC     ??ZDO_ParseMgmtBindRsp_0
   \   000027   0F           INC     R7
   2874            }
   2875          
   2876            // Allocate a buffer big enough to handle the list
   2877            pRsp = (ZDO_MgmtBindRsp_t *)osal_mem_alloc(
   2878                    (sizeof ( ZDO_MgmtBindRsp_t ) + (bindingListCount * sizeof( apsBindingItem_t ))) );
   \                     ??ZDO_ParseMgmtBindRsp_0:
   \   000028                ; Setup parameters for call to function osal_mem_alloc
   \   000028   E5..         MOV     A,?V6
   \   00002A   75F015       MOV     B,#0x15
   \   00002D   12....       LCALL   ?Subroutine126 & 0xFFFF
   \                     ??CrossCallReturnLabel_191:
   \   000030   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000033   8A..         MOV     ?V2,R2
   \   000035   8B..         MOV     ?V3,R3
   2879            if ( pRsp )
   \   000037   EA           MOV     A,R2
   \   000038   45..         ORL     A,?V3
   \   00003A   606B         JZ      ??ZDO_ParseMgmtBindRsp_1
   2880            {
   2881              uint8 x;
   2882              apsBindingItem_t *pList = pRsp->list;
   \   00003C   12....       LCALL   ?Subroutine14 & 0xFFFF
   2883              pRsp->status = status;
   2884              pRsp->bindingCount = bindingCount;
   2885              pRsp->startIndex = startIndex;
   \                     ??CrossCallReturnLabel_555:
   \   00003F   E5..         MOV     A,?V5
   \   000041   12....       LCALL   ??Subroutine237_0 & 0xFFFF
   2886              pRsp->bindingListCount = bindingListCount;
   \                     ??CrossCallReturnLabel_575:
   \   000044   E5..         MOV     A,?V6
   \   000046   F0           MOVX    @DPTR,A
   2887          
   2888              for ( x = 0; x < bindingListCount; x++ )
   \   000047   75..00       MOV     ?V4,#0x0
   \   00004A   8015         SJMP    ??ZDO_ParseMgmtBindRsp_2
   2889              {
   2890                osal_cpyExtAddr( pList->srcAddr, msg );
   2891                msg += Z_EXTADDR_LEN;
   2892                pList->srcEP = *msg++;
   2893          
   2894                // Get the Cluster ID
   2895          
   2896                pList->clusterID = BUILD_UINT16( msg[0], msg[1] );
   2897                msg += 2;
   2898                pList->dstAddr.addrMode = *msg++;
   2899                if ( pList->dstAddr.addrMode == Addr64Bit )
   2900                {
   2901                  osal_cpyExtAddr( pList->dstAddr.addr.extAddr, msg );
   2902                  msg += Z_EXTADDR_LEN;
   2903                  pList->dstEP = *msg++;
   2904                }
   2905                else
   2906                {
   2907                  pList->dstAddr.addr.shortAddr = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseMgmtBindRsp_3:
   \   00004C   12....       LCALL   ?Subroutine81 & 0xFFFF
   2908                  msg += 2;
   2909                }
   \                     ??CrossCallReturnLabel_106:
   \   00004F   12....       LCALL   ??Subroutine224_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_485:
   \   000052   5001         JNC     ??ZDO_ParseMgmtBindRsp_4
   \   000054   0F           INC     R7
   2910          
   2911                pList++;
   \                     ??ZDO_ParseMgmtBindRsp_4:
   \   000055   E5..         MOV     A,?V0
   \   000057   2415         ADD     A,#0x15
   \   000059   F5..         MOV     ?V0,A
   \   00005B   5002         JNC     ??ZDO_ParseMgmtBindRsp_5
   \   00005D   05..         INC     ?V1
   \                     ??ZDO_ParseMgmtBindRsp_5:
   \   00005F   05..         INC     ?V4
   \                     ??ZDO_ParseMgmtBindRsp_2:
   \   000061   E5..         MOV     A,?V4
   \   000063   C3           CLR     C
   \   000064   95..         SUBB    A,?V6
   \   000066   503F         JNC     ??ZDO_ParseMgmtBindRsp_1
   \   000068                ; Setup parameters for call to function sAddrExtCpy
   \   000068   EE           MOV     A,R6
   \   000069   FC           MOV     R4,A
   \   00006A   EF           MOV     A,R7
   \   00006B   FD           MOV     R5,A
   \   00006C   AA..         MOV     R2,?V0
   \   00006E   AB..         MOV     R3,?V1
   \   000070   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   000073   12....       LCALL   ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_570:
   \   000076   5001         JNC     ??ZDO_ParseMgmtBindRsp_6
   \   000078   0F           INC     R7
   \                     ??ZDO_ParseMgmtBindRsp_6:
   \   000079   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   00007C   5001         JNC     ??ZDO_ParseMgmtBindRsp_7
   \   00007E   0F           INC     R7
   \                     ??ZDO_ParseMgmtBindRsp_7:
   \   00007F   12....       LCALL   ?Subroutine121 & 0xFFFF
   \                     ??CrossCallReturnLabel_179:
   \   000082   70C8         JNZ     ??ZDO_ParseMgmtBindRsp_3
   \   000084                ; Setup parameters for call to function sAddrExtCpy
   \   000084   EE           MOV     A,R6
   \   000085   FC           MOV     R4,A
   \   000086   EF           MOV     A,R7
   \   000087   FD           MOV     R5,A
   \   000088   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   00008B   8E82         MOV     DPL,R6
   \   00008D   8F83         MOV     DPH,R7
   \   00008F   A3           INC     DPTR
   \   000090   A3           INC     DPTR
   \   000091   A3           INC     DPTR
   \   000092   A3           INC     DPTR
   \   000093   A3           INC     DPTR
   \   000094   A3           INC     DPTR
   \   000095   A3           INC     DPTR
   \   000096   A3           INC     DPTR
   \   000097   E0           MOVX    A,@DPTR
   \   000098   C0E0         PUSH    A
   \   00009A   12....       LCALL   ?Subroutine122 & 0xFFFF
   2912              }
   2913            }
   \                     ??CrossCallReturnLabel_181:
   \   00009D   D0E0         POP     A
   \   00009F   12....       LCALL   ??Subroutine236_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_568:
   \   0000A2   50B1         JNC     ??ZDO_ParseMgmtBindRsp_4
   \   0000A4   0F           INC     R7
   \                     ??ZDO_ParseMgmtBindRsp_8:
   \   0000A5   80AE         SJMP    ??ZDO_ParseMgmtBindRsp_4
   2914          
   2915            return ( pRsp );
   \                     ??ZDO_ParseMgmtBindRsp_1:
   \   0000A7   02....       LJMP    ?Subroutine3 & 0xFFFF
   2916          }
   2917          
   2918          /*********************************************************************
   2919           * @fn          ZDO_ParseUserDescRsp
   2920           *
   2921           * @brief       This function parses the incoming User
   2922           *              Descriptor Response.
   2923           *
   2924           * @param       inMsg - incoming response message
   2925           *
   2926           * @return      a pointer to parsed response structure (NULL if not allocated).
   2927           *          This structure was allocated using osal_mem_alloc, so it must be freed
   2928           *          by the calling function [osal_mem_free()].
   2929           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2930          ZDO_UserDescRsp_t *ZDO_ParseUserDescRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseUserDescRsp:
   2931          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   2932            ZDO_UserDescRsp_t *pRsp;
   2933            uint8 *msg;
   2934            uint8 descLen = 0;
   \   000005   75..00       MOV     ?V2,#0x0
   2935          
   2936            msg = inMsg->asdu;
   \   000008   12....       LCALL   ?Subroutine88 & 0xFFFF
   \                     ??CrossCallReturnLabel_273:
   \   00000B   F5..         MOV     ?V1,A
   2937          
   2938            if ( msg[0] == ZSuccess )
   \   00000D   85..82       MOV     DPL,?V0
   \   000010   F583         MOV     DPH,A
   \   000012   E0           MOVX    A,@DPTR
   \   000013   7006         JNZ     ??ZDO_ParseUserDescRsp_0
   2939              descLen = msg[3];
   \   000015   A3           INC     DPTR
   \   000016   A3           INC     DPTR
   \   000017   A3           INC     DPTR
   \   000018   E0           MOVX    A,@DPTR
   \   000019   F5..         MOV     ?V2,A
   2940          
   2941            pRsp = (ZDO_UserDescRsp_t *)osal_mem_alloc( sizeof ( ZDO_UserDescRsp_t ) + descLen );
   \                     ??ZDO_ParseUserDescRsp_0:
   \   00001B   AE..         MOV     R6,?V2
   \   00001D                ; Setup parameters for call to function osal_mem_alloc
   \   00001D   EE           MOV     A,R6
   \   00001E   12....       LCALL   ?Subroutine128 & 0xFFFF
   \                     ??CrossCallReturnLabel_196:
   \   000021   3400         ADDC    A,#0x0
   \   000023   FB           MOV     R3,A
   \   000024   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000027   8A..         MOV     ?V6,R2
   \   000029   8B..         MOV     ?V7,R3
   2942            if ( pRsp )
   \   00002B   EA           MOV     A,R2
   \   00002C   45..         ORL     A,?V7
   \   00002E   6056         JZ      ??ZDO_ParseUserDescRsp_1
   2943            {
   2944              pRsp->status = msg[0];
   \   000030   85..82       MOV     DPL,?V0
   \   000033   85..83       MOV     DPH,?V1
   \   000036   12....       LCALL   ?Subroutine92 & 0xFFFF
   2945              pRsp->nwkAddr = BUILD_UINT16( msg[1], msg[2] );
   \                     ??CrossCallReturnLabel_124:
   \   000039   85..82       MOV     DPL,?V0
   \   00003C   85..83       MOV     DPH,?V1
   \   00003F   A3           INC     DPTR
   \   000040   E0           MOVX    A,@DPTR
   \   000041   FA           MOV     R2,A
   \   000042   85..82       MOV     DPL,?V0
   \   000045   85..83       MOV     DPH,?V1
   \   000048   A3           INC     DPTR
   \   000049   12....       LCALL   ??Subroutine187_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_274:
   \   00004C   85..82       MOV     DPL,?V6
   \   00004F   8B83         MOV     DPH,R3
   \   000051   A3           INC     DPTR
   \   000052   12....       LCALL   ??Subroutine197_0 & 0xFFFF
   2946              pRsp->length = descLen;
   \                     ??CrossCallReturnLabel_313:
   \   000055   85..82       MOV     DPL,?V6
   \   000058   8B83         MOV     DPH,R3
   \   00005A   A3           INC     DPTR
   \   00005B   A3           INC     DPTR
   \   00005C   A3           INC     DPTR
   \   00005D   EE           MOV     A,R6
   \   00005E   F0           MOVX    @DPTR,A
   2947              if ( descLen )
   \   00005F   6025         JZ      ??ZDO_ParseUserDescRsp_1
   2948                osal_memcpy( pRsp->desc, &msg[4], descLen );
   \   000061                ; Setup parameters for call to function osal_memcpy
   \   000061   E5..         MOV     A,?V0
   \   000063   2404         ADD     A,#0x4
   \   000065   F5..         MOV     ?V0,A
   \   000067   5002         JNC     ??ZDO_ParseUserDescRsp_2
   \   000069   05..         INC     ?V1
   \                     ??ZDO_ParseUserDescRsp_2:
   \   00006B   88..         MOV     ?V2,R0
   \   00006D   78..         MOV     R0,#?V0
   \   00006F   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000072   EE           MOV     A,R6
   \   000073   FC           MOV     R4,A
   \   000074   7D00         MOV     R5,#0x0
   \   000076   E5..         MOV     A,?V6
   \   000078   12....       LCALL   ?Subroutine128 & 0xFFFF
   2949            }
   \                     ??CrossCallReturnLabel_197:
   \   00007B   35..         ADDC    A,?V7
   \   00007D   FB           MOV     R3,A
   \   00007E   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000081   7403         MOV     A,#0x3
   \   000083   12....       LCALL   ?DEALLOC_XSTACK8
   2950          
   2951            return ( pRsp );
   \                     ??ZDO_ParseUserDescRsp_1:
   \   000086   AA..         MOV     R2,?V6
   \   000088   AB..         MOV     R3,?V7
   \   00008A   02....       LJMP    ??Subroutine202_0 & 0xFFFF
   2952          }
   2953          
   2954          /*********************************************************************
   2955           * @fn          ZDO_ParseSimpleDescBuf
   2956           *
   2957           * @brief       Parse a byte sequence representation of a Simple Descriptor.
   2958           *
   2959           * @param       buf  - pointer to a byte array representing a Simple Desc.
   2960           * @param       desc - SimpleDescriptionFormat_t *
   2961           *
   2962           *              This routine allocates storage for the cluster IDs because
   2963           *              they are 16-bit and need to be aligned to be properly processed.
   2964           *              This routine returns non-zero if an allocation fails.
   2965           *
   2966           *              NOTE: This means that the caller or user of the input structure
   2967           *                    is responsible for freeing the memory
   2968           *
   2969           * @return      0: success
   2970           *              1: failure due to malloc failure.
   2971           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2972          uint8 ZDO_ParseSimpleDescBuf( uint8 *buf, SimpleDescriptionFormat_t *desc )
   \                     ZDO_ParseSimpleDescBuf:
   2973          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V0,R4
   \   00000B   8D..         MOV     ?V1,R5
   2974            uint8 num, i;
   2975          
   2976            desc->EndPoint = *buf++;
   \   00000D   8E82         MOV     DPL,R6
   \   00000F   8F83         MOV     DPH,R7
   \   000011   12....       LCALL   ?Subroutine96 & 0xFFFF
   \                     ??CrossCallReturnLabel_133:
   \   000014   12....       LCALL   ?Subroutine17 & 0xFFFF
   2977            desc->AppProfId = BUILD_UINT16( buf[0], buf[1] );
   \                     ??CrossCallReturnLabel_12:
   \   000017   E0           MOVX    A,@DPTR
   \   000018   12....       LCALL   ?Subroutine77 & 0xFFFF
   \                     ??CrossCallReturnLabel_584:
   \   00001B   12....       LCALL   ?Subroutine15 & 0xFFFF
   2978            buf += 2;
   \                     ??CrossCallReturnLabel_484:
   \   00001E   5001         JNC     ??ZDO_ParseSimpleDescBuf_0
   \   000020   0F           INC     R7
   2979            desc->AppDeviceId = BUILD_UINT16( buf[0], buf[1] );
   \                     ??ZDO_ParseSimpleDescBuf_0:
   \   000021   12....       LCALL   ?Subroutine72 & 0xFFFF
   \                     ??CrossCallReturnLabel_92:
   \   000024   F0           MOVX    @DPTR,A
   \   000025   A3           INC     DPTR
   \   000026   E9           MOV     A,R1
   \   000027   12....       LCALL   ?Subroutine22 & 0xFFFF
   2980            buf += 2;
   2981            desc->AppDevVer = *buf >> 4;
   \                     ??CrossCallReturnLabel_21:
   \   00002A   C4           SWAP    A
   \   00002B   540F         ANL     A,#0xf
   2982          
   2983            desc->Reserved = 0;
   \   00002D   8C82         MOV     DPL,R4
   \   00002F   8D83         MOV     DPH,R5
   \   000031   A3           INC     DPTR
   \   000032   A3           INC     DPTR
   \   000033   A3           INC     DPTR
   \   000034   A3           INC     DPTR
   \   000035   A3           INC     DPTR
   \   000036   12....       LCALL   ?Subroutine38 & 0xFFFF
   2984            buf++;
   2985          
   2986            // move in input cluster list (if any). allocate aligned memory.
   2987            num = desc->AppNumInClusters = *buf++;
   \                     ??CrossCallReturnLabel_43:
   \   000039   F5..         MOV     ?V2,A
   \   00003B   EE           MOV     A,R6
   \   00003C   2404         ADD     A,#0x4
   \   00003E   FE           MOV     R6,A
   \   00003F   5001         JNC     ??ZDO_ParseSimpleDescBuf_1
   \   000041   0F           INC     R7
   \                     ??ZDO_ParseSimpleDescBuf_1:
   \   000042   8C82         MOV     DPL,R4
   \   000044   8D83         MOV     DPH,R5
   \   000046   A3           INC     DPTR
   \   000047   A3           INC     DPTR
   \   000048   A3           INC     DPTR
   \   000049   A3           INC     DPTR
   \   00004A   A3           INC     DPTR
   \   00004B   A3           INC     DPTR
   \   00004C   E5..         MOV     A,?V2
   \   00004E   F0           MOVX    @DPTR,A
   2988            if ( num )
   \   00004F   EC           MOV     A,R4
   \   000050   2407         ADD     A,#0x7
   \   000052   F5..         MOV     ?V6,A
   \   000054   E4           CLR     A
   \   000055   35..         ADDC    A,?V1
   \   000057   F5..         MOV     ?V7,A
   \   000059   E5..         MOV     A,?V2
   \   00005B   6043         JZ      ??ZDO_ParseSimpleDescBuf_2
   2989            {
   2990              if (!(desc->pAppInClusterList = (uint16 *)osal_mem_alloc(num*sizeof(uint16))))
   \   00005D                ; Setup parameters for call to function osal_mem_alloc
   \   00005D   12....       LCALL   ?Subroutine100 & 0xFFFF
   \                     ??CrossCallReturnLabel_146:
   \   000060   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000063   8A..         MOV     ?V4,R2
   \   000065   8B..         MOV     ?V5,R3
   \   000067   A8..         MOV     R0,?V4
   \   000069   A9..         MOV     R1,?V5
   \   00006B   85..82       MOV     DPL,?V6
   \   00006E   85..83       MOV     DPH,?V7
   \   000071   12....       LCALL   ??Subroutine196_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_322:
   \   000074   E8           MOV     A,R0
   \   000075   49           ORL     A,R1
   \   000076   6079         JZ      ??ZDO_ParseSimpleDescBuf_3
   2991              {
   2992                // malloc failed. we're done.
   2993                return 1;
   2994              }
   2995              for (i=0; i<num; ++i)
   \   000078   7A00         MOV     R2,#0x0
   \   00007A   801E         SJMP    ??ZDO_ParseSimpleDescBuf_4
   2996              {
   2997                desc->pAppInClusterList[i] = BUILD_UINT16( buf[0], buf[1] );
   \                     ??ZDO_ParseSimpleDescBuf_5:
   \   00007C   12....       LCALL   ?Subroutine159 & 0xFFFF
   2998                buf += 2;
   2999              }
   \                     ??CrossCallReturnLabel_559:
   \   00007F   FC           MOV     R4,A
   \   000080   E4           CLR     A
   \   000081   CC           XCH     A,R4
   \   000082   FD           MOV     R5,A
   \   000083   E5..         MOV     A,?V4
   \   000085   2C           ADD     A,R4
   \   000086   E4           CLR     A
   \   000087   3D           ADDC    A,R5
   \   000088   F5..         MOV     ?V5,A
   \   00008A   12....       LCALL   ?Subroutine102 & 0xFFFF
   \                     ??CrossCallReturnLabel_150:
   \   00008D   E5..         MOV     A,?V4
   \   00008F   F0           MOVX    @DPTR,A
   \   000090   A3           INC     DPTR
   \   000091   E5..         MOV     A,?V5
   \   000093   12....       LCALL   ?Subroutine140 & 0xFFFF
   \                     ??CrossCallReturnLabel_489:
   \   000096   5001         JNC     ??ZDO_ParseSimpleDescBuf_6
   \   000098   0F           INC     R7
   \                     ??ZDO_ParseSimpleDescBuf_6:
   \   000099   0A           INC     R2
   \                     ??ZDO_ParseSimpleDescBuf_4:
   \   00009A   EA           MOV     A,R2
   \   00009B   C3           CLR     C
   \   00009C   95..         SUBB    A,?V2
   \   00009E   40DC         JC      ??ZDO_ParseSimpleDescBuf_5
   3000            }
   3001          
   3002            // move in output cluster list (if any). allocate aligned memory.
   3003            num = desc->AppNumOutClusters = *buf++;
   \                     ??ZDO_ParseSimpleDescBuf_2:
   \   0000A0   8E82         MOV     DPL,R6
   \   0000A2   8F83         MOV     DPH,R7
   \   0000A4   E0           MOVX    A,@DPTR
   \   0000A5   F5..         MOV     ?V2,A
   \   0000A7   A3           INC     DPTR
   \   0000A8   AE82         MOV     R6,DPL
   \   0000AA   AF83         MOV     R7,DPH
   \   0000AC   85..82       MOV     DPL,?V0
   \   0000AF   85..83       MOV     DPH,?V1
   \   0000B2   A3           INC     DPTR
   \   0000B3   A3           INC     DPTR
   \   0000B4   A3           INC     DPTR
   \   0000B5   A3           INC     DPTR
   \   0000B6   A3           INC     DPTR
   \   0000B7   A3           INC     DPTR
   \   0000B8   A3           INC     DPTR
   \   0000B9   A3           INC     DPTR
   \   0000BA   A3           INC     DPTR
   \   0000BB   F0           MOVX    @DPTR,A
   3004            if (num)
   \   0000BC   6063         JZ      ??ZDO_ParseSimpleDescBuf_7
   3005            {
   3006              if (!(desc->pAppOutClusterList = (uint16 *)osal_mem_alloc(num*sizeof(uint16))))
   \   0000BE                ; Setup parameters for call to function osal_mem_alloc
   \   0000BE   12....       LCALL   ?Subroutine100 & 0xFFFF
   \                     ??CrossCallReturnLabel_147:
   \   0000C1   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   0000C4   8A..         MOV     ?V4,R2
   \   0000C6   8B..         MOV     ?V5,R3
   \   0000C8   A8..         MOV     R0,?V4
   \   0000CA   A9..         MOV     R1,?V5
   \   0000CC   85..82       MOV     DPL,?V0
   \   0000CF   85..83       MOV     DPH,?V1
   \   0000D2   A3           INC     DPTR
   \   0000D3   A3           INC     DPTR
   \   0000D4   A3           INC     DPTR
   \   0000D5   A3           INC     DPTR
   \   0000D6   A3           INC     DPTR
   \   0000D7   A3           INC     DPTR
   \   0000D8   A3           INC     DPTR
   \   0000D9   A3           INC     DPTR
   \   0000DA   A3           INC     DPTR
   \   0000DB   A3           INC     DPTR
   \   0000DC   12....       LCALL   ??Subroutine196_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_323:
   \   0000DF   E8           MOV     A,R0
   \   0000E0   49           ORL     A,R1
   \   0000E1   7012         JNZ     ??ZDO_ParseSimpleDescBuf_8
   3007              {
   3008                // malloc failed. free input cluster list memory if there is any
   3009                if ( desc->pAppInClusterList != NULL )
   \   0000E3   85..82       MOV     DPL,?V6
   \   0000E6   85..83       MOV     DPH,?V7
   \   0000E9   12....       LCALL   ??Subroutine193_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_294:
   \   0000EC   6003         JZ      ??ZDO_ParseSimpleDescBuf_3
   3010                {
   3011                  osal_mem_free(desc->pAppInClusterList);
   \   0000EE                ; Setup parameters for call to function osal_mem_free
   \   0000EE   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   3012                }
   3013                return 1;
   \                     ??ZDO_ParseSimpleDescBuf_3:
   \   0000F1   7901         MOV     R1,#0x1
   \   0000F3   802E         SJMP    ??ZDO_ParseSimpleDescBuf_9
   3014              }
   3015              for (i=0; i<num; ++i)
   \                     ??ZDO_ParseSimpleDescBuf_8:
   \   0000F5   7A00         MOV     R2,#0x0
   \   0000F7   8022         SJMP    ??ZDO_ParseSimpleDescBuf_10
   3016              {
   3017                desc->pAppOutClusterList[i] = BUILD_UINT16( buf[0], buf[1] );
   \                     ??ZDO_ParseSimpleDescBuf_11:
   \   0000F9   8E82         MOV     DPL,R6
   \   0000FB   8F83         MOV     DPH,R7
   \   0000FD   12....       LCALL   ??Subroutine184_0 & 0xFFFF
   3018                buf += 2;
   3019              }
   \                     ??CrossCallReturnLabel_269:
   \   000100   FC           MOV     R4,A
   \   000101   E4           CLR     A
   \   000102   CC           XCH     A,R4
   \   000103   FD           MOV     R5,A
   \   000104   E5..         MOV     A,?V0
   \   000106   2C           ADD     A,R4
   \   000107   E4           CLR     A
   \   000108   3D           ADDC    A,R5
   \   000109   F5..         MOV     ?V1,A
   \   00010B   12....       LCALL   ?Subroutine102 & 0xFFFF
   \                     ??CrossCallReturnLabel_151:
   \   00010E   E5..         MOV     A,?V0
   \   000110   F0           MOVX    @DPTR,A
   \   000111   A3           INC     DPTR
   \   000112   E5..         MOV     A,?V1
   \   000114   12....       LCALL   ?Subroutine140 & 0xFFFF
   \                     ??CrossCallReturnLabel_490:
   \   000117   5001         JNC     ??ZDO_ParseSimpleDescBuf_12
   \   000119   0F           INC     R7
   \                     ??ZDO_ParseSimpleDescBuf_12:
   \   00011A   0A           INC     R2
   \                     ??ZDO_ParseSimpleDescBuf_10:
   \   00011B   EA           MOV     A,R2
   \   00011C   C3           CLR     C
   \   00011D   95..         SUBB    A,?V2
   \   00011F   40D8         JC      ??ZDO_ParseSimpleDescBuf_11
   3020            }
   3021            return 0;
   \                     ??ZDO_ParseSimpleDescBuf_7:
   \   000121   7900         MOV     R1,#0x0
   \                     ??ZDO_ParseSimpleDescBuf_9:
   \   000123   02....       LJMP    ??Subroutine202_0 & 0xFFFF
   3022          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine102:
   \   000000   EA           MOV     A,R2
   \   000001   25E0         ADD     A,0xE0 /* A   */
   \   000003   FC           MOV     R4,A
   \   000004   E4           CLR     A
   \   000005   33           RLC     A
   \   000006   FD           MOV     R5,A
   \   000007   E8           MOV     A,R0
   \   000008   2C           ADD     A,R4
   \   000009   F582         MOV     DPL,A
   \   00000B   E9           MOV     A,R1
   \   00000C   3D           ADDC    A,R5
   \   00000D   F583         MOV     DPH,A
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine77:
   \   000000   FA           MOV     R2,A
   \   000001                REQUIRE ??Subroutine238_0
   \   000001                ; // Fall through to label ??Subroutine238_0
   3023          
   3024          /*********************************************************************
   3025           * @fn          ZDO_ParseDeviceAnnce
   3026           *
   3027           * @brief       Parse a Device Announce message.
   3028           *
   3029           * @param       inMsg - Incoming message
   3030           * @param       pAnnce - place to put the parsed information
   3031           *
   3032           * @return      none
   3033           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3034          void ZDO_ParseDeviceAnnce( zdoIncomingMsg_t *inMsg, ZDO_DeviceAnnce_t *pAnnce )
   \                     ZDO_ParseDeviceAnnce:
   3035          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   8C..         MOV     ?V0,R4
   \   000007   8D..         MOV     ?V1,R5
   3036            uint8 *msg;
   3037          
   3038            // Parse incoming message
   3039            msg = inMsg->asdu;
   \   000009   12....       LCALL   ?Subroutine57 & 0xFFFF
   3040            pAnnce->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   \                     ??CrossCallReturnLabel_563:
   \   00000C   12....       LCALL   ?Subroutine77 & 0xFFFF
   \                     ??CrossCallReturnLabel_585:
   \   00000F   12....       LCALL   ??Subroutine224_0 & 0xFFFF
   3041            msg += 2;
   \                     ??CrossCallReturnLabel_486:
   \   000012   5001         JNC     ??ZDO_ParseDeviceAnnce_0
   \   000014   0F           INC     R7
   3042            osal_cpyExtAddr( pAnnce->extAddr, msg );
   \                     ??ZDO_ParseDeviceAnnce_0:
   \   000015                ; Setup parameters for call to function sAddrExtCpy
   \   000015   FC           MOV     R4,A
   \   000016   EF           MOV     A,R7
   \   000017   FD           MOV     R5,A
   \   000018   E5..         MOV     A,?V0
   \   00001A   2402         ADD     A,#0x2
   \   00001C   FA           MOV     R2,A
   \   00001D   E4           CLR     A
   \   00001E   35..         ADDC    A,?V1
   \   000020   FB           MOV     R3,A
   \   000021   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   3043            msg += Z_EXTADDR_LEN;
   3044            pAnnce->capabilities = *msg;
   \   000024   8E82         MOV     DPL,R6
   \   000026   8F83         MOV     DPH,R7
   \   000028   A3           INC     DPTR
   \   000029   A3           INC     DPTR
   \   00002A   A3           INC     DPTR
   \   00002B   12....       LCALL   ?Subroutine74 & 0xFFFF
   \                     ??CrossCallReturnLabel_95:
   \   00002E   A3           INC     DPTR
   \   00002F   A3           INC     DPTR
   \   000030   A3           INC     DPTR
   \   000031   A3           INC     DPTR
   \   000032   F0           MOVX    @DPTR,A
   3045          }
   \   000033   02....       LJMP    ??Subroutine186_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine74:
   \   000000   12....       LCALL   ?Subroutine150 & 0xFFFF
   \                     ??CrossCallReturnLabel_233:
   \   000003   22           RET
   3046          
   3047          /*********************************************************************
   3048           * @fn          ZDO_ParseMgmtNwkUpdateNotify
   3049           *
   3050           * @brief       This function handles parsing of the incoming Management
   3051           *              Network Update notify.
   3052           *
   3053           * @param       inMsg - incoming message (request)
   3054           *
   3055           * @return      a pointer to parsed response structure (NULL if not allocated).
   3056           *          This structure was allocated using osal_mem_alloc, so it must be freed
   3057           *          by the calling function [osal_mem_free()].
   3058           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   F8           MOV     R0,A
   \   000001   A3           INC     DPTR
   \   000002   E0           MOVX    A,@DPTR
   \   000003   3400         ADDC    A,#0x0
   \   000005                REQUIRE ??Subroutine195_0
   \   000005                ; // Fall through to label ??Subroutine195_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3059          ZDO_MgmtNwkUpdateNotify_t *ZDO_ParseMgmtNwkUpdateNotify( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseMgmtNwkUpdateNotify:
   3060          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV     A,#-0x8
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   3061            uint8 status;
   3062            uint32 scannedChannels = 0;
   \   00000A   75..00       MOV     ?V0,#0x0
   \   00000D   75..00       MOV     ?V1,#0x0
   \   000010   75..00       MOV     ?V2,#0x0
   \   000013   75..00       MOV     ?V3,#0x0
   3063            uint16 totalTransmissions = 0;
   \   000016   7406         MOV     A,#0x6
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   E4           CLR     A
   \   00001C   F0           MOVX    @DPTR,A
   \   00001D   A3           INC     DPTR
   \   00001E   F0           MOVX    @DPTR,A
   3064            uint16 transmissionFailures = 0;
   \   00001F   F5..         MOV     ?V4,A
   \   000021   F5..         MOV     ?V5,A
   3065            uint8 listCount = 0;
   \   000023   7402         MOV     A,#0x2
   \   000025   12....       LCALL   ?XSTACK_DISP0_8
   \   000028   E4           CLR     A
   \   000029   12....       LCALL   ?Subroutine30 & 0xFFFF
   3066            uint8 *msg = inMsg->asdu;
   \                     ??CrossCallReturnLabel_29:
   \   00002C   F8           MOV     R0,A
   \   00002D   A3           INC     DPTR
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   F9           MOV     R1,A
   \   000030   85..82       MOV     DPL,?XSP + 0
   \   000033   85..83       MOV     DPH,?XSP + 1
   \   000036   12....       LCALL   ?Subroutine12 & 0xFFFF
   3067            ZDO_MgmtNwkUpdateNotify_t *pRsp;
   3068          
   3069            status = *msg++;
   \                     ??CrossCallReturnLabel_620:
   \   000039   12....       LCALL   ??Subroutine189_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_277:
   \   00003C   C0E0         PUSH    A
   \   00003E   7405         MOV     A,#0x5
   \   000040   12....       LCALL   ?XSTACK_DISP0_8
   \   000043   D0E0         POP     A
   \   000045   12....       LCALL   ??Subroutine242_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_623:
   \   000048   2401         ADD     A,#0x1
   \   00004A   12....       LCALL   ?Subroutine26 & 0xFFFF
   3070            if ( status == ZSuccess )
   \                     ??CrossCallReturnLabel_326:
   \   00004D   7405         MOV     A,#0x5
   \   00004F   12....       LCALL   ?XSTACK_DISP0_8
   \   000052   E0           MOVX    A,@DPTR
   \   000053   7052         JNZ     ??CrossCallReturnLabel_327
   3071            {
   3072              scannedChannels = osal_build_uint32( msg, 4 );
   \   000055                ; Setup parameters for call to function osal_build_uint32
   \   000055   7904         MOV     R1,#0x4
   \   000057   12....       LCALL   ?Subroutine71 & 0xFFFF
   \                     ??CrossCallReturnLabel_432:
   \   00005A   12....       LCALL   `??osal_build_uint32::?relay`; Banked call to: osal_build_uint32
   \   00005D   8A..         MOV     ?V0,R2
   \   00005F   8B..         MOV     ?V1,R3
   \   000061   8C..         MOV     ?V2,R4
   \   000063   8D..         MOV     ?V3,R5
   3073              msg += 4;
   \   000065   85..82       MOV     DPL,?XSP + 0
   \   000068   85..83       MOV     DPH,?XSP + 1
   \   00006B   E0           MOVX    A,@DPTR
   \   00006C   2404         ADD     A,#0x4
   \   00006E   12....       LCALL   ?Subroutine8 & 0xFFFF
   3074              totalTransmissions = BUILD_UINT16( msg[0], msg[1] );
   \                     ??CrossCallReturnLabel_0:
   \   000071   F9           MOV     R1,A
   \   000072   EA           MOV     A,R2
   \   000073   F8           MOV     R0,A
   \   000074   7406         MOV     A,#0x6
   \   000076   12....       LCALL   ?XSTACK_DISP0_8
   \   000079   12....       LCALL   ?Subroutine12 & 0xFFFF
   3075              msg += 2;
   \                     ??CrossCallReturnLabel_621:
   \   00007C   2402         ADD     A,#0x2
   \   00007E   12....       LCALL   ?Subroutine8 & 0xFFFF
   3076              transmissionFailures = BUILD_UINT16( msg[0], msg[1] );
   \                     ??CrossCallReturnLabel_1:
   \   000081   F8           MOV     R0,A
   \   000082   E4           CLR     A
   \   000083   C8           XCH     A,R0
   \   000084   F9           MOV     R1,A
   \   000085   EA           MOV     A,R2
   \   000086   28           ADD     A,R0
   \   000087   F5..         MOV     ?V4,A
   \   000089   E4           CLR     A
   \   00008A   39           ADDC    A,R1
   \   00008B   F5..         MOV     ?V5,A
   3077              msg += 2;
   3078              listCount = *msg++;
   \   00008D   85..82       MOV     DPL,?XSP + 0
   \   000090   85..83       MOV     DPH,?XSP + 1
   \   000093   12....       LCALL   ?Subroutine63 & 0xFFFF
   3079            }
   \                     ??CrossCallReturnLabel_80:
   \   000096   C0E0         PUSH    A
   \   000098   7402         MOV     A,#0x2
   \   00009A   12....       LCALL   ?XSTACK_DISP0_8
   \   00009D   D0E0         POP     A
   \   00009F   12....       LCALL   ??Subroutine242_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_624:
   \   0000A2   2403         ADD     A,#0x3
   \   0000A4   12....       LCALL   ?Subroutine26 & 0xFFFF
   3080          
   3081            pRsp = (ZDO_MgmtNwkUpdateNotify_t *)osal_mem_alloc( sizeof ( ZDO_MgmtNwkUpdateNotify_t ) + listCount );
   \                     ??CrossCallReturnLabel_327:
   \   0000A7   7402         MOV     A,#0x2
   \   0000A9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AC   E0           MOVX    A,@DPTR
   \   0000AD   FE           MOV     R6,A
   \   0000AE                ; Setup parameters for call to function osal_mem_alloc
   \   0000AE   240A         ADD     A,#0xa
   \   0000B0   FA           MOV     R2,A
   \   0000B1   E4           CLR     A
   \   0000B2   3400         ADDC    A,#0x0
   \   0000B4   FB           MOV     R3,A
   \   0000B5   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   0000B8   7403         MOV     A,#0x3
   \   0000BA   12....       LCALL   ?XSTACK_DISP0_8
   \   0000BD   12....       LCALL   ??Subroutine198_0 & 0xFFFF
   3082          
   3083            if ( pRsp )
   \                     ??CrossCallReturnLabel_343:
   \   0000C0   7403         MOV     A,#0x3
   \   0000C2   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C5   12....       LCALL   ??Subroutine216_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_450:
   \   0000C8   7003         JNZ     $+5
   \   0000CA   02....       LJMP    ??ZDO_ParseMgmtNwkUpdateNotify_0 & 0xFFFF
   3084            {
   3085              pRsp->status = status;
   \   0000CD   7405         MOV     A,#0x5
   \   0000CF   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D2   E0           MOVX    A,@DPTR
   \   0000D3   C0E0         PUSH    A
   \   0000D5   7403         MOV     A,#0x3
   \   0000D7   12....       LCALL   ?XSTACK_DISP0_8
   \   0000DA   12....       LCALL   ?Subroutine176 & 0xFFFF
   \                     ??CrossCallReturnLabel_596:
   \   0000DD   D0E0         POP     A
   \   0000DF   F0           MOVX    @DPTR,A
   3086              pRsp->scannedChannels = scannedChannels;
   \   0000E0   7403         MOV     A,#0x3
   \   0000E2   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E5   12....       LCALL   ?Subroutine85 & 0xFFFF
   \                     ??CrossCallReturnLabel_112:
   \   0000E8   78..         MOV     R0,#?V0
   \   0000EA   12....       LCALL   ?L_MOV_TO_X
   3087              pRsp->totalTransmissions = totalTransmissions;
   \   0000ED   7406         MOV     A,#0x6
   \   0000EF   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F2   12....       LCALL   ??Subroutine241_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_601:
   \   0000F5   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F8   12....       LCALL   ?Subroutine99 & 0xFFFF
   \                     ??CrossCallReturnLabel_139:
   \   0000FB   A3           INC     DPTR
   \   0000FC   A3           INC     DPTR
   \   0000FD   A3           INC     DPTR
   \   0000FE   A3           INC     DPTR
   \   0000FF   A3           INC     DPTR
   \   000100   12....       LCALL   ??Subroutine196_0 & 0xFFFF
   3088              pRsp->transmissionFailures = transmissionFailures;
   \                     ??CrossCallReturnLabel_324:
   \   000103   7403         MOV     A,#0x3
   \   000105   12....       LCALL   ?XSTACK_DISP0_8
   \   000108   12....       LCALL   ??Subroutine229_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_510:
   \   00010B   12....       LCALL   ?Subroutine123 & 0xFFFF
   \                     ??CrossCallReturnLabel_183:
   \   00010E   E5..         MOV     A,?V4
   \   000110   F0           MOVX    @DPTR,A
   \   000111   A3           INC     DPTR
   \   000112   E5..         MOV     A,?V5
   \   000114   F0           MOVX    @DPTR,A
   3089              pRsp->listCount = listCount;
   \   000115   7402         MOV     A,#0x2
   \   000117   12....       LCALL   ?XSTACK_DISP0_8
   \   00011A   E0           MOVX    A,@DPTR
   \   00011B   C0E0         PUSH    A
   \   00011D   7403         MOV     A,#0x3
   \   00011F   12....       LCALL   ?XSTACK_DISP0_8
   \   000122   12....       LCALL   ?Subroutine69 & 0xFFFF
   \                     ??CrossCallReturnLabel_90:
   \   000125   D0E0         POP     A
   \   000127   F0           MOVX    @DPTR,A
   3090          
   3091              // Allocate a buffer big enough to handle the list.
   3092              if ( listCount > 0 )
   \   000128   7402         MOV     A,#0x2
   \   00012A   12....       LCALL   ?XSTACK_DISP0_8
   \   00012D   E0           MOVX    A,@DPTR
   \   00012E   6026         JZ      ??ZDO_ParseMgmtNwkUpdateNotify_0
   3093                osal_memcpy( pRsp->energyValues, msg, listCount );
   \   000130                ; Setup parameters for call to function osal_memcpy
   \   000130   85..82       MOV     DPL,?XSP + 0
   \   000133   85..83       MOV     DPH,?XSP + 1
   \   000136   12....       LCALL   ?Subroutine52 & 0xFFFF
   3094            }
   \                     ??CrossCallReturnLabel_67:
   \   000139   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00013C   EE           MOV     A,R6
   \   00013D   FC           MOV     R4,A
   \   00013E   7D00         MOV     R5,#0x0
   \   000140   7406         MOV     A,#0x6
   \   000142   12....       LCALL   ?XSTACK_DISP0_8
   \   000145   E0           MOVX    A,@DPTR
   \   000146   240A         ADD     A,#0xa
   \   000148   FA           MOV     R2,A
   \   000149   A3           INC     DPTR
   \   00014A   E0           MOVX    A,@DPTR
   \   00014B   3400         ADDC    A,#0x0
   \   00014D   FB           MOV     R3,A
   \   00014E   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000151   7403         MOV     A,#0x3
   \   000153   12....       LCALL   ?DEALLOC_XSTACK8
   3095          
   3096            return ( pRsp );
   \                     ??ZDO_ParseMgmtNwkUpdateNotify_0:
   \   000156   7403         MOV     A,#0x3
   \   000158   12....       LCALL   ?XSTACK_DISP0_8
   \   00015B   12....       LCALL   ??Subroutine214_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_428:
   \   00015E   7408         MOV     A,#0x8
   \   000160   02....       LJMP    ?Subroutine5 & 0xFFFF
   3097          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   E8           MOV     A,R0
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   E9           MOV     A,R1
   \   000004                REQUIRE ??Subroutine242_0
   \   000004                ; // Fall through to label ??Subroutine242_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   F8           MOV     R0,A
   \   000001   A3           INC     DPTR
   \   000002   E0           MOVX    A,@DPTR
   \   000003   3400         ADDC    A,#0x0
   \   000005   F9           MOV     R1,A
   \   000006   85..82       MOV     DPL,?XSP + 0
   \   000009   85..83       MOV     DPH,?XSP + 1
   \   00000C   E8           MOV     A,R0
   \   00000D   F0           MOVX    @DPTR,A
   \   00000E   A3           INC     DPTR
   \   00000F   E9           MOV     A,R1
   \   000010   12....       LCALL   ?Subroutine144 & 0xFFFF
   \                     ??CrossCallReturnLabel_626:
   \   000013   12....       LCALL   ?Subroutine158 & 0xFFFF
   \                     ??CrossCallReturnLabel_284:
   \   000016   FA           MOV     R2,A
   \   000017   85..82       MOV     DPL,?XSP + 0
   \   00001A   85..83       MOV     DPH,?XSP + 1
   \   00001D   12....       LCALL   ??Subroutine240_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_592:
   \   000020   E0           MOVX    A,@DPTR
   \   000021   22           RET
   3098          
   3099          /*********************************************************************
   3100           * @fn          ZDO_ParseMgmtNwkUpdateReq
   3101           *
   3102           * @brief       This function handles parsing the incoming Management
   3103           *              Network Update request and starts the request (if needed).
   3104           *
   3105           * @param       inMsg - incoming message (request)
   3106           * @param       pReq - pointer to place to parse message to
   3107           *
   3108           * @return      none
   3109           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3110          void ZDO_ParseMgmtNwkUpdateReq( zdoIncomingMsg_t *inMsg, ZDO_MgmtNwkUpdateReq_t *pReq )
   \                     ZDO_ParseMgmtNwkUpdateReq:
   3111          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL   ?Subroutine109 & 0xFFFF
   3112            uint8 *msg = inMsg->asdu;
   \                     ??CrossCallReturnLabel_492:
   \   000008   12....       LCALL   ?Subroutine78 & 0xFFFF
   3113          
   3114            pReq->channelMask = osal_build_uint32( msg, 4 );
   \                     ??CrossCallReturnLabel_102:
   \   00000B   12....       LCALL   `??osal_build_uint32::?relay`; Banked call to: osal_build_uint32
   \   00000E   EA           MOV     A,R2
   \   00000F   F8           MOV     R0,A
   \   000010   EB           MOV     A,R3
   \   000011   F9           MOV     R1,A
   \   000012   EC           MOV     A,R4
   \   000013   FA           MOV     R2,A
   \   000014   ED           MOV     A,R5
   \   000015   FB           MOV     R3,A
   \   000016   85..82       MOV     DPL,?V0
   \   000019   85..83       MOV     DPH,?V1
   \   00001C   12....       LCALL   ?XSTORE_R0123
   3115            msg += 4;
   3116            pReq->scanDuration = *msg++;
   \   00001F   8E82         MOV     DPL,R6
   \   000021   8F83         MOV     DPH,R7
   \   000023   A3           INC     DPTR
   \   000024   A3           INC     DPTR
   \   000025   A3           INC     DPTR
   \   000026   A3           INC     DPTR
   \   000027   E0           MOVX    A,@DPTR
   \   000028   FA           MOV     R2,A
   \   000029   E5..         MOV     A,?V0
   \   00002B   2404         ADD     A,#0x4
   \   00002D   F8           MOV     R0,A
   \   00002E   E4           CLR     A
   \   00002F   35..         ADDC    A,?V1
   \   000031   F9           MOV     R1,A
   \   000032   EA           MOV     A,R2
   \   000033   8882         MOV     DPL,R0
   \   000035   8983         MOV     DPH,R1
   \   000037   F0           MOVX    @DPTR,A
   3117          
   3118            if ( pReq->scanDuration <= 0x05 )
   \   000038   C3           CLR     C
   \   000039   9406         SUBB    A,#0x6
   \   00003B   5009         JNC     ??ZDO_ParseMgmtNwkUpdateReq_0
   3119            {
   3120              // Request is to scan over channelMask
   3121              pReq->scanCount = *msg;
   \   00003D   8E82         MOV     DPL,R6
   \   00003F   8F83         MOV     DPH,R7
   \   000041   12....       LCALL   ?Subroutine174 & 0xFFFF
   3122            }
   \                     ??CrossCallReturnLabel_259:
   \   000044   8027         SJMP    ??ZDO_ParseMgmtNwkUpdateReq_1
   3123            else if ( ( pReq->scanDuration == 0xFE ) || ( pReq->scanDuration == 0xFF ) )
   \                     ??ZDO_ParseMgmtNwkUpdateReq_0:
   \   000046   74FE         MOV     A,#-0x2
   \   000048   6A           XRL     A,R2
   \   000049   6005         JZ      ??ZDO_ParseMgmtNwkUpdateReq_2
   \   00004B   74FF         MOV     A,#-0x1
   \   00004D   6A           XRL     A,R2
   \   00004E   701E         JNZ     ??ZDO_ParseMgmtNwkUpdateReq_3
   3124            {
   3125              // Request is to change Channel (0xFE) or apsChannelMask and NwkManagerAddr (0xFF)
   3126              pReq->nwkUpdateId = *msg++;
   \                     ??ZDO_ParseMgmtNwkUpdateReq_2:
   \   000050   8E82         MOV     DPL,R6
   \   000052   8F83         MOV     DPH,R7
   \   000054   12....       LCALL   ?Subroutine74 & 0xFFFF
   \                     ??CrossCallReturnLabel_96:
   \   000057   F0           MOVX    @DPTR,A
   \   000058   EE           MOV     A,R6
   \   000059   2406         ADD     A,#0x6
   \   00005B   FE           MOV     R6,A
   \   00005C   5001         JNC     ??ZDO_ParseMgmtNwkUpdateReq_4
   \   00005E   0F           INC     R7
   3127          
   3128              if ( pReq->scanDuration == 0xFF )
   \                     ??ZDO_ParseMgmtNwkUpdateReq_4:
   \   00005F   8882         MOV     DPL,R0
   \   000061   8983         MOV     DPH,R1
   \   000063   E0           MOVX    A,@DPTR
   \   000064   F4           CPL     A
   \   000065   7007         JNZ     ??ZDO_ParseMgmtNwkUpdateReq_3
   3129              {
   3130                pReq->nwkManagerAddr = BUILD_UINT16( msg[0], msg[1] );
   \   000067   12....       LCALL   ?Subroutine55 & 0xFFFF
   3131              }
   3132            }
   \                     ??CrossCallReturnLabel_71:
   \   00006A   F0           MOVX    @DPTR,A
   \   00006B   A3           INC     DPTR
   \   00006C   E9           MOV     A,R1
   \                     ??ZDO_ParseMgmtNwkUpdateReq_1:
   \   00006D   F0           MOVX    @DPTR,A
   3133          }
   \                     ??ZDO_ParseMgmtNwkUpdateReq_3:
   \   00006E   02....       LJMP    ??Subroutine186_0 & 0xFFFF

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_Init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_StartDevice::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_StartDevice

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_UpdateNwkStatus::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_UpdateNwkStatus

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_CompareClusterLists::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_CompareClusterLists

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_AnyClusterMatches::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_AnyClusterMatches

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessNodeDescReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessNodeDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessPowerDescReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessPowerDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessSimpleDescReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessSimpleDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessActiveEPReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessActiveEPReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ConvertOTAClusters::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ConvertOTAClusters

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessMatchDescReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMatchDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessBindUnbindReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessBindUnbindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_UpdateAddrManager::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_UpdateAddrManager

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessServerDiscReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessServerDiscReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_EndDeviceTimeoutCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_EndDeviceTimeoutCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessMgmtLqiReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtLqiReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessMgmtNwkDiscReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtNwkDiscReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessMgmtRtgReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtRtgReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessMgmtBindReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtBindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessMgmtDirectJoinReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtDirectJoinReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessMgmtLeaveReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtLeaveReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessMgmtPermitJoinReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtPermitJoinReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??NLME_PermitJoiningTimeout::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    NLME_PermitJoiningTimeout

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessUserDescReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessUserDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessUserDescSet::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessUserDescSet

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessDeviceAnnce::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessDeviceAnnce

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_BuildSimpleDescBuf::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_BuildSimpleDescBuf

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_MatchEndDeviceBind::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_MatchEndDeviceBind

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_RemoveMatchMemory::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_RemoveMatchMemory

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_CopyMatchInfo::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_CopyMatchInfo

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDMatchSendState::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDMatchSendState

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_EndDeviceBindMatchTimeoutCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_EndDeviceBindMatchTimeoutCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseEndDeviceBindReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseEndDeviceBindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseBindUnbindReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseBindUnbindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseAddrRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseAddrRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseNodeDescRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseNodeDescRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParsePowerDescRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParsePowerDescRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseSimpleDescRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseSimpleDescRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseEPListRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseEPListRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseServerDiscRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseServerDiscRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseMgmtLqiRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseMgmtLqiRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseMgmNwkDiscRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseMgmNwkDiscRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseMgmtRtgRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseMgmtRtgRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseMgmtBindRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseMgmtBindRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseUserDescRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseUserDescRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseSimpleDescBuf::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseSimpleDescBuf

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseDeviceAnnce::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseDeviceAnnce

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseMgmtNwkUpdateNotify::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseMgmtNwkUpdateNotify

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseMgmtNwkUpdateReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseMgmtNwkUpdateReq

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "StartDevice ERR">`:
   \   000000   53746172     DB "StartDevice ERR"
   \            74446576
   \            69636520
   \            45525200

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "MODE unknown">`:
   \   000000   4D4F4445     DB "MODE unknown"
   \            20756E6B
   \            6E6F776E
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "End Device Bind">`:
   \   000000   456E6420     DB "End Device Bind"
   \            44657669
   \            63652042
   \            696E6400

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Success Sent">`:
   \   000000   53756363     DB "Success Sent"
   \            65737320
   \            53656E74
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Timeout">`:
   \   000000   54696D65     DB "Timeout"
   \            6F757400

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Match Desc Req">`:
   \   000000   4D617463     DB "Match Desc Req"
   \            68204465
   \            73632052
   \            657100  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Rsp Sent">`:
   \   000000   52737020     DB "Rsp Sent"
   \            53656E74
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Non Matched">`:
   \   000000   4E6F6E20     DB "Non Matched"
   \            4D617463
   \            68656400
   3134          
   3135          /*********************************************************************
   3136          *********************************************************************/
   3137          
   3138          

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0      0   NLME_PermitJoiningTimeout
      1     71   ZDMatchSendState
        0     37   -> APS_SetEndDeviceBindTimeout
        0     37   -> ZDO_RemoveMatchMemory
        0     45   -> ZDP_BindUnbindReq
        0     42   -> ZDP_SendData
        0     37   -> sAddrExtCpy
      0     41   ZDO_AnyClusterMatches
      1     14   ZDO_BuildSimpleDescBuf
      0     46   ZDO_CompareClusterLists
      0     37   ZDO_ConvertOTAClusters
      0     45   ZDO_CopyMatchInfo
        0     16   -> osal_mem_alloc
        0     16   -> osal_mem_free
        0     19   -> osal_memcpy
      2      0   ZDO_EndDeviceBindMatchTimeoutCB
        2      0   -> ZDMatchSendState
      1     17   ZDO_EndDeviceTimeoutCB
        0     12   -> HalLcdWriteString
        0     17   -> ZDP_SendData
        0     12   -> osal_mem_free
      2      0   ZDO_Init
        2      0   -> APS_ReflectorInit
        2      0   -> NLME_DeviceJoiningInit
        2      0   -> sAddrExtCpy
      1     31   ZDO_MatchEndDeviceBind
        0     26   -> APS_SetEndDeviceBindTimeout
        0     26   -> ZDMatchSendState
        0     30   -> ZDO_CompareClusterLists
        0     26   -> ZDO_CopyMatchInfo
        0     26   -> ZDO_RemoveMatchMemory
        0     31   -> ZDP_SendData
        0     26   -> osal_mem_alloc
        0     29   -> osal_memcpy
        0     26   -> osal_memset
      1     14   ZDO_ParseAddrRsp
        0     14   -> osal_mem_alloc
        0     14   -> sAddrExtCpy
      1     10   ZDO_ParseBindUnbindReq
        0     10   -> sAddrExtCpy
      1     42   ZDO_ParseDeviceAnnce
        0     10   -> sAddrExtCpy
      1     19   ZDO_ParseEPListRsp
        0     16   -> osal_mem_alloc
        0     19   -> osal_memcpy
      1     16   ZDO_ParseEndDeviceBindReq
        0     16   -> ZDO_ConvertOTAClusters
        0     16   -> osal_mem_alloc
        0     16   -> sAddrExtCpy
      1     16   ZDO_ParseMgmNwkDiscRsp
        0     16   -> osal_mem_alloc
        0     16   -> sAddrExtCpy
      1     16   ZDO_ParseMgmtBindRsp
        0     16   -> osal_mem_alloc
        0     16   -> sAddrExtCpy
      1     16   ZDO_ParseMgmtLqiRsp
        0     16   -> osal_mem_alloc
        0     16   -> sAddrExtCpy
      1     25   ZDO_ParseMgmtNwkUpdateNotify
        0     22   -> osal_build_uint32
        0     22   -> osal_mem_alloc
        0     25   -> osal_memcpy
      1     10   ZDO_ParseMgmtNwkUpdateReq
        0     10   -> osal_build_uint32
      1     14   ZDO_ParseMgmtRtgRsp
        0     14   -> osal_mem_alloc
      2     12   ZDO_ParseNodeDescRsp
      1     12   ZDO_ParsePowerDescRsp
      1      9   ZDO_ParseServerDiscRsp
      1     25   ZDO_ParseSimpleDescBuf
        0     16   -> osal_mem_alloc
        0     16   -> osal_mem_free
      1      9   ZDO_ParseSimpleDescRsp
        0      9   -> ZDO_ParseSimpleDescBuf
      1     19   ZDO_ParseUserDescRsp
        0     16   -> osal_mem_alloc
        0     19   -> osal_memcpy
      0     21   ZDO_ProcessActiveEPReq
        0     14   -> NLME_GetShortAddr
        0     21   -> ZDP_EPRsp
        0     14   -> afEndPoints
        0     14   -> afNumEndPoints
      0     33   ZDO_ProcessBindUnbindReq
        0     29   -> APSME_BindRequest
        0     28   -> APSME_LookupNwkAddr
        0     29   -> APSME_UnBindRequest
        0     28   -> NLME_GetExtAddr
        0     28   -> ZDApp_NVUpdate
        0     28   -> ZDP_NwkAddrReq
        0     33   -> ZDP_SendData
        0     28   -> bindNumOfEntries
        0     28   -> sAddrExtCmp
        0     28   -> sAddrExtCpy
      2     32   ZDO_ProcessDeviceAnnce
        2     32   -> AddrMgrEntryLookupNwk
        2     32   -> AddrMgrEntryUpdate
        2     32   -> AddrMgrExtAddrSet
        2     32   -> ZDO_ParseDeviceAnnce
        2     32   -> osal_memset
        2     32   -> sAddrExtCmp
      1     34   ZDO_ProcessMatchDescReq
        0     27   -> HalLcdWriteScreen
        0     27   -> NLME_IsAddressBroadcast
        0     29   -> ZDO_AnyClusterMatches
        0     27   -> ZDO_ConvertOTAClusters
        0     34   -> ZDP_EPRsp
        0     27   -> osal_mem_alloc
        0     27   -> osal_mem_free
        0     30   -> osal_memcpy
        0     27   -> osal_msg_allocate
        0     27   -> osal_msg_send
      0     24   ZDO_ProcessMgmtBindReq
        0     19   -> APSME_GetRequest
        0     24   -> ZDP_MgmtBindRsp
        0     19   -> osal_mem_alloc
        0     19   -> osal_mem_free
      1     16   ZDO_ProcessMgmtDirectJoinReq
        0     11   -> NLME_DirectJoinRequest
        0     16   -> ZDP_SendData
      1     23   ZDO_ProcessMgmtLeaveReq
        0     18   -> AddrMgrExtAddrValid
        0     18   -> NLME_GetExtAddr
        0     18   -> NLME_LeaveReq
        0     23   -> ZDP_SendData
        0     18   -> sAddrExtCmp
      1     64   ZDO_ProcessMgmtLqiReq
        0     59   -> AddrMgrEntryLookupNwk
        0     59   -> AssocCount
        0     59   -> AssocFindDevice
        0     59   -> NLME_GetRequest
        0     64   -> ZDP_MgmtLqiRsp
        0     59   -> osal_mem_alloc
        0     59   -> osal_mem_free
        0     59   -> osal_memset
        0     59   -> sAddrExtCpy
      1     17   ZDO_ProcessMgmtNwkDiscReq
        0     17   -> NLME_NwkDiscReq2
        0     17   -> NLME_NwkDiscTerm
        0     17   -> osal_build_uint32
      1     16   ZDO_ProcessMgmtPermitJoinReq
        0     11   -> NLME_PermitJoiningRequest
        0     16   -> ZDP_SendData
      0     22   ZDO_ProcessMgmtRtgReq
        0     17   -> NLME_GetRequest
        0     22   -> ZDP_MgmtRtgRsp
        0     17   -> osal_mem_alloc
        0     17   -> osal_mem_free
      0     14   ZDO_ProcessNodeDescReq
        0     14   -> ZDP_GenericRsp
        0     12   -> ZDP_NodeDescMsg
      0     14   ZDO_ProcessPowerDescReq
        0     14   -> ZDP_GenericRsp
        0     12   -> ZDP_PowerDescMsg
      0     14   ZDO_ProcessServerDiscReq
        0     14   -> ZDP_ServerDiscRsp
      0     12   ZDO_ProcessSimpleDescReq
        0     12   -> ZDP_SimpleDescMsg
        0     12   -> afFindSimpleDesc
        0     12   -> osal_mem_free
      0     37   ZDO_ProcessUserDescReq
        0     37   -> ZDP_GenericRsp
        0     36   -> ZDP_UserDescRsp
        0     37   -> osal_nv_read
      1     40   ZDO_ProcessUserDescSet
        0     40   -> ZDP_SendData
        0     38   -> osal_memcpy
        0     39   -> osal_nv_write
      2     37   ZDO_RemoveMatchMemory
        2      0   -> osal_mem_free
      0     20   ZDO_StartDevice
        0     20   -> HalLcdWriteScreen
        0     20   -> NLME_NetworkDiscoveryRequest
        0     20   -> NLME_OrphanJoinRequest
        0     20   -> nwk_ScanJoiningOrphan
        0     20   -> osal_start_timerEx
      2     13   ZDO_UpdateAddrManager
        2     13   -> AddrMgrEntryUpdate
        2     13   -> AddrMgrExtAddrSet
      1     12   ZDO_UpdateNwkStatus
        0     12   -> NLME_GetExtAddr
        0     12   -> NLME_GetShortAddr
        0     12   -> osal_msg_allocate
        0     12   -> osal_msg_find
        0     12   -> osal_msg_send
        0     12   -> osal_set_event


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      16  ?<Constant "End Device Bind">
      13  ?<Constant "MODE unknown">
      15  ?<Constant "Match Desc Req">
      12  ?<Constant "Non Matched">
       9  ?<Constant "Rsp Sent">
      16  ?<Constant "StartDevice ERR">
      13  ?<Constant "Success Sent">
       8  ?<Constant "Timeout">
       7  ??Subroutine181_0
       7  ??Subroutine182_0
       2  ??Subroutine183_0
       6  ??Subroutine184_0
       3  ??Subroutine185_0
       5  ??Subroutine186_0
       8  ??Subroutine187_0
       1  ??Subroutine188_0
       4  ??Subroutine189_0
       5  ??Subroutine190_0
       9  ??Subroutine191_0
       2  ??Subroutine192_0
       6  ??Subroutine193_0
       7  ??Subroutine194_0
       7  ??Subroutine195_0
       1  ??Subroutine196_0
       5  ??Subroutine197_0
       1  ??Subroutine198_0
       5  ??Subroutine199_0
      11  ??Subroutine200_0
       4  ??Subroutine201_0
       5  ??Subroutine202_0
       4  ??Subroutine203_0
       5  ??Subroutine204_0
       4  ??Subroutine205_0
       2  ??Subroutine206_0
       6  ??Subroutine207_0
       6  ??Subroutine208_0
       5  ??Subroutine209_0
       5  ??Subroutine210_0
       6  ??Subroutine211_0
       5  ??Subroutine212_0
       6  ??Subroutine213_0
       4  ??Subroutine214_0
      13  ??Subroutine215_0
       6  ??Subroutine216_0
       5  ??Subroutine217_0
       8  ??Subroutine218_0
       6  ??Subroutine219_0
       7  ??Subroutine220_0
      10  ??Subroutine221_0
       6  ??Subroutine222_0
       6  ??Subroutine223_0
       7  ??Subroutine224_0
       4  ??Subroutine225_0
       6  ??Subroutine226_0
       6  ??Subroutine227_0
       3  ??Subroutine228_0
       4  ??Subroutine229_0
       5  ??Subroutine230_0
       5  ??Subroutine231_0
       5  ??Subroutine232_0
       8  ??Subroutine233_0
       6  ??Subroutine234_0
       4  ??Subroutine235_0
       6  ??Subroutine236_0
       5  ??Subroutine237_0
       9  ??Subroutine238_0
       5  ??Subroutine239_0
       5  ??Subroutine240_0
       6  ??Subroutine241_0
       4  ??Subroutine242_0
       3  ?Subroutine0
       5  ?Subroutine1
      27  ?Subroutine10
       7  ?Subroutine100
      13  ?Subroutine101
      16  ?Subroutine102
      13  ?Subroutine103
       1  ?Subroutine104
       8  ?Subroutine105
      11  ?Subroutine106
       7  ?Subroutine107
       4  ?Subroutine108
       4  ?Subroutine109
      20  ?Subroutine11
       1  ?Subroutine110
       8  ?Subroutine111
       2  ?Subroutine112
      11  ?Subroutine113
       8  ?Subroutine114
      15  ?Subroutine115
      14  ?Subroutine116
       6  ?Subroutine117
       3  ?Subroutine118
       3  ?Subroutine119
       4  ?Subroutine12
       8  ?Subroutine120
      13  ?Subroutine121
       8  ?Subroutine122
       9  ?Subroutine123
       4  ?Subroutine124
       9  ?Subroutine125
      10  ?Subroutine126
       2  ?Subroutine127
       5  ?Subroutine128
      15  ?Subroutine129
      17  ?Subroutine13
      10  ?Subroutine130
       9  ?Subroutine131
       8  ?Subroutine132
      12  ?Subroutine133
       4  ?Subroutine134
       1  ?Subroutine135
       7  ?Subroutine136
       9  ?Subroutine137
       4  ?Subroutine138
       5  ?Subroutine139
       9  ?Subroutine14
       6  ?Subroutine140
       7  ?Subroutine141
       7  ?Subroutine142
       5  ?Subroutine143
       9  ?Subroutine144
      20  ?Subroutine145
      19  ?Subroutine146
      15  ?Subroutine147
       8  ?Subroutine148
       3  ?Subroutine149
       1  ?Subroutine15
       5  ?Subroutine150
       1  ?Subroutine151
       5  ?Subroutine152
       2  ?Subroutine153
      11  ?Subroutine154
       2  ?Subroutine155
       2  ?Subroutine156
       6  ?Subroutine157
       6  ?Subroutine158
       4  ?Subroutine159
       2  ?Subroutine16
       6  ?Subroutine160
       7  ?Subroutine161
       7  ?Subroutine162
       5  ?Subroutine163
       6  ?Subroutine164
       4  ?Subroutine165
       8  ?Subroutine166
       2  ?Subroutine167
       3  ?Subroutine168
      11  ?Subroutine169
       8  ?Subroutine17
      10  ?Subroutine170
       9  ?Subroutine171
       7  ?Subroutine172
       6  ?Subroutine173
      18  ?Subroutine174
       5  ?Subroutine175
       7  ?Subroutine176
       4  ?Subroutine177
       1  ?Subroutine178
       9  ?Subroutine179
      20  ?Subroutine18
       7  ?Subroutine180
       6  ?Subroutine19
       5  ?Subroutine2
       8  ?Subroutine20
      13  ?Subroutine21
       6  ?Subroutine22
       5  ?Subroutine23
       1  ?Subroutine24
       8  ?Subroutine25
       5  ?Subroutine26
      10  ?Subroutine27
       4  ?Subroutine28
      11  ?Subroutine29
       4  ?Subroutine3
       6  ?Subroutine30
       5  ?Subroutine31
      10  ?Subroutine32
       2  ?Subroutine33
      10  ?Subroutine34
      12  ?Subroutine35
       7  ?Subroutine36
       4  ?Subroutine37
       7  ?Subroutine38
      10  ?Subroutine39
       2  ?Subroutine4
       8  ?Subroutine40
       5  ?Subroutine41
       4  ?Subroutine42
       6  ?Subroutine43
       4  ?Subroutine44
      20  ?Subroutine45
      29  ?Subroutine46
      13  ?Subroutine47
       3  ?Subroutine48
       8  ?Subroutine49
       3  ?Subroutine5
      14  ?Subroutine50
      28  ?Subroutine51
      13  ?Subroutine52
       5  ?Subroutine53
       8  ?Subroutine54
       4  ?Subroutine55
      14  ?Subroutine56
       3  ?Subroutine57
       2  ?Subroutine58
       2  ?Subroutine59
       5  ?Subroutine6
      10  ?Subroutine60
      10  ?Subroutine61
       2  ?Subroutine62
       6  ?Subroutine63
       4  ?Subroutine64
       6  ?Subroutine65
      10  ?Subroutine66
       2  ?Subroutine67
      12  ?Subroutine68
      12  ?Subroutine69
       5  ?Subroutine7
       7  ?Subroutine70
       6  ?Subroutine71
      11  ?Subroutine72
      12  ?Subroutine73
       4  ?Subroutine74
      10  ?Subroutine75
      12  ?Subroutine76
       1  ?Subroutine77
      10  ?Subroutine78
       2  ?Subroutine79
      34  ?Subroutine8
      12  ?Subroutine80
      15  ?Subroutine81
      12  ?Subroutine82
       2  ?Subroutine83
      10  ?Subroutine84
       4  ?Subroutine85
       2  ?Subroutine86
      17  ?Subroutine87
       3  ?Subroutine88
       4  ?Subroutine89
      41  ?Subroutine9
      12  ?Subroutine90
      10  ?Subroutine91
       7  ?Subroutine92
       1  ?Subroutine93
      13  ?Subroutine94
       5  ?Subroutine95
       4  ?Subroutine96
      14  ?Subroutine97
       8  ?Subroutine98
       8  ?Subroutine99
       3  NLME_PermitJoiningTimeout
       6  NLME_PermitJoiningTimeout::?relay
     665  ZDMatchSendState
       6  ZDMatchSendState::?relay
      52  ZDOBuildBuf
      83  ZDO_AnyClusterMatches
       6  ZDO_AnyClusterMatches::?relay
     220  ZDO_BuildSimpleDescBuf
       6  ZDO_BuildSimpleDescBuf::?relay
     119  ZDO_CompareClusterLists
       6  ZDO_CompareClusterLists::?relay
      63  ZDO_ConvertOTAClusters
       6  ZDO_ConvertOTAClusters::?relay
     195  ZDO_CopyMatchInfo
       6  ZDO_CopyMatchInfo::?relay
       2  ZDO_EDBind
      16  ZDO_EndDeviceBindMatchTimeoutCB
       6  ZDO_EndDeviceBindMatchTimeoutCB::?relay
     202  ZDO_EndDeviceTimeoutCB
       6  ZDO_EndDeviceTimeoutCB::?relay
      42  ZDO_Init
       6  ZDO_Init::?relay
     586  ZDO_MatchEndDeviceBind
       6  ZDO_MatchEndDeviceBind::?relay
     221  ZDO_ParseAddrRsp
       6  ZDO_ParseAddrRsp::?relay
      77  ZDO_ParseBindUnbindReq
       6  ZDO_ParseBindUnbindReq::?relay
      54  ZDO_ParseDeviceAnnce
       6  ZDO_ParseDeviceAnnce::?relay
     127  ZDO_ParseEPListRsp
       6  ZDO_ParseEPListRsp::?relay
     298  ZDO_ParseEndDeviceBindReq
       6  ZDO_ParseEndDeviceBindReq::?relay
     247  ZDO_ParseMgmNwkDiscRsp
       6  ZDO_ParseMgmNwkDiscRsp::?relay
     170  ZDO_ParseMgmtBindRsp
       6  ZDO_ParseMgmtBindRsp::?relay
     156  ZDO_ParseMgmtLqiRsp
       6  ZDO_ParseMgmtLqiRsp::?relay
     355  ZDO_ParseMgmtNwkUpdateNotify
       6  ZDO_ParseMgmtNwkUpdateNotify::?relay
     113  ZDO_ParseMgmtNwkUpdateReq
       6  ZDO_ParseMgmtNwkUpdateReq::?relay
     141  ZDO_ParseMgmtRtgRsp
       6  ZDO_ParseMgmtRtgRsp::?relay
     273  ZDO_ParseNodeDescRsp
       6  ZDO_ParseNodeDescRsp::?relay
     152  ZDO_ParsePowerDescRsp
       6  ZDO_ParsePowerDescRsp::?relay
      46  ZDO_ParseServerDiscRsp
       6  ZDO_ParseServerDiscRsp::?relay
     294  ZDO_ParseSimpleDescBuf
       6  ZDO_ParseSimpleDescBuf::?relay
      66  ZDO_ParseSimpleDescRsp
       6  ZDO_ParseSimpleDescRsp::?relay
     141  ZDO_ParseUserDescRsp
       6  ZDO_ParseUserDescRsp::?relay
     121  ZDO_ProcessActiveEPReq
       6  ZDO_ProcessActiveEPReq::?relay
     448  ZDO_ProcessBindUnbindReq
       6  ZDO_ProcessBindUnbindReq::?relay
     116  ZDO_ProcessDeviceAnnce
       6  ZDO_ProcessDeviceAnnce::?relay
    1015  ZDO_ProcessMatchDescReq
       6  ZDO_ProcessMatchDescReq::?relay
     270  ZDO_ProcessMgmtBindReq
       6  ZDO_ProcessMgmtBindReq::?relay
     100  ZDO_ProcessMgmtDirectJoinReq
       6  ZDO_ProcessMgmtDirectJoinReq::?relay
     184  ZDO_ProcessMgmtLeaveReq
       6  ZDO_ProcessMgmtLeaveReq::?relay
     725  ZDO_ProcessMgmtLqiReq
       6  ZDO_ProcessMgmtLqiReq::?relay
     126  ZDO_ProcessMgmtNwkDiscReq
       6  ZDO_ProcessMgmtNwkDiscReq::?relay
     101  ZDO_ProcessMgmtPermitJoinReq
       6  ZDO_ProcessMgmtPermitJoinReq::?relay
     247  ZDO_ProcessMgmtRtgReq
       6  ZDO_ProcessMgmtRtgReq::?relay
      71  ZDO_ProcessNodeDescReq
       6  ZDO_ProcessNodeDescReq::?relay
      71  ZDO_ProcessPowerDescReq
       6  ZDO_ProcessPowerDescReq::?relay
      80  ZDO_ProcessServerDiscReq
       6  ZDO_ProcessServerDiscReq::?relay
     133  ZDO_ProcessSimpleDescReq
       6  ZDO_ProcessSimpleDescReq::?relay
     193  ZDO_ProcessUserDescReq
       6  ZDO_ProcessUserDescReq::?relay
     286  ZDO_ProcessUserDescSet
       6  ZDO_ProcessUserDescSet::?relay
     108  ZDO_RemoveMatchMemory
       6  ZDO_RemoveMatchMemory::?relay
     200  ZDO_StartDevice
       6  ZDO_StartDevice::?relay
      48  ZDO_UpdateAddrManager
       6  ZDO_UpdateAddrManager::?relay
     120  ZDO_UpdateNwkStatus
       6  ZDO_UpdateNwkStatus::?relay
       4  apsChannelMask
       1  discRetries
       2  matchED

 
 11 689 bytes in segment BANKED_CODE
    294 bytes in segment BANK_RELAYS
    102 bytes in segment XDATA_ROM_C
     61 bytes in segment XDATA_Z
 
 11 983 bytes of CODE  memory
    102 bytes of CONST memory
     61 bytes of XDATA memory

Errors: none
Warnings: none
