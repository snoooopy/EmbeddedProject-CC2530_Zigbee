###############################################################################
#
# IAR C/C++ Compiler V9.20.1.2476 for 8051                26/May/2017  14:34:45
# Copyright 2004-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Components\mt\MT_AF.c
#    Command line       =  
#        -f
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DZDO_COORDINATOR -DRTR_NWK -DBLINK_LEDS) -f
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_POLLED=3000
#        -DNWK_INDIRECT_MSG_TIMEOUT=7 -DMAX_RREQ_ENTRIES=8
#        -DAPSC_MAX_FRAME_RETRIES=3 -DNWK_MAX_DATA_RETRIES=2
#        -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9 -DAPS_MAX_GROUPS=16
#        -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000
#        -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
#        -DREJOIN_POLL_RATE=440
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Components\mt\MT_AF.c -D ZIGBEEPRO
#        -D ZTOOL_P1 -D xMT_TASK -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D NV_RESTORE
#        -lC
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\CoordinatorEB-Pro\List\
#        -lA
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\CoordinatorEB-Pro\List\
#        --diag_suppress Pe001,Pa010 -o
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\CoordinatorEB-Pro\Obj\
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 8 -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\SOURCE\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\ZMAIN\TI2530DB\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MT\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\INCLUDE\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\TARGET\CC2530EB\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\MCU\CCSOC\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\INCLUDE\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\AF\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\NWK\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SEC\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SAPI\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SYS\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\ZDO\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\F8W\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES\SADDR\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES\SDATA\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\INCLUDE\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\HIGH_LEVEL\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\
#        -Ohz --require_prototypes
#    List file          =  
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\CoordinatorEB-Pro\List\MT_AF.lst
#    Object file        =  
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\CoordinatorEB-Pro\Obj\MT_AF.r51
#
###############################################################################

D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Components\mt\MT_AF.c
      1          /**************************************************************************************************
      2            Filename:       MT_AF.c
      3            Revised:        $Date: 2010-01-08 16:52:37 -0800 (Fri, 08 Jan 2010) $
      4            Revision:       $Revision: 21471 $
      5          
      6          
      7            Description:    MonitorTest functions for the AF layer.
      8          
      9          
     10            Copyright 2007-2010 Texas Instruments Incorporated. All rights reserved.
     11          
     12            IMPORTANT: Your use of this Software is limited to those specific rights
     13            granted under the terms of a software license agreement between the user
     14            who downloaded the software, his/her employer (which must be your employer)
     15            and Texas Instruments Incorporated (the "License").  You may not use this
     16            Software unless you agree to abide by the terms of the License. The License
     17            limits your use, and you acknowledge, that the Software may not be modified,
     18            copied or distributed unless embedded on a Texas Instruments microcontroller
     19            or used solely and exclusively in conjunction with a Texas Instruments radio
     20            frequency transceiver, which is integrated into your product.  Other than for
     21            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     22            works of, modify, distribute, perform, display or sell this Software and/or
     23            its documentation for any purpose.
     24          
     25            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     26            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     27            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     28            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     29            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     30            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     31            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     32            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     33            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     34            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     35            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     36          
     37            Should you have any questions regarding your right to use this Software,
     38            contact Texas Instruments Incorporated at www.TI.com.
     39          
     40          **************************************************************************************************/
     41          
     42          /***************************************************************************************************
     43           * INCLUDES
     44           ***************************************************************************************************/
     45          #include "ZComDef.h"
     46          #include "OSAL.h"
     47          #include "MT.h"
     48          #include "MT_AF.h"
     49          #include "MT_ZDO.h"
     50          #include "nwk.h"
     51          #include "OnBoard.h"
     52          #include "MT_UART.h"
     53          
     54          #if defined INTER_PAN
     55          #include "stub_aps.h"
     56          #endif
     57          
     58          /***************************************************************************************************
     59           * GLOBAL VARIABLES
     60           ***************************************************************************************************/
     61          
     62          #if defined ( MT_AF_CB_FUNC )
     63          uint16 _afCallbackSub;
     64          #endif
     65          
     66          /***************************************************************************************************
     67           * LOCAL FUNCTIONS
     68           ***************************************************************************************************/
     69          void MT_AfRegister(uint8 *pBuf);
     70          void MT_AfDataRequest(uint8 *pBuf);
     71          
     72          #if defined ( ZIGBEE_SOURCE_ROUTING )
     73          void MT_AfDataRequestSrcRtg(uint8 *pBuf);
     74          #endif
     75          
     76          #if defined INTER_PAN
     77          static void MT_AfInterPanCtl(uint8 *pBuf);
     78          #endif
     79          
     80          /***************************************************************************************************
     81           * @fn      MT_afCommandProcessing
     82           *
     83           * @brief   Process all the AF commands that are issued by test tool
     84           *
     85           * @param   pBuf - pointer to the received buffer
     86           *
     87           * @return  status
     88           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     89          uint8 MT_AfCommandProcessing(uint8 *pBuf)
   \                     MT_AfCommandProcessing:
     90          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
     91            uint8 status = MT_RPC_SUCCESS;
   \   000005   7E00         MOV     R6,#0x0
     92          
     93            switch (pBuf[MT_RPC_POS_CMD1])
   \   000007   8A82         MOV     DPL,R2
   \   000009   8B83         MOV     DPH,R3
   \   00000B   A3           INC     DPTR
   \   00000C   A3           INC     DPTR
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   600B         JZ      ??MT_AfCommandProcessing_0
   \   000010   14           DEC     A
   \   000011   600D         JZ      ??MT_AfCommandProcessing_1
   \   000013   14           DEC     A
   \   000014   600A         JZ      ??MT_AfCommandProcessing_1
   \   000016   14           DEC     A
   \   000017   600C         JZ      ??MT_AfCommandProcessing_2
   \   000019   800F         SJMP    ??MT_AfCommandProcessing_3
     94            {
     95              case MT_AF_REGISTER:
     96                MT_AfRegister(pBuf);
   \                     ??MT_AfCommandProcessing_0:
   \   00001B                ; Setup parameters for call to function MT_AfRegister
   \   00001B   12....       LCALL   `??MT_AfRegister::?relay`; Banked call to: MT_AfRegister
     97                break;
   \   00001E   800C         SJMP    ??MT_AfCommandProcessing_4
     98          
     99              case MT_AF_DATA_REQUEST:
    100              case MT_AF_DATA_REQUEST_EXT:
    101                MT_AfDataRequest(pBuf);
   \                     ??MT_AfCommandProcessing_1:
   \   000020                ; Setup parameters for call to function MT_AfDataRequest
   \   000020   12....       LCALL   `??MT_AfDataRequest::?relay`; Banked call to: MT_AfDataRequest
    102                break;
   \   000023   8007         SJMP    ??MT_AfCommandProcessing_4
    103                
    104          #if defined ( ZIGBEE_SOURCE_ROUTING )
    105              case MT_AF_DATA_REQUEST_SRCRTG:
    106                MT_AfDataRequestSrcRtg(pBuf);
   \                     ??MT_AfCommandProcessing_2:
   \   000025                ; Setup parameters for call to function MT_AfDataRequestSrcRtg
   \   000025   12....       LCALL   `??MT_AfDataRequestSrcRtg::?relay`; Banked call to: MT_AfDataRequestSrcRtg
    107                break;
   \   000028   8002         SJMP    ??MT_AfCommandProcessing_4
    108          #endif
    109                
    110          #if defined INTER_PAN
    111              case MT_AF_INTER_PAN_CTL:
    112                MT_AfInterPanCtl(pBuf);
    113                break; 
    114          #endif
    115                
    116              default:
    117                status = MT_RPC_ERR_COMMAND_ID;
   \                     ??MT_AfCommandProcessing_3:
   \   00002A   7E02         MOV     R6,#0x2
    118                break;
    119            }
    120          
    121            return status;
   \                     ??MT_AfCommandProcessing_4:
   \   00002C   EE           MOV     A,R6
   \   00002D   F9           MOV     R1,A
   \   00002E   7F01         MOV     R7,#0x1
   \   000030   02....       LJMP    ?BANKED_LEAVE_XDATA
    122          }
    123          
    124          /***************************************************************************************************
    125           * @fn      MT_AfRegister
    126           *
    127           * @brief   Process AF Register command
    128           *
    129           * @param   pBuf - pointer to the received buffer
    130           *
    131           * @return  none
    132           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    133          void MT_AfRegister(uint8 *pBuf)
   \                     MT_AfRegister:
    134          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V2,R2
   \   00000C   8B..         MOV     ?V3,R3
    135            uint8 cmdId;
    136            uint8 retValue = ZMemError;
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   7410         MOV     A,#0x10
   \   000016   12....       LCALL   ?Subroutine11 & 0xFFFF
    137            endPointDesc_t *epDesc;
    138          
    139            /* parse header */
    140            cmdId = pBuf[MT_RPC_POS_CMD1];
   \                     ??CrossCallReturnLabel_17:
   \   000019   F5..         MOV     ?V0,A
    141            pBuf += MT_RPC_FRAME_HDR_SZ;
    142          
    143            epDesc = (endPointDesc_t *)osal_mem_alloc(sizeof(endPointDesc_t));
   \   00001B                ; Setup parameters for call to function osal_mem_alloc
   \   00001B   7A06         MOV     R2,#0x6
   \   00001D   7B00         MOV     R3,#0x0
   \   00001F   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000022   8A..         MOV     ?V4,R2
   \   000024   8B..         MOV     ?V5,R3
   \   000026   AE..         MOV     R6,?V4
   \   000028   AF..         MOV     R7,?V5
    144            if ( epDesc )
   \   00002A   EE           MOV     A,R6
   \   00002B   4F           ORL     A,R7
   \   00002C   603F         JZ      ??MT_AfRegister_0
    145            {
    146              epDesc->task_id = &MT_TaskID;
   \   00002E   8E82         MOV     DPL,R6
   \   000030   8F83         MOV     DPH,R7
   \   000032   A3           INC     DPTR
   \   000033   74..         MOV     A,#MT_TaskID & 0xff
   \   000035   F0           MOVX    @DPTR,A
   \   000036   A3           INC     DPTR
   \   000037   74..         MOV     A,#(MT_TaskID >> 8) & 0xff
   \   000039   F0           MOVX    @DPTR,A
    147              retValue = MT_BuildEndpointDesc( pBuf, epDesc );
   \   00003A                ; Setup parameters for call to function MT_BuildEndpointDesc
   \   00003A   EE           MOV     A,R6
   \   00003B   FC           MOV     R4,A
   \   00003C   EF           MOV     A,R7
   \   00003D   FD           MOV     R5,A
   \   00003E   E5..         MOV     A,?V2
   \   000040   2403         ADD     A,#0x3
   \   000042   FA           MOV     R2,A
   \   000043   E4           CLR     A
   \   000044   35..         ADDC    A,?V3
   \   000046   FB           MOV     R3,A
   \   000047   12....       LCALL   `??MT_BuildEndpointDesc::?relay`; Banked call to: MT_BuildEndpointDesc
   \   00004A   E9           MOV     A,R1
   \   00004B   85..82       MOV     DPL,?XSP + 0
   \   00004E   85..83       MOV     DPH,?XSP + 1
   \   000051   F0           MOVX    @DPTR,A
    148              if ( retValue == ZSuccess )
   \   000052   700F         JNZ     ??MT_AfRegister_1
    149              {
    150                retValue = afRegister( epDesc );
   \   000054                ; Setup parameters for call to function afRegister
   \   000054   EE           MOV     A,R6
   \   000055   FA           MOV     R2,A
   \   000056   EF           MOV     A,R7
   \   000057   FB           MOV     R3,A
   \   000058   12....       LCALL   `??afRegister::?relay`; Banked call to: afRegister
   \   00005B   E9           MOV     A,R1
   \   00005C   85..82       MOV     DPL,?XSP + 0
   \   00005F   85..83       MOV     DPH,?XSP + 1
   \   000062   F0           MOVX    @DPTR,A
    151              }
    152          
    153              if ( retValue != ZSuccess )
   \                     ??MT_AfRegister_1:
   \   000063   E0           MOVX    A,@DPTR
   \   000064   6007         JZ      ??MT_AfRegister_0
    154              {
    155                osal_mem_free( epDesc );
   \   000066                ; Setup parameters for call to function osal_mem_free
   \   000066   EE           MOV     A,R6
   \   000067   FA           MOV     R2,A
   \   000068   EF           MOV     A,R7
   \   000069   FB           MOV     R3,A
   \   00006A   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    156              }
    157            }
    158          
    159            /* Build and send back the response */
    160            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF), cmdId, 1, &retValue);
   \                     ??MT_AfRegister_0:
   \   00006D                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00006D   AC..         MOV     R4,?XSP + 0
   \   00006F   AD..         MOV     R5,?XSP + 1
   \   000071   7B01         MOV     R3,#0x1
   \   000073   AA..         MOV     R2,?V0
   \   000075   7964         MOV     R1,#0x64
   \   000077   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    161          }
   \   00007A   7401         MOV     A,#0x1
   \   00007C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00007F   7F06         MOV     R7,#0x6
   \   000081   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   22           RET
    162          
    163          /***************************************************************************************************
    164           * @fn      MT_AfDataRequest
    165           *
    166           * @brief   Process AF Register command
    167           *
    168           * @param   pBuf - pointer to the received buffer
    169           *
    170           * @return  none
    171           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    172          void MT_AfDataRequest(uint8 *pBuf)
   \                     MT_AfDataRequest:
    173          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000   74F3         MOV     A,#-0xd
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 13
   \   000005                ; Auto size: 14
   \   000005   74F2         MOV     A,#-0xe
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    174            uint8 cmd0, cmd1, tempLen = 0;
    175            uint8 retValue = ZFailure;
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   7401         MOV     A,#0x1
   \   000016   F0           MOVX    @DPTR,A
    176            endPointDesc_t *epDesc;
    177            byte transId;
    178            afAddrType_t dstAddr;
    179            cId_t cId;
    180            byte txOpts, radius, srcEP;
    181          
    182            /* Parse header */
    183            cmd0 = pBuf[MT_RPC_POS_CMD0];
   \   000017   8E82         MOV     DPL,R6
   \   000019   8F83         MOV     DPH,R7
   \   00001B   A3           INC     DPTR
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   F5..         MOV     ?V4,A
    184            cmd1 = pBuf[MT_RPC_POS_CMD1];
   \   00001F   8E82         MOV     DPL,R6
   \   000021   8F83         MOV     DPH,R7
   \   000023   A3           INC     DPTR
   \   000024   A3           INC     DPTR
   \   000025   E0           MOVX    A,@DPTR
   \   000026   F5..         MOV     ?V3,A
    185            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000028   EE           MOV     A,R6
   \   000029   2403         ADD     A,#0x3
   \   00002B   FE           MOV     R6,A
   \   00002C   5001         JNC     ??MT_AfDataRequest_0
   \   00002E   0F           INC     R7
    186          
    187            if (cmd1 == MT_AF_DATA_REQUEST_EXT)
   \                     ??MT_AfDataRequest_0:
   \   00002F   2402         ADD     A,#0x2
   \   000031   F8           MOV     R0,A
   \   000032   E4           CLR     A
   \   000033   3F           ADDC    A,R7
   \   000034   F9           MOV     R1,A
   \   000035   E8           MOV     A,R0
   \   000036   FA           MOV     R2,A
   \   000037   E9           MOV     A,R1
   \   000038   FB           MOV     R3,A
   \   000039   8E82         MOV     DPL,R6
   \   00003B   8F83         MOV     DPH,R7
   \   00003D   A3           INC     DPTR
   \   00003E   A882         MOV     R0,DPL
   \   000040   A983         MOV     R1,DPH
   \   000042   7402         MOV     A,#0x2
   \   000044   65..         XRL     A,?V3
   \   000046   6003         JZ      $+5
   \   000048   02....       LJMP    ??MT_AfDataRequest_1 & 0xFFFF
    188            {
    189              dstAddr.addrMode = (afAddrMode_t)*pBuf++;
   \   00004B   8E82         MOV     DPL,R6
   \   00004D   8F83         MOV     DPH,R7
   \   00004F   E0           MOVX    A,@DPTR
   \   000050   FC           MOV     R4,A
   \   000051   740A         MOV     A,#0xa
   \   000053   12....       LCALL   ?XSTACK_DISP0_8
   \   000056   EC           MOV     A,R4
   \   000057   F0           MOVX    @DPTR,A
   \   000058   E8           MOV     A,R0
   \   000059   FE           MOV     R6,A
   \   00005A   E9           MOV     A,R1
   \   00005B   FF           MOV     R7,A
    190          
    191              if (dstAddr.addrMode == afAddr64Bit)
   \   00005C   7403         MOV     A,#0x3
   \   00005E   6C           XRL     A,R4
   \   00005F   701F         JNZ     ??MT_AfDataRequest_2
    192              {
    193                (void)osal_memcpy(dstAddr.addr.extAddr, pBuf, Z_EXTADDR_LEN);
   \   000061                ; Setup parameters for call to function osal_memcpy
   \   000061   8E..         MOV     ?V0,R6
   \   000063   8F..         MOV     ?V1,R7
   \   000065   75..00       MOV     ?V2,#0x0
   \   000068   78..         MOV     R0,#?V0
   \   00006A   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00006D   7C08         MOV     R4,#0x8
   \   00006F   7D00         MOV     R5,#0x0
   \   000071   7405         MOV     A,#0x5
   \   000073   12....       LCALL   ?XSTACK_DISP101_8
   \   000076   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000079   7403         MOV     A,#0x3
   \   00007B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00007E   8018         SJMP    ??MT_AfDataRequest_3
    194              }
    195              else
    196              {
    197                dstAddr.addr.shortAddr = BUILD_UINT16(pBuf[0], pBuf[1]);
   \                     ??MT_AfDataRequest_2:
   \   000080   8E82         MOV     DPL,R6
   \   000082   8F83         MOV     DPH,R7
   \   000084   E0           MOVX    A,@DPTR
   \   000085   FC           MOV     R4,A
   \   000086   8A82         MOV     DPL,R2
   \   000088   8B83         MOV     DPH,R3
   \   00008A   E0           MOVX    A,@DPTR
   \   00008B   F9           MOV     R1,A
   \   00008C   EC           MOV     A,R4
   \   00008D   F8           MOV     R0,A
   \   00008E   7402         MOV     A,#0x2
   \   000090   12....       LCALL   ?XSTACK_DISP0_8
   \   000093   E8           MOV     A,R0
   \   000094   F0           MOVX    @DPTR,A
   \   000095   A3           INC     DPTR
   \   000096   E9           MOV     A,R1
   \   000097   F0           MOVX    @DPTR,A
    198              }
    199              pBuf += Z_EXTADDR_LEN;
    200          
    201              dstAddr.endPoint = *pBuf++;
   \                     ??MT_AfDataRequest_3:
   \   000098   8E82         MOV     DPL,R6
   \   00009A   8F83         MOV     DPH,R7
   \   00009C   A3           INC     DPTR
   \   00009D   A3           INC     DPTR
   \   00009E   A3           INC     DPTR
   \   00009F   A3           INC     DPTR
   \   0000A0   A3           INC     DPTR
   \   0000A1   A3           INC     DPTR
   \   0000A2   A3           INC     DPTR
   \   0000A3   A3           INC     DPTR
   \   0000A4   E0           MOVX    A,@DPTR
   \   0000A5   C0E0         PUSH    A
   \   0000A7   740B         MOV     A,#0xb
   \   0000A9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AC   D0E0         POP     A
   \   0000AE   F0           MOVX    @DPTR,A
   \   0000AF   EE           MOV     A,R6
   \   0000B0   2409         ADD     A,#0x9
   \   0000B2   FE           MOV     R6,A
   \   0000B3   5001         JNC     ??MT_AfDataRequest_4
   \   0000B5   0F           INC     R7
    202              dstAddr.panId = BUILD_UINT16(pBuf[0], pBuf[1]);
   \                     ??MT_AfDataRequest_4:
   \   0000B6   8E82         MOV     DPL,R6
   \   0000B8   8F83         MOV     DPH,R7
   \   0000BA   E0           MOVX    A,@DPTR
   \   0000BB   FA           MOV     R2,A
   \   0000BC   A3           INC     DPTR
   \   0000BD   E0           MOVX    A,@DPTR
   \   0000BE   F9           MOV     R1,A
   \   0000BF   EA           MOV     A,R2
   \   0000C0   F8           MOV     R0,A
   \   0000C1   740C         MOV     A,#0xc
   \   0000C3   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C6   E8           MOV     A,R0
   \   0000C7   F0           MOVX    @DPTR,A
   \   0000C8   A3           INC     DPTR
   \   0000C9   E9           MOV     A,R1
   \   0000CA   F0           MOVX    @DPTR,A
    203              pBuf += 2;
   \   0000CB   EE           MOV     A,R6
   \   0000CC   2402         ADD     A,#0x2
   \   0000CE   FE           MOV     R6,A
   \   0000CF   5040         JNC     ??MT_AfDataRequest_5
   \   0000D1   0F           INC     R7
   \   0000D2   803D         SJMP    ??MT_AfDataRequest_5
    204            }
    205            else
    206            {
    207              /* Destination address */
    208              dstAddr.addrMode = afAddr16Bit;
   \                     ??MT_AfDataRequest_1:
   \   0000D4   740A         MOV     A,#0xa
   \   0000D6   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D9   7402         MOV     A,#0x2
   \   0000DB   F0           MOVX    @DPTR,A
    209              dstAddr.addr.shortAddr = BUILD_UINT16(pBuf[0], pBuf[1]);
   \   0000DC   8E82         MOV     DPL,R6
   \   0000DE   8F83         MOV     DPH,R7
   \   0000E0   E0           MOVX    A,@DPTR
   \   0000E1   FC           MOV     R4,A
   \   0000E2   8882         MOV     DPL,R0
   \   0000E4   8983         MOV     DPH,R1
   \   0000E6   E0           MOVX    A,@DPTR
   \   0000E7   F9           MOV     R1,A
   \   0000E8   EC           MOV     A,R4
   \   0000E9   F8           MOV     R0,A
   \   0000EA   7402         MOV     A,#0x2
   \   0000EC   12....       LCALL   ?XSTACK_DISP0_8
   \   0000EF   E8           MOV     A,R0
   \   0000F0   F0           MOVX    @DPTR,A
   \   0000F1   A3           INC     DPTR
   \   0000F2   E9           MOV     A,R1
   \   0000F3   12....       LCALL   ?Subroutine15 & 0xFFFF
    210              pBuf += 2;
    211          
    212              /* Destination endpoint */
    213              dstAddr.endPoint = *pBuf++;
   \                     ??CrossCallReturnLabel_44:
   \   0000F6   E0           MOVX    A,@DPTR
   \   0000F7   C0E0         PUSH    A
   \   0000F9   740B         MOV     A,#0xb
   \   0000FB   12....       LCALL   ?XSTACK_DISP0_8
   \   0000FE   D0E0         POP     A
   \   000100   F0           MOVX    @DPTR,A
   \   000101   EE           MOV     A,R6
   \   000102   2403         ADD     A,#0x3
   \   000104   FE           MOV     R6,A
   \   000105   5001         JNC     ??MT_AfDataRequest_6
   \   000107   0F           INC     R7
    214              dstAddr.panId = 0;
   \                     ??MT_AfDataRequest_6:
   \   000108   740C         MOV     A,#0xc
   \   00010A   12....       LCALL   ?XSTACK_DISP0_8
   \   00010D   E4           CLR     A
   \   00010E   F0           MOVX    @DPTR,A
   \   00010F   A3           INC     DPTR
   \   000110   F0           MOVX    @DPTR,A
    215            }
    216          
    217            /* Source endpoint */
    218            srcEP = *pBuf++;
   \                     ??MT_AfDataRequest_5:
   \   000111   8E82         MOV     DPL,R6
   \   000113   8F83         MOV     DPH,R7
   \   000115   E0           MOVX    A,@DPTR
   \   000116   F9           MOV     R1,A
   \   000117   A3           INC     DPTR
   \   000118   AE82         MOV     R6,DPL
   \   00011A   AF83         MOV     R7,DPH
    219            epDesc = afFindEndPointDesc( srcEP );
   \   00011C                ; Setup parameters for call to function afFindEndPointDesc
   \   00011C   12....       LCALL   `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
   \   00011F   8A..         MOV     ?V0,R2
   \   000121   8B..         MOV     ?V1,R3
   \   000123   AC..         MOV     R4,?V0
   \   000125   AD..         MOV     R5,?V1
    220          
    221            /* ClusterId */
    222            cId = BUILD_UINT16(pBuf[0], pBuf[1]);
   \   000127   8E82         MOV     DPL,R6
   \   000129   8F83         MOV     DPH,R7
   \   00012B   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   00012E   E4           CLR     A
   \   00012F   39           ADDC    A,R1
   \   000130   FB           MOV     R3,A
    223            pBuf +=2;
    224          
    225            /* TransId */
    226            transId = *pBuf++;
   \   000131   8E82         MOV     DPL,R6
   \   000133   8F83         MOV     DPH,R7
   \   000135   A3           INC     DPTR
   \   000136   A3           INC     DPTR
   \   000137   E0           MOVX    A,@DPTR
   \   000138   C0E0         PUSH    A
   \   00013A   7401         MOV     A,#0x1
   \   00013C   12....       LCALL   ?XSTACK_DISP0_8
   \   00013F   D0E0         POP     A
   \   000141   F0           MOVX    @DPTR,A
    227          
    228            /* TxOption */
    229            txOpts = *pBuf++;
    230          
    231            /* Radius */
    232            radius = *pBuf++;
    233          
    234            /* Length */
    235            tempLen = *pBuf++;
    236          
    237            if ( epDesc == NULL )
   \   000142   EC           MOV     A,R4
   \   000143   4D           ORL     A,R5
   \   000144   700A         JNZ     ??MT_AfDataRequest_7
    238            {
    239              retValue = afStatus_INVALID_PARAMETER;
   \   000146   85..82       MOV     DPL,?XSP + 0
   \   000149   85..83       MOV     DPH,?XSP + 1
   \   00014C   7402         MOV     A,#0x2
   \   00014E   8066         SJMP    ??MT_AfDataRequest_8
    240            }
    241            else
    242            {
    243              retValue = AF_DataRequest( &dstAddr, epDesc, cId, tempLen, pBuf, &transId, txOpts, radius );
   \                     ??MT_AfDataRequest_7:
   \   000150                ; Setup parameters for call to function AF_DataRequest
   \   000150   8E82         MOV     DPL,R6
   \   000152   8F83         MOV     DPH,R7
   \   000154   A3           INC     DPTR
   \   000155   A3           INC     DPTR
   \   000156   A3           INC     DPTR
   \   000157   A3           INC     DPTR
   \   000158   E0           MOVX    A,@DPTR
   \   000159   F5..         MOV     ?V0,A
   \   00015B   78..         MOV     R0,#?V0
   \   00015D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000160   7402         MOV     A,#0x2
   \   000162   12....       LCALL   ?XSTACK_DISP100_8
   \   000165   88..         MOV     ?V0,R0
   \   000167   89..         MOV     ?V1,R1
   \   000169   78..         MOV     R0,#?V0
   \   00016B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00016E   EE           MOV     A,R6
   \   00016F   2406         ADD     A,#0x6
   \   000171   F5..         MOV     ?V0,A
   \   000173   E4           CLR     A
   \   000174   3F           ADDC    A,R7
   \   000175   F5..         MOV     ?V1,A
   \   000177   78..         MOV     R0,#?V0
   \   000179   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00017C   8E82         MOV     DPL,R6
   \   00017E   8F83         MOV     DPH,R7
   \   000180   A3           INC     DPTR
   \   000181   A3           INC     DPTR
   \   000182   A3           INC     DPTR
   \   000183   A3           INC     DPTR
   \   000184   A3           INC     DPTR
   \   000185   E0           MOVX    A,@DPTR
   \   000186   F5..         MOV     ?V0,A
   \   000188   75..00       MOV     ?V1,#0x0
   \   00018B   78..         MOV     R0,#?V0
   \   00018D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000190   8A..         MOV     ?V0,R2
   \   000192   8B..         MOV     ?V1,R3
   \   000194   78..         MOV     R0,#?V0
   \   000196   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000199   8E82         MOV     DPL,R6
   \   00019B   8F83         MOV     DPH,R7
   \   00019D   A3           INC     DPTR
   \   00019E   A3           INC     DPTR
   \   00019F   A3           INC     DPTR
   \   0001A0   E0           MOVX    A,@DPTR
   \   0001A1   F9           MOV     R1,A
   \   0001A2   740B         MOV     A,#0xb
   \   0001A4   12....       LCALL   ?XSTACK_DISP101_8
   \   0001A7   12....       LCALL   `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
   \   0001AA   7409         MOV     A,#0x9
   \   0001AC   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001AF   E9           MOV     A,R1
   \   0001B0   85..82       MOV     DPL,?XSP + 0
   \   0001B3   85..83       MOV     DPH,?XSP + 1
   \                     ??MT_AfDataRequest_8:
   \   0001B6   F0           MOVX    @DPTR,A
    244            }
    245          
    246            if (MT_RPC_CMD_SREQ == (cmd0 & MT_RPC_CMD_TYPE_MASK))
   \   0001B7   74E0         MOV     A,#-0x20
   \   0001B9   55..         ANL     A,?V4
   \   0001BB   6420         XRL     A,#0x20
   \   0001BD   700D         JNZ     ??MT_AfDataRequest_9
    247            {
    248              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP|(uint8)MT_RPC_SYS_AF), cmd1, 1, &retValue);
   \   0001BF                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   0001BF   AC..         MOV     R4,?XSP + 0
   \   0001C1   AD..         MOV     R5,?XSP + 1
   \   0001C3   7B01         MOV     R3,#0x1
   \   0001C5   AA..         MOV     R2,?V3
   \   0001C7   7964         MOV     R1,#0x64
   \   0001C9   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    249            }
    250          }
   \                     ??MT_AfDataRequest_9:
   \   0001CC   740E         MOV     A,#0xe
   \   0001CE   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001D1   7F05         MOV     R7,#0x5
   \   0001D3   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F8           MOV     R0,A
   \   000005   E4           CLR     A
   \   000006   C8           XCH     A,R0
   \   000007   F9           MOV     R1,A
   \   000008   EA           MOV     A,R2
   \   000009   28           ADD     A,R0
   \   00000A   22           RET
    251          
    252          
    253          #if defined ( ZIGBEE_SOURCE_ROUTING )
    254          
    255          /***************************************************************************************************
    256           * @fn      MT_AfDataRequestSrcRtg
    257           *
    258           * @brief   Process AF Register command
    259           *
    260           * @param   pBuf - pointer to the received buffer
    261           *
    262           * @return  none
    263           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    264          void MT_AfDataRequestSrcRtg(uint8 *pBuf)
   \                     MT_AfDataRequestSrcRtg:
    265          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 18
   \   000005   74EE         MOV     A,#-0x12
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8B..         MOV     ?V1,R3
    266            uint8 cmdId, dataLen = 0;
    267            uint8 retValue = ZFailure;
   \   00000C   85..82       MOV     DPL,?XSP + 0
   \   00000F   85..83       MOV     DPH,?XSP + 1
   \   000012   7401         MOV     A,#0x1
   \   000014   12....       LCALL   ?Subroutine11 & 0xFFFF
    268            endPointDesc_t *epDesc;
    269            byte transId;
    270            afAddrType_t dstAddr;
    271            cId_t cId;
    272            byte txOpts, radius, srcEP, relayCnt;
    273            uint16 *pRelayList;
    274            uint8 i;
    275          
    276            /* parse header */
    277            cmdId = pBuf[MT_RPC_POS_CMD1];
   \                     ??CrossCallReturnLabel_18:
   \   000017   C0E0         PUSH    A
   \   000019   7403         MOV     A,#0x3
   \   00001B   12....       LCALL   ?XSTACK_DISP0_8
   \   00001E   D0E0         POP     A
   \   000020   F0           MOVX    @DPTR,A
    278            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000021   EA           MOV     A,R2
   \   000022   2403         ADD     A,#0x3
   \   000024   F5..         MOV     ?V0,A
   \   000026   5002         JNC     ??MT_AfDataRequestSrcRtg_0
   \   000028   05..         INC     ?V1
    279          
    280            /* Destination address */
    281            /* Initialize the panID field to zero to avoid inter-pan */
    282            osal_memset( &dstAddr, 0, sizeof(afAddrType_t) ); 
   \                     ??MT_AfDataRequestSrcRtg_0:
   \   00002A                ; Setup parameters for call to function osal_memset
   \   00002A   7C0C         MOV     R4,#0xc
   \   00002C   7D00         MOV     R5,#0x0
   \   00002E   7900         MOV     R1,#0x0
   \   000030   7406         MOV     A,#0x6
   \   000032   12....       LCALL   ?XSTACK_DISP101_8
   \   000035   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
    283            dstAddr.addrMode = afAddr16Bit;
   \   000038   740E         MOV     A,#0xe
   \   00003A   12....       LCALL   ?XSTACK_DISP0_8
   \   00003D   7402         MOV     A,#0x2
   \   00003F   12....       LCALL   ?Subroutine12 & 0xFFFF
    284            dstAddr.addr.shortAddr = BUILD_UINT16(pBuf[0], pBuf[1]);
   \                     ??CrossCallReturnLabel_19:
   \   000042   FA           MOV     R2,A
   \   000043   A3           INC     DPTR
   \   000044   E0           MOVX    A,@DPTR
   \   000045   F9           MOV     R1,A
   \   000046   EA           MOV     A,R2
   \   000047   F8           MOV     R0,A
   \   000048   7406         MOV     A,#0x6
   \   00004A   12....       LCALL   ?XSTACK_DISP0_8
   \   00004D   E8           MOV     A,R0
   \   00004E   F0           MOVX    @DPTR,A
   \   00004F   A3           INC     DPTR
   \   000050   E9           MOV     A,R1
   \   000051   12....       LCALL   ?Subroutine10 & 0xFFFF
    285            pBuf += 2;
    286          
    287            /* Destination endpoint */
    288            dstAddr.endPoint = *pBuf++;
   \                     ??CrossCallReturnLabel_15:
   \   000054   E0           MOVX    A,@DPTR
   \   000055   C0E0         PUSH    A
   \   000057   740F         MOV     A,#0xf
   \   000059   12....       LCALL   ?XSTACK_DISP0_8
   \   00005C   D0E0         POP     A
   \   00005E   12....       LCALL   ?Subroutine9 & 0xFFFF
    289          
    290            /* Source endpoint */
    291            srcEP = *pBuf++;
   \                     ??CrossCallReturnLabel_13:
   \   000061   F9           MOV     R1,A
   \   000062   E5..         MOV     A,?V0
   \   000064   2404         ADD     A,#0x4
   \   000066   F5..         MOV     ?V0,A
   \   000068   5002         JNC     ??MT_AfDataRequestSrcRtg_1
   \   00006A   05..         INC     ?V1
    292            epDesc = afFindEndPointDesc( srcEP );
   \                     ??MT_AfDataRequestSrcRtg_1:
   \   00006C                ; Setup parameters for call to function afFindEndPointDesc
   \   00006C   12....       LCALL   `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
   \   00006F   7404         MOV     A,#0x4
   \   000071   12....       LCALL   ?XSTACK_DISP0_8
   \   000074   EA           MOV     A,R2
   \   000075   F0           MOVX    @DPTR,A
   \   000076   A3           INC     DPTR
   \   000077   EB           MOV     A,R3
   \   000078   12....       LCALL   ?Subroutine19 & 0xFFFF
    293          
    294            /* ClusterId */
    295            cId = BUILD_UINT16(pBuf[0], pBuf[1]);
   \                     ??CrossCallReturnLabel_38:
   \   00007B   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   00007E   FE           MOV     R6,A
   \   00007F   E4           CLR     A
   \   000080   39           ADDC    A,R1
   \   000081   FF           MOV     R7,A
    296            pBuf +=2;
    297          
    298            /* TransId */
    299            transId = *pBuf++;
   \   000082   85..82       MOV     DPL,?V0
   \   000085   85..83       MOV     DPH,?V1
   \   000088   A3           INC     DPTR
   \   000089   A3           INC     DPTR
   \   00008A   E0           MOVX    A,@DPTR
   \   00008B   C0E0         PUSH    A
   \   00008D   7401         MOV     A,#0x1
   \   00008F   12....       LCALL   ?XSTACK_DISP0_8
   \   000092   D0E0         POP     A
   \   000094   12....       LCALL   ?Subroutine9 & 0xFFFF
    300          
    301            /* TxOption */
    302            txOpts = *pBuf++;
   \                     ??CrossCallReturnLabel_14:
   \   000097   C0E0         PUSH    A
   \   000099   7402         MOV     A,#0x2
   \   00009B   12....       LCALL   ?XSTACK_DISP0_8
   \   00009E   D0E0         POP     A
   \   0000A0   12....       LCALL   ?Subroutine10 & 0xFFFF
    303          
    304            /* Radius */
    305            radius = *pBuf++;
   \                     ??CrossCallReturnLabel_16:
   \   0000A3   A3           INC     DPTR
   \   0000A4   A3           INC     DPTR
   \   0000A5   E0           MOVX    A,@DPTR
   \   0000A6   F5..         MOV     ?V3,A
    306            
    307            /* Source route relay count */
    308            relayCnt = *pBuf++;
   \   0000A8   85..82       MOV     DPL,?V0
   \   0000AB   85..83       MOV     DPH,?V1
   \   0000AE   A3           INC     DPTR
   \   0000AF   A3           INC     DPTR
   \   0000B0   A3           INC     DPTR
   \   0000B1   A3           INC     DPTR
   \   0000B2   A3           INC     DPTR
   \   0000B3   E0           MOVX    A,@DPTR
   \   0000B4   F5..         MOV     ?V2,A
   \   0000B6   E5..         MOV     A,?V0
   \   0000B8   2406         ADD     A,#0x6
   \   0000BA   F5..         MOV     ?V0,A
   \   0000BC   5002         JNC     ??MT_AfDataRequestSrcRtg_2
   \   0000BE   05..         INC     ?V1
    309            
    310            /* Convert the source route relay list */
    311            if( (pRelayList = osal_mem_alloc( relayCnt * sizeof( uint16 ))) != NULL )
   \                     ??MT_AfDataRequestSrcRtg_2:
   \   0000C0                ; Setup parameters for call to function osal_mem_alloc
   \   0000C0   AA..         MOV     R2,?V2
   \   0000C2   EA           MOV     A,R2
   \   0000C3   2A           ADD     A,R2
   \   0000C4   FA           MOV     R2,A
   \   0000C5   E4           CLR     A
   \   0000C6   33           RLC     A
   \   0000C7   FB           MOV     R3,A
   \   0000C8   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   0000CB   8A..         MOV     ?V6,R2
   \   0000CD   8B..         MOV     ?V7,R3
   \   0000CF   EA           MOV     A,R2
   \   0000D0   45..         ORL     A,?V7
   \   0000D2   7003         JNZ     $+5
   \   0000D4   02....       LJMP    ??MT_AfDataRequestSrcRtg_3 & 0xFFFF
    312            {
    313              for( i = 0; i < relayCnt; i++ )
   \   0000D7   7A00         MOV     R2,#0x0
   \   0000D9   802E         SJMP    ??MT_AfDataRequestSrcRtg_4
    314              {
    315                pRelayList[i]  = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??MT_AfDataRequestSrcRtg_5:
   \   0000DB   8882         MOV     DPL,R0
   \   0000DD   8983         MOV     DPH,R1
   \   0000DF   E0           MOVX    A,@DPTR
   \   0000E0   F8           MOV     R0,A
   \   0000E1   E4           CLR     A
   \   0000E2   C8           XCH     A,R0
   \   0000E3   F9           MOV     R1,A
   \   0000E4   EC           MOV     A,R4
   \   0000E5   28           ADD     A,R0
   \   0000E6   E4           CLR     A
   \   0000E7   39           ADDC    A,R1
   \   0000E8   FD           MOV     R5,A
   \   0000E9   EA           MOV     A,R2
   \   0000EA   25E0         ADD     A,0xE0 /* A   */
   \   0000EC   F8           MOV     R0,A
   \   0000ED   E4           CLR     A
   \   0000EE   33           RLC     A
   \   0000EF   F9           MOV     R1,A
   \   0000F0   E5..         MOV     A,?V6
   \   0000F2   28           ADD     A,R0
   \   0000F3   F582         MOV     DPL,A
   \   0000F5   EB           MOV     A,R3
   \   0000F6   39           ADDC    A,R1
   \   0000F7   F583         MOV     DPH,A
   \   0000F9   EC           MOV     A,R4
   \   0000FA   F0           MOVX    @DPTR,A
   \   0000FB   A3           INC     DPTR
   \   0000FC   ED           MOV     A,R5
   \   0000FD   F0           MOVX    @DPTR,A
    316                pBuf += 2;
   \   0000FE   E5..         MOV     A,?V0
   \   000100   2402         ADD     A,#0x2
   \   000102   F5..         MOV     ?V0,A
   \   000104   5002         JNC     ??MT_AfDataRequestSrcRtg_6
   \   000106   05..         INC     ?V1
    317              }
   \                     ??MT_AfDataRequestSrcRtg_6:
   \   000108   0A           INC     R2
   \                     ??MT_AfDataRequestSrcRtg_4:
   \   000109   85..82       MOV     DPL,?V0
   \   00010C   85..83       MOV     DPH,?V1
   \   00010F   A3           INC     DPTR
   \   000110   A882         MOV     R0,DPL
   \   000112   A983         MOV     R1,DPH
   \   000114   85..82       MOV     DPL,?V0
   \   000117   85..83       MOV     DPH,?V1
   \   00011A   E0           MOVX    A,@DPTR
   \   00011B   FC           MOV     R4,A
   \   00011C   EA           MOV     A,R2
   \   00011D   C3           CLR     C
   \   00011E   95..         SUBB    A,?V2
   \   000120   40B9         JC      ??MT_AfDataRequestSrcRtg_5
    318            
    319              /* Data payload Length */
    320              dataLen = *pBuf++;
   \   000122   88..         MOV     ?V0,R0
   \   000124   89..         MOV     ?V1,R1
    321          
    322              if ( epDesc == NULL )
   \   000126   7404         MOV     A,#0x4
   \   000128   12....       LCALL   ?XSTACK_DISP0_8
   \   00012B   E0           MOVX    A,@DPTR
   \   00012C   F8           MOV     R0,A
   \   00012D   A3           INC     DPTR
   \   00012E   E0           MOVX    A,@DPTR
   \   00012F   F9           MOV     R1,A
   \   000130   E8           MOV     A,R0
   \   000131   49           ORL     A,R1
   \   000132   700A         JNZ     ??MT_AfDataRequestSrcRtg_7
    323              {
    324                retValue = afStatus_INVALID_PARAMETER;
   \   000134   85..82       MOV     DPL,?XSP + 0
   \   000137   85..83       MOV     DPH,?XSP + 1
   \   00013A   7402         MOV     A,#0x2
   \   00013C   805E         SJMP    ??MT_AfDataRequestSrcRtg_8
    325              }
    326              else
    327              {
    328                retValue = AF_DataRequestSrcRtg( &dstAddr, epDesc, cId, dataLen, pBuf, 
    329                                               &transId, txOpts, radius, relayCnt, pRelayList );
   \                     ??MT_AfDataRequestSrcRtg_7:
   \   00013E                ; Setup parameters for call to function AF_DataRequestSrcRtg
   \   00013E   78..         MOV     R0,#?V6
   \   000140   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000143   78..         MOV     R0,#?V2
   \   000145   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000148   E5..         MOV     A,?V3
   \   00014A   F5..         MOV     ?V2,A
   \   00014C   78..         MOV     R0,#?V2
   \   00014E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000151   7405         MOV     A,#0x5
   \   000153   12....       LCALL   ?XSTACK_DISP100_8
   \   000156   88..         MOV     ?V2,R0
   \   000158   89..         MOV     ?V3,R1
   \   00015A   78..         MOV     R0,#?V2
   \   00015C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00015F   78..         MOV     R0,#?V0
   \   000161   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000164   8C..         MOV     ?V0,R4
   \   000166   75..00       MOV     ?V1,#0x0
   \   000169   78..         MOV     R0,#?V0
   \   00016B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00016E   8E..         MOV     ?V0,R6
   \   000170   8F..         MOV     ?V1,R7
   \   000172   78..         MOV     R0,#?V0
   \   000174   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000177   740E         MOV     A,#0xe
   \   000179   12....       LCALL   ?XSTACK_DISP0_8
   \   00017C   E0           MOVX    A,@DPTR
   \   00017D   F9           MOV     R1,A
   \   00017E   7410         MOV     A,#0x10
   \   000180   12....       LCALL   ?XSTACK_DISP0_8
   \   000183   E0           MOVX    A,@DPTR
   \   000184   FC           MOV     R4,A
   \   000185   A3           INC     DPTR
   \   000186   E0           MOVX    A,@DPTR
   \   000187   FD           MOV     R5,A
   \   000188   7412         MOV     A,#0x12
   \   00018A   12....       LCALL   ?XSTACK_DISP101_8
   \   00018D   12....       LCALL   `??AF_DataRequestSrcRtg::?relay`; Banked call to: AF_DataRequestSrcRtg
   \   000190   740C         MOV     A,#0xc
   \   000192   12....       LCALL   ?DEALLOC_XSTACK8
   \   000195   E9           MOV     A,R1
   \   000196   85..82       MOV     DPL,?XSP + 0
   \   000199   85..83       MOV     DPH,?XSP + 1
   \                     ??MT_AfDataRequestSrcRtg_8:
   \   00019C   F0           MOVX    @DPTR,A
    330              }
    331              
    332              /* Free the memory allocated */
    333              osal_mem_free( pRelayList );
   \   00019D                ; Setup parameters for call to function osal_mem_free
   \   00019D   AA..         MOV     R2,?V6
   \   00019F   AB..         MOV     R3,?V7
   \   0001A1   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0001A4   8009         SJMP    ??MT_AfDataRequestSrcRtg_9
    334            }
    335            else
    336            {
    337              retValue = afStatus_MEM_FAIL;
   \                     ??MT_AfDataRequestSrcRtg_3:
   \   0001A6   85..82       MOV     DPL,?XSP + 0
   \   0001A9   85..83       MOV     DPH,?XSP + 1
   \   0001AC   7410         MOV     A,#0x10
   \   0001AE   F0           MOVX    @DPTR,A
    338            }
    339              
    340          
    341            /* Build and send back the response */
    342            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF), cmdId, 1, &retValue);
   \                     ??MT_AfDataRequestSrcRtg_9:
   \   0001AF                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   0001AF   AC..         MOV     R4,?XSP + 0
   \   0001B1   AD..         MOV     R5,?XSP + 1
   \   0001B3   7B01         MOV     R3,#0x1
   \   0001B5   7403         MOV     A,#0x3
   \   0001B7   12....       LCALL   ?XSTACK_DISP0_8
   \   0001BA   E0           MOVX    A,@DPTR
   \   0001BB   FA           MOV     R2,A
   \   0001BC   7964         MOV     R1,#0x64
   \   0001BE   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    343          }
   \   0001C1   7412         MOV     A,#0x12
   \   0001C3                REQUIRE ?Subroutine0
   \   0001C3                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F08         MOV     R7,#0x8
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   85..82       MOV     DPL,?V0
   \   000004   85..83       MOV     DPH,?V1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET
    344          #endif
    345          
    346          #if defined INTER_PAN
    347          /***************************************************************************************************
    348           * @fn      MT_AfInterPanCtl
    349           *
    350           * @brief   Process the AF Inter Pan control command.
    351           *
    352           * @param   pBuf - pointer to the received buffer
    353           *
    354           * @return  none
    355           ***************************************************************************************************/
    356          static void MT_AfInterPanCtl(uint8 *pBuf)
    357          {
    358            uint8 cmd, rtrn;
    359            uint16 panId;
    360            endPointDesc_t *pEP;
    361            
    362            cmd = pBuf[MT_RPC_POS_CMD1];
    363            pBuf += MT_RPC_FRAME_HDR_SZ;
    364          
    365            switch (*pBuf++)  // Inter-pan request parameter.
    366            {
    367            case InterPanClr:
    368              rtrn = StubAPS_SetIntraPanChannel();           // Switch channel back to the NIB channel.
    369              break;
    370          
    371            case InterPanSet:
    372              rtrn = StubAPS_SetInterPanChannel(*pBuf);      // Set channel for inter-pan communication.
    373              break;
    374          
    375            case InterPanReg:
    376              if ((pEP = afFindEndPointDesc(*pBuf)))
    377              {
    378                StubAPS_RegisterApp(pEP);
    379                rtrn = SUCCESS;
    380              }
    381              else
    382              {
    383                rtrn = FAILURE;
    384              }
    385              break;
    386          
    387            case InterPanChk:
    388              panId = BUILD_UINT16(pBuf[0], pBuf[1]);
    389              rtrn = (StubAPS_InterPan(panId, pBuf[2])) ? ZSuccess : ZFailure;
    390              break;
    391          
    392            default:
    393              rtrn = afStatus_INVALID_PARAMETER;
    394              break;
    395            }
    396          
    397            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF), cmd, 1, &rtrn);
    398          }
    399          #endif
    400          
    401          /***************************************************************************************************
    402           * @fn      MT_AfDataConfirm
    403           *
    404           * @brief   Process
    405           *
    406           * @param   pBuf - pointer to the received buffer
    407           *
    408           * @return  none
    409           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    410          void MT_AfDataConfirm(afDataConfirm_t *pMsg)
   \                     MT_AfDataConfirm:
    411          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 3
   \   000004   74FD         MOV     A,#-0x3
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
    412            uint8 retArray[3];
    413          
    414            retArray[0] = pMsg->hdr.status;
   \   000009   8A82         MOV     DPL,R2
   \   00000B   8B83         MOV     DPH,R3
   \   00000D   A3           INC     DPTR
   \   00000E   12....       LCALL   ?Subroutine5 & 0xFFFF
    415            retArray[1] = pMsg->endpoint;
   \                     ??CrossCallReturnLabel_7:
   \   000011   8A82         MOV     DPL,R2
   \   000013   8B83         MOV     DPH,R3
   \   000015   A3           INC     DPTR
   \   000016   A3           INC     DPTR
   \   000017   E0           MOVX    A,@DPTR
   \   000018   C0E0         PUSH    A
   \   00001A   7401         MOV     A,#0x1
   \   00001C   12....       LCALL   ?XSTACK_DISP0_8
   \   00001F   D0E0         POP     A
   \   000021   12....       LCALL   ?Subroutine15 & 0xFFFF
    416            retArray[2] = pMsg->transID;
   \                     ??CrossCallReturnLabel_46:
   \   000024   A3           INC     DPTR
   \   000025   A3           INC     DPTR
   \   000026   A3           INC     DPTR
   \   000027   E0           MOVX    A,@DPTR
   \   000028   C0E0         PUSH    A
   \   00002A   7402         MOV     A,#0x2
   \   00002C   12....       LCALL   ?XSTACK_DISP0_8
   \   00002F   D0E0         POP     A
   \   000031   F0           MOVX    @DPTR,A
    417          
    418            /* Build and send back the response */
    419            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_AF), MT_AF_DATA_CONFIRM, 3, retArray);
   \   000032                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000032   AC..         MOV     R4,?XSP + 0
   \   000034   AD..         MOV     R5,?XSP + 1
   \   000036   7B03         MOV     R3,#0x3
   \   000038   7A80         MOV     R2,#-0x80
   \   00003A   7944         MOV     R1,#0x44
   \   00003C   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    420          }
   \   00003F   7403         MOV     A,#0x3
   \   000041   12....       LCALL   ?DEALLOC_XSTACK8
   \   000044   D083         POP     DPH
   \   000046   D082         POP     DPL
   \   000048   02....       LJMP    ?BRET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007   F0           MOVX    @DPTR,A
   \   000008   22           RET
    421          
    422          /***************************************************************************************************
    423           * @fn          MT_AfIncomingMsg
    424           *
    425           * @brief       Process the callback subscription for AF Incoming data.
    426           *
    427           * @param       pkt - Incoming AF data.
    428           *
    429           * @return      none
    430           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    431          void MT_AfIncomingMsg(afIncomingMSGPacket_t *pMsg)
   \                     MT_AfIncomingMsg:
    432          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V4,R2
   \   00000C   8B..         MOV     ?V5,R3
    433            uint8 dataLen = pMsg->cmd.DataLength;  /* Length of the data section in the response packet */
   \   00000E   EA           MOV     A,R2
   \   00000F   241F         ADD     A,#0x1f
   \   000011   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   000014   12....       LCALL   ?Subroutine5 & 0xFFFF
    434            uint8 respLen = 17 + dataLen;          /* Length of the whole response packet */
   \                     ??CrossCallReturnLabel_8:
   \   000017   2411         ADD     A,#0x11
   \   000019   C0E0         PUSH    A
   \   00001B   7402         MOV     A,#0x2
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   D0E0         POP     A
   \   000022   F0           MOVX    @DPTR,A
    435            uint8 cmd = MT_AF_INCOMING_MSG;
   \   000023   7401         MOV     A,#0x1
   \   000025   12....       LCALL   ?XSTACK_DISP0_8
   \   000028   7481         MOV     A,#-0x7f
   \   00002A   F0           MOVX    @DPTR,A
    436            uint8 *pRsp, *tempPtr;
    437          
    438          #if defined INTER_PAN
    439            if (StubAPS_InterPan(pMsg->srcAddr.panId, pMsg->srcAddr.endPoint))
    440            {
    441              cmd = MT_AF_INCOMING_MSG_EXT;
    442            }
    443            else
    444          #endif
    445            if (pMsg->srcAddr.addrMode == afAddr64Bit)
   \   00002B   EA           MOV     A,R2
   \   00002C   240E         ADD     A,#0xe
   \   00002E   F5..         MOV     ?V0,A
   \   000030   E4           CLR     A
   \   000031   35..         ADDC    A,?V5
   \   000033   F5..         MOV     ?V1,A
   \   000035   85..82       MOV     DPL,?V0
   \   000038   F583         MOV     DPH,A
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   6403         XRL     A,#0x3
   \   00003D   7011         JNZ     ??MT_AfIncomingMsg_0
    446            {
    447              cmd = MT_AF_INCOMING_MSG_EXT;
   \   00003F   7401         MOV     A,#0x1
   \   000041   12....       LCALL   ?XSTACK_DISP0_8
   \   000044   7482         MOV     A,#-0x7e
   \   000046   F0           MOVX    @DPTR,A
    448            }
    449          
    450            if (cmd == MT_AF_INCOMING_MSG_EXT)
    451            {
    452              respLen += 9;
   \   000047   7402         MOV     A,#0x2
   \   000049   12....       LCALL   ?XSTACK_DISP0_8
   \   00004C   E0           MOVX    A,@DPTR
   \   00004D   2409         ADD     A,#0x9
   \   00004F   F0           MOVX    @DPTR,A
    453            }
    454          
    455            // Attempt to allocate memory for the response packet.
    456            if ((pRsp = osal_mem_alloc(respLen)) == NULL)
   \                     ??MT_AfIncomingMsg_0:
   \   000050                ; Setup parameters for call to function osal_mem_alloc
   \   000050   7402         MOV     A,#0x2
   \   000052   12....       LCALL   ?XSTACK_DISP0_8
   \   000055   E0           MOVX    A,@DPTR
   \   000056   FA           MOV     R2,A
   \   000057   7B00         MOV     R3,#0x0
   \   000059   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00005C   8A..         MOV     ?V6,R2
   \   00005E   8B..         MOV     ?V7,R3
   \   000060   EA           MOV     A,R2
   \   000061   45..         ORL     A,?V7
   \   000063   7003         JNZ     $+5
   \   000065   02....       LJMP    ??MT_AfIncomingMsg_1 & 0xFFFF
    457            {
    458              return;
    459            }
    460            tempPtr = pRsp;
    461          
    462            /* Fill in the data */
    463          
    464            /* Group ID */
    465            *tempPtr++ = LO_UINT16(pMsg->groupId);
   \   000068   E5..         MOV     A,?V4
   \   00006A   2402         ADD     A,#0x2
   \   00006C   F8           MOV     R0,A
   \   00006D   E4           CLR     A
   \   00006E   35..         ADDC    A,?V5
   \   000070   F9           MOV     R1,A
   \   000071   8882         MOV     DPL,R0
   \   000073   8983         MOV     DPH,R1
   \   000075   12....       LCALL   ?Subroutine3 & 0xFFFF
    466            *tempPtr++ = HI_UINT16(pMsg->groupId);
   \                     ??CrossCallReturnLabel_4:
   \   000078   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   00007B   F0           MOVX    @DPTR,A
    467          
    468            /* Cluster ID */
    469            *tempPtr++ = LO_UINT16(pMsg->clusterId);
   \   00007C   E5..         MOV     A,?V4
   \   00007E   2404         ADD     A,#0x4
   \   000080   F8           MOV     R0,A
   \   000081   E4           CLR     A
   \   000082   35..         ADDC    A,?V5
   \   000084   F9           MOV     R1,A
   \   000085   8882         MOV     DPL,R0
   \   000087   8983         MOV     DPH,R1
   \   000089   12....       LCALL   ??Subroutine21_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_48:
   \   00008C   A3           INC     DPTR
   \   00008D   F0           MOVX    @DPTR,A
    470            *tempPtr++ = HI_UINT16(pMsg->clusterId);
   \   00008E   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   000091   A3           INC     DPTR
   \   000092   A3           INC     DPTR
   \   000093   F0           MOVX    @DPTR,A
    471          
    472            if (cmd == MT_AF_INCOMING_MSG_EXT)
   \   000094   EA           MOV     A,R2
   \   000095   2406         ADD     A,#0x6
   \   000097   FA           MOV     R2,A
   \   000098   E4           CLR     A
   \   000099   35..         ADDC    A,?V7
   \   00009B   FB           MOV     R3,A
   \   00009C   E5..         MOV     A,?V4
   \   00009E   2406         ADD     A,#0x6
   \   0000A0   F8           MOV     R0,A
   \   0000A1   E4           CLR     A
   \   0000A2   35..         ADDC    A,?V5
   \   0000A4   F9           MOV     R1,A
   \   0000A5   E5..         MOV     A,?V6
   \   0000A7   2405         ADD     A,#0x5
   \   0000A9   FE           MOV     R6,A
   \   0000AA   E4           CLR     A
   \   0000AB   35..         ADDC    A,?V7
   \   0000AD   FF           MOV     R7,A
   \   0000AE   E5..         MOV     A,?V6
   \   0000B0   2404         ADD     A,#0x4
   \   0000B2   FC           MOV     R4,A
   \   0000B3   E4           CLR     A
   \   0000B4   35..         ADDC    A,?V7
   \   0000B6   FD           MOV     R5,A
   \   0000B7   7401         MOV     A,#0x1
   \   0000B9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000BC   E0           MOVX    A,@DPTR
   \   0000BD   6482         XRL     A,#0x82
   \   0000BF   706D         JNZ     ??MT_AfIncomingMsg_2
    473            {
    474              *tempPtr++ = pMsg->srcAddr.addrMode;
   \   0000C1   85..82       MOV     DPL,?V0
   \   0000C4   85..83       MOV     DPH,?V1
   \   0000C7   E0           MOVX    A,@DPTR
   \   0000C8   8C82         MOV     DPL,R4
   \   0000CA   8D83         MOV     DPH,R5
   \   0000CC   12....       LCALL   ?Subroutine12 & 0xFFFF
    475          
    476              if (pMsg->srcAddr.addrMode == afAddr64Bit)
   \                     ??CrossCallReturnLabel_20:
   \   0000CF   6403         XRL     A,#0x3
   \   0000D1   701D         JNZ     ??MT_AfIncomingMsg_3
    477              {
    478                (void)osal_memcpy(tempPtr, pMsg->srcAddr.addr.extAddr, Z_EXTADDR_LEN);
   \   0000D3                ; Setup parameters for call to function osal_memcpy
   \   0000D3   88..         MOV     ?V0,R0
   \   0000D5   89..         MOV     ?V1,R1
   \   0000D7   75..00       MOV     ?V2,#0x0
   \   0000DA   78..         MOV     R0,#?V0
   \   0000DC   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000DF   7C08         MOV     R4,#0x8
   \   0000E1   7D00         MOV     R5,#0x0
   \   0000E3   1A           DEC     R2
   \   0000E4   EF           MOV     A,R7
   \   0000E5   FB           MOV     R3,A
   \   0000E6   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000E9   7403         MOV     A,#0x3
   \   0000EB   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000EE   8010         SJMP    ??CrossCallReturnLabel_5
    479              }
    480              else
    481              {
    482                tempPtr[0] = LO_UINT16(pMsg->srcAddr.addr.shortAddr);
   \                     ??MT_AfIncomingMsg_3:
   \   0000F0   8882         MOV     DPL,R0
   \   0000F2   8983         MOV     DPH,R1
   \   0000F4   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   0000F7   F0           MOVX    @DPTR,A
    483                tempPtr[1] = HI_UINT16(pMsg->srcAddr.addr.shortAddr);
   \   0000F8   8882         MOV     DPL,R0
   \   0000FA   8983         MOV     DPH,R1
   \   0000FC   A3           INC     DPTR
   \   0000FD   12....       LCALL   ?Subroutine3 & 0xFFFF
    484              }
    485              tempPtr += Z_EXTADDR_LEN;
    486          
    487              *tempPtr++ = pMsg->srcAddr.endPoint;
   \                     ??CrossCallReturnLabel_5:
   \   000100   E5..         MOV     A,?V4
   \   000102   240F         ADD     A,#0xf
   \   000104   12....       LCALL   ?Subroutine1 & 0xFFFF
    488          #if defined INTER_PAN
    489              *tempPtr++ = LO_UINT16(pMsg->srcAddr.panId);
    490              *tempPtr++ = HI_UINT16(pMsg->srcAddr.panId);
    491          #else
    492              *tempPtr++ = 0;
   \                     ??CrossCallReturnLabel_0:
   \   000107   8E82         MOV     DPL,R6
   \   000109   8F83         MOV     DPH,R7
   \   00010B   A3           INC     DPTR
   \   00010C   A3           INC     DPTR
   \   00010D   A3           INC     DPTR
   \   00010E   A3           INC     DPTR
   \   00010F   A3           INC     DPTR
   \   000110   A3           INC     DPTR
   \   000111   A3           INC     DPTR
   \   000112   A3           INC     DPTR
   \   000113   A3           INC     DPTR
   \   000114   E4           CLR     A
   \   000115   F0           MOVX    @DPTR,A
    493              *tempPtr++ = 0;
   \   000116   8E82         MOV     DPL,R6
   \   000118   8F83         MOV     DPH,R7
   \   00011A   A3           INC     DPTR
   \   00011B   A3           INC     DPTR
   \   00011C   A3           INC     DPTR
   \   00011D   A3           INC     DPTR
   \   00011E   A3           INC     DPTR
   \   00011F   A3           INC     DPTR
   \   000120   A3           INC     DPTR
   \   000121   A3           INC     DPTR
   \   000122   A3           INC     DPTR
   \   000123   A3           INC     DPTR
   \   000124   F0           MOVX    @DPTR,A
   \   000125   EE           MOV     A,R6
   \   000126   240B         ADD     A,#0xb
   \   000128   FE           MOV     R6,A
   \   000129   5026         JNC     ??MT_AfIncomingMsg_4
   \   00012B   0F           INC     R7
   \   00012C   8023         SJMP    ??MT_AfIncomingMsg_4
    494          #endif
    495            }
    496            else
    497            {
    498              /* Source Address */
    499              *tempPtr++ = LO_UINT16(pMsg->srcAddr.addr.shortAddr);
   \                     ??MT_AfIncomingMsg_2:
   \   00012E   8882         MOV     DPL,R0
   \   000130   8983         MOV     DPH,R1
   \   000132   E0           MOVX    A,@DPTR
   \   000133   8C82         MOV     DPL,R4
   \   000135   8D83         MOV     DPH,R5
   \   000137   F0           MOVX    @DPTR,A
    500              *tempPtr++ = HI_UINT16(pMsg->srcAddr.addr.shortAddr);
   \   000138   8882         MOV     DPL,R0
   \   00013A   8983         MOV     DPH,R1
   \   00013C   A3           INC     DPTR
   \   00013D   12....       LCALL   ?Subroutine6 & 0xFFFF
    501          
    502              /* Source EP */
    503              *tempPtr++ = pMsg->srcAddr.endPoint;
    504            }
   \                     ??CrossCallReturnLabel_9:
   \   000140   240F         ADD     A,#0xf
   \   000142   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   000145   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   000148   E5..         MOV     A,?V6
   \   00014A   2407         ADD     A,#0x7
   \   00014C   FE           MOV     R6,A
   \   00014D   E4           CLR     A
   \   00014E   35..         ADDC    A,?V7
   \   000150   FF           MOV     R7,A
    505          
    506            /* Destination EP */
    507            *tempPtr++ = pMsg->endPoint;
   \                     ??MT_AfIncomingMsg_4:
   \   000151   E5..         MOV     A,?V4
   \   000153   2414         ADD     A,#0x14
   \   000155   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   000158   12....       LCALL   ?Subroutine6 & 0xFFFF
    508          
    509            /* WasBroadCast */
    510            *tempPtr++ = pMsg->wasBroadcast;
   \                     ??CrossCallReturnLabel_10:
   \   00015B   2415         ADD     A,#0x15
   \   00015D   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   000160   F0           MOVX    @DPTR,A
    511          
    512            /* LinkQuality */
    513            *tempPtr++ = pMsg->LinkQuality;
   \   000161   E5..         MOV     A,?V4
   \   000163   2416         ADD     A,#0x16
   \   000165   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   000168   A3           INC     DPTR
   \   000169   F0           MOVX    @DPTR,A
    514          
    515            /* SecurityUse */
    516            *tempPtr++ = pMsg->SecurityUse;
   \   00016A   E5..         MOV     A,?V4
   \   00016C   2419         ADD     A,#0x19
   \   00016E   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   000171   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   000174   F0           MOVX    @DPTR,A
    517          
    518            /* Timestamp */
    519            *tempPtr++ = BREAK_UINT32(pMsg->timestamp, 0);
   \   000175   E5..         MOV     A,?V4
   \   000177   241A         ADD     A,#0x1a
   \   000179   FA           MOV     R2,A
   \   00017A   E4           CLR     A
   \   00017B   35..         ADDC    A,?V5
   \   00017D   FB           MOV     R3,A
   \   00017E   8A82         MOV     DPL,R2
   \   000180   8B83         MOV     DPH,R3
   \   000182   78..         MOV     R0,#?V0
   \   000184   12....       LCALL   ?L_MOV_X
   \   000187   8E82         MOV     DPL,R6
   \   000189   8F83         MOV     DPH,R7
   \   00018B   12....       LCALL   ?Subroutine8 & 0xFFFF
    520            *tempPtr++ = BREAK_UINT32(pMsg->timestamp, 1);
   \                     ??CrossCallReturnLabel_41:
   \   00018E   12....       LCALL   ?L_MOV_X
   \   000191   E5..         MOV     A,?V1
   \   000193   8E82         MOV     DPL,R6
   \   000195   8F83         MOV     DPH,R7
   \   000197   A3           INC     DPTR
   \   000198   A3           INC     DPTR
   \   000199   A3           INC     DPTR
   \   00019A   A3           INC     DPTR
   \   00019B   A3           INC     DPTR
   \   00019C   12....       LCALL   ??Subroutine20_0 & 0xFFFF
    521            *tempPtr++ = BREAK_UINT32(pMsg->timestamp, 2);
   \                     ??CrossCallReturnLabel_43:
   \   00019F   12....       LCALL   ?L_MOV_X
   \   0001A2   7410         MOV     A,#0x10
   \   0001A4   78..         MOV     R0,#?V0
   \   0001A6   12....       LCALL   ?UL_SHR
   \   0001A9   8E82         MOV     DPL,R6
   \   0001AB   8F83         MOV     DPH,R7
   \   0001AD   A3           INC     DPTR
   \   0001AE   A3           INC     DPTR
   \   0001AF   12....       LCALL   ?Subroutine8 & 0xFFFF
    522            *tempPtr++ = BREAK_UINT32(pMsg->timestamp, 3);
   \                     ??CrossCallReturnLabel_42:
   \   0001B2   12....       LCALL   ?L_MOV_X
   \   0001B5   7418         MOV     A,#0x18
   \   0001B7   78..         MOV     R0,#?V0
   \   0001B9   12....       LCALL   ?UL_SHR
   \   0001BC   8E82         MOV     DPL,R6
   \   0001BE   8F83         MOV     DPH,R7
   \   0001C0   A3           INC     DPTR
   \   0001C1   A3           INC     DPTR
   \   0001C2   A3           INC     DPTR
   \   0001C3   A3           INC     DPTR
   \   0001C4   A3           INC     DPTR
   \   0001C5   A3           INC     DPTR
   \   0001C6   A3           INC     DPTR
   \   0001C7   E5..         MOV     A,?V0
   \   0001C9   F0           MOVX    @DPTR,A
    523          
    524            /* Transmit Sequence Number */
    525            *tempPtr++ = pMsg->cmd.TransSeqNumber;
   \   0001CA   E5..         MOV     A,?V4
   \   0001CC   241E         ADD     A,#0x1e
   \   0001CE   12....       LCALL   ?Subroutine1 & 0xFFFF
    526          
    527            /* Data Length */
    528            *tempPtr++ = dataLen;
   \                     ??CrossCallReturnLabel_1:
   \   0001D1   85..82       MOV     DPL,?XSP + 0
   \   0001D4   85..83       MOV     DPH,?XSP + 1
   \   0001D7   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   0001DA   A3           INC     DPTR
   \   0001DB   A3           INC     DPTR
   \   0001DC   A3           INC     DPTR
   \   0001DD   A3           INC     DPTR
   \   0001DE   A3           INC     DPTR
   \   0001DF   A3           INC     DPTR
   \   0001E0   F0           MOVX    @DPTR,A
    529          
    530            /* Data */
    531            if (dataLen)
   \   0001E1   85..82       MOV     DPL,?XSP + 0
   \   0001E4   85..83       MOV     DPH,?XSP + 1
   \   0001E7   E0           MOVX    A,@DPTR
   \   0001E8   602B         JZ      ??MT_AfIncomingMsg_5
    532            {
    533              osal_memcpy(tempPtr, pMsg->cmd.Data, dataLen);
   \   0001EA                ; Setup parameters for call to function osal_memcpy
   \   0001EA   E5..         MOV     A,?V4
   \   0001EC   2421         ADD     A,#0x21
   \   0001EE   12....       LCALL   ?Subroutine17 & 0xFFFF
    534            }
   \                     ??CrossCallReturnLabel_31:
   \   0001F1   E0           MOVX    A,@DPTR
   \   0001F2   F5..         MOV     ?V0,A
   \   0001F4   A3           INC     DPTR
   \   0001F5   E0           MOVX    A,@DPTR
   \   0001F6   F5..         MOV     ?V1,A
   \   0001F8   78..         MOV     R0,#?V0
   \   0001FA   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0001FD   7403         MOV     A,#0x3
   \   0001FF   12....       LCALL   ?XSTACK_DISP0_8
   \   000202   E0           MOVX    A,@DPTR
   \   000203   FC           MOV     R4,A
   \   000204   7D00         MOV     R5,#0x0
   \   000206   EE           MOV     A,R6
   \   000207   240A         ADD     A,#0xa
   \   000209   FA           MOV     R2,A
   \   00020A   E4           CLR     A
   \   00020B   3F           ADDC    A,R7
   \   00020C   FB           MOV     R3,A
   \   00020D   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000210   7403         MOV     A,#0x3
   \   000212   12....       LCALL   ?DEALLOC_XSTACK8
    535          
    536            /* Build and send back the response */
    537            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ|(uint8)MT_RPC_SYS_AF), cmd, respLen, pRsp);
   \                     ??MT_AfIncomingMsg_5:
   \   000215                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000215   AC..         MOV     R4,?V6
   \   000217   AD..         MOV     R5,?V7
   \   000219   7402         MOV     A,#0x2
   \   00021B   12....       LCALL   ?XSTACK_DISP0_8
   \   00021E   E0           MOVX    A,@DPTR
   \   00021F   FB           MOV     R3,A
   \   000220   7401         MOV     A,#0x1
   \   000222   12....       LCALL   ?XSTACK_DISP0_8
   \   000225   E0           MOVX    A,@DPTR
   \   000226   FA           MOV     R2,A
   \   000227   7944         MOV     R1,#0x44
   \   000229   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    538          
    539            /* Free memory */
    540            osal_mem_free(pRsp);
   \   00022C                ; Setup parameters for call to function osal_mem_free
   \   00022C   AA..         MOV     R2,?V6
   \   00022E   AB..         MOV     R3,?V7
   \   000230   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    541          }
   \                     ??MT_AfIncomingMsg_1:
   \   000233   7403         MOV     A,#0x3
   \   000235   02....       LJMP    ?Subroutine0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   000003   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   000006   A3           INC     DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   F582         MOV     DPL,A
   \   000002   E4           CLR     A
   \   000003   35..         ADDC    A,?V5
   \   000005   F583         MOV     DPH,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004   E5..         MOV     A,?V0
   \   000006                REQUIRE ??Subroutine20_0
   \   000006                ; // Fall through to label ??Subroutine20_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine20_0:
   \   000000   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_47:
   \   000003   78..         MOV     R0,#?V0
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   000003   F0           MOVX    @DPTR,A
   \   000004   E5..         MOV     A,?V4
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   8882         MOV     DPL,R0
   \   000002   8983         MOV     DPH,R1
   \   000004   A3           INC     DPTR
   \   000005                REQUIRE ??Subroutine21_0
   \   000005                ; // Fall through to label ??Subroutine21_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine21_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   A3           INC     DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   F0           MOVX    @DPTR,A
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   000003   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   F0           MOVX    @DPTR,A
   \   00000C   22           RET

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_AfCommandProcessing::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_AfCommandProcessing

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_AfRegister::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_AfRegister

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_AfDataRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_AfDataRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_AfDataRequestSrcRtg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_AfDataRequestSrcRtg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_AfDataConfirm::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_AfDataConfirm

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_AfIncomingMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_AfIncomingMsg
    542          
    543          /***************************************************************************************************
    544          ***************************************************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0      9   MT_AfCommandProcessing
        0      9   -> MT_AfDataRequest
        0      9   -> MT_AfDataRequestSrcRtg
        0      9   -> MT_AfRegister
      3      3   MT_AfDataConfirm
        2      3   -> MT_BuildAndSendZToolResponse
      1     45   MT_AfDataRequest
        0     36   -> AF_DataRequest
        0     27   -> MT_BuildAndSendZToolResponse
        0     27   -> afFindEndPointDesc
        0     30   -> osal_memcpy
      1     55   MT_AfDataRequestSrcRtg
        0     46   -> AF_DataRequestSrcRtg
        0     34   -> MT_BuildAndSendZToolResponse
        0     34   -> afFindEndPointDesc
        0     34   -> osal_mem_alloc
        0     34   -> osal_mem_free
        0     34   -> osal_memset
      1     22   MT_AfIncomingMsg
        0     19   -> MT_BuildAndSendZToolResponse
        0     19   -> osal_mem_alloc
        0     19   -> osal_mem_free
        0     22   -> osal_memcpy
      1     24   MT_AfRegister
        0     15   -> MT_BuildAndSendZToolResponse
        0     15   -> MT_BuildEndpointDesc
        0     15   -> afRegister
        0     15   -> osal_mem_alloc
        0     15   -> osal_mem_free


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       6  ??Subroutine20_0
       7  ??Subroutine21_0
       8  ?Subroutine0
      13  ?Subroutine1
       4  ?Subroutine10
       7  ?Subroutine11
       5  ?Subroutine12
       8  ?Subroutine13
       7  ?Subroutine14
       6  ?Subroutine15
       6  ?Subroutine16
       8  ?Subroutine17
       6  ?Subroutine18
       8  ?Subroutine19
      11  ?Subroutine2
       7  ?Subroutine3
       5  ?Subroutine4
       9  ?Subroutine5
       7  ?Subroutine6
       4  ?Subroutine7
       6  ?Subroutine8
       6  ?Subroutine9
      51  MT_AfCommandProcessing
       6  MT_AfCommandProcessing::?relay
      75  MT_AfDataConfirm
       6  MT_AfDataConfirm::?relay
     470  MT_AfDataRequest
       6  MT_AfDataRequest::?relay
     451  MT_AfDataRequestSrcRtg
       6  MT_AfDataRequestSrcRtg::?relay
     568  MT_AfIncomingMsg
       6  MT_AfIncomingMsg::?relay
     132  MT_AfRegister
       6  MT_AfRegister::?relay

 
 1 901 bytes in segment BANKED_CODE
    36 bytes in segment BANK_RELAYS
 
 1 937 bytes of CODE memory

Errors: none
Warnings: none
