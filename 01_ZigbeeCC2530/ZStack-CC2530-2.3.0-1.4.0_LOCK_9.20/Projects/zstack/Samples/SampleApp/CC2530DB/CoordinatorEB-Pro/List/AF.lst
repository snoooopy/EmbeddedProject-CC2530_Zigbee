###############################################################################
#
# IAR C/C++ Compiler V9.20.1.2476 for 8051                26/May/2017  14:34:40
# Copyright 2004-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Components\stack\af\AF.c
#    Command line       =  
#        -f
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DZDO_COORDINATOR -DRTR_NWK -DBLINK_LEDS) -f
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_POLLED=3000
#        -DNWK_INDIRECT_MSG_TIMEOUT=7 -DMAX_RREQ_ENTRIES=8
#        -DAPSC_MAX_FRAME_RETRIES=3 -DNWK_MAX_DATA_RETRIES=2
#        -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9 -DAPS_MAX_GROUPS=16
#        -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000
#        -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
#        -DREJOIN_POLL_RATE=440
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Components\stack\af\AF.c -D
#        ZIGBEEPRO -D ZTOOL_P1 -D xMT_TASK -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D
#        NV_RESTORE -lC
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\CoordinatorEB-Pro\List\
#        -lA
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\CoordinatorEB-Pro\List\
#        --diag_suppress Pe001,Pa010 -o
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\CoordinatorEB-Pro\Obj\
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 8 -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\SOURCE\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\ZMAIN\TI2530DB\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MT\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\INCLUDE\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\TARGET\CC2530EB\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\MCU\CCSOC\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\INCLUDE\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\AF\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\NWK\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SEC\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SAPI\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SYS\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\ZDO\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\F8W\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES\SADDR\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES\SDATA\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\INCLUDE\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\HIGH_LEVEL\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\
#        -Ohz --require_prototypes
#    List file          =  
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\CoordinatorEB-Pro\List\AF.lst
#    Object file        =  
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\CoordinatorEB-Pro\Obj\AF.r51
#
###############################################################################

D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Components\stack\af\AF.c
      1          /**************************************************************************************************
      2            Filename:       AF.c
      3            Revised:        $Date: 2009-10-29 00:15:32 -0700 (Thu, 29 Oct 2009) $
      4            Revision:       $Revision: 21013 $
      5          
      6            Description:    Application Framework - Device Description helper functions
      7          
      8          
      9            Copyright 2004-2009 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          
     44          #include "OSAL.h"
     45          #include "AF.h"
     46          #include "nwk_globals.h"
     47          #include "nwk_util.h"
     48          #include "aps_groups.h"
     49          #include "ZDProfile.h"
     50          #include "aps_frag.h"
     51          #include "rtg.h"
     52          
     53          #if defined ( MT_AF_CB_FUNC )
     54            #include "MT_AF.h"
     55          #endif
     56          
     57          #if defined ( INTER_PAN )
     58            #include "stub_aps.h"
     59          #endif
     60          
     61          /*********************************************************************
     62           * MACROS
     63           */
     64          
     65          /*********************************************************************
     66           * @fn      afSend
     67           *
     68           * @brief   Helper macro for V1 API to invoke V2 API.
     69           *
     70           * input parameters
     71           *
     72           * @param  *dstAddr - Full ZB destination address: Nwk Addr + End Point.
     73           * @param   srcEP - Origination (i.e. respond to or ack to) End Point.
     74           * @param   cID - A valid cluster ID as specified by the Profile.
     75           * @param   len - Number of bytes of data pointed to by next param.
     76           * @param  *buf - A pointer to the data bytes to send.
     77           * @param   options - Valid bit mask of AF Tx Options as defined in AF.h.
     78           * @param  *transID - A pointer to a byte which can be modified and which will
     79           *                    be used as the transaction sequence number of the msg.
     80           *
     81           * output parameters
     82           *
     83           * @param  *transID - Incremented by one if the return value is success.
     84           *
     85           * @return  afStatus_t - See previous definition of afStatus_... types.
     86           */
     87          #define afSend( dstAddr, srcEP, cID, len, buf, transID, options, radius ) \
     88                  AF_DataRequest( (dstAddr), afFindEndPointDesc( (srcEP) ), \
     89                                    (cID), (len), (buf), (transID), (options), (radius) )
     90          
     91          /*********************************************************************
     92           * CONSTANTS
     93           */
     94          
     95          /*********************************************************************
     96           * TYPEDEFS
     97           */
     98          
     99          /*********************************************************************
    100           * GLOBAL VARIABLES
    101           */
    102          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    103          epList_t *epList;
   \                     epList:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    104          
    105          /*********************************************************************
    106           * EXTERNAL VARIABLES
    107           */
    108          
    109          /*********************************************************************
    110           * EXTERNAL FUNCTIONS
    111           */
    112          
    113          /*********************************************************************
    114           * LOCAL VARIABLES
    115           */
    116          
    117          /*********************************************************************
    118           * LOCAL FUNCTIONS
    119           */
    120          
    121          static void afBuildMSGIncoming( aps_FrameFormat_t *aff, endPointDesc_t *epDesc,
    122                          zAddrType_t *SrcAddress, uint16 SrcPanId, NLDE_Signal_t *sig,
    123                          byte SecurityUse, uint32 timestamp );
    124          
    125          static epList_t *afFindEndPointDescList( byte EndPoint );
    126          
    127          static pDescCB afGetDescCB( endPointDesc_t *epDesc );
    128          
    129          /*********************************************************************
    130           * NETWORK LAYER CALLBACKS
    131           */
    132          
    133          /*********************************************************************
    134           * PUBLIC FUNCTIONS
    135           */
    136          
    137          /*********************************************************************
    138           * @fn      afInit
    139           *
    140           * @brief   Initialization function for the AF.
    141           *
    142           * @param   none
    143           *
    144           * @return  none
    145           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    146          void afInit( void )
   \                     afInit:
    147          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    148            // Start with no endpoint defined
    149            epList = NULL;
   \   000004   90....       MOV     DPTR,#epList
   \   000007   E4           CLR     A
   \   000008   F0           MOVX    @DPTR,A
   \   000009   A3           INC     DPTR
   \   00000A   F0           MOVX    @DPTR,A
    150          }
   \   00000B   02....       LJMP    ?Subroutine0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    151          
    152          /*********************************************************************
    153           * @fn      afRegisterExtended
    154           *
    155           * @brief   Register an Application's EndPoint description.
    156           *
    157           * @param   epDesc - pointer to the Application's endpoint descriptor.
    158           * @param   descFn - pointer to descriptor callback function
    159           *
    160           * NOTE:  The memory that epDesc is pointing to must exist after this call.
    161           *
    162           * @return  Pointer to epList_t on success, NULL otherwise.
    163           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    164          epList_t *afRegisterExtended( endPointDesc_t *epDesc, pDescCB descFn )
   \                     afRegisterExtended:
    165          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0,R2
   \   000007   8B..         MOV     ?V1,R3
   \   000009   EC           MOV     A,R4
   \   00000A   FE           MOV     R6,A
   \   00000B   ED           MOV     A,R5
   \   00000C   FF           MOV     R7,A
    166            epList_t *ep;
    167            epList_t *epSearch;
    168          
    169            ep = osal_mem_alloc( sizeof ( epList_t ) );
   \   00000D                ; Setup parameters for call to function osal_mem_alloc
   \   00000D   7A07         MOV     R2,#0x7
   \   00000F   7B00         MOV     R3,#0x0
   \   000011   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
    170            if ( ep )
   \   000014   EA           MOV     A,R2
   \   000015   4B           ORL     A,R3
   \   000016   6047         JZ      ??CrossCallReturnLabel_44
    171            {
    172              // Fill in the new list entry
    173              ep->epDesc = epDesc;
   \   000018   8A82         MOV     DPL,R2
   \   00001A   8B83         MOV     DPH,R3
   \   00001C   E5..         MOV     A,?V0
   \   00001E   F0           MOVX    @DPTR,A
   \   00001F   A3           INC     DPTR
   \   000020   E5..         MOV     A,?V1
   \   000022   F0           MOVX    @DPTR,A
    174          
    175              // Default to allow Match Descriptor.
    176              ep->flags = eEP_AllowMatch;
   \   000023   8A82         MOV     DPL,R2
   \   000025   8B83         MOV     DPH,R3
   \   000027   A3           INC     DPTR
   \   000028   A3           INC     DPTR
   \   000029   7401         MOV     A,#0x1
   \   00002B   12....       LCALL   ?Subroutine8 & 0xFFFF
    177              ep->pfnDescCB = descFn;
   \                     ??CrossCallReturnLabel_0:
   \   00002E   EE           MOV     A,R6
   \   00002F   F0           MOVX    @DPTR,A
   \   000030   A3           INC     DPTR
   \   000031   EF           MOV     A,R7
   \   000032   12....       LCALL   ?Subroutine8 & 0xFFFF
    178              ep->nextDesc = NULL;
   \                     ??CrossCallReturnLabel_1:
   \   000035   A3           INC     DPTR
   \   000036   A3           INC     DPTR
   \   000037   12....       LCALL   ?Subroutine6 & 0xFFFF
    179          
    180              // Does a list exist?
    181              if ( epList == NULL )
   \                     ??CrossCallReturnLabel_32:
   \   00003A   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   00003D   7005         JNZ     ??afRegisterExtended_0
    182                epList = ep;  // Make this the first entry
   \   00003F   90....       MOV     DPTR,#epList
   \   000042   8018         SJMP    ??afRegisterExtended_1
    183              else
    184              {
    185                // Look for the end of the list
    186                epSearch = epList;
   \                     ??afRegisterExtended_0:
   \   000044   E0           MOVX    A,@DPTR
   \   000045   F9           MOV     R1,A
    187                while( epSearch->nextDesc != NULL )
    188                  epSearch = epSearch->nextDesc;
   \                     ??afRegisterExtended_2:
   \   000046   E8           MOV     A,R0
   \   000047   2405         ADD     A,#0x5
   \   000049   5001         JNC     ??afRegisterExtended_3
   \   00004B   09           INC     R1
   \                     ??afRegisterExtended_3:
   \   00004C   FC           MOV     R4,A
   \   00004D   E9           MOV     A,R1
   \   00004E   FD           MOV     R5,A
   \   00004F   8C82         MOV     DPL,R4
   \   000051   8D83         MOV     DPH,R5
   \   000053   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   000056   70EE         JNZ     ??afRegisterExtended_2
    189          
    190                // Add new entry to end of list
    191                epSearch->nextDesc = ep;
   \   000058   8C82         MOV     DPL,R4
   \   00005A   8D83         MOV     DPH,R5
    192              }
    193            }
   \                     ??afRegisterExtended_1:
   \   00005C   12....       LCALL   ??Subroutine29_0 & 0xFFFF
    194          
    195            return ep;
   \                     ??CrossCallReturnLabel_44:
   \   00005F                REQUIRE ?Subroutine1
   \   00005F                ; // Fall through to label ?Subroutine1
    196          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F04         MOV     R7,#0x4
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   E4           CLR     A
   \   000001                REQUIRE ??Subroutine27_0
   \   000001                ; // Fall through to label ??Subroutine27_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine27_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   F0           MOVX    @DPTR,A
   \   000003   90....       MOV     DPTR,#epList
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine29_0:
   \   000000   EA           MOV     A,R2
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   EB           MOV     A,R3
   \   000004   F0           MOVX    @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   12....       LCALL   ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   000003   E8           MOV     A,R0
   \   000004   49           ORL     A,R1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   22           RET
    197          
    198          /*********************************************************************
    199           * @fn      afRegister
    200           *
    201           * @brief   Register an Application's EndPoint description.
    202           *
    203           * @param   epDesc - pointer to the Application's endpoint descriptor.
    204           *
    205           * NOTE:  The memory that epDesc is pointing to must exist after this call.
    206           *
    207           * @return  afStatus_SUCCESS - Registered
    208           *          afStatus_MEM_FAIL - not enough memory to add descriptor
    209           *          afStatus_INVALID_PARAMETER - duplicate endpoint
    210           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    211          afStatus_t afRegister( endPointDesc_t *epDesc )
   \                     afRegister:
    212          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    213            epList_t *ep;
    214            
    215            // Look for duplicate endpoint
    216            if ( afFindEndPointDescList( epDesc->endPoint ) )
   \   000009                ; Setup parameters for call to function afFindEndPointDescList
   \   000009   8E82         MOV     DPL,R6
   \   00000B   8F83         MOV     DPH,R7
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   F9           MOV     R1,A
   \   00000F   12....       LCALL   `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
   \   000012   8B..         MOV     ?V1,R3
   \   000014   EA           MOV     A,R2
   \   000015   45..         ORL     A,?V1
   \   000017   6004         JZ      ??afRegister_0
    217              return ( afStatus_INVALID_PARAMETER );
   \   000019   7902         MOV     R1,#0x2
   \   00001B   8018         SJMP    ??afRegister_1
    218            
    219            ep = afRegisterExtended( epDesc, NULL );
    220          
    221            return ((ep == NULL) ? afStatus_MEM_FAIL : afStatus_SUCCESS);
   \                     ??afRegister_0:
   \   00001D                ; Setup parameters for call to function afRegisterExtended
   \   00001D   7C00         MOV     R4,#0x0
   \   00001F   7D00         MOV     R5,#0x0
   \   000021   EE           MOV     A,R6
   \   000022   FA           MOV     R2,A
   \   000023   EF           MOV     A,R7
   \   000024   FB           MOV     R3,A
   \   000025   12....       LCALL   `??afRegisterExtended::?relay`; Banked call to: afRegisterExtended
   \   000028   8B..         MOV     ?V1,R3
   \   00002A   EA           MOV     A,R2
   \   00002B   45..         ORL     A,?V1
   \   00002D   7004         JNZ     ??afRegister_2
   \   00002F   7910         MOV     R1,#0x10
   \   000031   8002         SJMP    ??afRegister_1
   \                     ??afRegister_2:
   \   000033   7900         MOV     R1,#0x0
   \                     ??afRegister_1:
   \   000035   02....       LJMP    ?Subroutine2 & 0xFFFF
    222          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    223          
    224          
    225          /*********************************************************************
    226           * @fn          afDataConfirm
    227           *
    228           * @brief       This function will generate the Data Confirm back to
    229           *              the application.
    230           *
    231           * @param       endPoint - confirm end point
    232           * @param       transID - transaction ID from APSDE_DATA_REQUEST
    233           * @param       status - status of APSDE_DATA_REQUEST
    234           *
    235           * @return      none
    236           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    237          void afDataConfirm( uint8 endPoint, uint8 transID, ZStatus_t status )
   \                     afDataConfirm:
    238          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   \   000007   EA           MOV     A,R2
   \   000008   FF           MOV     R7,A
   \   000009   8B..         MOV     ?V0,R3
    239            endPointDesc_t *epDesc;
    240            afDataConfirm_t *msgPtr;
    241          
    242            // Find the endpoint description
    243            epDesc = afFindEndPointDesc( endPoint );
   \   00000B                ; Setup parameters for call to function afFindEndPointDesc
   \   00000B   12....       LCALL   `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
   \   00000E   8A..         MOV     ?V4,R2
   \   000010   8B..         MOV     ?V5,R3
    244            if ( epDesc == NULL )
   \   000012   EA           MOV     A,R2
   \   000013   45..         ORL     A,?V5
   \   000015   6033         JZ      ??afDataConfirm_0
    245              return;
    246          
    247            // Determine the incoming command type
    248            msgPtr = (afDataConfirm_t *)osal_msg_allocate( sizeof(afDataConfirm_t) );
   \   000017                ; Setup parameters for call to function osal_msg_allocate
   \   000017   7A04         MOV     R2,#0x4
   \   000019   7B00         MOV     R3,#0x0
   \   00001B   12....       LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
    249            if ( msgPtr )
   \   00001E   EA           MOV     A,R2
   \   00001F   4B           ORL     A,R3
   \   000020   6028         JZ      ??afDataConfirm_0
    250            {
    251              // Build the Data Confirm message
    252              msgPtr->hdr.event = AF_DATA_CONFIRM_CMD;
   \   000022   8A82         MOV     DPL,R2
   \   000024   8B83         MOV     DPH,R3
   \   000026   74FD         MOV     A,#-0x3
   \   000028   F0           MOVX    @DPTR,A
    253              msgPtr->hdr.status = status;
   \   000029   A3           INC     DPTR
   \   00002A   E5..         MOV     A,?V0
   \   00002C   F0           MOVX    @DPTR,A
    254              msgPtr->endpoint = endPoint;
   \   00002D   EE           MOV     A,R6
   \   00002E   8A82         MOV     DPL,R2
   \   000030   8B83         MOV     DPH,R3
   \   000032   A3           INC     DPTR
   \   000033   A3           INC     DPTR
   \   000034   F0           MOVX    @DPTR,A
    255              msgPtr->transID = transID;
   \   000035   EF           MOV     A,R7
   \   000036   8A82         MOV     DPL,R2
   \   000038   8B83         MOV     DPH,R3
   \   00003A   A3           INC     DPTR
   \   00003B   A3           INC     DPTR
   \   00003C   A3           INC     DPTR
   \   00003D   F0           MOVX    @DPTR,A
    256          
    257          #if defined ( MT_AF_CB_FUNC )
    258              /* If MT has subscribed for this callback, don't send as a message. */
    259              if ( AFCB_CHECK(CB_ID_AF_DATA_CNF,*(epDesc->task_id)) )
    260              {
    261                /* Send callback if it's subscribed */
    262                MT_AfDataConfirm ((void *)msgPtr);
    263                /* Release the memory. */
    264                osal_msg_deallocate( (void *)msgPtr );
    265              }
    266              else
    267          #endif
    268              {
    269                /* send message through task message */
    270                osal_msg_send( *(epDesc->task_id), (byte *)msgPtr );
   \   00003E                ; Setup parameters for call to function osal_msg_send
   \   00003E   85..82       MOV     DPL,?V4
   \   000041   85..83       MOV     DPH,?V5
   \   000044   12....       LCALL   ?Subroutine12 & 0xFFFF
    271              }
    272            }
   \                     ??CrossCallReturnLabel_36:
   \   000047   12....       LCALL   `??osal_msg_send::?relay`; Banked call to: osal_msg_send
    273          }
   \                     ??afDataConfirm_0:
   \   00004A   7F06         MOV     R7,#0x6
   \   00004C   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine28_0
   \   000001                ; // Fall through to label ??Subroutine28_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine28_0:
   \   000000   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   000003   F9           MOV     R1,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F583         MOV     DPH,A
   \   000006   8882         MOV     DPL,R0
   \   000008   22           RET
    274          
    275          /*********************************************************************
    276           * @fn          afIncomingData
    277           *
    278           * @brief       Transfer a data PDU (ASDU) from the APS sub-layer to the AF.
    279           *
    280           * @param       aff  - pointer to APS frame format
    281           * @param       SrcAddress  - Source address
    282           * @param       sig - incoming message's link quality
    283           * @param       SecurityUse - Security enable/disable
    284           *
    285           * @return      none
    286           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    287          void afIncomingData( aps_FrameFormat_t *aff, zAddrType_t *SrcAddress, uint16 SrcPanId,
   \                     afIncomingData:
    288                               NLDE_Signal_t *sig, byte SecurityUse, uint32 timestamp )
    289          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV     A,#-0xc
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   7402         MOV     A,#0x2
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   12....       LCALL   ??Subroutine29_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   000012   740A         MOV     A,#0xa
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   EC           MOV     A,R4
   \   000018   F0           MOVX    @DPTR,A
   \   000019   A3           INC     DPTR
   \   00001A   ED           MOV     A,R5
   \   00001B   F0           MOVX    @DPTR,A
   \   00001C   89..         MOV     ?V7,R1
    290            endPointDesc_t *epDesc = NULL;
    291            uint16 epProfileID = 0xFFFF;  // Invalid Profile ID
   \   00001E   7404         MOV     A,#0x4
   \   000020   12....       LCALL   ?XSTACK_DISP0_8
   \   000023   74FF         MOV     A,#-0x1
   \   000025   12....       LCALL   ??Subroutine27_0 & 0xFFFF
    292            epList_t *pList = epList;
   \                     ??CrossCallReturnLabel_34:
   \   000028   12....       LCALL   ?Subroutine5 & 0xFFFF
    293          #if !defined ( APS_NO_GROUPS )    
    294            uint8 grpEp = APS_GROUPS_EP_NOT_FOUND;
   \                     ??CrossCallReturnLabel_81:
   \   00002B   75..FE       MOV     ?V6,#-0x2
    295          #endif  
    296          
    297            if ( ((aff->FrmCtrl & APS_DELIVERYMODE_MASK) == APS_FC_DM_GROUP) )
   \   00002E   7402         MOV     A,#0x2
   \   000030   12....       LCALL   ?XSTACK_DISP0_8
   \   000033   E0           MOVX    A,@DPTR
   \   000034   2402         ADD     A,#0x2
   \   000036   F8           MOV     R0,A
   \   000037   A3           INC     DPTR
   \   000038   E0           MOVX    A,@DPTR
   \   000039   3400         ADDC    A,#0x0
   \   00003B   F9           MOV     R1,A
   \   00003C   7408         MOV     A,#0x8
   \   00003E   12....       LCALL   ?XSTACK_DISP0_8
   \   000041   12....       LCALL   ??Subroutine31_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   000044   7402         MOV     A,#0x2
   \   000046   12....       LCALL   ?XSTACK_DISP0_8
   \   000049   E0           MOVX    A,@DPTR
   \   00004A   2404         ADD     A,#0x4
   \   00004C   F8           MOV     R0,A
   \   00004D   A3           INC     DPTR
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   3400         ADDC    A,#0x0
   \   000051   F9           MOV     R1,A
   \   000052   7406         MOV     A,#0x6
   \   000054   12....       LCALL   ?XSTACK_DISP0_8
   \   000057   12....       LCALL   ??Subroutine31_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_67:
   \   00005A   7402         MOV     A,#0x2
   \   00005C   12....       LCALL   ?XSTACK_DISP0_8
   \   00005F   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   000062   702B         JNZ     ??afIncomingData_0
    298            {
    299          #if !defined ( APS_NO_GROUPS )    
    300              // Find the first endpoint for this group
    301              grpEp = aps_FindGroupForEndpoint( aff->GroupID, APS_GROUPS_FIND_FIRST );
   \   000064                ; Setup parameters for call to function aps_FindGroupForEndpoint
   \   000064   79FE         MOV     R1,#-0x2
   \   000066   7406         MOV     A,#0x6
   \   000068   12....       LCALL   ?XSTACK_DISP0_8
   \   00006B   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_90:
   \   00006E   12....       LCALL   `??aps_FindGroupForEndpoint::?relay`; Banked call to: aps_FindGroupForEndpoint
   \   000071   E9           MOV     A,R1
   \   000072   F5..         MOV     ?V6,A
    302              if ( grpEp == APS_GROUPS_EP_NOT_FOUND )
   \   000074   74FE         MOV     A,#-0x2
   \   000076   65..         XRL     A,?V6
   \   000078   7003         JNZ     $+5
   \   00007A   02....       LJMP    ??afIncomingData_1 & 0xFFFF
    303                return;   // No endpoint found
    304          
    305              epDesc = afFindEndPointDesc( grpEp );
   \   00007D                ; Setup parameters for call to function afFindEndPointDesc
   \   00007D   12....       LCALL   `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
   \   000080   8A..         MOV     ?V0,R2
   \   000082   8B..         MOV     ?V1,R3
   \   000084   AE..         MOV     R6,?V0
   \   000086   AF..         MOV     R7,?V1
    306              if ( epDesc == NULL )
   \   000088   EE           MOV     A,R6
   \   000089   4F           ORL     A,R7
   \   00008A   7046         JNZ     ??afIncomingData_2
    307                return;   // Endpoint descriptor not found
   \   00008C   02....       LJMP    ??afIncomingData_1 & 0xFFFF
    308          
    309              pList = afFindEndPointDescList( epDesc->endPoint );
    310          #else
    311              return; // Not supported
    312          #endif    
    313            }
    314            else if ( aff->DstEndPoint == AF_BROADCAST_ENDPOINT )
   \                     ??afIncomingData_0:
   \   00008F   7408         MOV     A,#0x8
   \   000091   12....       LCALL   ?XSTACK_DISP0_8
   \   000094   12....       LCALL   ??Subroutine28_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   000097   74FF         MOV     A,#-0x1
   \   000099   69           XRL     A,R1
   \   00009A   7023         JNZ     ??afIncomingData_3
    315            {
    316              // Set the list
    317              if ( pList != NULL )
   \   00009C   85..82       MOV     DPL,?XSP + 0
   \   00009F   85..83       MOV     DPH,?XSP + 1
   \   0000A2   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   0000A5   7003         JNZ     $+5
   \   0000A7   02....       LJMP    ??afIncomingData_1 & 0xFFFF
    318              {
    319                epDesc = pList->epDesc;
   \   0000AA   85..82       MOV     DPL,?XSP + 0
   \   0000AD   85..83       MOV     DPH,?XSP + 1
   \   0000B0   12....       LCALL   ?Subroutine17 & 0xFFFF
    320              }
    321            }
   \                     ??CrossCallReturnLabel_20:
   \   0000B3   7420         MOV     A,#0x20
   \   0000B5   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B8   78..         MOV     R0,#?V0
   \   0000BA   12....       LCALL   ?L_MOV_X
   \   0000BD   8024         SJMP    ??CrossCallReturnLabel_21
    322            else if ( (epDesc = afFindEndPointDesc( aff->DstEndPoint )) )
   \                     ??afIncomingData_3:
   \   0000BF                ; Setup parameters for call to function afFindEndPointDesc
   \   0000BF   12....       LCALL   `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
   \   0000C2   8A..         MOV     ?V0,R2
   \   0000C4   8B..         MOV     ?V1,R3
   \   0000C6   A8..         MOV     R0,?V0
   \   0000C8   A9..         MOV     R1,?V1
   \   0000CA   E8           MOV     A,R0
   \   0000CB   FE           MOV     R6,A
   \   0000CC   E9           MOV     A,R1
   \   0000CD   FF           MOV     R7,A
   \   0000CE   E8           MOV     A,R0
   \   0000CF   49           ORL     A,R1
   \   0000D0   60E1         JZ      ??CrossCallReturnLabel_20
    323            {
    324              pList = afFindEndPointDescList( epDesc->endPoint );
   \                     ??afIncomingData_2:
   \   0000D2                ; Setup parameters for call to function afFindEndPointDescList
   \   0000D2   8E82         MOV     DPL,R6
   \   0000D4   8F83         MOV     DPH,R7
   \   0000D6   E0           MOVX    A,@DPTR
   \   0000D7   F9           MOV     R1,A
   \   0000D8   12....       LCALL   `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
   \   0000DB   12....       LCALL   ?Subroutine7 & 0xFFFF
    325            }
   \                     ??CrossCallReturnLabel_48:
   \   0000DE   80D3         SJMP    ??CrossCallReturnLabel_20
    326          
    327            while ( epDesc )
    328            {
    329              if ( pList->pfnDescCB )
    330              {
    331                uint16 *pID = (uint16 *)(pList->pfnDescCB(
    332                                           AF_DESCRIPTOR_PROFILE_ID, epDesc->endPoint ));
    333                if ( pID )
    334                {
    335                  epProfileID = *pID;
    336                  osal_mem_free( pID );
    337                }
    338              }
    339              else if ( epDesc->simpleDesc )
    340              {
    341                epProfileID = epDesc->simpleDesc->AppProfId;
    342              }
    343          
    344              if ( (aff->ProfileID == epProfileID) ||
    345                   ((epDesc->endPoint == ZDO_EP) && (aff->ProfileID == ZDO_PROFILE_ID)) )
    346              {
    347                {
    348                  afBuildMSGIncoming( aff, epDesc, SrcAddress, SrcPanId, sig, SecurityUse, timestamp );
    349                }
    350              }
    351          
    352              if ( ((aff->FrmCtrl & APS_DELIVERYMODE_MASK) == APS_FC_DM_GROUP) )
    353              {
    354          #if !defined ( APS_NO_GROUPS )      
    355                // Find the next endpoint for this group
    356                grpEp = aps_FindGroupForEndpoint( aff->GroupID, grpEp );
    357                if ( grpEp == APS_GROUPS_EP_NOT_FOUND )
    358                  return;   // No endpoint found
    359          
    360                epDesc = afFindEndPointDesc( grpEp );
    361                if ( epDesc == NULL )
    362                  return;   // Endpoint descriptor not found
    363          
    364                pList = afFindEndPointDescList( epDesc->endPoint );
    365          #else
    366                return;
    367          #endif      
    368              }
    369              else if ( aff->DstEndPoint == AF_BROADCAST_ENDPOINT )
    370              {
    371                pList = pList->nextDesc;
    372                if ( pList )
    373                  epDesc = pList->epDesc;
   \                     ??afIncomingData_4:
   \   0000E0   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   0000E3   EE           MOV     A,R6
   \   0000E4   4F           ORL     A,R7
   \   0000E5   7003         JNZ     $+5
   \   0000E7   02....       LJMP    ??afIncomingData_1 & 0xFFFF
   \   0000EA   800C         SJMP    ??CrossCallReturnLabel_49
   \                     ??afIncomingData_5:
   \   0000EC                ; Setup parameters for call to function afFindEndPointDescList
   \   0000EC   8E82         MOV     DPL,R6
   \   0000EE   8F83         MOV     DPH,R7
   \   0000F0   E0           MOVX    A,@DPTR
   \   0000F1   F9           MOV     R1,A
   \   0000F2   12....       LCALL   `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
   \   0000F5   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   0000F8   85..82       MOV     DPL,?XSP + 0
   \   0000FB   85..83       MOV     DPH,?XSP + 1
   \   0000FE   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   000101   E8           MOV     A,R0
   \   000102   FC           MOV     R4,A
   \   000103   E9           MOV     A,R1
   \   000104   FD           MOV     R5,A
   \   000105   EC           MOV     A,R4
   \   000106   4D           ORL     A,R5
   \   000107   8E82         MOV     DPL,R6
   \   000109   8F83         MOV     DPH,R7
   \   00010B   601C         JZ      ??afIncomingData_6
   \   00010D                ; Setup parameters for indirect call
   \   00010D   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   000110   12....       LCALL   ?CALL_IND
   \   000113   EA           MOV     A,R2
   \   000114   4B           ORL     A,R3
   \   000115   6021         JZ      ??CrossCallReturnLabel_69
   \   000117   8A82         MOV     DPL,R2
   \   000119   8B83         MOV     DPH,R3
   \   00011B   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   00011E   12....       LCALL   ?XSTACK_DISP0_8
   \   000121   12....       LCALL   ??Subroutine31_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   000124                ; Setup parameters for call to function osal_mem_free
   \   000124   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000127   800F         SJMP    ??CrossCallReturnLabel_69
   \                     ??afIncomingData_6:
   \   000129   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   00012C   600A         JZ      ??CrossCallReturnLabel_69
   \   00012E   A3           INC     DPTR
   \   00012F   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   000132   12....       LCALL   ?XSTACK_DISP0_8
   \   000135   12....       LCALL   ??Subroutine31_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_69:
   \   000138   7402         MOV     A,#0x2
   \   00013A   12....       LCALL   ?XSTACK_DISP0_8
   \   00013D   E0           MOVX    A,@DPTR
   \   00013E   F8           MOV     R0,A
   \   00013F   A3           INC     DPTR
   \   000140   E0           MOVX    A,@DPTR
   \   000141   C8           XCH     A,R0
   \   000142   2408         ADD     A,#0x8
   \   000144   F582         MOV     DPL,A
   \   000146   E4           CLR     A
   \   000147   38           ADDC    A,R0
   \   000148   F583         MOV     DPH,A
   \   00014A   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   00014D   12....       LCALL   ?XSTACK_DISP0_8
   \   000150   E0           MOVX    A,@DPTR
   \   000151   68           XRL     A,R0
   \   000152   7003         JNZ     ??afIncomingData_7
   \   000154   A3           INC     DPTR
   \   000155   E0           MOVX    A,@DPTR
   \   000156   69           XRL     A,R1
   \                     ??afIncomingData_7:
   \   000157   600B         JZ      ??afIncomingData_8
   \   000159   8E82         MOV     DPL,R6
   \   00015B   8F83         MOV     DPH,R7
   \   00015D   E0           MOVX    A,@DPTR
   \   00015E   7037         JNZ     ??afIncomingData_9
   \   000160   E8           MOV     A,R0
   \   000161   49           ORL     A,R1
   \   000162   7033         JNZ     ??afIncomingData_9
   \                     ??afIncomingData_8:
   \   000164                ; Setup parameters for call to function afBuildMSGIncoming
   \   000164   78..         MOV     R0,#?V0
   \   000166   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   000169   7422         MOV     A,#0x22
   \   00016B   12....       LCALL   ?XSTACK_DISP0_8
   \   00016E   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000171   7422         MOV     A,#0x22
   \   000173   12....       LCALL   ?XSTACK_DISP0_8
   \   000176   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000179   7412         MOV     A,#0x12
   \   00017B   12....       LCALL   ?XSTACK_DISP0_8
   \   00017E   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000181   A9..         MOV     R1,?V7
   \   000183   EE           MOV     A,R6
   \   000184   FC           MOV     R4,A
   \   000185   EF           MOV     A,R7
   \   000186   FD           MOV     R5,A
   \   000187   740C         MOV     A,#0xc
   \   000189   12....       LCALL   ?XSTACK_DISP0_8
   \   00018C   12....       LCALL   ??Subroutine32_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_83:
   \   00018F   12....       LCALL   `??afBuildMSGIncoming::?relay`; Banked call to: afBuildMSGIncoming
   \   000192   740A         MOV     A,#0xa
   \   000194   12....       LCALL   ?DEALLOC_XSTACK8
   \                     ??afIncomingData_9:
   \   000197   7402         MOV     A,#0x2
   \   000199   12....       LCALL   ?XSTACK_DISP0_8
   \   00019C   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   00019F   702A         JNZ     ??afIncomingData_10
   \   0001A1                ; Setup parameters for call to function aps_FindGroupForEndpoint
   \   0001A1   A9..         MOV     R1,?V6
   \   0001A3   7406         MOV     A,#0x6
   \   0001A5   12....       LCALL   ?XSTACK_DISP0_8
   \   0001A8   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_91:
   \   0001AB   12....       LCALL   `??aps_FindGroupForEndpoint::?relay`; Banked call to: aps_FindGroupForEndpoint
   \   0001AE   E9           MOV     A,R1
   \   0001AF   F5..         MOV     ?V6,A
   \   0001B1   74FE         MOV     A,#-0x2
   \   0001B3   65..         XRL     A,?V6
   \   0001B5   603B         JZ      ??afIncomingData_1
   \   0001B7                ; Setup parameters for call to function afFindEndPointDesc
   \   0001B7   12....       LCALL   `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
   \   0001BA   8A..         MOV     ?V4,R2
   \   0001BC   8B..         MOV     ?V5,R3
   \   0001BE   AE..         MOV     R6,?V4
   \   0001C0   AF..         MOV     R7,?V5
   \   0001C2   EE           MOV     A,R6
   \   0001C3   4F           ORL     A,R7
   \   0001C4   6003         JZ      $+5
   \   0001C6   02....       LJMP    ??afIncomingData_5 & 0xFFFF
   \   0001C9   8027         SJMP    ??afIncomingData_1
   \                     ??afIncomingData_10:
   \   0001CB   7408         MOV     A,#0x8
   \   0001CD   12....       LCALL   ?XSTACK_DISP0_8
   \   0001D0   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   0001D3   F4           CPL     A
   \   0001D4   701C         JNZ     ??afIncomingData_1
   \   0001D6   85..82       MOV     DPL,?XSP + 0
   \   0001D9   85..83       MOV     DPH,?XSP + 1
   \   0001DC   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   0001DF   A3           INC     DPTR
   \   0001E0   A3           INC     DPTR
   \   0001E1   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_82:
   \   0001E4   85..82       MOV     DPL,?XSP + 0
   \   0001E7   85..83       MOV     DPH,?XSP + 1
   \   0001EA   E0           MOVX    A,@DPTR
   \   0001EB   F8           MOV     R0,A
   \   0001EC   49           ORL     A,R1
   \   0001ED   6003         JZ      $+5
   \   0001EF   02....       LJMP    ??afIncomingData_4 & 0xFFFF
    374                else
    375                  epDesc = NULL;
    376              }
    377              else
    378                epDesc = NULL;
    379            }
    380          }
   \                     ??afIncomingData_1:
   \   0001F2   740C         MOV     A,#0xc
   \   0001F4                REQUIRE ?Subroutine3
   \   0001F4                ; // Fall through to label ?Subroutine3

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F08         MOV     R7,#0x8
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   A3           INC     DPTR
   \   000001   E0           MOVX    A,@DPTR
   \   000002   F583         MOV     DPH,A
   \   000004   8882         MOV     DPL,R0
   \   000006   E0           MOVX    A,@DPTR
   \   000007   FE           MOV     R6,A
   \   000008   A3           INC     DPTR
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   FF           MOV     R7,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   12....       LCALL   ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_63:
   \   000003   7404         MOV     A,#0x4
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   000003   540C         ANL     A,#0xc
   \   000005   640C         XRL     A,#0xc
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine29_0
   \   000006                ; // Fall through to label ??Subroutine29_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   7902         MOV     R1,#0x2
   \   000004   8C82         MOV     DPL,R4
   \   000006   8D83         MOV     DPH,R5
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   000006   E582         MOV     A,DPL
   \   000008   4583         ORL     A,DPH
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   12....       LCALL   ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   000003   85..82       MOV     DPL,?XSP + 0
   \   000006   85..83       MOV     DPH,?XSP + 1
   \   000009                REQUIRE ??Subroutine31_0
   \   000009                ; // Fall through to label ??Subroutine31_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine31_0:
   \   000000   E8           MOV     A,R0
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   E9           MOV     A,R1
   \   000004   F0           MOVX    @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_41:
   \   000003                REQUIRE ??Subroutine32_0
   \   000003                ; // Fall through to label ??Subroutine32_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine32_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   000003   12....       LCALL   ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   8882         MOV     DPL,R0
   \   000007   8983         MOV     DPH,R1
   \   000009   22           RET
    381          
    382          /*********************************************************************
    383           * @fn          afBuildMSGIncoming
    384           *
    385           * @brief       Build the message for the app
    386           *
    387           * @param
    388           *
    389           * @return      pointer to next in data buffer
    390           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    391          static void afBuildMSGIncoming( aps_FrameFormat_t *aff, endPointDesc_t *epDesc,
   \                     afBuildMSGIncoming:
    392                           zAddrType_t *SrcAddress, uint16 SrcPanId, NLDE_Signal_t *sig, 
    393                           byte SecurityUse, uint32 timestamp )
    394          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   F0           MOVX    @DPTR,A
   \   000012   8A..         MOV     ?V0,R2
   \   000014   8B..         MOV     ?V1,R3
   \   000016   8C..         MOV     ?V6,R4
   \   000018   8D..         MOV     ?V7,R5
    395            afIncomingMSGPacket_t *MSGpkt;
    396            const byte len = sizeof( afIncomingMSGPacket_t ) + aff->asduLength;
    397            byte *asdu = aff->asdu;
   \   00001A   EA           MOV     A,R2
   \   00001B   240E         ADD     A,#0xe
   \   00001D   F582         MOV     DPL,A
   \   00001F   E4           CLR     A
   \   000020   35..         ADDC    A,?V1
   \   000022   F583         MOV     DPH,A
   \   000024   12....       LCALL   ??Subroutine30_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   000027   7401         MOV     A,#0x1
   \   000029   12....       LCALL   ?XSTACK_DISP0_8
   \   00002C   12....       LCALL   ??Subroutine31_0 & 0xFFFF
    398            MSGpkt = (afIncomingMSGPacket_t *)osal_msg_allocate( len );
   \                     ??CrossCallReturnLabel_70:
   \   00002F   EA           MOV     A,R2
   \   000030   2410         ADD     A,#0x10
   \   000032   F5..         MOV     ?V2,A
   \   000034   E4           CLR     A
   \   000035   35..         ADDC    A,?V1
   \   000037   F5..         MOV     ?V3,A
   \   000039                ; Setup parameters for call to function osal_msg_allocate
   \   000039   85..82       MOV     DPL,?V2
   \   00003C   F583         MOV     DPH,A
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   2423         ADD     A,#0x23
   \   000041   FA           MOV     R2,A
   \   000042   7B00         MOV     R3,#0x0
   \   000044   12....       LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   000047   8A..         MOV     ?V4,R2
   \   000049   8B..         MOV     ?V5,R3
   \   00004B   AE..         MOV     R6,?V4
   \   00004D   AF..         MOV     R7,?V5
    399          
    400            if ( MSGpkt == NULL )
   \   00004F   EE           MOV     A,R6
   \   000050   4F           ORL     A,R7
   \   000051   7003         JNZ     $+5
   \   000053   02....       LJMP    ??afBuildMSGIncoming_0 & 0xFFFF
    401            {
    402              return;
    403            }
    404          
    405            MSGpkt->hdr.event = AF_INCOMING_MSG_CMD;
   \   000056   8E82         MOV     DPL,R6
   \   000058   8F83         MOV     DPH,R7
   \   00005A   741A         MOV     A,#0x1a
   \   00005C   F0           MOVX    @DPTR,A
    406            MSGpkt->groupId = aff->GroupID;
   \   00005D   85..82       MOV     DPL,?V0
   \   000060   85..83       MOV     DPH,?V1
   \   000063   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   000066   12....       LCALL   ??Subroutine31_0 & 0xFFFF
    407            MSGpkt->clusterId = aff->ClusterID;
   \                     ??CrossCallReturnLabel_71:
   \   000069   85..82       MOV     DPL,?V0
   \   00006C   85..83       MOV     DPH,?V1
   \   00006F   A3           INC     DPTR
   \   000070   A3           INC     DPTR
   \   000071   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   000074   A3           INC     DPTR
   \   000075   A3           INC     DPTR
   \   000076   12....       LCALL   ??Subroutine31_0 & 0xFFFF
    408            afCopyAddress( &MSGpkt->srcAddr, SrcAddress );
   \                     ??CrossCallReturnLabel_72:
   \   000079                ; Setup parameters for call to function afCopyAddress
   \   000079   7413         MOV     A,#0x13
   \   00007B   12....       LCALL   ?XSTACK_DISP0_8
   \   00007E   E0           MOVX    A,@DPTR
   \   00007F   FC           MOV     R4,A
   \   000080   A3           INC     DPTR
   \   000081   E0           MOVX    A,@DPTR
   \   000082   FD           MOV     R5,A
   \   000083   EE           MOV     A,R6
   \   000084   2406         ADD     A,#0x6
   \   000086   FA           MOV     R2,A
   \   000087   E4           CLR     A
   \   000088   3F           ADDC    A,R7
   \   000089   FB           MOV     R3,A
   \   00008A   12....       LCALL   `??afCopyAddress::?relay`; Banked call to: afCopyAddress
    409            MSGpkt->srcAddr.endPoint = aff->SrcEndPoint;
   \   00008D   85..82       MOV     DPL,?V0
   \   000090   85..83       MOV     DPH,?V1
   \   000093   A3           INC     DPTR
   \   000094   A3           INC     DPTR
   \   000095   A3           INC     DPTR
   \   000096   E0           MOVX    A,@DPTR
   \   000097   C0E0         PUSH    A
   \   000099   EE           MOV     A,R6
   \   00009A   240F         ADD     A,#0xf
   \   00009C   F582         MOV     DPL,A
   \   00009E   E4           CLR     A
   \   00009F   3F           ADDC    A,R7
   \   0000A0   F583         MOV     DPH,A
   \   0000A2   D0E0         POP     A
   \   0000A4   F0           MOVX    @DPTR,A
    410            MSGpkt->endPoint = epDesc->endPoint;
   \   0000A5   85..82       MOV     DPL,?V6
   \   0000A8   85..83       MOV     DPH,?V7
   \   0000AB   E0           MOVX    A,@DPTR
   \   0000AC   C0E0         PUSH    A
   \   0000AE   EE           MOV     A,R6
   \   0000AF   2414         ADD     A,#0x14
   \   0000B1   F582         MOV     DPL,A
   \   0000B3   E4           CLR     A
   \   0000B4   3F           ADDC    A,R7
   \   0000B5   F583         MOV     DPH,A
   \   0000B7   D0E0         POP     A
   \   0000B9   F0           MOVX    @DPTR,A
    411            MSGpkt->wasBroadcast = aff->wasBroadcast;
   \   0000BA   E5..         MOV     A,?V0
   \   0000BC   240C         ADD     A,#0xc
   \   0000BE   F582         MOV     DPL,A
   \   0000C0   E4           CLR     A
   \   0000C1   35..         ADDC    A,?V1
   \   0000C3   F583         MOV     DPH,A
   \   0000C5   E0           MOVX    A,@DPTR
   \   0000C6   C0E0         PUSH    A
   \   0000C8   EE           MOV     A,R6
   \   0000C9   2415         ADD     A,#0x15
   \   0000CB   F582         MOV     DPL,A
   \   0000CD   E4           CLR     A
   \   0000CE   3F           ADDC    A,R7
   \   0000CF   F583         MOV     DPH,A
   \   0000D1   D0E0         POP     A
   \   0000D3   F0           MOVX    @DPTR,A
   \   0000D4   7417         MOV     A,#0x17
   \   0000D6   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D9   12....       LCALL   ?Subroutine19 & 0xFFFF
    412            MSGpkt->LinkQuality = sig->LinkQuality;
   \                     ??CrossCallReturnLabel_24:
   \   0000DC   E0           MOVX    A,@DPTR
   \   0000DD   C0E0         PUSH    A
   \   0000DF   EE           MOV     A,R6
   \   0000E0   2416         ADD     A,#0x16
   \   0000E2   F582         MOV     DPL,A
   \   0000E4   E4           CLR     A
   \   0000E5   3F           ADDC    A,R7
   \   0000E6   F583         MOV     DPH,A
   \   0000E8   D0E0         POP     A
   \   0000EA   F0           MOVX    @DPTR,A
    413            MSGpkt->correlation = sig->correlation;
   \   0000EB   8882         MOV     DPL,R0
   \   0000ED   8983         MOV     DPH,R1
   \   0000EF   A3           INC     DPTR
   \   0000F0   E0           MOVX    A,@DPTR
   \   0000F1   C0E0         PUSH    A
   \   0000F3   EE           MOV     A,R6
   \   0000F4   2417         ADD     A,#0x17
   \   0000F6   F582         MOV     DPL,A
   \   0000F8   E4           CLR     A
   \   0000F9   3F           ADDC    A,R7
   \   0000FA   F583         MOV     DPH,A
   \   0000FC   D0E0         POP     A
   \   0000FE   F0           MOVX    @DPTR,A
    414            MSGpkt->rssi = sig->rssi;
   \   0000FF   8882         MOV     DPL,R0
   \   000101   8983         MOV     DPH,R1
   \   000103   A3           INC     DPTR
   \   000104   A3           INC     DPTR
   \   000105   E0           MOVX    A,@DPTR
   \   000106   C0E0         PUSH    A
   \   000108   EE           MOV     A,R6
   \   000109   2418         ADD     A,#0x18
   \   00010B   F582         MOV     DPL,A
   \   00010D   E4           CLR     A
   \   00010E   3F           ADDC    A,R7
   \   00010F   F583         MOV     DPH,A
   \   000111   D0E0         POP     A
   \   000113   F0           MOVX    @DPTR,A
    415            MSGpkt->SecurityUse = SecurityUse;
   \   000114   85..82       MOV     DPL,?XSP + 0
   \   000117   85..83       MOV     DPH,?XSP + 1
   \   00011A   E0           MOVX    A,@DPTR
   \   00011B   C0E0         PUSH    A
   \   00011D   EE           MOV     A,R6
   \   00011E   2419         ADD     A,#0x19
   \   000120   F582         MOV     DPL,A
   \   000122   E4           CLR     A
   \   000123   3F           ADDC    A,R7
   \   000124   F583         MOV     DPH,A
   \   000126   D0E0         POP     A
   \   000128   F0           MOVX    @DPTR,A
    416            MSGpkt->timestamp = timestamp;
   \   000129   7419         MOV     A,#0x19
   \   00012B   12....       LCALL   ?XSTACK_DISP0_8
   \   00012E   12....       LCALL   ?XLOAD_R0123
   \   000131   EE           MOV     A,R6
   \   000132   241A         ADD     A,#0x1a
   \   000134   F582         MOV     DPL,A
   \   000136   E4           CLR     A
   \   000137   3F           ADDC    A,R7
   \   000138   F583         MOV     DPH,A
   \   00013A   12....       LCALL   ?XSTORE_R0123
    417            MSGpkt->macDestAddr = aff->macDestAddr;
   \   00013D   85..82       MOV     DPL,?V0
   \   000140   85..83       MOV     DPH,?V1
   \   000143   A3           INC     DPTR
   \   000144   A3           INC     DPTR
   \   000145   A3           INC     DPTR
   \   000146   A3           INC     DPTR
   \   000147   A3           INC     DPTR
   \   000148   A3           INC     DPTR
   \   000149   A3           INC     DPTR
   \   00014A   A3           INC     DPTR
   \   00014B   A3           INC     DPTR
   \   00014C   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   00014F   EE           MOV     A,R6
   \   000150   2412         ADD     A,#0x12
   \   000152   F582         MOV     DPL,A
   \   000154   E4           CLR     A
   \   000155   3F           ADDC    A,R7
   \   000156   F583         MOV     DPH,A
   \   000158   12....       LCALL   ??Subroutine31_0 & 0xFFFF
    418            MSGpkt->srcAddr.panId = SrcPanId;
   \                     ??CrossCallReturnLabel_73:
   \   00015B   7415         MOV     A,#0x15
   \   00015D   12....       LCALL   ?XSTACK_DISP0_8
   \   000160   12....       LCALL   ??Subroutine30_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   000163   EE           MOV     A,R6
   \   000164   2410         ADD     A,#0x10
   \   000166   F582         MOV     DPL,A
   \   000168   E4           CLR     A
   \   000169   3F           ADDC    A,R7
   \   00016A   F583         MOV     DPH,A
   \   00016C   12....       LCALL   ??Subroutine31_0 & 0xFFFF
    419            MSGpkt->cmd.TransSeqNumber = 0;
   \                     ??CrossCallReturnLabel_74:
   \   00016F   EE           MOV     A,R6
   \   000170   241E         ADD     A,#0x1e
   \   000172   F582         MOV     DPL,A
   \   000174   E4           CLR     A
   \   000175   3F           ADDC    A,R7
   \   000176   F583         MOV     DPH,A
   \   000178   E4           CLR     A
   \   000179   F0           MOVX    @DPTR,A
    420            MSGpkt->cmd.DataLength = aff->asduLength;
   \   00017A   85..82       MOV     DPL,?V2
   \   00017D   85..83       MOV     DPH,?V3
   \   000180   E0           MOVX    A,@DPTR
   \   000181   F8           MOV     R0,A
   \   000182   EE           MOV     A,R6
   \   000183   241F         ADD     A,#0x1f
   \   000185   FC           MOV     R4,A
   \   000186   E4           CLR     A
   \   000187   3F           ADDC    A,R7
   \   000188   FD           MOV     R5,A
   \   000189   8C82         MOV     DPL,R4
   \   00018B   8D83         MOV     DPH,R5
   \   00018D   E8           MOV     A,R0
   \   00018E   F0           MOVX    @DPTR,A
   \   00018F   A3           INC     DPTR
   \   000190   E4           CLR     A
   \   000191   F0           MOVX    @DPTR,A
    421          
    422            if ( MSGpkt->cmd.DataLength )
   \   000192   EE           MOV     A,R6
   \   000193   2421         ADD     A,#0x21
   \   000195   F582         MOV     DPL,A
   \   000197   E4           CLR     A
   \   000198   3F           ADDC    A,R7
   \   000199   F583         MOV     DPH,A
   \   00019B   E8           MOV     A,R0
   \   00019C   6031         JZ      ??afBuildMSGIncoming_1
    423            {
    424              MSGpkt->cmd.Data = (byte *)(MSGpkt + 1);
   \   00019E   EE           MOV     A,R6
   \   00019F   2423         ADD     A,#0x23
   \   0001A1   FA           MOV     R2,A
   \   0001A2   E4           CLR     A
   \   0001A3   3F           ADDC    A,R7
   \   0001A4   FB           MOV     R3,A
   \   0001A5   12....       LCALL   ??Subroutine29_0 & 0xFFFF
    425              osal_memcpy( MSGpkt->cmd.Data, asdu, MSGpkt->cmd.DataLength );
   \                     ??CrossCallReturnLabel_46:
   \   0001A8                ; Setup parameters for call to function osal_memcpy
   \   0001A8   7401         MOV     A,#0x1
   \   0001AA   12....       LCALL   ?XSTACK_DISP0_8
   \   0001AD   E0           MOVX    A,@DPTR
   \   0001AE   F5..         MOV     ?V0,A
   \   0001B0   A3           INC     DPTR
   \   0001B1   E0           MOVX    A,@DPTR
   \   0001B2   F5..         MOV     ?V1,A
   \   0001B4   75..00       MOV     ?V2,#0x0
   \   0001B7   78..         MOV     R0,#?V0
   \   0001B9   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0001BC   8C82         MOV     DPL,R4
   \   0001BE   8D83         MOV     DPH,R5
   \   0001C0   E0           MOVX    A,@DPTR
   \   0001C1   FC           MOV     R4,A
   \   0001C2   A3           INC     DPTR
   \   0001C3   E0           MOVX    A,@DPTR
   \   0001C4   FD           MOV     R5,A
   \   0001C5   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0001C8   7403         MOV     A,#0x3
   \   0001CA   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001CD   8004         SJMP    ??afBuildMSGIncoming_2
    426            }
    427            else
    428            {
    429              MSGpkt->cmd.Data = NULL;
   \                     ??afBuildMSGIncoming_1:
   \   0001CF   E4           CLR     A
   \   0001D0   F0           MOVX    @DPTR,A
   \   0001D1   A3           INC     DPTR
   \   0001D2   F0           MOVX    @DPTR,A
    430            }
    431          
    432          #if defined ( MT_AF_CB_FUNC )
    433            // If ZDO or SAPI have registered for this endpoint, dont intercept it here
    434            if (AFCB_CHECK(CB_ID_AF_DATA_IND, *(epDesc->task_id)))
    435            {
    436              MT_AfIncomingMsg( (void *)MSGpkt );
    437              // Release the memory.
    438              osal_msg_deallocate( (void *)MSGpkt );
    439            }
    440            else
    441          #endif
    442            {
    443              // Send message through task message.
    444              osal_msg_send( *(epDesc->task_id), (uint8 *)MSGpkt );
   \                     ??afBuildMSGIncoming_2:
   \   0001D3                ; Setup parameters for call to function osal_msg_send
   \   0001D3   EE           MOV     A,R6
   \   0001D4   FA           MOV     R2,A
   \   0001D5   EF           MOV     A,R7
   \   0001D6   FB           MOV     R3,A
   \   0001D7   85..82       MOV     DPL,?V6
   \   0001DA   85..83       MOV     DPH,?V7
   \   0001DD   12....       LCALL   ?Subroutine12 & 0xFFFF
    445            }
   \                     ??CrossCallReturnLabel_37:
   \   0001E0   12....       LCALL   `??osal_msg_send::?relay`; Banked call to: osal_msg_send
    446          }
   \                     ??afBuildMSGIncoming_0:
   \   0001E3   7403         MOV     A,#0x3
   \   0001E5   02....       LJMP    ?Subroutine3 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004   12....       LCALL   ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_64:
   \   000007   8E82         MOV     DPL,R6
   \   000009   8F83         MOV     DPH,R7
   \   00000B   A3           INC     DPTR
   \   00000C   A3           INC     DPTR
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine30_0
   \   000001                ; // Fall through to label ??Subroutine30_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine30_0:
   \   000000   12....       LCALL   ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   000003   22           RET
    447          
    448          /*********************************************************************
    449           * @fn      AF_DataRequest
    450           *
    451           * @brief   Common functionality for invoking APSDE_DataReq() for both
    452           *          SendMulti and MSG-Send.
    453           *
    454           * input parameters
    455           *
    456           * @param  *dstAddr - Full ZB destination address: Nwk Addr + End Point.
    457           * @param  *srcEP - Origination (i.e. respond to or ack to) End Point Descr.
    458           * @param   cID - A valid cluster ID as specified by the Profile.
    459           * @param   len - Number of bytes of data pointed to by next param.
    460           * @param  *buf - A pointer to the data bytes to send.
    461           * @param  *transID - A pointer to a byte which can be modified and which will
    462           *                    be used as the transaction sequence number of the msg.
    463           * @param   options - Valid bit mask of Tx options.
    464           * @param   radius - Normally set to AF_DEFAULT_RADIUS.
    465           *
    466           * output parameters
    467           *
    468           * @param  *transID - Incremented by one if the return value is success.
    469           *
    470           * @return  afStatus_t - See previous definition of afStatus_... types.
    471           */

   \                                 In  segment XDATA_I, align 1, keep-with-next
    472          uint8 AF_DataRequestDiscoverRoute = TRUE;
   \                     AF_DataRequestDiscoverRoute:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for AF_DataRequestDiscoverRoute>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    473          afStatus_t AF_DataRequest( afAddrType_t *dstAddr, endPointDesc_t *srcEP,
   \                     AF_DataRequest:
    474                                     uint16 cID, uint16 len, uint8 *buf, uint8 *transID,
    475                                     uint8 options, uint8 radius )
    476          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 30
   \   000005   74E2         MOV     A,#-0x1e
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V2,R2
   \   00000C   8B..         MOV     ?V3,R3
   \   00000E   EC           MOV     A,R4
   \   00000F   FE           MOV     R6,A
   \   000010   ED           MOV     A,R5
   \   000011   FF           MOV     R7,A
   \   000012   89..         MOV     ?V6,R1
    477            pDescCB pfnDescCB;
    478            ZStatus_t stat;
    479            APSDE_DataReq_t req;
    480            afDataReqMTU_t mtu;
    481          
    482            // Verify source end point
    483            if ( srcEP == NULL )
   \   000014   EE           MOV     A,R6
   \   000015   4F           ORL     A,R7
   \   000016   6069         JZ      ??AF_DataRequest_0
    484            {
    485              return afStatus_INVALID_PARAMETER;
    486            }
    487          
    488          #if !defined( REFLECTOR )
    489            if ( dstAddr->addrMode == afAddrNotPresent )
    490            {
    491              return afStatus_INVALID_PARAMETER;
    492            }
    493          #endif
    494          
    495            // Validate broadcasting
    496            if ( ( dstAddr->addrMode == afAddr16Bit     ) ||
    497                 ( dstAddr->addrMode == afAddrBroadcast )    )
   \   000018   EA           MOV     A,R2
   \   000019   2408         ADD     A,#0x8
   \   00001B   F5..         MOV     ?V0,A
   \   00001D   E4           CLR     A
   \   00001E   35..         ADDC    A,?V3
   \   000020   F5..         MOV     ?V1,A
   \   000022   85..82       MOV     DPL,?V0
   \   000025   F583         MOV     DPH,A
   \   000027   E0           MOVX    A,@DPTR
   \   000028   F8           MOV     R0,A
   \   000029   7402         MOV     A,#0x2
   \   00002B   68           XRL     A,R0
   \   00002C   6005         JZ      ??AF_DataRequest_1
   \   00002E   740F         MOV     A,#0xf
   \   000030   68           XRL     A,R0
   \   000031   7041         JNZ     ??AF_DataRequest_2
    498            {
    499              // Check for valid broadcast values
    500              if( ADDR_NOT_BCAST != NLME_IsAddressBroadcast( dstAddr->addr.shortAddr )  )
   \                     ??AF_DataRequest_1:
   \   000033                ; Setup parameters for call to function NLME_IsAddressBroadcast
   \   000033   8A82         MOV     DPL,R2
   \   000035   8B83         MOV     DPH,R3
   \   000037   12....       LCALL   ??Subroutine32_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_84:
   \   00003A   12....       LCALL   `??NLME_IsAddressBroadcast::?relay`; Banked call to: NLME_IsAddressBroadcast
   \   00003D   E9           MOV     A,R1
   \   00003E   85..82       MOV     DPL,?V0
   \   000041   85..83       MOV     DPH,?V1
   \   000044   6027         JZ      ??AF_DataRequest_3
    501              {
    502                // Force mode to broadcast
    503                dstAddr->addrMode = afAddrBroadcast;
   \   000046   740F         MOV     A,#0xf
   \   000048   F0           MOVX    @DPTR,A
    504              }
    505              else
    506              {
    507                // Address is not a valid broadcast type
    508                if ( dstAddr->addrMode == afAddrBroadcast )
    509                {
    510                  return afStatus_INVALID_PARAMETER;
    511                }
    512              }
    513            }
    514            else if ( dstAddr->addrMode != afAddr64Bit &&
    515                      dstAddr->addrMode != afAddrGroup &&
    516                      dstAddr->addrMode != afAddrNotPresent )
    517            {
    518              return afStatus_INVALID_PARAMETER;
    519            }
    520            
    521            // Set destination address
    522            req.dstAddr.addrMode = dstAddr->addrMode;
   \                     ??AF_DataRequest_4:
   \   000049   E0           MOVX    A,@DPTR
   \   00004A   C0E0         PUSH    A
   \   00004C   740A         MOV     A,#0xa
   \   00004E   12....       LCALL   ?XSTACK_DISP0_8
   \   000051   D0E0         POP     A
   \   000053   F0           MOVX    @DPTR,A
    523            if ( dstAddr->addrMode == afAddr64Bit )
   \   000054   85..82       MOV     DPL,?V0
   \   000057   85..83       MOV     DPH,?V1
   \   00005A   E0           MOVX    A,@DPTR
   \   00005B   6403         XRL     A,#0x3
   \   00005D   7027         JNZ     ??AF_DataRequest_5
    524              osal_cpyExtAddr( req.dstAddr.addr.extAddr, dstAddr->addr.extAddr );
   \   00005F                ; Setup parameters for call to function sAddrExtCpy
   \   00005F   AC..         MOV     R4,?V2
   \   000061   AD..         MOV     R5,?V3
   \   000063   7402         MOV     A,#0x2
   \   000065   12....       LCALL   ?XSTACK_DISP101_8
   \   000068   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   00006B   802A         SJMP    ??CrossCallReturnLabel_75
   \                     ??AF_DataRequest_3:
   \   00006D   E0           MOVX    A,@DPTR
   \   00006E   640F         XRL     A,#0xf
   \   000070   70D7         JNZ     ??AF_DataRequest_4
   \   000072   800D         SJMP    ??AF_DataRequest_0
   \                     ??AF_DataRequest_2:
   \   000074   7403         MOV     A,#0x3
   \   000076   68           XRL     A,R0
   \   000077   60D0         JZ      ??AF_DataRequest_4
   \   000079   7401         MOV     A,#0x1
   \   00007B   68           XRL     A,R0
   \   00007C   60CB         JZ      ??AF_DataRequest_4
   \   00007E   E8           MOV     A,R0
   \   00007F   60C8         JZ      ??AF_DataRequest_4
   \                     ??AF_DataRequest_0:
   \   000081   7902         MOV     R1,#0x2
   \   000083   02....       LJMP    ??AF_DataRequest_6 & 0xFFFF
    525            else
    526              req.dstAddr.addr.shortAddr = dstAddr->addr.shortAddr;
   \                     ??AF_DataRequest_5:
   \   000086   85..82       MOV     DPL,?V2
   \   000089   85..83       MOV     DPH,?V3
   \   00008C   12....       LCALL   ??Subroutine30_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_52:
   \   00008F   7402         MOV     A,#0x2
   \   000091   12....       LCALL   ?XSTACK_DISP0_8
   \   000094   12....       LCALL   ??Subroutine31_0 & 0xFFFF
    527            
    528            req.profileID = ZDO_PROFILE_ID;
   \                     ??CrossCallReturnLabel_75:
   \   000097   7411         MOV     A,#0x11
   \   000099   12....       LCALL   ?XSTACK_DISP0_8
   \   00009C   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   00009F   8002         SJMP    ??AF_DataRequest_7
   \                     ??AF_DataRequest_8:
   \   0000A1   A3           INC     DPTR
   \   0000A2   A3           INC     DPTR
   \                     ??AF_DataRequest_7:
   \   0000A3   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   0000A6   6043         JZ      ??AF_DataRequest_9
   \   0000A8   8882         MOV     DPL,R0
   \   0000AA   8983         MOV     DPH,R1
   \   0000AC   12....       LCALL   ??Subroutine32_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_85:
   \   0000AF   EE           MOV     A,R6
   \   0000B0   6A           XRL     A,R2
   \   0000B1   7002         JNZ     ??AF_DataRequest_10
   \   0000B3   EF           MOV     A,R7
   \   0000B4   6B           XRL     A,R3
   \                     ??AF_DataRequest_10:
   \   0000B5   8882         MOV     DPL,R0
   \   0000B7   8983         MOV     DPH,R1
   \   0000B9   A3           INC     DPTR
   \   0000BA   A3           INC     DPTR
   \   0000BB   A3           INC     DPTR
   \   0000BC   70E3         JNZ     ??AF_DataRequest_8
   \   0000BE   12....       LCALL   ??Subroutine30_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   0000C1   E8           MOV     A,R0
   \   0000C2   FC           MOV     R4,A
   \   0000C3   E9           MOV     A,R1
   \   0000C4   FD           MOV     R5,A
    529          
    530            if ( (pfnDescCB = afGetDescCB( srcEP )) )
   \   0000C5   EC           MOV     A,R4
   \   0000C6   4D           ORL     A,R5
   \   0000C7   6022         JZ      ??AF_DataRequest_9
    531            {
    532              uint16 *pID = (uint16 *)(pfnDescCB(
    533                                           AF_DESCRIPTOR_PROFILE_ID, srcEP->endPoint ));
   \   0000C9                ; Setup parameters for indirect call
   \   0000C9   8E82         MOV     DPL,R6
   \   0000CB   8F83         MOV     DPH,R7
   \   0000CD   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   0000D0   12....       LCALL   ?CALL_IND
    534              if ( pID )
   \   0000D3   EA           MOV     A,R2
   \   0000D4   4B           ORL     A,R3
   \   0000D5   6028         JZ      ??CrossCallReturnLabel_77
    535              {
    536                req.profileID = *pID;
   \   0000D7   8A82         MOV     DPL,R2
   \   0000D9   8B83         MOV     DPH,R3
   \   0000DB   12....       LCALL   ??Subroutine30_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   0000DE   7411         MOV     A,#0x11
   \   0000E0   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E3   12....       LCALL   ??Subroutine31_0 & 0xFFFF
    537                osal_mem_free( pID );
   \                     ??CrossCallReturnLabel_76:
   \   0000E6                ; Setup parameters for call to function osal_mem_free
   \   0000E6   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0000E9   8014         SJMP    ??CrossCallReturnLabel_77
    538              }
    539            }
    540            else if ( srcEP->simpleDesc )
   \                     ??AF_DataRequest_9:
   \   0000EB   8E82         MOV     DPL,R6
   \   0000ED   8F83         MOV     DPH,R7
   \   0000EF   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   0000F2   600B         JZ      ??CrossCallReturnLabel_77
    541            {
    542              req.profileID = srcEP->simpleDesc->AppProfId;
   \   0000F4   12....       LCALL   ?Subroutine20 & 0xFFFF
    543            }
   \                     ??CrossCallReturnLabel_59:
   \   0000F7   7411         MOV     A,#0x11
   \   0000F9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000FC   12....       LCALL   ??Subroutine31_0 & 0xFFFF
    544          
    545            req.txOptions = 0;
   \                     ??CrossCallReturnLabel_77:
   \   0000FF   7417         MOV     A,#0x17
   \   000101   12....       LCALL   ?XSTACK_DISP0_8
   \   000104   E4           CLR     A
   \   000105   F0           MOVX    @DPTR,A
   \   000106   A3           INC     DPTR
   \   000107   F0           MOVX    @DPTR,A
    546          
    547            if ( ( options & AF_ACK_REQUEST              ) &&
    548                 ( req.dstAddr.addrMode != AddrBroadcast ) &&
    549                 ( req.dstAddr.addrMode != AddrGroup     )    )
   \   000108   E5..         MOV     A,?V6
   \   00010A   A2E4         MOV     C,0xE0 /* A   */.4
   \   00010C   501C         JNC     ??AF_DataRequest_11
   \   00010E   740A         MOV     A,#0xa
   \   000110   12....       LCALL   ?XSTACK_DISP0_8
   \   000113   E0           MOVX    A,@DPTR
   \   000114   F8           MOV     R0,A
   \   000115   740F         MOV     A,#0xf
   \   000117   68           XRL     A,R0
   \   000118   6010         JZ      ??AF_DataRequest_11
   \   00011A   7401         MOV     A,#0x1
   \   00011C   68           XRL     A,R0
   \   00011D   600B         JZ      ??AF_DataRequest_11
    550            {
    551              req.txOptions |=  APS_TX_OPTIONS_ACK;
   \   00011F   7417         MOV     A,#0x17
   \   000121   12....       LCALL   ?XSTACK_DISP0_8
   \   000124   7404         MOV     A,#0x4
   \   000126   F0           MOVX    @DPTR,A
   \   000127   A3           INC     DPTR
   \   000128   E4           CLR     A
   \   000129   F0           MOVX    @DPTR,A
    552            }
    553          
    554            if ( options & AF_SKIP_ROUTING )
   \                     ??AF_DataRequest_11:
   \   00012A   E5..         MOV     A,?V6
   \   00012C   A2E7         MOV     C,0xE0 /* A   */.7
   \   00012E   5009         JNC     ??AF_DataRequest_12
    555            {
    556              req.txOptions |=  APS_TX_OPTIONS_SKIP_ROUTING;
   \   000130   7417         MOV     A,#0x17
   \   000132   12....       LCALL   ?XSTACK_DISP0_8
   \   000135   E0           MOVX    A,@DPTR
   \   000136   4410         ORL     A,#0x10
   \   000138   F0           MOVX    @DPTR,A
    557            }
    558          
    559            if ( options & AF_EN_SECURITY )
   \                     ??AF_DataRequest_12:
   \   000139   E5..         MOV     A,?V6
   \   00013B   A2E6         MOV     C,0xE0 /* A   */.6
   \   00013D   5012         JNC     ??AF_DataRequest_13
    560            {
    561              req.txOptions |= APS_TX_OPTIONS_SECURITY_ENABLE;
   \   00013F   7417         MOV     A,#0x17
   \   000141   12....       LCALL   ?XSTACK_DISP0_8
   \   000144   E0           MOVX    A,@DPTR
   \   000145   4401         ORL     A,#0x1
   \   000147   F0           MOVX    @DPTR,A
    562              mtu.aps.secure = TRUE;
   \   000148   7401         MOV     A,#0x1
   \   00014A   12....       LCALL   ?XSTACK_DISP0_8
   \   00014D   7401         MOV     A,#0x1
   \   00014F   8006         SJMP    ??AF_DataRequest_14
    563            }
    564            else
    565            {
    566              mtu.aps.secure = FALSE;
   \                     ??AF_DataRequest_13:
   \   000151   7401         MOV     A,#0x1
   \   000153   12....       LCALL   ?XSTACK_DISP0_8
   \   000156   E4           CLR     A
   \                     ??AF_DataRequest_14:
   \   000157   F0           MOVX    @DPTR,A
    567            }
    568          
    569            mtu.kvp = FALSE;
   \   000158   85..82       MOV     DPL,?XSP + 0
   \   00015B   85..83       MOV     DPH,?XSP + 1
   \   00015E   E4           CLR     A
   \   00015F   F0           MOVX    @DPTR,A
   \   000160   7433         MOV     A,#0x33
   \   000162   12....       LCALL   ?XSTACK_DISP0_8
   \   000165   E0           MOVX    A,@DPTR
   \   000166   F5..         MOV     ?V4,A
   \   000168   A3           INC     DPTR
   \   000169   E0           MOVX    A,@DPTR
   \   00016A   F5..         MOV     ?V5,A
    570          
    571            req.transID       = *transID;
   \   00016C   85..82       MOV     DPL,?V4
   \   00016F   F583         MOV     DPH,A
   \   000171   E0           MOVX    A,@DPTR
   \   000172   C0E0         PUSH    A
   \   000174   7419         MOV     A,#0x19
   \   000176   12....       LCALL   ?XSTACK_DISP0_8
   \   000179   D0E0         POP     A
   \   00017B   F0           MOVX    @DPTR,A
    572            req.srcEP         = srcEP->endPoint;
   \   00017C   8E82         MOV     DPL,R6
   \   00017E   8F83         MOV     DPH,R7
   \   000180   E0           MOVX    A,@DPTR
   \   000181   C0E0         PUSH    A
   \   000183   740B         MOV     A,#0xb
   \   000185   12....       LCALL   ?XSTACK_DISP0_8
   \   000188   D0E0         POP     A
   \   00018A   F0           MOVX    @DPTR,A
    573            req.dstEP         = dstAddr->endPoint;
   \   00018B   85..82       MOV     DPL,?V2
   \   00018E   85..83       MOV     DPH,?V3
   \   000191   A3           INC     DPTR
   \   000192   A3           INC     DPTR
   \   000193   A3           INC     DPTR
   \   000194   A3           INC     DPTR
   \   000195   A3           INC     DPTR
   \   000196   A3           INC     DPTR
   \   000197   A3           INC     DPTR
   \   000198   A3           INC     DPTR
   \   000199   A3           INC     DPTR
   \   00019A   E0           MOVX    A,@DPTR
   \   00019B   C0E0         PUSH    A
   \   00019D   740C         MOV     A,#0xc
   \   00019F   12....       LCALL   ?XSTACK_DISP0_8
   \   0001A2   D0E0         POP     A
   \   0001A4   F0           MOVX    @DPTR,A
    574            req.clusterID     = cID;
   \   0001A5   742D         MOV     A,#0x2d
   \   0001A7   12....       LCALL   ?XSTACK_DISP0_8
   \   0001AA   12....       LCALL   ??Subroutine30_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_55:
   \   0001AD   740F         MOV     A,#0xf
   \   0001AF   12....       LCALL   ?XSTACK_DISP0_8
   \   0001B2   12....       LCALL   ??Subroutine31_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_78:
   \   0001B5   742F         MOV     A,#0x2f
   \   0001B7   12....       LCALL   ?XSTACK_DISP0_8
   \   0001BA   E0           MOVX    A,@DPTR
   \   0001BB   F5..         MOV     ?V0,A
   \   0001BD   A3           INC     DPTR
   \   0001BE   E0           MOVX    A,@DPTR
   \   0001BF   F5..         MOV     ?V1,A
    575            req.asduLen       = len;
   \   0001C1   7413         MOV     A,#0x13
   \   0001C3   12....       LCALL   ?XSTACK_DISP0_8
   \   0001C6   E5..         MOV     A,?V0
   \   0001C8   F0           MOVX    @DPTR,A
   \   0001C9   A3           INC     DPTR
   \   0001CA   E5..         MOV     A,?V1
   \   0001CC   F0           MOVX    @DPTR,A
    576            req.asdu          = buf;
   \   0001CD   7431         MOV     A,#0x31
   \   0001CF   12....       LCALL   ?XSTACK_DISP0_8
   \   0001D2   12....       LCALL   ??Subroutine30_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_56:
   \   0001D5   7415         MOV     A,#0x15
   \   0001D7   12....       LCALL   ?XSTACK_DISP0_8
   \   0001DA   12....       LCALL   ??Subroutine31_0 & 0xFFFF
    577            req.discoverRoute = AF_DataRequestDiscoverRoute;//(uint8)((options & AF_DISCV_ROUTE) ? 1 : 0);
   \                     ??CrossCallReturnLabel_79:
   \   0001DD   90....       MOV     DPTR,#AF_DataRequestDiscoverRoute
   \   0001E0   E0           MOVX    A,@DPTR
   \   0001E1   C0E0         PUSH    A
   \   0001E3   741A         MOV     A,#0x1a
   \   0001E5   12....       LCALL   ?XSTACK_DISP0_8
   \   0001E8   D0E0         POP     A
   \   0001EA   F0           MOVX    @DPTR,A
    578            req.radiusCounter = radius;
   \   0001EB   7435         MOV     A,#0x35
   \   0001ED   12....       LCALL   ?XSTACK_DISP0_8
   \   0001F0   E0           MOVX    A,@DPTR
   \   0001F1   C0E0         PUSH    A
   \   0001F3   741B         MOV     A,#0x1b
   \   0001F5   12....       LCALL   ?XSTACK_DISP0_8
   \   0001F8   D0E0         POP     A
   \   0001FA   F0           MOVX    @DPTR,A
    579          #if defined ( INTER_PAN )
    580            req.dstPanId      = dstAddr->panId;
    581          
    582            if ( StubAPS_InterPan( dstAddr->panId, dstAddr->endPoint ) )
    583            {
    584              if ( len > INTERP_DataReqMTU() )
    585              {
    586                stat = afStatus_INVALID_PARAMETER;
    587              }
    588              else
    589              {
    590                stat = INTERP_DataReq( &req );
    591              }
    592            }
    593            else
    594          #endif // INTER_PAN
    595            {
    596              if (len > afDataReqMTU( &mtu ) )
   \   0001FB                ; Setup parameters for call to function afDataReqMTU
   \   0001FB   AA..         MOV     R2,?XSP + 0
   \   0001FD   AB..         MOV     R3,?XSP + 1
   \   0001FF   12....       LCALL   `??afDataReqMTU::?relay`; Banked call to: afDataReqMTU
   \   000202   E9           MOV     A,R1
   \   000203   C3           CLR     C
   \   000204   95..         SUBB    A,?V0
   \   000206   E4           CLR     A
   \   000207   95..         SUBB    A,?V1
   \   000209   501C         JNC     ??AF_DataRequest_15
    597              {
    598                if (apsfSendFragmented)
   \   00020B   90....       MOV     DPTR,#apsfSendFragmented
   \   00020E   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   000211   600F         JZ      ??AF_DataRequest_16
    599                {
    600                  stat = (*apsfSendFragmented)( &req );
   \   000213                ; Setup parameters for indirect call
   \   000213   7402         MOV     A,#0x2
   \   000215   12....       LCALL   ?XSTACK_DISP101_8
   \   000218   E0           MOVX    A,@DPTR
   \   000219   F583         MOV     DPH,A
   \   00021B   8882         MOV     DPL,R0
   \   00021D   12....       LCALL   ?CALL_IND
   \   000220   800D         SJMP    ??AF_DataRequest_17
    601                }
    602                else
    603                {
    604                  stat = afStatus_INVALID_PARAMETER;
   \                     ??AF_DataRequest_16:
   \   000222   75..02       MOV     ?V0,#0x2
   \   000225   800B         SJMP    ??AF_DataRequest_18
    605                }
    606              }
    607              else
    608              {
    609                stat = APSDE_DataReq( &req );
   \                     ??AF_DataRequest_15:
   \   000227                ; Setup parameters for call to function APSDE_DataReq
   \   000227   7402         MOV     A,#0x2
   \   000229   12....       LCALL   ?XSTACK_DISP101_8
   \   00022C   12....       LCALL   `??APSDE_DataReq::?relay`; Banked call to: APSDE_DataReq
   \                     ??AF_DataRequest_17:
   \   00022F   E9           MOV     A,R1
   \   000230   F5..         MOV     ?V0,A
    610              }
    611            }
    612          
    613            /*
    614             * If this is an EndPoint-to-EndPoint message on the same device, it will not
    615             * get added to the NWK databufs. So it will not go OTA and it will not get
    616             * a MACCB_DATA_CONFIRM_CMD callback. Thus it is necessary to generate the
    617             * AF_DATA_CONFIRM_CMD here. Note that APSDE_DataConfirm() only generates one
    618             * message with the first in line TransSeqNumber, even on a multi message.
    619             * Also note that a reflected msg will not have its confirmation generated
    620             * here.
    621             */
    622            if ( (req.dstAddr.addrMode == Addr16Bit) &&
    623                 (req.dstAddr.addr.shortAddr == NLME_GetShortAddr()) )
   \                     ??AF_DataRequest_18:
   \   000232   740A         MOV     A,#0xa
   \   000234   12....       LCALL   ?XSTACK_DISP0_8
   \   000237   E0           MOVX    A,@DPTR
   \   000238   6402         XRL     A,#0x2
   \   00023A   702C         JNZ     ??AF_DataRequest_19
   \   00023C                ; Setup parameters for call to function NLME_GetShortAddr
   \   00023C   12....       LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   00023F   8A..         MOV     ?V2,R2
   \   000241   8B..         MOV     ?V3,R3
   \   000243   A8..         MOV     R0,?V2
   \   000245   A9..         MOV     R1,?V3
   \   000247   7402         MOV     A,#0x2
   \   000249   12....       LCALL   ?XSTACK_DISP0_8
   \   00024C   E0           MOVX    A,@DPTR
   \   00024D   68           XRL     A,R0
   \   00024E   7003         JNZ     ??AF_DataRequest_20
   \   000250   A3           INC     DPTR
   \   000251   E0           MOVX    A,@DPTR
   \   000252   69           XRL     A,R1
   \                     ??AF_DataRequest_20:
   \   000253   7013         JNZ     ??AF_DataRequest_19
    624            {
    625              afDataConfirm( srcEP->endPoint, *transID, stat );
   \   000255                ; Setup parameters for call to function afDataConfirm
   \   000255   AB..         MOV     R3,?V0
   \   000257   85..82       MOV     DPL,?V4
   \   00025A   85..83       MOV     DPH,?V5
   \   00025D   E0           MOVX    A,@DPTR
   \   00025E   FA           MOV     R2,A
   \   00025F   8E82         MOV     DPL,R6
   \   000261   8F83         MOV     DPH,R7
   \   000263   E0           MOVX    A,@DPTR
   \   000264   F9           MOV     R1,A
   \   000265   12....       LCALL   `??afDataConfirm::?relay`; Banked call to: afDataConfirm
    626            }
    627          
    628            if ( stat == afStatus_SUCCESS )
   \                     ??AF_DataRequest_19:
   \   000268   E5..         MOV     A,?V0
   \   00026A   7009         JNZ     ??AF_DataRequest_21
    629            {
    630              (*transID)++;
   \   00026C   85..82       MOV     DPL,?V4
   \   00026F   85..83       MOV     DPH,?V5
   \   000272   E0           MOVX    A,@DPTR
   \   000273   04           INC     A
   \   000274   F0           MOVX    @DPTR,A
    631            }
    632          
    633            return (afStatus_t)stat;
   \                     ??AF_DataRequest_21:
   \   000275   A9..         MOV     R1,?V0
   \                     ??AF_DataRequest_6:
   \   000277   741E         MOV     A,#0x1e
   \   000279   12....       LCALL   ?DEALLOC_XSTACK8
   \   00027C   7F07         MOV     R7,#0x7
   \   00027E   02....       LJMP    ?BANKED_LEAVE_XDATA
    634          }
    635          
    636          #if defined ( ZIGBEE_SOURCE_ROUTING )
    637          /*********************************************************************
    638           * @fn      AF_DataRequestSrcRtg
    639           *
    640           * @brief   Common functionality for invoking APSDE_DataReq() for both
    641           *          SendMulti and MSG-Send.
    642           *
    643           * input parameters
    644           *
    645           * @param  *dstAddr - Full ZB destination address: Nwk Addr + End Point.
    646           * @param  *srcEP - Origination (i.e. respond to or ack to) End Point Descr.
    647           * @param   cID - A valid cluster ID as specified by the Profile.
    648           * @param   len - Number of bytes of data pointed to by next param.
    649           * @param  *buf - A pointer to the data bytes to send.
    650           * @param  *transID - A pointer to a byte which can be modified and which will
    651           *                    be used as the transaction sequence number of the msg.
    652           * @param   options - Valid bit mask of Tx options.
    653           * @param   radius - Normally set to AF_DEFAULT_RADIUS.
    654           * @param   relayCnt - Number of devices in the relay list
    655           * @param   pRelayList - Pointer to the relay list
    656           *
    657           * output parameters
    658           *
    659           * @param  *transID - Incremented by one if the return value is success.
    660           *
    661           * @return  afStatus_t - See previous definition of afStatus_... types.
    662           */
    663          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    664          afStatus_t AF_DataRequestSrcRtg( afAddrType_t *dstAddr, endPointDesc_t *srcEP,
   \                     AF_DataRequestSrcRtg:
    665                                     uint16 cID, uint16 len, uint8 *buf, uint8 *transID,
    666                                     uint8 options, uint8 radius, uint8 relayCnt, uint16* pRelayList )
    667          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V2,R4
   \   00000B   8D..         MOV     ?V3,R5
   \   00000D   89..         MOV     ?V0,R1
    668            uint8 status;
    669            
    670            /* Add the source route to the source routing table */
    671            status = RTG_AddSrcRtgEntry_Guaranteed( dstAddr->addr.shortAddr, relayCnt, 
    672                                                   pRelayList );
   \   00000F                ; Setup parameters for call to function RTG_AddSrcRtgEntry_Guaranteed
   \   00000F   7416         MOV     A,#0x16
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   E0           MOVX    A,@DPTR
   \   000015   FC           MOV     R4,A
   \   000016   A3           INC     DPTR
   \   000017   E0           MOVX    A,@DPTR
   \   000018   FD           MOV     R5,A
   \   000019   7415         MOV     A,#0x15
   \   00001B   12....       LCALL   ?XSTACK_DISP0_8
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   F9           MOV     R1,A
   \   000020   8E82         MOV     DPL,R6
   \   000022   8F83         MOV     DPH,R7
   \   000024   12....       LCALL   ??Subroutine32_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_86:
   \   000027   12....       LCALL   `??RTG_AddSrcRtgEntry_Guaranteed::?relay`; Banked call to: RTG_AddSrcRtgEntry_Guaranteed
   \   00002A   E9           MOV     A,R1
   \   00002B   F9           MOV     R1,A
    673          
    674            if( status == RTG_SUCCESS)
   \   00002C   7043         JNZ     ??AF_DataRequestSrcRtg_0
    675            {
    676              /* Call AF_DataRequest to send the data */
    677              status = AF_DataRequest( dstAddr, srcEP, cID, len, buf, transID, options, radius );
   \   00002E                ; Setup parameters for call to function AF_DataRequest
   \   00002E   7414         MOV     A,#0x14
   \   000030   12....       LCALL   ?XSTACK_DISP0_8
   \   000033   E0           MOVX    A,@DPTR
   \   000034   F5..         MOV     ?V1,A
   \   000036   78..         MOV     R0,#?V1
   \   000038   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00003B   7413         MOV     A,#0x13
   \   00003D   12....       LCALL   ?XSTACK_DISP0_8
   \   000040   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000043   7413         MOV     A,#0x13
   \   000045   12....       LCALL   ?XSTACK_DISP0_8
   \   000048   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00004B   7413         MOV     A,#0x13
   \   00004D   12....       LCALL   ?XSTACK_DISP0_8
   \   000050   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000053   7413         MOV     A,#0x13
   \   000055   12....       LCALL   ?XSTACK_DISP0_8
   \   000058   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00005B   A9..         MOV     R1,?V0
   \   00005D   AC..         MOV     R4,?V2
   \   00005F   AD..         MOV     R5,?V3
   \   000061   EE           MOV     A,R6
   \   000062   FA           MOV     R2,A
   \   000063   EF           MOV     A,R7
   \   000064   FB           MOV     R3,A
   \   000065   12....       LCALL   `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
   \   000068   7409         MOV     A,#0x9
   \   00006A   12....       LCALL   ?DEALLOC_XSTACK8
   \   00006D   E9           MOV     A,R1
   \   00006E   F9           MOV     R1,A
   \   00006F   800B         SJMP    ??AF_DataRequestSrcRtg_1
    678            }
    679            else if( status == RTG_INVALID_PATH )
   \                     ??AF_DataRequestSrcRtg_0:
   \   000071   7405         MOV     A,#0x5
   \   000073   69           XRL     A,R1
   \   000074   7004         JNZ     ??AF_DataRequestSrcRtg_2
    680            {
    681              /* The source route relay count is exceeding the network limit */
    682              status = afStatus_INVALID_PARAMETER;
   \   000076   7902         MOV     R1,#0x2
   \   000078   8002         SJMP    ??AF_DataRequestSrcRtg_1
    683            }
    684            else
    685            {
    686              /* The guaranteed adding entry fails due to memory failure */
    687              status = afStatus_MEM_FAIL;
   \                     ??AF_DataRequestSrcRtg_2:
   \   00007A   7910         MOV     R1,#0x10
    688            }
    689            return status;
   \                     ??AF_DataRequestSrcRtg_1:
   \   00007C   02....       LJMP    ?Subroutine1 & 0xFFFF
    690          }
    691          
    692          #endif
    693          
    694          /*********************************************************************
    695           * @fn      afFindEndPointDescList
    696           *
    697           * @brief   Find the endpoint description entry from the endpoint
    698           *          number.
    699           *
    700           * @param   EndPoint - Application Endpoint to look for
    701           *
    702           * @return  the address to the endpoint/interface description entry
    703           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    704          static epList_t *afFindEndPointDescList( byte EndPoint )
   \                     afFindEndPointDescList:
    705          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    706            epList_t *epSearch;
    707          
    708            // Start at the beginning
    709            epSearch = epList;
   \   000004   90....       MOV     DPTR,#epList
   \   000007   8009         SJMP    ??afFindEndPointDescList_0
    710          
    711            // Look through the list until the end
    712            while ( epSearch )
    713            {
    714              // Is there a match?
    715              if ( epSearch->epDesc->endPoint == EndPoint )
    716              {
    717                return ( epSearch );
    718              }
    719              else
    720                epSearch = epSearch->nextDesc;  // Next entry
   \                     ??afFindEndPointDescList_1:
   \   000009   8A82         MOV     DPL,R2
   \   00000B   8B83         MOV     DPH,R3
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \                     ??afFindEndPointDescList_0:
   \   000012   12....       LCALL   ??Subroutine32_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_87:
   \   000015   EA           MOV     A,R2
   \   000016   4B           ORL     A,R3
   \   000017   600C         JZ      ??afFindEndPointDescList_2
   \   000019   8A82         MOV     DPL,R2
   \   00001B   8B83         MOV     DPH,R3
   \   00001D   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   000020   69           XRL     A,R1
   \   000021   70E6         JNZ     ??afFindEndPointDescList_1
   \   000023   8004         SJMP    ??afFindEndPointDescList_3
    721            }
    722          
    723            return ( (epList_t *)NULL );
   \                     ??afFindEndPointDescList_2:
   \   000025   7A00         MOV     R2,#0x0
   \   000027   7B00         MOV     R3,#0x0
   \                     ??afFindEndPointDescList_3:
   \   000029   02....       LJMP    ?Subroutine0 & 0xFFFF
    724          }
    725          
    726          /*********************************************************************
    727           * @fn      afFindEndPointDesc
    728           *
    729           * @brief   Find the endpoint description entry from the endpoint
    730           *          number.
    731           *
    732           * @param   EndPoint - Application Endpoint to look for
    733           *
    734           * @return  the address to the endpoint/interface description entry
    735           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    736          endPointDesc_t *afFindEndPointDesc( byte EndPoint )
   \                     afFindEndPointDesc:
    737          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    738            epList_t *epSearch;
    739          
    740            // Look for the endpoint
    741            epSearch = afFindEndPointDescList( EndPoint );
   \   000005                ; Setup parameters for call to function afFindEndPointDescList
   \   000005   12....       LCALL   `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
   \   000008   8A82         MOV     DPL,R2
   \   00000A   8B83         MOV     DPH,R3
    742          
    743            if ( epSearch )
   \   00000C   E582         MOV     A,DPL
   \   00000E   4583         ORL     A,DPH
   \   000010   6005         JZ      ??afFindEndPointDesc_0
    744              return ( epSearch->epDesc );
   \   000012   12....       LCALL   ??Subroutine32_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_88:
   \   000015   8004         SJMP    ??afFindEndPointDesc_1
    745            else
    746              return ( (endPointDesc_t *)NULL );
   \                     ??afFindEndPointDesc_0:
   \   000017   7A00         MOV     R2,#0x0
   \   000019   7B00         MOV     R3,#0x0
   \                     ??afFindEndPointDesc_1:
   \   00001B   02....       LJMP    ?Subroutine2 & 0xFFFF
    747          }
    748          
    749          /*********************************************************************
    750           * @fn      afFindSimpleDesc
    751           *
    752           * @brief   Find the Simple Descriptor from the endpoint number.
    753           *
    754           * @param   EP - Application Endpoint to look for.
    755           *
    756           * @return  Non-zero to indicate that the descriptor memory must be freed.
    757           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    758          byte afFindSimpleDesc( SimpleDescriptionFormat_t **ppDesc, byte EP )
   \                     afFindSimpleDesc:
    759          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   89..         MOV     ?V0,R1
    760            epList_t *epItem = afFindEndPointDescList( EP );
   \   00000B                ; Setup parameters for call to function afFindEndPointDescList
   \   00000B   12....       LCALL   `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
   \   00000E   8A..         MOV     ?V2,R2
   \   000010   8B..         MOV     ?V3,R3
   \   000012   AC..         MOV     R4,?V2
   \   000014   AD..         MOV     R5,?V3
    761            byte rtrn = FALSE;
   \   000016   7A00         MOV     R2,#0x0
    762          
    763            if ( epItem )
   \   000018   EC           MOV     A,R4
   \   000019   4D           ORL     A,R5
   \   00001A   602C         JZ      ??afFindSimpleDesc_0
    764            {
    765              if ( epItem->pfnDescCB )
   \   00001C   8C82         MOV     DPL,R4
   \   00001E   8D83         MOV     DPH,R5
   \   000020   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   000023   6012         JZ      ??afFindSimpleDesc_1
    766              {
    767                *ppDesc = epItem->pfnDescCB( AF_DESCRIPTOR_SIMPLE, EP );
   \   000025                ; Setup parameters for indirect call
   \   000025   AA..         MOV     R2,?V0
   \   000027   7901         MOV     R1,#0x1
   \   000029   12....       LCALL   ?CALL_IND
   \   00002C   8E82         MOV     DPL,R6
   \   00002E   8F83         MOV     DPH,R7
   \   000030   12....       LCALL   ??Subroutine29_0 & 0xFFFF
    768                rtrn = TRUE;
   \                     ??CrossCallReturnLabel_47:
   \   000033   7A01         MOV     R2,#0x1
   \   000035   8019         SJMP    ??afFindSimpleDesc_2
    769              }
    770              else
    771              {
    772                *ppDesc = epItem->epDesc->simpleDesc;
   \                     ??afFindSimpleDesc_1:
   \   000037   8C82         MOV     DPL,R4
   \   000039   8D83         MOV     DPH,R5
   \   00003B   12....       LCALL   ?Subroutine13 & 0xFFFF
    773              }
    774            }
   \                     ??CrossCallReturnLabel_12:
   \   00003E   8E82         MOV     DPL,R6
   \   000040   8F83         MOV     DPH,R7
   \   000042   E8           MOV     A,R0
   \   000043   F0           MOVX    @DPTR,A
   \   000044   A3           INC     DPTR
   \   000045   E9           MOV     A,R1
   \   000046   8007         SJMP    ??afFindSimpleDesc_3
    775            else
    776            {
    777              *ppDesc = NULL;
   \                     ??afFindSimpleDesc_0:
   \   000048   8E82         MOV     DPL,R6
   \   00004A   8F83         MOV     DPH,R7
   \   00004C   E4           CLR     A
   \   00004D   F0           MOVX    @DPTR,A
   \   00004E   A3           INC     DPTR
   \                     ??afFindSimpleDesc_3:
   \   00004F   F0           MOVX    @DPTR,A
    778            }
    779          
    780            return rtrn;
   \                     ??afFindSimpleDesc_2:
   \   000050   EA           MOV     A,R2
   \   000051   F9           MOV     R1,A
   \   000052   02....       LJMP    ?Subroutine1 & 0xFFFF
    781          }
    782          
    783          /*********************************************************************
    784           * @fn      afGetDescCB
    785           *
    786           * @brief   Get the Descriptor callback function.
    787           *
    788           * @param   epDesc - pointer to the endpoint descriptor
    789           *
    790           * @return  function pointer or NULL
    791           */
    792          static pDescCB afGetDescCB( endPointDesc_t *epDesc )
    793          {
    794            epList_t *epSearch;
    795          
    796            // Start at the beginning
    797            epSearch = epList;
    798          
    799            // Look through the list until the end
    800            while ( epSearch )
    801            {
    802              // Is there a match?
    803              if ( epSearch->epDesc == epDesc )
    804              {
    805                return ( epSearch->pfnDescCB );
    806              }
    807              else
    808                epSearch = epSearch->nextDesc;  // Next entry
    809            }
    810          
    811            return ( (pDescCB)NULL );
    812          }
    813          
    814          /*********************************************************************
    815           * @fn      afDataReqMTU
    816           *
    817           * @brief   Get the Data Request MTU(Max Transport Unit).
    818           *
    819           * @param   fields - afDataReqMTU_t
    820           *
    821           * @return  uint8(MTU)
    822           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    823          uint8 afDataReqMTU( afDataReqMTU_t* fields )
   \                     afDataReqMTU:
    824          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    825            uint8 len;
    826            uint8 hdr;
    827          
    828            if ( fields->kvp == TRUE )
   \   000005   8A82         MOV     DPL,R2
   \   000007   8B83         MOV     DPH,R3
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   6401         XRL     A,#0x1
   \   00000C   7004         JNZ     ??afDataReqMTU_0
    829            {
    830              hdr = AF_HDR_KVP_MAX_LEN;
   \   00000E   7E08         MOV     R6,#0x8
   \   000010   8002         SJMP    ??afDataReqMTU_1
    831            }
    832            else
    833            {
    834              hdr = AF_HDR_V1_1_MAX_LEN;
   \                     ??afDataReqMTU_0:
   \   000012   7E00         MOV     R6,#0x0
    835            }
    836          
    837            len = (uint8)(APSDE_DataReqMTU(&fields->aps) - hdr);
    838          
    839            return len;
   \                     ??afDataReqMTU_1:
   \   000014                ; Setup parameters for call to function APSDE_DataReqMTU
   \   000014   A3           INC     DPTR
   \   000015   AA82         MOV     R2,DPL
   \   000017   AB83         MOV     R3,DPH
   \   000019   12....       LCALL   `??APSDE_DataReqMTU::?relay`; Banked call to: APSDE_DataReqMTU
   \   00001C   E9           MOV     A,R1
   \   00001D   C3           CLR     C
   \   00001E   9E           SUBB    A,R6
   \   00001F   F9           MOV     R1,A
   \   000020                REQUIRE ?Subroutine4
   \   000020                ; // Fall through to label ?Subroutine4
    840          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    841          
    842          /*********************************************************************
    843           * @fn      afGetMatch
    844           *
    845           * @brief   Set the allow response flag.
    846           *
    847           * @param   ep - Application Endpoint to look for
    848           * @param   action - true - allow response, false - no response
    849           *
    850           * @return  TRUE allow responses, FALSE no response
    851           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    852          uint8 afGetMatch( uint8 ep )
   \                     afGetMatch:
    853          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    854            epList_t *epSearch;
    855          
    856            // Look for the endpoint
    857            epSearch = afFindEndPointDescList( ep );
   \   000005                ; Setup parameters for call to function afFindEndPointDescList
   \   000005   12....       LCALL   `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
   \   000008   8A82         MOV     DPL,R2
   \   00000A   8B83         MOV     DPH,R3
    858          
    859            if ( epSearch )
   \   00000C   E582         MOV     A,DPL
   \   00000E   4583         ORL     A,DPH
   \   000010   600B         JZ      ??afGetMatch_0
    860            {
    861              if ( epSearch->flags & eEP_AllowMatch )
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   E0           MOVX    A,@DPTR
   \   000015   A2E0         MOV     C,0xE0 /* A   */.0
   \   000017   5004         JNC     ??afGetMatch_0
    862                return ( TRUE );
   \   000019   7901         MOV     R1,#0x1
   \   00001B   8002         SJMP    ??afGetMatch_1
    863              else
    864                return ( FALSE );
    865            }
    866            else
    867              return ( FALSE );
   \                     ??afGetMatch_0:
   \   00001D   7900         MOV     R1,#0x0
   \                     ??afGetMatch_1:
   \   00001F                REQUIRE ?Subroutine2
   \   00001F                ; // Fall through to label ?Subroutine2
    868          }
    869          
    870          /*********************************************************************
    871           * @fn      afSetMatch
    872           *
    873           * @brief   Set the allow response flag.
    874           *
    875           * @param   ep - Application Endpoint to look for
    876           * @param   action - true - allow response, false - no response
    877           *
    878           * @return  TRUE if success, FALSE if endpoint not found
    879           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    880          uint8 afSetMatch( uint8 ep, uint8 action )
   \                     afSetMatch:
    881          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FF           MOV     R7,A
    882            epList_t *epSearch;
    883          
    884            // Look for the endpoint
    885            epSearch = afFindEndPointDescList( ep );
   \   000007                ; Setup parameters for call to function afFindEndPointDescList
   \   000007   12....       LCALL   `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
   \   00000A   8A..         MOV     ?V0,R2
   \   00000C   8B..         MOV     ?V1,R3
   \   00000E   A8..         MOV     R0,?V0
   \   000010   A9..         MOV     R1,?V1
    886          
    887            if ( epSearch )
   \   000012   E8           MOV     A,R0
   \   000013   49           ORL     A,R1
   \   000014   6019         JZ      ??afSetMatch_0
    888            {
    889              if ( action )
   \   000016   E8           MOV     A,R0
   \   000017   2402         ADD     A,#0x2
   \   000019   F582         MOV     DPL,A
   \   00001B   E4           CLR     A
   \   00001C   39           ADDC    A,R1
   \   00001D   F583         MOV     DPH,A
   \   00001F   EF           MOV     A,R7
   \   000020   6005         JZ      ??afSetMatch_1
    890              {
    891                epSearch->flags |= eEP_AllowMatch;
   \   000022   E0           MOVX    A,@DPTR
   \   000023   D2E0         SETB    0xE0 /* A   */.0
   \   000025   8003         SJMP    ??afSetMatch_2
    892              }
    893              else
    894              {
    895                epSearch->flags &= (eEP_AllowMatch ^ 0xFFFF);
   \                     ??afSetMatch_1:
   \   000027   E0           MOVX    A,@DPTR
   \   000028   C2E0         CLR     0xE0 /* A   */.0
   \                     ??afSetMatch_2:
   \   00002A   F0           MOVX    @DPTR,A
    896              }
    897              return ( TRUE );
   \   00002B   7901         MOV     R1,#0x1
   \   00002D   8002         SJMP    ??afSetMatch_3
    898            }
    899            else
    900              return ( FALSE );
   \                     ??afSetMatch_0:
   \   00002F   7900         MOV     R1,#0x0
   \                     ??afSetMatch_3:
   \   000031   80..         SJMP    ?Subroutine2
    901          }
    902          
    903          /*********************************************************************
    904           * @fn      afNumEndPoints
    905           *
    906           * @brief   Returns the number of endpoints defined (including 0)
    907           *
    908           * @param   none
    909           *
    910           * @return  number of endpoints
    911           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    912          byte afNumEndPoints( void )
   \                     afNumEndPoints:
    913          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    914            epList_t *epSearch;
    915            byte endpoints;
    916          
    917            // Start at the beginning
    918            epSearch = epList;
   \   000004   90....       MOV     DPTR,#epList
   \   000007   12....       LCALL   ?Subroutine19 & 0xFFFF
    919            endpoints = 0;
   \                     ??CrossCallReturnLabel_25:
   \   00000A   7900         MOV     R1,#0x0
   \   00000C   800D         SJMP    ??afNumEndPoints_0
    920          
    921            while ( epSearch )
    922            {
    923              endpoints++;
   \                     ??afNumEndPoints_1:
   \   00000E   09           INC     R1
    924              epSearch = epSearch->nextDesc;
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   12....       LCALL   ??Subroutine32_0 & 0xFFFF
    925            }
   \                     ??CrossCallReturnLabel_89:
   \   000017   8A82         MOV     DPL,R2
   \   000019   8B83         MOV     DPH,R3
   \                     ??afNumEndPoints_0:
   \   00001B   E582         MOV     A,DPL
   \   00001D   4583         ORL     A,DPH
   \   00001F   70ED         JNZ     ??afNumEndPoints_1
    926          
    927            return ( endpoints );
   \   000021                REQUIRE ?Subroutine0
   \   000021                ; // Fall through to label ?Subroutine0
    928          }
    929          
    930          /*********************************************************************
    931           * @fn      afEndPoints
    932           *
    933           * @brief   Fills in the passed in buffer with the endpoint (numbers).
    934           *          Use afNumEndPoints to find out how big a buffer to supply.
    935           *
    936           * @param   epBuf - pointer to mem used
    937           *
    938           * @return  void
    939           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    940          void afEndPoints( byte *epBuf, byte skipZDO )
   \                     afEndPoints:
    941          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   E9           MOV     A,R1
   \   000005   FC           MOV     R4,A
    942            epList_t *epSearch;
    943            byte endPoint;
    944          
    945            // Start at the beginning
    946            epSearch = epList;
   \   000006   90....       MOV     DPTR,#epList
   \   000009   8028         SJMP    ??afEndPoints_0
    947          
    948            while ( epSearch )
    949            {
    950              endPoint = epSearch->epDesc->endPoint;
   \                     ??afEndPoints_1:
   \   00000B   8882         MOV     DPL,R0
   \   00000D   8983         MOV     DPH,R1
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   FD           MOV     R5,A
   \   000011   A3           INC     DPTR
   \   000012   E0           MOVX    A,@DPTR
   \   000013   F583         MOV     DPH,A
   \   000015   8D82         MOV     DPL,R5
   \   000017   E0           MOVX    A,@DPTR
   \   000018   FD           MOV     R5,A
    951          
    952              if ( !skipZDO || endPoint != 0 )
   \   000019   EC           MOV     A,R4
   \   00001A   6003         JZ      ??afEndPoints_2
   \   00001C   ED           MOV     A,R5
   \   00001D   600B         JZ      ??afEndPoints_3
    953                *epBuf++ = endPoint;
   \                     ??afEndPoints_2:
   \   00001F   ED           MOV     A,R5
   \   000020   8A82         MOV     DPL,R2
   \   000022   8B83         MOV     DPH,R3
   \   000024   F0           MOVX    @DPTR,A
   \   000025   A3           INC     DPTR
   \   000026   AA82         MOV     R2,DPL
   \   000028   AB83         MOV     R3,DPH
    954          
    955              epSearch = epSearch->nextDesc;
   \                     ??afEndPoints_3:
   \   00002A   8882         MOV     DPL,R0
   \   00002C   8983         MOV     DPH,R1
   \   00002E   A3           INC     DPTR
   \   00002F   A3           INC     DPTR
   \   000030   A3           INC     DPTR
   \   000031   A3           INC     DPTR
   \   000032   A3           INC     DPTR
    956            }
   \                     ??afEndPoints_0:
   \   000033   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   000036   70D3         JNZ     ??afEndPoints_1
    957          }
   \   000038   80..         SJMP    ?Subroutine0
    958          
    959          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    960          void afCopyAddress ( afAddrType_t *afAddr, zAddrType_t *zAddr )
   \                     afCopyAddress:
    961          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    962            afAddr->addrMode = (afAddrMode_t)zAddr->addrMode;
   \   000005   EC           MOV     A,R4
   \   000006   2408         ADD     A,#0x8
   \   000008   F8           MOV     R0,A
   \   000009   E4           CLR     A
   \   00000A   3D           ADDC    A,R5
   \   00000B   F9           MOV     R1,A
   \   00000C   8882         MOV     DPL,R0
   \   00000E   8983         MOV     DPH,R1
   \   000010   E0           MOVX    A,@DPTR
   \   000011   8A82         MOV     DPL,R2
   \   000013   8B83         MOV     DPH,R3
   \   000015   A3           INC     DPTR
   \   000016   A3           INC     DPTR
   \   000017   A3           INC     DPTR
   \   000018   A3           INC     DPTR
   \   000019   A3           INC     DPTR
   \   00001A   A3           INC     DPTR
   \   00001B   A3           INC     DPTR
   \   00001C   A3           INC     DPTR
   \   00001D   F0           MOVX    @DPTR,A
    963            if ( zAddr->addrMode == Addr64Bit )
   \   00001E   8882         MOV     DPL,R0
   \   000020   8983         MOV     DPH,R1
   \   000022   E0           MOVX    A,@DPTR
   \   000023   6403         XRL     A,#0x3
   \   000025   7005         JNZ     ??afCopyAddress_0
    964              osal_cpyExtAddr( afAddr->addr.extAddr, zAddr->addr.extAddr );
   \   000027                ; Setup parameters for call to function sAddrExtCpy
   \   000027   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   00002A   800E         SJMP    ??CrossCallReturnLabel_80
    965            else
    966              afAddr->addr.shortAddr = zAddr->addr.shortAddr;
   \                     ??afCopyAddress_0:
   \   00002C   8C82         MOV     DPL,R4
   \   00002E   8D83         MOV     DPH,R5
   \   000030   12....       LCALL   ??Subroutine30_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   000033   8A82         MOV     DPL,R2
   \   000035   8B83         MOV     DPH,R3
   \   000037   12....       LCALL   ??Subroutine31_0 & 0xFFFF
    967          }
   \                     ??CrossCallReturnLabel_80:
   \   00003A   02....       LJMP    ?Subroutine4 & 0xFFFF

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for AF_DataRequestDiscoverRoute>`:
   \   000000   01           DB 1

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afRegisterExtended::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afRegisterExtended

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afRegister::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afRegister

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afDataConfirm::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afDataConfirm

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afIncomingData::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afIncomingData

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afBuildMSGIncoming::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afBuildMSGIncoming

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??AF_DataRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    AF_DataRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??AF_DataRequestSrcRtg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    AF_DataRequestSrcRtg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afFindEndPointDescList::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afFindEndPointDescList

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afFindEndPointDesc::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afFindEndPointDesc

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afFindSimpleDesc::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afFindSimpleDesc

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afDataReqMTU::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afDataReqMTU

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afGetMatch::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afGetMatch

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afSetMatch::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afSetMatch

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afNumEndPoints::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afNumEndPoints

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afEndPoints::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afEndPoints

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afCopyAddress::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afCopyAddress
    968          
    969          /*********************************************************************
    970          *********************************************************************/
    971          

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      1     66   AF_DataRequest
        0     45   -> APSDE_DataReq
        0     45   -> NLME_GetShortAddr
        0     45   -> NLME_IsAddressBroadcast
        0     45   -> afDataConfirm
        0     45   -> afDataReqMTU
        0     45   -> osal_mem_free
        0     45   -> sAddrExtCpy
      0     33   AF_DataRequestSrcRtg
        0     21   -> AF_DataRequest
        0     12   -> RTG_AddSrcRtgEntry_Guaranteed
      1     60   afBuildMSGIncoming
        0     19   -> afCopyAddress
        0     22   -> osal_memcpy
        0     19   -> osal_msg_allocate
        0     19   -> osal_msg_send
      1     28   afCopyAddress
        0      9   -> sAddrExtCpy
      1     59   afDataConfirm
        0     14   -> afFindEndPointDesc
        0     14   -> osal_msg_allocate
        0     14   -> osal_msg_send
      0     54   afDataReqMTU
        0      9   -> APSDE_DataReqMTU
      3      0   afEndPoints
      0     38   afFindEndPointDesc
        0     10   -> afFindEndPointDescList
      2     28   afFindEndPointDescList
      0     12   afFindSimpleDesc
        0     12   -> afFindEndPointDescList
      0     10   afGetMatch
        0     10   -> afFindEndPointDescList
      0     46   afIncomingData
        0     38   -> afBuildMSGIncoming
        0     28   -> afFindEndPointDesc
        0     28   -> afFindEndPointDescList
        0     28   -> aps_FindGroupForEndpoint
        0     28   -> osal_mem_free
      2      0   afInit
      2      0   afNumEndPoints
      0     10   afRegister
        0     10   -> afFindEndPointDescList
        0     10   -> afRegisterExtended
      0     22   afRegisterExtended
        0     12   -> osal_mem_alloc
      0     10   afSetMatch
        0     10   -> afFindEndPointDescList


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       1  ?<Initializer for AF_DataRequestDiscoverRoute>
       7  ??Subroutine27_0
       5  ??Subroutine28_0
       6  ??Subroutine29_0
       4  ??Subroutine30_0
       6  ??Subroutine31_0
       6  ??Subroutine32_0
       7  ?Subroutine0
       5  ?Subroutine1
      11  ?Subroutine10
       3  ?Subroutine11
       1  ?Subroutine12
       7  ?Subroutine13
       8  ?Subroutine14
       6  ?Subroutine15
      14  ?Subroutine16
      12  ?Subroutine17
       4  ?Subroutine18
       4  ?Subroutine19
       5  ?Subroutine2
       1  ?Subroutine20
       9  ?Subroutine21
       5  ?Subroutine22
       7  ?Subroutine23
      10  ?Subroutine24
       6  ?Subroutine25
       9  ?Subroutine26
       8  ?Subroutine3
       5  ?Subroutine4
       9  ?Subroutine5
       1  ?Subroutine6
       6  ?Subroutine7
       9  ?Subroutine8
       6  ?Subroutine9
     641  AF_DataRequest
       6  AF_DataRequest::?relay
       1  AF_DataRequestDiscoverRoute
     127  AF_DataRequestSrcRtg
       6  AF_DataRequestSrcRtg::?relay
     488  afBuildMSGIncoming
       6  afBuildMSGIncoming::?relay
      61  afCopyAddress
       6  afCopyAddress::?relay
      79  afDataConfirm
       6  afDataConfirm::?relay
      32  afDataReqMTU
       6  afDataReqMTU::?relay
      58  afEndPoints
       6  afEndPoints::?relay
      30  afFindEndPointDesc
       6  afFindEndPointDesc::?relay
      44  afFindEndPointDescList
       6  afFindEndPointDescList::?relay
      85  afFindSimpleDesc
       6  afFindSimpleDesc::?relay
      31  afGetMatch
       6  afGetMatch::?relay
     500  afIncomingData
       6  afIncomingData::?relay
      14  afInit
       6  afInit::?relay
      33  afNumEndPoints
       6  afNumEndPoints::?relay
      56  afRegister
       6  afRegister::?relay
      95  afRegisterExtended
       6  afRegisterExtended::?relay
      51  afSetMatch
       6  afSetMatch::?relay
       2  epList

 
 2 637 bytes in segment BANKED_CODE
   102 bytes in segment BANK_RELAYS
     1 byte  in segment XDATA_I
     1 byte  in segment XDATA_ID
     2 bytes in segment XDATA_Z
 
 2 740 bytes of CODE  memory
     3 bytes of XDATA memory

Errors: none
Warnings: none
