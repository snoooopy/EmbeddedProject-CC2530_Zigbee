###############################################################################
#
# IAR C/C++ Compiler V9.20.1.2476 for 8051                26/May/2017  16:13:09
# Copyright 2004-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\ZMain\TI2530DB\OnBoard.c
#    Command line       =  
#        -f
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wRouter.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DRTR_NWK -DBLINK_LEDS) -f
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_POLLED=3000
#        -DNWK_INDIRECT_MSG_TIMEOUT=7 -DMAX_RREQ_ENTRIES=8
#        -DAPSC_MAX_FRAME_RETRIES=3 -DNWK_MAX_DATA_RETRIES=2
#        -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9 -DAPS_MAX_GROUPS=16
#        -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000
#        -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
#        -DREJOIN_POLL_RATE=440
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\ZMain\TI2530DB\OnBoard.c
#        -D ZIGBEEPRO -D ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC -D
#        LCD_SUPPORTED=DEBUG -lC
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\RouterEB-Pro\List\
#        -lA
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\RouterEB-Pro\List\
#        --diag_suppress Pe001,Pa010 -o
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\RouterEB-Pro\Obj\
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 8 -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\SOURCE\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\ZMAIN\TI2530DB\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MT\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\INCLUDE\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\TARGET\CC2530EB\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\MCU\CCSOC\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\INCLUDE\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\AF\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\NWK\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SEC\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SAPI\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SYS\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\ZDO\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\F8W\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES\SADDR\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES\SDATA\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\INCLUDE\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\HIGH_LEVEL\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\
#        -Ohz --require_prototypes
#    List file          =  
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\RouterEB-Pro\List\OnBoard.lst
#    Object file        =  
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\RouterEB-Pro\Obj\OnBoard.r51
#
###############################################################################

D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\ZMain\TI2530DB\OnBoard.c
      1          /**************************************************************************************************
      2            Filename:       OnBoard.c
      3            Revised:        $Date: 2009-12-16 17:44:49 -0800 (Wed, 16 Dec 2009) $
      4            Revision:       $Revision: 21351 $
      5          
      6            Description:    This file contains the UI and control for the
      7                            peripherals on the EVAL development board
      8            Notes:          This file targets the Chipcon CC2530
      9          
     10          
     11            Copyright 2005-2009 Texas Instruments Incorporated. All rights reserved.
     12          
     13            IMPORTANT: Your use of this Software is limited to those specific rights
     14            granted under the terms of a software license agreement between the user
     15            who downloaded the software, his/her employer (which must be your employer)
     16            and Texas Instruments Incorporated (the "License").  You may not use this
     17            Software unless you agree to abide by the terms of the License. The License
     18            limits your use, and you acknowledge, that the Software may not be modified,
     19            copied or distributed unless embedded on a Texas Instruments microcontroller
     20            or used solely and exclusively in conjunction with a Texas Instruments radio
     21            frequency transceiver, which is integrated into your product.  Other than for
     22            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     23            works of, modify, distribute, perform, display or sell this Software and/or
     24            its documentation for any purpose.
     25          
     26            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     27            PROVIDED “AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     28            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     29            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     30            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     31            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     32            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     33            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     34            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     35            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     36            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     37          
     38            Should you have any questions regarding your right to use this Software,
     39            contact Texas Instruments Incorporated at www.TI.com.
     40          **************************************************************************************************/
     41          
     42          /*********************************************************************
     43           * INCLUDES
     44           */
     45          
     46          #include "ZComDef.h"
     47          #include "OnBoard.h"

   \                                 In  segment SFR_AN, at 0x9d
   \   unsigned char volatile __sfr SLEEPSTA
   \                     SLEEPSTA:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IEN0
   \                     _A_IEN0:
   \   000000                DS 1
     48          #include "OSAL.h"
     49          #include "MT.h"
     50          #include "MT_SYS.h"
     51          #include "DebugTrace.h"
     52          
     53          /* Hal */
     54          #include "hal_lcd.h"
     55          #include "hal_mcu.h"
     56          #include "hal_timer.h"
     57          #include "hal_key.h"
     58          #include "hal_led.h"
     59          
     60          /* Allow access macRandomByte() */
     61          #include "mac_radio_defs.h"
     62          
     63          /*********************************************************************
     64           * MACROS
     65           */
     66          
     67          /*********************************************************************
     68           * CONSTANTS
     69           */
     70          
     71          // Task ID not initialized
     72          #define NO_TASK_ID 0xFF
     73          
     74          // Minimum length RAM "pattern" for Stack check
     75          #define MIN_RAM_INIT 12
     76          
     77          /*********************************************************************
     78           * TYPEDEFS
     79           */
     80          
     81          /*********************************************************************
     82           * GLOBAL VARIABLES
     83           */
     84          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     85          uint8 OnboardKeyIntEnable;
   \                     OnboardKeyIntEnable:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     86          
     87          #if defined MAKE_CRC_SHDW
     88          #pragma location="CRC_SHDW"
     89          const CODE uint16 _crcShdw = 0xFFFF;
     90          #pragma required=_crcShdw
     91          #endif
     92          
     93          // 64-bit Extended Address of this device

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     94          uint8 aExtendedAddress[8];
   \                     aExtendedAddress:
   \   000000                DS 8
   \   000008                REQUIRE __INIT_XDATA_Z
     95          
     96          /*********************************************************************
     97           * EXTERNAL VARIABLES
     98           */
     99          
    100          /*********************************************************************
    101           * EXTERNAL FUNCTIONS
    102           */
    103          
    104          /*********************************************************************
    105           * LOCAL VARIABLES
    106           */
    107          
    108          // Registered keys task ID, initialized to NOT USED.

   \                                 In  segment XDATA_I, align 1, keep-with-next
    109          static uint8 registeredKeysTaskID = NO_TASK_ID;
   \                     registeredKeysTaskID:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for registeredKeysTaskID>`
   \   000001                REQUIRE __INIT_XDATA_I
    110          
    111          /*********************************************************************
    112           * LOCAL FUNCTIONS
    113           */
    114          
    115          static void ChkReset( void );
    116          
    117          /*********************************************************************
    118           * @fn      InitBoard()
    119           * @brief   Initialize the CC2420DB Board Peripherals
    120           * @param   level: COLD,WARM,READY
    121           * @return  None
    122           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    123          void InitBoard( uint8 level )
   \                     InitBoard:
    124          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
    125            if ( level == OB_COLD )
   \   000006   7053         JNZ     ??InitBoard_0
    126            {
    127              // Interrupts off
    128              osal_int_disable( INTS_ALL );
   \   000008                ; Setup parameters for call to function osal_int_disable
   \   000008   79FF         MOV     R1,#-0x1
   \   00000A   12....       LCALL   `??osal_int_disable::?relay`; Banked call to: osal_int_disable
    129              // Turn all LEDs off
    130              HalLedSet( HAL_LED_ALL, HAL_LED_MODE_OFF );
   \   00000D                ; Setup parameters for call to function HalLedSet
   \   00000D   7A00         MOV     R2,#0x0
   \   00000F   790F         MOV     R1,#0xf
   \   000011   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
    131              // Check for Brown-Out reset
    132              ChkReset();
   \   000014   E59D         MOV     A,0x9d
   \   000016   5418         ANL     A,#0x18
   \   000018   F8           MOV     R0,A
   \   000019   604E         JZ      ??InitBoard_1
   \   00001B   7408         MOV     A,#0x8
   \   00001D   68           XRL     A,R0
   \   00001E   6049         JZ      ??InitBoard_1
   \   000020   7410         MOV     A,#0x10
   \   000022   68           XRL     A,R0
   \   000023   6044         JZ      ??InitBoard_1
   \   000025   C2AF         CLR     0xa8.7
   \                     ??InitBoard_2:
   \   000027   7E08         MOV     R6,#0x8
   \                     ??InitBoard_3:
   \   000029                ; Setup parameters for call to function HalLedSet
   \   000029   7A01         MOV     R2,#0x1
   \   00002B   EE           MOV     A,R6
   \   00002C   F9           MOV     R1,A
   \   00002D   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
   \   000030                ; Setup parameters for call to function Onboard_wait
   \   000030   7A24         MOV     R2,#0x24
   \   000032   7BF4         MOV     R3,#-0xc
   \   000034   12....       LCALL   `??Onboard_wait::?relay`; Banked call to: Onboard_wait
   \   000037                ; Setup parameters for call to function Onboard_wait
   \   000037   7A24         MOV     R2,#0x24
   \   000039   7BF4         MOV     R3,#-0xc
   \   00003B   12....       LCALL   `??Onboard_wait::?relay`; Banked call to: Onboard_wait
   \   00003E                ; Setup parameters for call to function HalLedSet
   \   00003E   7A00         MOV     R2,#0x0
   \   000040   EE           MOV     A,R6
   \   000041   F9           MOV     R1,A
   \   000042   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
   \   000045                ; Setup parameters for call to function Onboard_wait
   \   000045   7A7C         MOV     R2,#0x7c
   \   000047   7B92         MOV     R3,#-0x6e
   \   000049   12....       LCALL   `??Onboard_wait::?relay`; Banked call to: Onboard_wait
   \   00004C                ; Setup parameters for call to function Onboard_wait
   \   00004C   7A7C         MOV     R2,#0x7c
   \   00004E   7B92         MOV     R3,#-0x6e
   \   000050   12....       LCALL   `??Onboard_wait::?relay`; Banked call to: Onboard_wait
   \   000053   EE           MOV     A,R6
   \   000054   C3           CLR     C
   \   000055   13           RRC     A
   \   000056   FE           MOV     R6,A
   \   000057   70D0         JNZ     ??InitBoard_3
   \   000059   80CC         SJMP    ??InitBoard_2
    133            }
    134            else  // !OB_COLD
    135            {
    136              /* Initialize Key stuff */
    137              OnboardKeyIntEnable = HAL_KEY_INTERRUPT_ENABLE; //Ä¬ÈÏÎª²éÑ¯·½Ê½
   \                     ??InitBoard_0:
   \   00005B   90....       MOV     DPTR,#OnboardKeyIntEnable
   \   00005E   7401         MOV     A,#0x1
   \   000060   F0           MOVX    @DPTR,A
    138              HalKeyConfig( OnboardKeyIntEnable, OnBoard_KeyCallback);
   \   000061                ; Setup parameters for call to function HalKeyConfig
   \   000061   7A..         MOV     R2,#`??OnBoard_KeyCallback::?relay` & 0xff
   \   000063   7B..         MOV     R3,#(`??OnBoard_KeyCallback::?relay` >> 8) & 0xff
   \   000065   F9           MOV     R1,A
   \   000066   12....       LCALL   `??HalKeyConfig::?relay`; Banked call to: HalKeyConfig
    139            }
    140          }
   \                     ??InitBoard_1:
   \   000069                REQUIRE ?Subroutine0
   \   000069                REQUIRE SLEEPSTA
   \   000069                REQUIRE _A_IEN0
   \   000069                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    141          
    142          /*********************************************************************
    143           * @fn      ChkReset()
    144           * @brief   Check reset bits - if reset cause is unknown, assume a
    145           *          brown-out (low power), assume batteries are not reliable,
    146           *          hang in a loop and sequence through the LEDs.
    147           * @param   None
    148           * @return  None
    149           *********************************************************************/
    150          void ChkReset( void )
    151          {
    152            uint8 led;
    153            uint8 rib;
    154          
    155            // Isolate reset indicator bits
    156            rib = SLEEPSTA & LRESET;
    157          
    158            if ( rib == RESETPO )
    159            {
    160              // Put code here to handle Power-On reset
    161            }
    162            else if ( rib == RESETEX )
    163            {
    164              // Put code here to handle External reset
    165            }
    166            else if ( rib == RESETWD )
    167            {
    168              // Put code here to handle WatchDog reset
    169            }
    170            else
    171            {
    172              // Unknown, hang and blink
    173              HAL_DISABLE_INTERRUPTS();
    174              led = HAL_LED_4;
    175              while ( 1 ) {
    176                HalLedSet( led, HAL_LED_MODE_ON );
    177                MicroWait( 62500 );
    178                MicroWait( 62500 );
    179                HalLedSet( led, HAL_LED_MODE_OFF );
    180                MicroWait( 37500 );
    181                MicroWait( 37500 );
    182                if ( !(led >>= 1) )
    183                  led = HAL_LED_4;
    184              }
    185            }
    186          }
    187          
    188          /*********************************************************************
    189           *                        "Keyboard" Support
    190           *********************************************************************/
    191          
    192          /*********************************************************************
    193           * Keyboard Register function
    194           *
    195           * The keyboard handler is setup to send all keyboard changes to
    196           * one task (if a task is registered).
    197           *
    198           * If a task registers, it will get all the keys. You can change this
    199           * to register for individual keys.
    200           *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    201          uint8 RegisterForKeys( uint8 task_id )
   \                     RegisterForKeys:
    202          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   E9           MOV     A,R1
   \   000005   F8           MOV     R0,A
    203            // Allow only the first task
    204            if ( registeredKeysTaskID == NO_TASK_ID )
   \   000006   90....       MOV     DPTR,#registeredKeysTaskID
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   F4           CPL     A
   \   00000B   7006         JNZ     ??RegisterForKeys_0
    205            {
    206              registeredKeysTaskID = task_id;
   \   00000D   E8           MOV     A,R0
   \   00000E   F0           MOVX    @DPTR,A
    207              return ( true );
   \   00000F   7901         MOV     R1,#0x1
   \   000011   8002         SJMP    ??RegisterForKeys_1
    208            }
    209            else
    210              return ( false );
   \                     ??RegisterForKeys_0:
   \   000013   7900         MOV     R1,#0x0
   \                     ??RegisterForKeys_1:
   \   000015                REQUIRE ?Subroutine1
   \   000015                ; // Fall through to label ?Subroutine1
    211          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    212          
    213          /*********************************************************************
    214           * @fn      OnBoard_SendKeys
    215           *
    216           * @brief   Send "Key Pressed" message to application.
    217           *
    218           * @param   keys  - keys that were pressed
    219           *          state - shifted
    220           *
    221           * @return  status
    222           *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    223          uint8 OnBoard_SendKeys( uint8 keys, uint8 state )
   \                     OnBoard_SendKeys:
    224          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   \   000007   EA           MOV     A,R2
   \   000008   FF           MOV     R7,A
    225            keyChange_t *msgPtr;
    226          
    227            if ( registeredKeysTaskID != NO_TASK_ID )
   \   000009   90....       MOV     DPTR,#registeredKeysTaskID
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   F4           CPL     A
   \   00000E   602B         JZ      ??OnBoard_SendKeys_0
    228            {
    229              // Send the address to the task
    230              msgPtr = (keyChange_t *)osal_msg_allocate( sizeof(keyChange_t) );
   \   000010                ; Setup parameters for call to function osal_msg_allocate
   \   000010   7A04         MOV     R2,#0x4
   \   000012   7B00         MOV     R3,#0x0
   \   000014   12....       LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
    231              if ( msgPtr )
   \   000017   EA           MOV     A,R2
   \   000018   4B           ORL     A,R3
   \   000019   601C         JZ      ??OnBoard_SendKeys_1
    232              {
    233                msgPtr->hdr.event = KEY_CHANGE;
   \   00001B   8A82         MOV     DPL,R2
   \   00001D   8B83         MOV     DPH,R3
   \   00001F   74C0         MOV     A,#-0x40
   \   000021   F0           MOVX    @DPTR,A
    234                msgPtr->state = state;
   \   000022   EF           MOV     A,R7
   \   000023   A3           INC     DPTR
   \   000024   A3           INC     DPTR
   \   000025   F0           MOVX    @DPTR,A
    235                msgPtr->keys = keys;
   \   000026   EE           MOV     A,R6
   \   000027   8A82         MOV     DPL,R2
   \   000029   8B83         MOV     DPH,R3
   \   00002B   A3           INC     DPTR
   \   00002C   A3           INC     DPTR
   \   00002D   A3           INC     DPTR
   \   00002E   F0           MOVX    @DPTR,A
    236          
    237                osal_msg_send( registeredKeysTaskID, (uint8 *)msgPtr );
   \   00002F                ; Setup parameters for call to function osal_msg_send
   \   00002F   90....       MOV     DPTR,#registeredKeysTaskID
   \   000032   E0           MOVX    A,@DPTR
   \   000033   F9           MOV     R1,A
   \   000034   12....       LCALL   `??osal_msg_send::?relay`; Banked call to: osal_msg_send
    238              }
    239              return ( ZSuccess );
   \                     ??OnBoard_SendKeys_1:
   \   000037   7900         MOV     R1,#0x0
   \   000039   8002         SJMP    ??OnBoard_SendKeys_2
    240            }
    241            else
    242              return ( ZFailure );
   \                     ??OnBoard_SendKeys_0:
   \   00003B   7901         MOV     R1,#0x1
   \                     ??OnBoard_SendKeys_2:
   \   00003D   7F02         MOV     R7,#0x2
   \   00003F   02....       LJMP    ?BANKED_LEAVE_XDATA
    243          }
    244          
    245          /*********************************************************************
    246           * @fn      OnBoard_KeyCallback
    247           *
    248           * @brief   Callback service for keys
    249           *
    250           * @param   keys  - keys that were pressed
    251           *          state - shifted
    252           *
    253           * @return  void
    254           *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    255          void OnBoard_KeyCallback ( uint8 keys, uint8 state )
   \                     OnBoard_KeyCallback:
    256          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
    257            uint8 shift;
    258            (void)state;
    259          
    260            /* Get shift key status */
    261            shift = ((keys & HAL_KEY_SW_6) ? true : false);
    262          
    263            if ( OnBoard_SendKeys( keys, shift ) != ZSuccess )
   \   000006                ; Setup parameters for call to function OnBoard_SendKeys
   \   000006   A2E5         MOV     C,0xE0 /* A   */.5
   \   000008   E4           CLR     A
   \   000009   33           RLC     A
   \   00000A   FA           MOV     R2,A
   \   00000B   12....       LCALL   `??OnBoard_SendKeys::?relay`; Banked call to: OnBoard_SendKeys
    264            {
    265              // Process SW1 here
    266              if ( keys & HAL_KEY_SW_1 )  // Switch 1
    267              {
    268              }
    269              // Process SW2 here
    270              if ( keys & HAL_KEY_SW_2 )  // Switch 2
    271              {
    272              }
    273              // Process SW3 here
    274              if ( keys & HAL_KEY_SW_3 )  // Switch 3
    275              {
    276              }
    277              // Process SW4 here
    278              if ( keys & HAL_KEY_SW_4 )  // Switch 4
    279              {
    280              }
    281              // Process SW5 here
    282              if ( keys & HAL_KEY_SW_5 )  // Switch 5
    283              {
    284              }
    285              // Process SW6 here
    286              if ( keys & HAL_KEY_SW_6 )  // Switch 6
    287              {
    288              }
    289            }
    290          }
   \   00000E   80..         SJMP    ?Subroutine0
    291          
    292          /*********************************************************************
    293           * @fn      OnBoard_stack_used
    294           *
    295           * @brief   Runs through the stack looking for touched memory.
    296           *
    297           * @param   none
    298           *
    299           * @return  Maximum number of bytes used by the stack.
    300           *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    301          uint16 OnBoard_stack_used(void)
   \                     OnBoard_stack_used:
    302          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    303            uint8 const *ptr;
    304            uint8 cnt = 0;
   \   000004   7800         MOV     R0,#0x0
    305          
    306            for (ptr = XSTACK_END; ptr > XSTACK_BEG; ptr--)
   \   000006   7582..       MOV     DPL,#(SFE(XSTACK) + 255) & 0xff
   \   000009   7583..       MOV     DPH,#((SFE(XSTACK) - 1) >> 8) & 0xff
   \   00000C   800E         SJMP    ??OnBoard_stack_used_0
    307            {
    308              if (STACK_INIT_VALUE == *ptr)
    309              {
    310                if (++cnt >= MIN_RAM_INIT)
    311                {
    312                  ptr += MIN_RAM_INIT;
    313                  break;
    314                }
    315              }
    316              else
    317              {
    318                cnt = 0;
   \                     ??OnBoard_stack_used_1:
   \   00000E   7800         MOV     R0,#0x0
    319              }
   \                     ??OnBoard_stack_used_2:
   \   000010   E582         MOV     A,DPL
   \   000012   24FF         ADD     A,#-0x1
   \   000014   F582         MOV     DPL,A
   \   000016   E583         MOV     A,DPH
   \   000018   34FF         ADDC    A,#-0x1
   \   00001A   F583         MOV     DPH,A
   \                     ??OnBoard_stack_used_0:
   \   00001C   C3           CLR     C
   \   00001D   74..         MOV     A,#SFB(XSTACK) & 0xff
   \   00001F   9582         SUBB    A,DPL
   \   000021   74..         MOV     A,#(SFB(XSTACK) >> 8) & 0xff
   \   000023   9583         SUBB    A,DPH
   \   000025   5016         JNC     ??OnBoard_stack_used_3
   \   000027   E0           MOVX    A,@DPTR
   \   000028   64CD         XRL     A,#0xcd
   \   00002A   70E2         JNZ     ??OnBoard_stack_used_1
   \   00002C   08           INC     R0
   \   00002D   E8           MOV     A,R0
   \   00002E   C3           CLR     C
   \   00002F   940C         SUBB    A,#0xc
   \   000031   40DD         JC      ??OnBoard_stack_used_2
   \   000033   E582         MOV     A,DPL
   \   000035   240C         ADD     A,#0xc
   \   000037   F582         MOV     DPL,A
   \   000039   5002         JNC     ??OnBoard_stack_used_3
   \   00003B   0583         INC     DPH
    320            }
    321          
    322            return (uint16)(XSTACK_END - ptr + 1);
   \                     ??OnBoard_stack_used_3:
   \   00003D   74..         MOV     A,#(SFE(XSTACK) + 255) & 0xff
   \   00003F   C3           CLR     C
   \   000040   9582         SUBB    A,DPL
   \   000042   F8           MOV     R0,A
   \   000043   74..         MOV     A,#((SFE(XSTACK) - 1) >> 8) & 0xff
   \   000045   9583         SUBB    A,DPH
   \   000047   F9           MOV     R1,A
   \   000048   E8           MOV     A,R0
   \   000049   2401         ADD     A,#0x1
   \   00004B   FA           MOV     R2,A
   \   00004C   E4           CLR     A
   \   00004D   39           ADDC    A,R1
   \   00004E   FB           MOV     R3,A
   \   00004F   02....       LJMP    ?Subroutine1 & 0xFFFF
    323          }
    324          
    325          /*********************************************************************
    326           * @fn      _itoa
    327           *
    328           * @brief   convert a 16bit number to ASCII
    329           *
    330           * @param   num -
    331           *          buf -
    332           *          radix -
    333           *
    334           * @return  void
    335           *
    336           *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    337          void _itoa(uint16 num, uint8 *buf, uint8 radix)
   \                     _itoa:
    338          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV     A,#-0x5
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   \   00000E   89..         MOV     ?V5,R1
    339            char c,i;
    340            uint8 *p, rst[5];
    341          
    342            p = rst;
   \   000010   A8..         MOV     R0,?XSP + 0
   \   000012   A9..         MOV     R1,?XSP + 1
   \   000014   88..         MOV     ?V0,R0
   \   000016   89..         MOV     ?V1,R1
    343            for ( i=0; i<5; i++,p++ )
   \   000018   75..00       MOV     ?V4,#0x0
   \   00001B   85....       MOV     ?V6,?V5
   \   00001E   75..00       MOV     ?V7,#0x0
    344            {
    345              c = num % radix;  // Isolate a digit
   \                     ??_itoa_0:
   \   000021   EE           MOV     A,R6
   \   000022   F8           MOV     R0,A
   \   000023   EF           MOV     A,R7
   \   000024   F9           MOV     R1,A
   \   000025   AA..         MOV     R2,?V6
   \   000027   AB..         MOV     R3,?V7
   \   000029   12....       LCALL   ?US_DIV_MOD
   \   00002C   EA           MOV     A,R2
   \   00002D   F8           MOV     R0,A
    346              *p = c + (( c < 10 ) ? '0' : '7');  // Convert to Ascii
   \   00002E   940A         SUBB    A,#0xa
   \   000030   5004         JNC     ??_itoa_1
   \   000032   7930         MOV     R1,#0x30
   \   000034   8002         SJMP    ??_itoa_2
   \                     ??_itoa_1:
   \   000036   7937         MOV     R1,#0x37
   \                     ??_itoa_2:
   \   000038   E8           MOV     A,R0
   \   000039   29           ADD     A,R1
   \   00003A   85..82       MOV     DPL,?V0
   \   00003D   85..83       MOV     DPH,?V1
   \   000040   F0           MOVX    @DPTR,A
    347              num /= radix;
   \   000041   EE           MOV     A,R6
   \   000042   F8           MOV     R0,A
   \   000043   EF           MOV     A,R7
   \   000044   F9           MOV     R1,A
   \   000045   AA..         MOV     R2,?V6
   \   000047   AB..         MOV     R3,?V7
   \   000049   12....       LCALL   ?US_DIV_MOD
   \   00004C   88..         MOV     ?V2,R0
   \   00004E   89..         MOV     ?V3,R1
   \   000050   AE..         MOV     R6,?V2
   \   000052   AF..         MOV     R7,?V3
    348              if ( !num )
   \   000054   EE           MOV     A,R6
   \   000055   4F           ORL     A,R7
   \   000056   600F         JZ      ??_itoa_3
    349                break;
    350            }
   \   000058   05..         INC     ?V4
   \   00005A   A3           INC     DPTR
   \   00005B   8582..       MOV     ?V0,DPL
   \   00005E   8583..       MOV     ?V1,DPH
   \   000061   E5..         MOV     A,?V4
   \   000063   9405         SUBB    A,#0x5
   \   000065   40BA         JC      ??_itoa_0
    351          
    352            for ( c=0 ; c<=i; c++ )
   \                     ??_itoa_3:
   \   000067   7800         MOV     R0,#0x0
    353              *buf++ = *p--;  // Reverse character order
   \                     ??_itoa_4:
   \   000069   85..82       MOV     DPL,?V0
   \   00006C   85..83       MOV     DPH,?V1
   \   00006F   E0           MOVX    A,@DPTR
   \   000070   8C82         MOV     DPL,R4
   \   000072   8D83         MOV     DPH,R5
   \   000074   F0           MOVX    @DPTR,A
   \   000075   E5..         MOV     A,?V0
   \   000077   24FF         ADD     A,#-0x1
   \   000079   F5..         MOV     ?V0,A
   \   00007B   E5..         MOV     A,?V1
   \   00007D   34FF         ADDC    A,#-0x1
   \   00007F   F5..         MOV     ?V1,A
   \   000081   A3           INC     DPTR
   \   000082   AC82         MOV     R4,DPL
   \   000084   AD83         MOV     R5,DPH
   \   000086   08           INC     R0
   \   000087   E5..         MOV     A,?V4
   \   000089   C3           CLR     C
   \   00008A   98           SUBB    A,R0
   \   00008B   50DC         JNC     ??_itoa_4
    354          
    355            *buf = '\0';
   \   00008D   E4           CLR     A
   \   00008E   F0           MOVX    @DPTR,A
    356          }
   \   00008F   7405         MOV     A,#0x5
   \   000091   12....       LCALL   ?DEALLOC_XSTACK8
   \   000094   7F08         MOV     R7,#0x8
   \   000096   02....       LJMP    ?BANKED_LEAVE_XDATA
    357          
    358          /*********************************************************************
    359           * @fn        Onboard_rand
    360           *
    361           * @brief    Random number generator
    362           *
    363           * @param   none
    364           *
    365           * @return  uint16 - new random number
    366           *
    367           *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    368          uint16 Onboard_rand( void )
   \                     Onboard_rand:
    369          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    370            return ( MAC_RADIO_RANDOM_WORD() );
   \   000004                ; Setup parameters for call to function macMcuRandomWord
   \   000004   12....       LCALL   `??macMcuRandomWord::?relay`; Banked call to: macMcuRandomWord
   \   000007   02....       LJMP    ?Subroutine1 & 0xFFFF
    371          }
    372          
    373          /*********************************************************************
    374           * @fn        Onboard_wait
    375           *
    376           * @brief    Delay wait
    377           *
    378           * @param   uint16 - time to wait
    379           *
    380           * @return  none
    381           *
    382           *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    383          void Onboard_wait( uint16 timeout )
   \                     Onboard_wait:
    384          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000   8003         SJMP    ??Onboard_wait_0
    385            while (timeout--)
    386            {
    387              asm("NOP");
   \                     ??Onboard_wait_1:
   \   000002   00           NOP
    388              asm("NOP");
   \   000003   00           NOP
    389              asm("NOP");
   \   000004   00           NOP
    390            }
   \                     ??Onboard_wait_0:
   \   000005   EA           MOV     A,R2
   \   000006   F8           MOV     R0,A
   \   000007   EB           MOV     A,R3
   \   000008   F9           MOV     R1,A
   \   000009   E8           MOV     A,R0
   \   00000A   24FF         ADD     A,#-0x1
   \   00000C   1A           DEC     R2
   \   00000D   E9           MOV     A,R1
   \   00000E   34FF         ADDC    A,#-0x1
   \   000010   FB           MOV     R3,A
   \   000011   E8           MOV     A,R0
   \   000012   49           ORL     A,R1
   \   000013   70ED         JNZ     ??Onboard_wait_1
    391          }
   \   000015   02....       LJMP    ?BRET
    392          
    393          /*********************************************************************
    394           *                    EXTERNAL I/O FUNCTIONS
    395           *
    396           * User defined functions to control external devices. Add your code
    397           * to the following functions to control devices wired to DB outputs.
    398           *
    399           *********************************************************************/
    400          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    401          void BigLight_On( void )
   \                     BigLight_On:
    402          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    403            // Put code here to turn on an external light
    404          }
   \   000000   02....       LJMP    ?BRET
    405          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    406          void BigLight_Off( void )
   \                     BigLight_Off:
    407          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    408            // Put code here to turn off an external light
    409          }
   \   000000   02....       LJMP    ?BRET
    410          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    411          void BuzzerControl( uint8 on )
   \                     BuzzerControl:
    412          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    413            // Put code here to turn a buzzer on/off
    414            (void)on;
    415          }
   \   000000   02....       LJMP    ?BRET
    416          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    417          void Dimmer( uint8 lvl )
   \                     Dimmer:
    418          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    419            // Put code here to control a dimmer
    420            (void)lvl;
    421          }
   \   000000   02....       LJMP    ?BRET
    422          
    423          // No dip switches on this board

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    424          uint8 GetUserDipSw( void )
   \                     GetUserDipSw:
    425          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    426            return 0;
   \   000000   7900         MOV     R1,#0x0
   \   000002   02....       LJMP    ?BRET
    427          }

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for registeredKeysTaskID>`:
   \   000000   FF           DB 255

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??InitBoard::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    InitBoard

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??RegisterForKeys::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    RegisterForKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??OnBoard_SendKeys::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    OnBoard_SendKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??OnBoard_KeyCallback::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    OnBoard_KeyCallback

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??OnBoard_stack_used::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    OnBoard_stack_used

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??_itoa::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    _itoa

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??Onboard_rand::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Onboard_rand

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??Onboard_wait::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Onboard_wait

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??BigLight_On::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    BigLight_On

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??BigLight_Off::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    BigLight_Off

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??BuzzerControl::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    BuzzerControl

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??Dimmer::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Dimmer

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??GetUserDipSw::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    GetUserDipSw
    428          
    429          /*********************************************************************
    430          *********************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0      0   BigLight_Off
      0      0   BigLight_On
      0      0   BuzzerControl
      0      0   Dimmer
      0      0   GetUserDipSw
      0      9   InitBoard
        0      9   -> HalKeyConfig
        0      9   -> HalLedSet
        0      9   -> Onboard_wait
        0      9   -> osal_int_disable
      0      9   OnBoard_KeyCallback
        0      9   -> OnBoard_SendKeys
      1     19   OnBoard_SendKeys
        0     10   -> osal_msg_allocate
        0     10   -> osal_msg_send
      2      0   OnBoard_stack_used
      2      0   Onboard_rand
        2      0   -> macMcuRandomWord
      0      9   Onboard_wait
      2      0   RegisterForKeys
      1     21   _itoa


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       1  ?<Initializer for registeredKeysTaskID>
       5  ?Subroutine0
       7  ?Subroutine1
       3  BigLight_Off
       6  BigLight_Off::?relay
       3  BigLight_On
       6  BigLight_On::?relay
       3  BuzzerControl
       6  BuzzerControl::?relay
       3  Dimmer
       6  Dimmer::?relay
       5  GetUserDipSw
       6  GetUserDipSw::?relay
     105  InitBoard
       6  InitBoard::?relay
      16  OnBoard_KeyCallback
       6  OnBoard_KeyCallback::?relay
      66  OnBoard_SendKeys
       6  OnBoard_SendKeys::?relay
      82  OnBoard_stack_used
       6  OnBoard_stack_used::?relay
       1  OnboardKeyIntEnable
      10  Onboard_rand
       6  Onboard_rand::?relay
      24  Onboard_wait
       6  Onboard_wait::?relay
      21  RegisterForKeys
       6  RegisterForKeys::?relay
       1  SLEEPSTA
       1  _A_IEN0
     153  _itoa
       6  _itoa::?relay
       8  aExtendedAddress
       1  registeredKeysTaskID

 
 506 bytes in segment BANKED_CODE
  78 bytes in segment BANK_RELAYS
   2 bytes in segment SFR_AN
   1 byte  in segment XDATA_I
   1 byte  in segment XDATA_ID
   9 bytes in segment XDATA_Z
 
 585 bytes of CODE  memory
   0 bytes of DATA  memory (+ 2 bytes shared)
  10 bytes of XDATA memory

Errors: none
Warnings: none
