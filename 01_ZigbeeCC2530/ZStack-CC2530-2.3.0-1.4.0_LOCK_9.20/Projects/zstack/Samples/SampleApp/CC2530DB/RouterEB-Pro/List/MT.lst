###############################################################################
#
# IAR C/C++ Compiler V9.20.1.2476 for 8051                26/May/2017  16:13:07
# Copyright 2004-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Components\mt\MT.c
#    Command line       =  
#        -f
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wRouter.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DRTR_NWK -DBLINK_LEDS) -f
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_POLLED=3000
#        -DNWK_INDIRECT_MSG_TIMEOUT=7 -DMAX_RREQ_ENTRIES=8
#        -DAPSC_MAX_FRAME_RETRIES=3 -DNWK_MAX_DATA_RETRIES=2
#        -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9 -DAPS_MAX_GROUPS=16
#        -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000
#        -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
#        -DREJOIN_POLL_RATE=440
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Components\mt\MT.c -D ZIGBEEPRO -D
#        ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC -D
#        LCD_SUPPORTED=DEBUG -lC
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\RouterEB-Pro\List\
#        -lA
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\RouterEB-Pro\List\
#        --diag_suppress Pe001,Pa010 -o
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\RouterEB-Pro\Obj\
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 8 -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\SOURCE\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\ZMAIN\TI2530DB\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MT\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\INCLUDE\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\TARGET\CC2530EB\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\MCU\CCSOC\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\INCLUDE\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\AF\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\NWK\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SEC\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SAPI\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SYS\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\ZDO\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\F8W\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES\SADDR\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES\SDATA\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\INCLUDE\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\HIGH_LEVEL\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\
#        -Ohz --require_prototypes
#    List file          =  
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\RouterEB-Pro\List\MT.lst
#    Object file        =  
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\RouterEB-Pro\Obj\MT.r51
#
###############################################################################

D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Components\mt\MT.c
      1          /***************************************************************************************************
      2            Filename:       MTEL.c
      3            Revised:        $Date: 2009-10-28 00:05:19 -0700 (Wed, 28 Oct 2009) $
      4            Revision:       $Revision: 20998 $
      5          
      6            Description:    MonitorTest Event Loop functions.  Everything in the
      7                            MonitorTest Task (except the serial driver).
      8          
      9            Copyright 2007 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          
     39           ***************************************************************************************************/
     40          
     41          
     42          /***************************************************************************************************
     43           * INCLUDES
     44           ***************************************************************************************************/
     45          #include "ZComDef.h"
     46          #include "MT.h"
     47          #include "MT_APP.h"
     48          #include "MT_DEBUG.h"
     49          #include "MT_UTIL.h"
     50          #include "MT_SYS.h"
     51          #include "MT_SAPI.h"
     52          #include "AF.h"
     53          
     54          #include "OnBoard.h"
     55          #include "OSAL.h"
     56          #include "OSAL_Memory.h"
     57          #include "OSAL_Nv.h"
     58          
     59          #include "DebugTrace.h"
     60          #include "ZMAC.h"
     61          
     62          #if !defined ( NONWK )
     63            #include "NLMEDE.h"
     64            #include "nwk_bufs.h"
     65            #include "ZDObject.h"
     66            #include "ssp.h"
     67            #include "nwk_util.h"
     68          #endif
     69          
     70          #if defined( MT_MAC_FUNC ) || defined( MT_MAC_CB_FUNC )
     71            #include "MT_MAC.h"
     72          #endif
     73          #if defined( MT_NWK_FUNC ) || defined( MT_NWK_CB_FUNC )
     74            #include "MT_NWK.h"
     75            #include "nwk.h"
     76            #include "nwk_bufs.h"
     77          #endif
     78          #if defined( MT_AF_FUNC ) || defined( MT_AF_CB_FUNC )
     79            #include "MT_AF.h"
     80          #endif
     81          #if defined( MT_USER_TEST_FUNC )
     82            #include "AF.h"
     83          #endif
     84          #if defined( MT_ZDO_FUNC )
     85            #include "MT_ZDO.h"
     86          #endif
     87          #if defined (MT_SAPI_FUNC)
     88          	#include "MT_SAPI.h"
     89          #endif
     90          #if defined( APP_TP )
     91           #include "TestProfile.h"
     92          #endif
     93          #if defined( APP_TP2 )
     94           #include "TestProfile2.h"
     95          #endif
     96          
     97          #if defined(APP_TGEN)
     98            #include "TrafficGenApp.h"
     99          #endif
    100          #if defined(APP_DEBUG)
    101          	#include "DebugApp.h"
    102          #endif
    103          #if defined (NWK_TEST)
    104          	#include "HWTTApp.h"
    105          #endif
    106          
    107          /* HAL */
    108          #include "hal_uart.h"
    109          #include "hal_led.h"
    110          #include "hal_key.h"
    111          #include "MT_UART.h"
    112          
    113          /***************************************************************************************************
    114           * MACROS
    115           ***************************************************************************************************/
    116          #define MTEL_DEBUG_INFO( nParams, p1, p2, p3 ) DEBUG_INFO( COMPID_MTEL, nParams, p1, p2, p3 )
    117          
    118          #define MT_ERROR_SRSP_LEN   3
    119          
    120          /***************************************************************************************************
    121           * CONSTANTS
    122           ***************************************************************************************************/

   \                                 In  segment XDATA_I, align 1, keep-with-next
    123          mtProcessMsg_t mtProcessIncoming[] =
   \                     mtProcessIncoming:
   \   000000                DS 20
   \   000014                REQUIRE `?<Initializer for mtProcessIncoming>`
   \   000014                REQUIRE __INIT_XDATA_I
    124          {
    125            NULL,
    126          
    127          #if defined (MT_SYS_FUNC)
    128            MT_SysCommandProcessing,
    129          #else
    130            NULL,
    131          #endif
    132          
    133          #if defined (MT_MAC_FUNC)
    134            MT_MacCommandProcessing,
    135          #else
    136            NULL,
    137          #endif
    138          
    139          #if defined (MT_NWK_FUNC)
    140            MT_NwkCommandProcessing,
    141          #else
    142            NULL,
    143          #endif
    144          
    145          #if defined (MT_AF_FUNC)
    146            MT_AfCommandProcessing,
    147          #else
    148            NULL,
    149          #endif
    150          
    151          #if defined (MT_ZDO_FUNC)
    152            MT_ZdoCommandProcessing,
    153          #else
    154            NULL,
    155          #endif
    156          
    157          #if defined (MT_SAPI_FUNC)
    158            MT_SapiCommandProcessing,
    159          #else
    160            NULL,
    161          #endif
    162          
    163          #if defined (MT_UTIL_FUNC)
    164            MT_UtilCommandProcessing,
    165          #else
    166            NULL,
    167          #endif
    168          
    169          #if defined (MT_DEBUG_FUNC)
    170            MT_DebugCommandProcessing,
    171          #else
    172            NULL,
    173          #endif
    174          
    175          #if defined (MT_APP_FUNC)
    176            MT_AppCommandProcessing,
    177          #else
    178            NULL,
    179          #endif
    180          
    181          };
    182          
    183          /***************************************************************************************************
    184           * TYPEDEFS
    185           ***************************************************************************************************/
    186          
    187          /***************************************************************************************************
    188           * GLOBAL VARIABLES
    189           ***************************************************************************************************/

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    190          UINT16 save_cmd;
   \                     save_cmd:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    191          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    192          byte MT_TaskID;
   \                     MT_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    193          byte debugThreshold;
   \                     debugThreshold:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    194          byte debugCompId;
   \                     debugCompId:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    195          
    196          /***************************************************************************************************
    197           * EXTERNAL FUNCTIONS
    198           ***************************************************************************************************/
    199          extern unsigned int mac_sim_eventLoop( void );
    200          
    201          #ifdef MACSIM
    202          extern void MACSIM_TranslateMsg( byte *buf, byte bLen );  /*  Used to pass Zignet message */
    203          #endif
    204          
    205          
    206          /***************************************************************************************************
    207           * LOCAL VARIABLES
    208           ***************************************************************************************************/
    209          
    210          /***************************************************************************************************
    211           * LOCAL FUNCTIONS
    212           ***************************************************************************************************/
    213          void MT_MsgQueueInit( void );
    214          void MT_ResetMsgQueue( void );
    215          byte MT_QueueMsg( byte *msg , byte len );
    216          void MT_ProcessQueue( void );
    217          
    218          #if defined ( MT_USER_TEST_FUNC )
    219          void MT_ProcessAppUserCmd( byte *pData );
    220          #endif
    221          
    222          /***************************************************************************************************
    223           * @fn      MT_Init()
    224           *
    225           * @brief   Initialize MT.
    226           *
    227           * @param   uint8 taskId - taskId
    228           *
    229           * @return  void
    230           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    231          void MT_Init(uint8 taskID)
   \                     MT_Init:
    232          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
    233            MT_TaskID = taskID;
   \   000006   90....       MOV     DPTR,#MT_TaskID
   \   000009   F0           MOVX    @DPTR,A
    234            debugThreshold = 0;
   \   00000A   90....       MOV     DPTR,#debugThreshold
   \   00000D   E4           CLR     A
   \   00000E   F0           MOVX    @DPTR,A
    235            debugCompId = 0;
   \   00000F   90....       MOV     DPTR,#debugCompId
   \   000012   F0           MOVX    @DPTR,A
    236            
    237          #if defined (MT_ZDO_FUNC)
    238            MT_ZdoInit();
   \   000013                ; Setup parameters for call to function MT_ZdoInit
   \   000013   12....       LCALL   `??MT_ZdoInit::?relay`; Banked call to: MT_ZdoInit
    239          #endif
    240            MT_SysResetInd();
   \   000016                ; Setup parameters for call to function MT_SysResetInd
   \   000016   12....       LCALL   `??MT_SysResetInd::?relay`; Banked call to: MT_SysResetInd
    241          }
   \   000019                REQUIRE ?Subroutine0
   \   000019                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    242          
    243          /***************************************************************************************************
    244           * @fn      MT_BuildSPIMsg
    245           *
    246           * @brief
    247           *
    248           *   Format an SPI message.
    249           *
    250           * @param   UINT16 cmd - command id
    251           * @param   byte *msg - pointer to message buffer
    252           * @param   byte dataLen - length of data field
    253           * @param   byte *pData - pointer to data field
    254           *
    255           * @return  void
    256           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    257          void MT_BuildSPIMsg( uint8 cmdType, uint8 cmdId, byte *msg, byte dataLen, byte *pData )
   \                     MT_BuildSPIMsg:
    258          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FF           MOV     R7,A
   \   000007   8C..         MOV     ?V4,R4
   \   000009   8D..         MOV     ?V5,R5
   \   00000B   EB           MOV     A,R3
   \   00000C   FE           MOV     R6,A
    259            /* Fill in the CMD and Data Length */
    260            *msg++ = dataLen;
   \   00000D   8C82         MOV     DPL,R4
   \   00000F   8D83         MOV     DPH,R5
   \   000011   F0           MOVX    @DPTR,A
    261            *msg++ = cmdType;
   \   000012   A3           INC     DPTR
   \   000013   E9           MOV     A,R1
   \   000014   F0           MOVX    @DPTR,A
    262            *msg++ = cmdId;
   \   000015   EF           MOV     A,R7
   \   000016   8C82         MOV     DPL,R4
   \   000018   8D83         MOV     DPH,R5
   \   00001A   A3           INC     DPTR
   \   00001B   A3           INC     DPTR
   \   00001C   F0           MOVX    @DPTR,A
   \   00001D   740E         MOV     A,#0xe
   \   00001F   12....       LCALL   ?XSTACK_DISP0_8
   \   000022   E0           MOVX    A,@DPTR
   \   000023   F5..         MOV     ?V0,A
   \   000025   A3           INC     DPTR
   \   000026   E0           MOVX    A,@DPTR
   \   000027   F5..         MOV     ?V1,A
    263          
    264            /* Fill in the data */
    265            if ( pData )
   \   000029   E5..         MOV     A,?V0
   \   00002B   45..         ORL     A,?V1
   \   00002D   601D         JZ      ??MT_BuildSPIMsg_0
    266            {
    267              osal_memcpy( msg, pData, dataLen );
   \   00002F                ; Setup parameters for call to function osal_memcpy
   \   00002F   75..00       MOV     ?V2,#0x0
   \   000032   78..         MOV     R0,#?V0
   \   000034   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000037   EE           MOV     A,R6
   \   000038   FC           MOV     R4,A
   \   000039   7D00         MOV     R5,#0x0
   \   00003B   E5..         MOV     A,?V4
   \   00003D   2403         ADD     A,#0x3
   \   00003F   FA           MOV     R2,A
   \   000040   E4           CLR     A
   \   000041   35..         ADDC    A,?V5
   \   000043   FB           MOV     R3,A
   \   000044   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000047   7403         MOV     A,#0x3
   \   000049   12....       LCALL   ?DEALLOC_XSTACK8
    268            }
    269          }
   \                     ??MT_BuildSPIMsg_0:
   \   00004C                REQUIRE ?Subroutine1
   \   00004C                ; // Fall through to label ?Subroutine1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F06         MOV     R7,#0x6
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    270          
    271          /***************************************************************************************************
    272           * @fn      MT_BuildAndSendZToolResponse
    273           *
    274           * @brief   Build and send a ZTOOL msg
    275           * @param   uint8 cmdType - include type and subsystem
    276           *          uint8 cmdId - command ID
    277           *          byte dataLen
    278           *          byte *pData
    279           *
    280           * @return  void
    281           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    282          void MT_BuildAndSendZToolResponse(uint8 cmdType, uint8 cmdId, uint8 dataLen, uint8 *pData)
   \                     MT_BuildAndSendZToolResponse:
    283          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FF           MOV     R7,A
   \   000007   8A..         MOV     ?V0,R2
   \   000009   EB           MOV     A,R3
   \   00000A   FE           MOV     R6,A
   \   00000B   8C..         MOV     ?V6,R4
   \   00000D   8D..         MOV     ?V7,R5
    284            uint8 *msg_ptr;
    285          
    286            /* Allocate memory including SOP and FCS */
    287            msg_ptr = MT_TransportAlloc((mtRpcCmdType_t)(cmdType & 0xE0), dataLen);
   \   00000F                ; Setup parameters for call to function MT_TransportAlloc
   \   00000F   FA           MOV     R2,A
   \   000010   74E0         MOV     A,#-0x20
   \   000012   5F           ANL     A,R7
   \   000013   F9           MOV     R1,A
   \   000014   12....       LCALL   `??MT_TransportAlloc::?relay`; Banked call to: MT_TransportAlloc
   \   000017   8A..         MOV     ?V4,R2
   \   000019   8B..         MOV     ?V5,R3
    288          
    289            if (msg_ptr)
   \   00001B   EA           MOV     A,R2
   \   00001C   45..         ORL     A,?V5
   \   00001E   6024         JZ      ??MT_BuildAndSendZToolResponse_0
    290            {
    291              /* Build the message */
    292              MT_BuildSPIMsg(cmdType, cmdId, msg_ptr, dataLen, pData);
   \   000020                ; Setup parameters for call to function MT_BuildSPIMsg
   \   000020   85....       MOV     ?V2,?V6
   \   000023   85....       MOV     ?V3,?V7
   \   000026   78..         MOV     R0,#?V2
   \   000028   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002B   EE           MOV     A,R6
   \   00002C   FB           MOV     R3,A
   \   00002D   AC..         MOV     R4,?V4
   \   00002F   AD..         MOV     R5,?V5
   \   000031   AA..         MOV     R2,?V0
   \   000033   EF           MOV     A,R7
   \   000034   F9           MOV     R1,A
   \   000035   12....       LCALL   `??MT_BuildSPIMsg::?relay`; Banked call to: MT_BuildSPIMsg
   \   000038   7402         MOV     A,#0x2
   \   00003A   12....       LCALL   ?DEALLOC_XSTACK8
    293              /* Send out the msg */
    294              MT_TransportSend(msg_ptr);
   \   00003D                ; Setup parameters for call to function MT_TransportSend
   \   00003D   AA..         MOV     R2,?V4
   \   00003F   AB..         MOV     R3,?V5
   \   000041   12....       LCALL   `??MT_TransportSend::?relay`; Banked call to: MT_TransportSend
    295            }
    296          }
   \                     ??MT_BuildAndSendZToolResponse_0:
   \   000044   7F08         MOV     R7,#0x8
   \   000046   02....       LJMP    ?BANKED_LEAVE_XDATA
    297          
    298          /***************************************************************************************************
    299           * @fn      MT_ProcessIncoming
    300           *
    301           * @brief  Process Incoming Message.
    302           *
    303           * @param   byte *pBuf - pointer to event message
    304           *
    305           * @return  void
    306           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    307          void MT_ProcessIncoming(uint8 *pBuf)
   \                     MT_ProcessIncoming:
    308          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 3
   \   000004   74FD         MOV     A,#-0x3
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
    309            mtProcessMsg_t  func;
    310            uint8           rsp[MT_ERROR_SRSP_LEN];
    311          
    312            /* pre-build response message:  | status | cmd0 | cmd1 | */
    313            rsp[1] = pBuf[MT_RPC_POS_CMD0];
   \   000009   8A82         MOV     DPL,R2
   \   00000B   8B83         MOV     DPH,R3
   \   00000D   A3           INC     DPTR
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   F8           MOV     R0,A
   \   000010   7401         MOV     A,#0x1
   \   000012   12....       LCALL   ?XSTACK_DISP0_8
   \   000015   E8           MOV     A,R0
   \   000016   F0           MOVX    @DPTR,A
    314            rsp[2] = pBuf[MT_RPC_POS_CMD1];
   \   000017   8A82         MOV     DPL,R2
   \   000019   8B83         MOV     DPH,R3
   \   00001B   A3           INC     DPTR
   \   00001C   A3           INC     DPTR
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   C0E0         PUSH    A
   \   000020   7402         MOV     A,#0x2
   \   000022   12....       LCALL   ?XSTACK_DISP0_8
   \   000025   D0E0         POP     A
   \   000027   F0           MOVX    @DPTR,A
    315          
    316            /* check length */
    317            if (pBuf[MT_RPC_POS_LEN] > MT_RPC_DATA_MAX)
   \   000028   8A82         MOV     DPL,R2
   \   00002A   8B83         MOV     DPH,R3
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   C3           CLR     C
   \   00002E   94FE         SUBB    A,#-0x2
   \   000030   400A         JC      ??MT_ProcessIncoming_0
    318            {
    319              rsp[0] = MT_RPC_ERR_LENGTH;
   \   000032   85..82       MOV     DPL,?XSP + 0
   \   000035   85..83       MOV     DPH,?XSP + 1
   \   000038   7404         MOV     A,#0x4
   \   00003A   8038         SJMP    ??MT_ProcessIncoming_1
    320            }
    321            /* check subsystem range */
    322            else if ((rsp[1] & MT_RPC_SUBSYSTEM_MASK) < MT_RPC_SYS_MAX)
   \                     ??MT_ProcessIncoming_0:
   \   00003C   741F         MOV     A,#0x1f
   \   00003E   58           ANL     A,R0
   \   00003F   C3           CLR     C
   \   000040   940A         SUBB    A,#0xa
   \   000042   5028         JNC     ??MT_ProcessIncoming_2
    323            {
    324              /* look up processing function */
    325              func = mtProcessIncoming[rsp[1] & MT_RPC_SUBSYSTEM_MASK];
   \   000044   E8           MOV     A,R0
   \   000045   541F         ANL     A,#0x1f
   \   000047   25E0         ADD     A,0xE0 /* A   */
   \   000049   F8           MOV     R0,A
   \   00004A   74..         MOV     A,#mtProcessIncoming & 0xff
   \   00004C   28           ADD     A,R0
   \   00004D   F582         MOV     DPL,A
   \   00004F   E4           CLR     A
   \   000050   34..         ADDC    A,#(mtProcessIncoming >> 8) & 0xff
   \   000052   F583         MOV     DPH,A
   \   000054   12....       LCALL   ?Subroutine10 & 0xFFFF
    326              if (func)
   \                     ??CrossCallReturnLabel_16:
   \   000057   E582         MOV     A,DPL
   \   000059   4583         ORL     A,DPH
   \   00005B   600F         JZ      ??MT_ProcessIncoming_2
    327              {
    328                /* execute processing function */
    329                rsp[0] = (*func)(pBuf);
   \   00005D                ; Setup parameters for indirect call
   \   00005D   12....       LCALL   ?CALL_IND
   \   000060   E9           MOV     A,R1
   \   000061   85..82       MOV     DPL,?XSP + 0
   \   000064   85..83       MOV     DPH,?XSP + 1
   \   000067   F0           MOVX    @DPTR,A
    330              }
    331              else
    332              {
    333                rsp[0] = MT_RPC_ERR_SUBSYSTEM;
    334              }
    335            }
    336            else
    337            {
    338              rsp[0] = MT_RPC_ERR_SUBSYSTEM;
    339            }
    340          
    341            /* if error and this was an SREQ, send error message */
    342            if ((rsp[0] != MT_RPC_SUCCESS) && ((rsp[1] & MT_RPC_CMD_TYPE_MASK) == MT_RPC_CMD_SREQ))
   \   000068   700B         JNZ     ??MT_ProcessIncoming_3
   \   00006A   8022         SJMP    ??MT_ProcessIncoming_4
   \                     ??MT_ProcessIncoming_2:
   \   00006C   85..82       MOV     DPL,?XSP + 0
   \   00006F   85..83       MOV     DPH,?XSP + 1
   \   000072   7401         MOV     A,#0x1
   \                     ??MT_ProcessIncoming_1:
   \   000074   F0           MOVX    @DPTR,A
   \                     ??MT_ProcessIncoming_3:
   \   000075   7401         MOV     A,#0x1
   \   000077   12....       LCALL   ?XSTACK_DISP0_8
   \   00007A   E0           MOVX    A,@DPTR
   \   00007B   54E0         ANL     A,#0xe0
   \   00007D   6420         XRL     A,#0x20
   \   00007F   700D         JNZ     ??MT_ProcessIncoming_4
    343            {
    344              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_RES0), 0, MT_ERROR_SRSP_LEN, rsp);
   \   000081                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000081   AC..         MOV     R4,?XSP + 0
   \   000083   AD..         MOV     R5,?XSP + 1
   \   000085   7B03         MOV     R3,#0x3
   \   000087   7A00         MOV     R2,#0x0
   \   000089   7960         MOV     R1,#0x60
   \   00008B   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    345            }
    346          }
   \                     ??MT_ProcessIncoming_4:
   \   00008E   7403         MOV     A,#0x3
   \   000090   12....       LCALL   ?DEALLOC_XSTACK8
   \   000093   D083         POP     DPH
   \   000095   D082         POP     DPL
   \   000097   02....       LJMP    ?BRET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   8882         MOV     DPL,R0
   \   000007   8983         MOV     DPH,R1
   \   000009   22           RET
    347          
    348          
    349          /***************************************************************************************************
    350           * @fn      MTProcessAppRspMsg
    351           *
    352           * @brief   Process the User App Response Message
    353           *
    354           * @param   data - output serial buffer.  The first byte must be the
    355           *          endpoint that send this message.
    356           * @param   len - data length
    357           *
    358           * @return  none
    359           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    360          void MTProcessAppRspMsg( byte *pData, byte len )
   \                     MTProcessAppRspMsg:
    361          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FC           MOV     R4,A
   \   000007   EB           MOV     A,R3
   \   000008   FD           MOV     R5,A
   \   000009   E9           MOV     A,R1
    362            /* Send out Reset Response message */
    363            MT_BuildAndSendZToolResponse( ((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_APP), MT_APP_RSP, len, pData );
   \   00000A                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00000A   FB           MOV     R3,A
   \   00000B   7A80         MOV     R2,#-0x80
   \   00000D   7969         MOV     R1,#0x69
   \   00000F   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    364          }
   \   000012   02....       LJMP    ?Subroutine0 & 0xFFFF
    365          
    366          
    367          /***************************************************************************************************
    368           * @fn      MT_ReverseBytes
    369           *
    370           * @brief
    371           *
    372           *   Reverses bytes within an array
    373           *
    374           * @param   data - ptr to data buffer to reverse
    375           * @param    len - number of bytes in buffer
    376           *
    377           * @return  void
    378           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    379          void MT_ReverseBytes( byte *pData, byte len )
   \                     MT_ReverseBytes:
    380          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    381            byte i,j;
    382            byte temp;
    383          
    384            for ( i = 0, j = len-1; len > 1; len-=2 )
   \   000007   7F00         MOV     R7,#0x0
   \   000009   74FF         MOV     A,#-0x1
   \   00000B   29           ADD     A,R1
   \   00000C   F5..         MOV     ?V0,A
   \   00000E   8031         SJMP    ??MT_ReverseBytes_0
    385            {
    386              temp = pData[i];
   \                     ??MT_ReverseBytes_1:
   \   000010   EF           MOV     A,R7
   \   000011   F8           MOV     R0,A
   \   000012   EA           MOV     A,R2
   \   000013   28           ADD     A,R0
   \   000014   F8           MOV     R0,A
   \   000015   E4           CLR     A
   \   000016   3B           ADDC    A,R3
   \   000017   F9           MOV     R1,A
   \   000018   E8           MOV     A,R0
   \   000019   FC           MOV     R4,A
   \   00001A   E9           MOV     A,R1
   \   00001B   FD           MOV     R5,A
   \   00001C   8C82         MOV     DPL,R4
   \   00001E   8D83         MOV     DPH,R5
   \   000020   E0           MOVX    A,@DPTR
   \   000021   F5..         MOV     ?V1,A
    387              pData[i++] = pData[j];
   \   000023   A8..         MOV     R0,?V0
   \   000025   EA           MOV     A,R2
   \   000026   28           ADD     A,R0
   \   000027   F8           MOV     R0,A
   \   000028   E4           CLR     A
   \   000029   3B           ADDC    A,R3
   \   00002A   F9           MOV     R1,A
   \   00002B   8882         MOV     DPL,R0
   \   00002D   8983         MOV     DPH,R1
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   8C82         MOV     DPL,R4
   \   000032   8D83         MOV     DPH,R5
   \   000034   F0           MOVX    @DPTR,A
   \   000035   0F           INC     R7
    388              pData[j--] = temp;
   \   000036   8882         MOV     DPL,R0
   \   000038   8983         MOV     DPH,R1
   \   00003A   E5..         MOV     A,?V1
   \   00003C   F0           MOVX    @DPTR,A
   \   00003D   15..         DEC     ?V0
    389            }
   \   00003F   1E           DEC     R6
   \   000040   1E           DEC     R6
   \                     ??MT_ReverseBytes_0:
   \   000041   EE           MOV     A,R6
   \   000042   C3           CLR     C
   \   000043   9402         SUBB    A,#0x2
   \   000045   50C9         JNC     ??MT_ReverseBytes_1
    390          }
   \   000047   7F03         MOV     R7,#0x3
   \   000049   02....       LJMP    ?BANKED_LEAVE_XDATA
    391          
    392          
    393          /***************************************************************************************************
    394           * @fn      MT_Word2Buf
    395           *
    396           * @brief   Copy a uint16 array to a byte array, little endian.
    397           *
    398           * @param   pBuf - byte array
    399           * @param   pWord - uint16 array
    400           * @param   len - length of uint16 array
    401           *
    402           * @return  pointer to end of byte array
    403           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    404          uint8 *MT_Word2Buf( uint8 *pBuf, uint16 *pWord, uint8 len )
   \                     MT_Word2Buf:
    405          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   8024         SJMP    ??MT_Word2Buf_0
    406            while ( len-- > 0 )
    407            {
    408              *pBuf++ = LO_UINT16( *pWord );
   \                     ??MT_Word2Buf_1:
   \   000007   8C82         MOV     DPL,R4
   \   000009   8D83         MOV     DPH,R5
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   8A82         MOV     DPL,R2
   \   00000E   8B83         MOV     DPH,R3
   \   000010   F0           MOVX    @DPTR,A
    409              *pBuf++ = HI_UINT16( *pWord );
   \   000011   8C82         MOV     DPL,R4
   \   000013   8D83         MOV     DPH,R5
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \   000017   8A82         MOV     DPL,R2
   \   000019   8B83         MOV     DPH,R3
   \   00001B   A3           INC     DPTR
   \   00001C   F0           MOVX    @DPTR,A
   \   00001D   EA           MOV     A,R2
   \   00001E   2402         ADD     A,#0x2
   \   000020   FA           MOV     R2,A
   \   000021   5001         JNC     ??MT_Word2Buf_2
   \   000023   0B           INC     R3
    410              pWord++;
   \                     ??MT_Word2Buf_2:
   \   000024   EC           MOV     A,R4
   \   000025   2402         ADD     A,#0x2
   \   000027   FC           MOV     R4,A
   \   000028   5001         JNC     ??MT_Word2Buf_0
   \   00002A   0D           INC     R5
    411            }
   \                     ??MT_Word2Buf_0:
   \   00002B   E9           MOV     A,R1
   \   00002C   F8           MOV     R0,A
   \   00002D   74FF         MOV     A,#-0x1
   \   00002F   28           ADD     A,R0
   \   000030   F9           MOV     R1,A
   \   000031   04           INC     A
   \   000032   70D3         JNZ     ??MT_Word2Buf_1
    412          
    413            return pBuf;
   \   000034   02....       LJMP    ?Subroutine0 & 0xFFFF
    414          }
    415          /***************************************************************************************************
    416           * @fn      MT_BuildEndpointDesc
    417           *
    418           * @brief   Build endpoint descriptor and simple descriptor structure from incoming buffer
    419           *
    420           * @param   pBuf - byte array
    421           *
    422           * @return  epDesc - pointer to the endpoint descriptor
    423           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    424          uint8 MT_BuildEndpointDesc( uint8 *pBuf, void *param )
   \                     MT_BuildEndpointDesc:
    425          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V0,R4
   \   00000B   8D..         MOV     ?V1,R5
    426            uint8 i;
    427            uint8 ret = ZSuccess;
   \   00000D   75..00       MOV     ?V2,#0x0
    428            endPointDesc_t *epDesc;
    429          
    430            epDesc = (endPointDesc_t *)param;
    431            /* check if this endpoint is already registered */
    432            if ( afFindEndPointDesc( *pBuf ) != NULL )
   \   000010                ; Setup parameters for call to function afFindEndPointDesc
   \   000010   8E82         MOV     DPL,R6
   \   000012   8F83         MOV     DPH,R7
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F9           MOV     R1,A
   \   000016   12....       LCALL   `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
   \   000019   8B..         MOV     ?V5,R3
   \   00001B   EA           MOV     A,R2
   \   00001C   45..         ORL     A,?V5
   \   00001E   6006         JZ      ??MT_BuildEndpointDesc_0
    433            {
    434              ret = ZApsDuplicateEntry;
   \   000020   75..B8       MOV     ?V2,#-0x48
   \   000023   02....       LJMP    ??MT_BuildEndpointDesc_1 & 0xFFFF
    435            }
    436            else if ( epDesc )
   \                     ??MT_BuildEndpointDesc_0:
   \   000026   E5..         MOV     A,?V0
   \   000028   45..         ORL     A,?V1
   \   00002A   7003         JNZ     $+5
   \   00002C   02....       LJMP    ??MT_BuildEndpointDesc_1 & 0xFFFF
    437            {
    438              epDesc->endPoint = *pBuf;
   \   00002F   8E82         MOV     DPL,R6
   \   000031   8F83         MOV     DPH,R7
   \   000033   E0           MOVX    A,@DPTR
   \   000034   85..82       MOV     DPL,?V0
   \   000037   85..83       MOV     DPH,?V1
   \   00003A   F0           MOVX    @DPTR,A
    439          
    440              /* Ignore the latency reqs */
    441              epDesc->latencyReq = noLatencyReqs;
   \   00003B   A3           INC     DPTR
   \   00003C   A3           INC     DPTR
   \   00003D   A3           INC     DPTR
   \   00003E   A3           INC     DPTR
   \   00003F   A3           INC     DPTR
   \   000040   E4           CLR     A
   \   000041   F0           MOVX    @DPTR,A
    442          
    443              /* allocate memory for the simple descriptor */
    444              epDesc->simpleDesc = (SimpleDescriptionFormat_t *) osal_mem_alloc(sizeof(SimpleDescriptionFormat_t));
   \   000042                ; Setup parameters for call to function osal_mem_alloc
   \   000042   7A0C         MOV     R2,#0xc
   \   000044   FB           MOV     R3,A
   \   000045   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000048   8A..         MOV     ?V4,R2
   \   00004A   8B..         MOV     ?V5,R3
   \   00004C   A8..         MOV     R0,?V4
   \   00004E   A9..         MOV     R1,?V5
   \   000050   E5..         MOV     A,?V0
   \   000052   2403         ADD     A,#0x3
   \   000054   F5..         MOV     ?V0,A
   \   000056   5002         JNC     ??MT_BuildEndpointDesc_2
   \   000058   05..         INC     ?V1
   \                     ??MT_BuildEndpointDesc_2:
   \   00005A   F582         MOV     DPL,A
   \   00005C   85..83       MOV     DPH,?V1
   \   00005F   E8           MOV     A,R0
   \   000060   F0           MOVX    @DPTR,A
   \   000061   A3           INC     DPTR
   \   000062   E9           MOV     A,R1
   \   000063   F0           MOVX    @DPTR,A
    445              if (epDesc->simpleDesc)
   \   000064   E8           MOV     A,R0
   \   000065   49           ORL     A,R1
   \   000066   7003         JNZ     $+5
   \   000068   02....       LJMP    ??MT_BuildEndpointDesc_3 & 0xFFFF
    446              {
    447                /* Endpoint */
    448                epDesc->simpleDesc->EndPoint = *pBuf++;
   \   00006B   8E82         MOV     DPL,R6
   \   00006D   8F83         MOV     DPH,R7
   \   00006F   E0           MOVX    A,@DPTR
   \   000070   8882         MOV     DPL,R0
   \   000072   8983         MOV     DPH,R1
   \   000074   12....       LCALL   ?Subroutine3 & 0xFFFF
    449          
    450                /* AppProfId */
    451                epDesc->simpleDesc->AppProfId = BUILD_UINT16(pBuf[0], pBuf[1]);
   \                     ??CrossCallReturnLabel_2:
   \   000077   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   00007A   E8           MOV     A,R0
   \   00007B   F0           MOVX    @DPTR,A
   \   00007C   A3           INC     DPTR
   \   00007D   E9           MOV     A,R1
   \   00007E   F0           MOVX    @DPTR,A
    452                pBuf += sizeof(uint16);
   \   00007F   EE           MOV     A,R6
   \   000080   2402         ADD     A,#0x2
   \   000082   FE           MOV     R6,A
   \   000083   5001         JNC     ??MT_BuildEndpointDesc_4
   \   000085   0F           INC     R7
    453          
    454                /* AppDeviceId */
    455                epDesc->simpleDesc->AppDeviceId = BUILD_UINT16(pBuf[0],pBuf[1]);
   \                     ??MT_BuildEndpointDesc_4:
   \   000086   8E82         MOV     DPL,R6
   \   000088   8F83         MOV     DPH,R7
   \   00008A   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   00008D   A3           INC     DPTR
   \   00008E   A3           INC     DPTR
   \   00008F   E8           MOV     A,R0
   \   000090   F0           MOVX    @DPTR,A
   \   000091   A3           INC     DPTR
   \   000092   E9           MOV     A,R1
   \   000093   12....       LCALL   ?Subroutine12 & 0xFFFF
    456                pBuf += sizeof(uint16);
    457          
    458                /* AppDevVer */
    459                epDesc->simpleDesc->AppDevVer = (*pBuf++) & AF_APP_DEV_VER_MASK ;
   \                     ??CrossCallReturnLabel_20:
   \   000096   A3           INC     DPTR
   \   000097   E0           MOVX    A,@DPTR
   \   000098   540F         ANL     A,#0xf
   \   00009A   FA           MOV     R2,A
   \   00009B   85..82       MOV     DPL,?V0
   \   00009E   85..83       MOV     DPH,?V1
   \   0000A1   E0           MOVX    A,@DPTR
   \   0000A2   2405         ADD     A,#0x5
   \   0000A4   F8           MOV     R0,A
   \   0000A5   A3           INC     DPTR
   \   0000A6   E0           MOVX    A,@DPTR
   \   0000A7   3400         ADDC    A,#0x0
   \   0000A9   F9           MOV     R1,A
   \   0000AA   8882         MOV     DPL,R0
   \   0000AC   8983         MOV     DPH,R1
   \   0000AE   E0           MOVX    A,@DPTR
   \   0000AF   54F0         ANL     A,#0xf0
   \   0000B1   F0           MOVX    @DPTR,A
   \   0000B2   4A           ORL     A,R2
   \   0000B3   12....       LCALL   ?Subroutine12 & 0xFFFF
    460          
    461                /* LatencyReq */
    462                pBuf++;
    463          
    464                /* AppNumInClusters */
    465                epDesc->simpleDesc->AppNumInClusters = *pBuf++;
   \                     ??CrossCallReturnLabel_21:
   \   0000B6   A3           INC     DPTR
   \   0000B7   A3           INC     DPTR
   \   0000B8   A3           INC     DPTR
   \   0000B9   E0           MOVX    A,@DPTR
   \   0000BA   C0E0         PUSH    A
   \   0000BC   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   0000BF   D0E0         POP     A
   \   0000C1   F0           MOVX    @DPTR,A
   \   0000C2   EE           MOV     A,R6
   \   0000C3   2405         ADD     A,#0x5
   \   0000C5   FE           MOV     R6,A
   \   0000C6   5001         JNC     ??MT_BuildEndpointDesc_5
   \   0000C8   0F           INC     R7
   \                     ??MT_BuildEndpointDesc_5:
   \   0000C9   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   0000CC   E0           MOVX    A,@DPTR
   \   0000CD   FA           MOV     R2,A
   \   0000CE   6034         JZ      ??MT_BuildEndpointDesc_6
    466                if (epDesc->simpleDesc->AppNumInClusters)
    467                {
    468                  epDesc->simpleDesc->pAppInClusterList = (uint16 *)
    469                            osal_mem_alloc((epDesc->simpleDesc->AppNumInClusters)*sizeof(uint16));
   \   0000D0                ; Setup parameters for call to function osal_mem_alloc
   \   0000D0   25E0         ADD     A,0xE0 /* A   */
   \   0000D2   FA           MOV     R2,A
   \   0000D3   E4           CLR     A
   \   0000D4   33           RLC     A
   \   0000D5   FB           MOV     R3,A
   \   0000D6   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   0000D9   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   0000DC   CA           XCH     A,R2
   \   0000DD   2407         ADD     A,#0x7
   \   0000DF   12....       LCALL   ?Subroutine2 & 0xFFFF
    470                  if ( epDesc->simpleDesc->pAppInClusterList )
   \                     ??CrossCallReturnLabel_0:
   \   0000E2   2407         ADD     A,#0x7
   \   0000E4   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   0000E7   6018         JZ      ??MT_BuildEndpointDesc_7
    471                  {
    472                    for (i=0; i<(epDesc->simpleDesc->AppNumInClusters); i++)
   \   0000E9   7A00         MOV     R2,#0x0
   \                     ??MT_BuildEndpointDesc_8:
   \   0000EB   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   0000EE   E0           MOVX    A,@DPTR
   \   0000EF   F8           MOV     R0,A
   \   0000F0   EA           MOV     A,R2
   \   0000F1   C3           CLR     C
   \   0000F2   98           SUBB    A,R0
   \   0000F3   500F         JNC     ??MT_BuildEndpointDesc_6
    473                    {
    474                      epDesc->simpleDesc->pAppInClusterList[i] = BUILD_UINT16(*pBuf, *(pBuf+1));
   \   0000F5   12....       LCALL   ?Subroutine5 & 0xFFFF
    475                      pBuf += 2;
    476                    }
   \                     ??CrossCallReturnLabel_6:
   \   0000F8   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   0000FB   5001         JNC     ??MT_BuildEndpointDesc_9
   \   0000FD   0F           INC     R7
   \                     ??MT_BuildEndpointDesc_9:
   \   0000FE   0A           INC     R2
   \   0000FF   80EA         SJMP    ??MT_BuildEndpointDesc_8
    477                  }
    478                  else
    479                  {
    480                    ret = ZMemError;
   \                     ??MT_BuildEndpointDesc_7:
   \   000101   75..10       MOV     ?V2,#0x10
    481                  }
    482                }
    483          
    484                /* AppNumOutClusters */
    485                epDesc->simpleDesc->AppNumOutClusters = *pBuf++;
   \                     ??MT_BuildEndpointDesc_6:
   \   000104   8E82         MOV     DPL,R6
   \   000106   8F83         MOV     DPH,R7
   \   000108   E0           MOVX    A,@DPTR
   \   000109   C0E0         PUSH    A
   \   00010B   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   00010E   D0E0         POP     A
   \   000110   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   000113   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   000116   E0           MOVX    A,@DPTR
   \   000117   FA           MOV     R2,A
   \   000118   603C         JZ      ??MT_BuildEndpointDesc_10
    486                if (epDesc->simpleDesc->AppNumOutClusters)
    487                {
    488                  epDesc->simpleDesc->pAppOutClusterList = (uint16 *)
    489                                    osal_mem_alloc((epDesc->simpleDesc->AppNumOutClusters)*sizeof(uint16));
   \   00011A                ; Setup parameters for call to function osal_mem_alloc
   \   00011A   25E0         ADD     A,0xE0 /* A   */
   \   00011C   FA           MOV     R2,A
   \   00011D   E4           CLR     A
   \   00011E   33           RLC     A
   \   00011F   FB           MOV     R3,A
   \   000120   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000123   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   000126   CA           XCH     A,R2
   \   000127   240A         ADD     A,#0xa
   \   000129   12....       LCALL   ?Subroutine2 & 0xFFFF
    490                  if (epDesc->simpleDesc->pAppOutClusterList)
   \                     ??CrossCallReturnLabel_1:
   \   00012C   240A         ADD     A,#0xa
   \   00012E   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   000131   601E         JZ      ??MT_BuildEndpointDesc_11
    491                  {
    492                    for (i=0; i<(epDesc->simpleDesc->AppNumOutClusters); i++)
   \   000133   7A00         MOV     R2,#0x0
   \                     ??MT_BuildEndpointDesc_12:
   \   000135   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   000138   A3           INC     DPTR
   \   000139   A3           INC     DPTR
   \   00013A   A3           INC     DPTR
   \   00013B   E0           MOVX    A,@DPTR
   \   00013C   F8           MOV     R0,A
   \   00013D   EA           MOV     A,R2
   \   00013E   C3           CLR     C
   \   00013F   98           SUBB    A,R0
   \   000140   5014         JNC     ??MT_BuildEndpointDesc_10
    493                    {
    494                      epDesc->simpleDesc->pAppOutClusterList[i] = BUILD_UINT16(*pBuf, *(pBuf+1));
   \   000142   12....       LCALL   ?Subroutine5 & 0xFFFF
    495                      pBuf += 2;
    496                    }
   \                     ??CrossCallReturnLabel_7:
   \   000145   A3           INC     DPTR
   \   000146   A3           INC     DPTR
   \   000147   A3           INC     DPTR
   \   000148   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   00014B   5001         JNC     ??MT_BuildEndpointDesc_13
   \   00014D   0F           INC     R7
   \                     ??MT_BuildEndpointDesc_13:
   \   00014E   0A           INC     R2
   \   00014F   80E4         SJMP    ??MT_BuildEndpointDesc_12
    497                  }
    498                  else
    499                  {
    500                    ret = ZMemError;
   \                     ??MT_BuildEndpointDesc_11:
   \   000151   75..10       MOV     ?V2,#0x10
   \   000154   8006         SJMP    ??MT_BuildEndpointDesc_14
    501                  }
    502                }
    503          
    504                /* if any list cannot be allocated...free all */
    505                if ( ret == ZMemError )
   \                     ??MT_BuildEndpointDesc_10:
   \   000156   7410         MOV     A,#0x10
   \   000158   65..         XRL     A,?V2
   \   00015A   704C         JNZ     ??MT_BuildEndpointDesc_1
   \                     ??MT_BuildEndpointDesc_14:
   \   00015C   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   00015F   2407         ADD     A,#0x7
   \   000161   F582         MOV     DPL,A
   \   000163   E4           CLR     A
   \   000164   38           ADDC    A,R0
   \   000165   F583         MOV     DPH,A
   \   000167   12....       LCALL   ??Subroutine16_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   00016A   FB           MOV     R3,A
   \   00016B   EA           MOV     A,R2
   \   00016C   4B           ORL     A,R3
   \   00016D   6003         JZ      ??MT_BuildEndpointDesc_15
    506                {
    507                  if (epDesc->simpleDesc->pAppInClusterList)
    508                  {
    509                    osal_mem_free(epDesc->simpleDesc->pAppInClusterList);
   \   00016F                ; Setup parameters for call to function osal_mem_free
   \   00016F   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    510                  }
    511          
    512                  if (epDesc->simpleDesc->AppNumOutClusters)
   \                     ??MT_BuildEndpointDesc_15:
   \   000172   85..82       MOV     DPL,?V0
   \   000175   85..83       MOV     DPH,?V1
   \   000178   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   00017B   A3           INC     DPTR
   \   00017C   A3           INC     DPTR
   \   00017D   A3           INC     DPTR
   \   00017E   A3           INC     DPTR
   \   00017F   A3           INC     DPTR
   \   000180   A3           INC     DPTR
   \   000181   A3           INC     DPTR
   \   000182   A3           INC     DPTR
   \   000183   A3           INC     DPTR
   \   000184   E0           MOVX    A,@DPTR
   \   000185   6015         JZ      ??MT_BuildEndpointDesc_16
    513                  {
    514                    osal_mem_free(epDesc->simpleDesc->pAppOutClusterList);
   \   000187                ; Setup parameters for call to function osal_mem_free
   \   000187   8882         MOV     DPL,R0
   \   000189   8983         MOV     DPH,R1
   \   00018B   A3           INC     DPTR
   \   00018C   A3           INC     DPTR
   \   00018D   A3           INC     DPTR
   \   00018E   A3           INC     DPTR
   \   00018F   A3           INC     DPTR
   \   000190   A3           INC     DPTR
   \   000191   A3           INC     DPTR
   \   000192   A3           INC     DPTR
   \   000193   A3           INC     DPTR
   \   000194   A3           INC     DPTR
   \   000195   12....       LCALL   ??Subroutine16_0 & 0xFFFF
    515                  }
   \                     ??CrossCallReturnLabel_28:
   \   000198   FB           MOV     R3,A
   \   000199   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    516          
    517                  osal_mem_free(epDesc->simpleDesc);
   \                     ??MT_BuildEndpointDesc_16:
   \   00019C                ; Setup parameters for call to function osal_mem_free
   \   00019C   12....       LCALL   ??Subroutine15_0 & 0xFFFF
    518                }
    519              }
   \                     ??CrossCallReturnLabel_30:
   \   00019F   FB           MOV     R3,A
   \   0001A0   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0001A3   8003         SJMP    ??MT_BuildEndpointDesc_1
    520              else
    521              {
    522                ret = ZMemError;
   \                     ??MT_BuildEndpointDesc_3:
   \   0001A5   75..10       MOV     ?V2,#0x10
    523              }
    524            }
    525          
    526            return ret;
   \                     ??MT_BuildEndpointDesc_1:
   \   0001A8   A9..         MOV     R1,?V2
   \   0001AA   02....       LJMP    ?Subroutine1 & 0xFFFF
    527          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   F582         MOV     DPL,A
   \   000002   E4           CLR     A
   \   000003   38           ADDC    A,R0
   \   000004   F583         MOV     DPH,A
   \   000006   E0           MOVX    A,@DPTR
   \   000007   F8           MOV     R0,A
   \   000008   A3           INC     DPTR
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   F9           MOV     R1,A
   \   00000B   E8           MOV     A,R0
   \   00000C   49           ORL     A,R1
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   000003   2409         ADD     A,#0x9
   \   000005   F582         MOV     DPL,A
   \   000007   E4           CLR     A
   \   000008   38           ADDC    A,R0
   \   000009   F583         MOV     DPH,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   000003   2406         ADD     A,#0x6
   \   000005   F582         MOV     DPL,A
   \   000007   E4           CLR     A
   \   000008   38           ADDC    A,R0
   \   000009   F583         MOV     DPH,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   85..82       MOV     DPL,?V0
   \   000003   85..83       MOV     DPH,?V1
   \   000006   E0           MOVX    A,@DPTR
   \   000007   F8           MOV     R0,A
   \   000008   A3           INC     DPTR
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   F9           MOV     R1,A
   \   00000B   E8           MOV     A,R0
   \   00000C   FC           MOV     R4,A
   \   00000D   E9           MOV     A,R1
   \   00000E   FD           MOV     R5,A
   \   00000F   8C82         MOV     DPL,R4
   \   000011   8D83         MOV     DPH,R5
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   A3           INC     DPTR
   \   000017   A3           INC     DPTR
   \   000018   A3           INC     DPTR
   \   000019   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   12....       LCALL   ??Subroutine16_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   000003   F9           MOV     R1,A
   \   000004   EA           MOV     A,R2
   \   000005   F8           MOV     R0,A
   \   000006   12....       LCALL   ??Subroutine15_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   000009   F583         MOV     DPH,A
   \   00000B   8A82         MOV     DPL,R2
   \   00000D   A3           INC     DPTR
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   8A..         MOV     ?V4,R2
   \   000002                REQUIRE ??Subroutine15_0
   \   000002                ; // Fall through to label ??Subroutine15_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine15_0:
   \   000000   85..82       MOV     DPL,?V0
   \   000003   85..83       MOV     DPH,?V1
   \   000006                REQUIRE ??Subroutine16_0
   \   000006                ; // Fall through to label ??Subroutine16_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine16_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V4,A
   \   000007   A3           INC     DPTR
   \   000008   E0           MOVX    A,@DPTR
   \   000009   F8           MOV     R0,A
   \   00000A   E4           CLR     A
   \   00000B   C8           XCH     A,R0
   \   00000C   F9           MOV     R1,A
   \   00000D   E5..         MOV     A,?V4
   \   00000F   28           ADD     A,R0
   \   000010   E4           CLR     A
   \   000011   39           ADDC    A,R1
   \   000012   F5..         MOV     ?V5,A
   \   000014   EA           MOV     A,R2
   \   000015   25E0         ADD     A,0xE0 /* A   */
   \   000017   F8           MOV     R0,A
   \   000018   E4           CLR     A
   \   000019   33           RLC     A
   \   00001A   F9           MOV     R1,A
   \   00001B   8C82         MOV     DPL,R4
   \   00001D   8D83         MOV     DPH,R5
   \   00001F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   E0           MOVX    A,@DPTR
   \   000008   28           ADD     A,R0
   \   000009   FB           MOV     R3,A
   \   00000A   A3           INC     DPTR
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   39           ADDC    A,R1
   \   00000D   8B82         MOV     DPL,R3
   \   00000F   F583         MOV     DPH,A
   \   000011   E5..         MOV     A,?V4
   \   000013   F0           MOVX    @DPTR,A
   \   000014   A3           INC     DPTR
   \   000015   E5..         MOV     A,?V5
   \   000017   F0           MOVX    @DPTR,A
   \   000018   EE           MOV     A,R6
   \   000019   2402         ADD     A,#0x2
   \   00001B   FE           MOV     R6,A
   \   00001C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   000003   AE82         MOV     R6,DPL
   \   000005   AF83         MOV     R7,DPH
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   A3           INC     DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   F582         MOV     DPL,A
   \   000002   E4           CLR     A
   \   000003   3A           ADDC    A,R2
   \   000004   F583         MOV     DPH,A
   \   000006   E5..         MOV     A,?V4
   \   000008   F0           MOVX    @DPTR,A
   \   000009   A3           INC     DPTR
   \   00000A   EB           MOV     A,R3
   \   00000B   F0           MOVX    @DPTR,A
   \   00000C   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   85..82       MOV     DPL,?V0
   \   000003   85..83       MOV     DPH,?V1
   \   000006   E0           MOVX    A,@DPTR
   \   000007   F8           MOV     R0,A
   \   000008   A3           INC     DPTR
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   C8           XCH     A,R0
   \   00000B   22           RET

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for mtProcessIncoming>`:
   \   000000   0000         DW 0H
   \   000002   ....         DW `??MT_SysCommandProcessing::?relay`
   \   000004   0000         DW 0H
   \   000006   0000         DW 0H
   \   000008   0000         DW 0H
   \   00000A   ....         DW `??MT_ZdoCommandProcessing::?relay`
   \   00000C   0000         DW 0H
   \   00000E   0000         DW 0H
   \   000010   0000         DW 0H
   \   000012   0000         DW 0H

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_Init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_BuildSPIMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_BuildSPIMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_BuildAndSendZToolResponse::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_BuildAndSendZToolResponse

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ProcessIncoming::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ProcessIncoming

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MTProcessAppRspMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MTProcessAppRspMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ReverseBytes::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ReverseBytes

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_Word2Buf::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_Word2Buf

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_BuildEndpointDesc::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_BuildEndpointDesc
    528          /***************************************************************************************************
    529          ***************************************************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0      9   MTProcessAppRspMsg
        0      9   -> MT_BuildAndSendZToolResponse
      0     27   MT_BuildAndSendZToolResponse
        0     18   -> MT_BuildSPIMsg
        0     16   -> MT_TransportAlloc
        0     16   -> MT_TransportSend
      1     14   MT_BuildEndpointDesc
        0     14   -> afFindEndPointDesc
        0     14   -> osal_mem_alloc
        0     14   -> osal_mem_free
      1     35   MT_BuildSPIMsg
        0     17   -> osal_memcpy
      0      9   MT_Init
        0      9   -> MT_SysResetInd
        0      9   -> MT_ZdoInit
      3      3   MT_ProcessIncoming
        2      3   -> MT_BuildAndSendZToolResponse
      1     11   MT_ReverseBytes
      1      9   MT_Word2Buf


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      20  ?<Initializer for mtProcessIncoming>
       6  ??Subroutine15_0
       5  ??Subroutine16_0
       5  ?Subroutine0
       5  ?Subroutine1
      10  ?Subroutine10
      14  ?Subroutine11
       7  ?Subroutine12
      12  ?Subroutine13
       2  ?Subroutine14
      16  ?Subroutine2
       8  ?Subroutine3
      29  ?Subroutine4
      32  ?Subroutine5
      15  ?Subroutine6
      26  ?Subroutine7
      12  ?Subroutine8
      12  ?Subroutine9
      21  MTProcessAppRspMsg
       6  MTProcessAppRspMsg::?relay
      73  MT_BuildAndSendZToolResponse
       6  MT_BuildAndSendZToolResponse::?relay
     429  MT_BuildEndpointDesc
       6  MT_BuildEndpointDesc::?relay
      76  MT_BuildSPIMsg
       6  MT_BuildSPIMsg::?relay
      25  MT_Init
       6  MT_Init::?relay
     154  MT_ProcessIncoming
       6  MT_ProcessIncoming::?relay
      76  MT_ReverseBytes
       6  MT_ReverseBytes::?relay
       1  MT_TaskID
      55  MT_Word2Buf
       6  MT_Word2Buf::?relay
       1  debugCompId
       1  debugThreshold
      20  mtProcessIncoming
       2  save_cmd

 
 1 125 bytes in segment BANKED_CODE
    48 bytes in segment BANK_RELAYS
    20 bytes in segment XDATA_I
    20 bytes in segment XDATA_ID
     5 bytes in segment XDATA_Z
 
 1 193 bytes of CODE  memory
    25 bytes of XDATA memory

Errors: none
Warnings: none
