###############################################################################
#
# IAR C/C++ Compiler V9.20.1.2476 for 8051                26/May/2017  16:13:12
# Copyright 2004-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\Source\SampleApp.c
#    Command line       =  
#        -f
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wRouter.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DRTR_NWK -DBLINK_LEDS) -f
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_POLLED=3000
#        -DNWK_INDIRECT_MSG_TIMEOUT=7 -DMAX_RREQ_ENTRIES=8
#        -DAPSC_MAX_FRAME_RETRIES=3 -DNWK_MAX_DATA_RETRIES=2
#        -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9 -DAPS_MAX_GROUPS=16
#        -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000
#        -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
#        -DREJOIN_POLL_RATE=440
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\Source\SampleApp.c
#        -D ZIGBEEPRO -D ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC -D
#        LCD_SUPPORTED=DEBUG -lC
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\RouterEB-Pro\List\
#        -lA
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\RouterEB-Pro\List\
#        --diag_suppress Pe001,Pa010 -o
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\RouterEB-Pro\Obj\
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 8 -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\SOURCE\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\ZMAIN\TI2530DB\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MT\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\INCLUDE\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\TARGET\CC2530EB\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\MCU\CCSOC\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\INCLUDE\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\AF\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\NWK\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SEC\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SAPI\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SYS\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\ZDO\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\F8W\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES\SADDR\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES\SDATA\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\INCLUDE\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\HIGH_LEVEL\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\
#        -Ohz --require_prototypes
#    List file          =  
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\RouterEB-Pro\List\SampleApp.lst
#    Object file        =  
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\RouterEB-Pro\Obj\SampleApp.r51
#
###############################################################################

D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\Source\SampleApp.c
      1          /*******************************************************************************
      2          *实现功能 ： 基于协议栈的按键实验
      3          *实验平台 ： 秉火 Zigbee 开发板
      4          *硬件连接 ： LED1 P1_0 
      5                       LED2 P1_1
      6                       LED3 P1_4
      7                       BUT1 P0_4
      8                       BUT2 P0_5
      9          *******************************************************************************/
     10          
     11          #include "OSAL.h"
     12          #include "ZGlobals.h"
     13          #include "AF.h"
     14          #include "aps_groups.h"
     15          #include "ZDApp.h"
     16          
     17          #include "SampleApp.h"
     18          #include "SampleAppHw.h"
     19          
     20          #include "OnBoard.h"

   \                                 In  segment SFR_AN, at 0x90
   \   union <unnamed> volatile __sfr _A_P1
   \                     _A_P1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xa0
   \   union <unnamed> volatile __sfr _A_P2
   \                     _A_P2:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfd
   \   unsigned char volatile __sfr P0DIR
   \                     P0DIR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfe
   \   unsigned char volatile __sfr P1DIR
   \                     P1DIR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xff
   \   unsigned char volatile __sfr P2DIR
   \                     P2DIR:
   \   000000                DS 1
     21          
     22          /* HAL */
     23          #include "hal_lcd.h"
     24          #include "hal_led.h"
     25          #include "hal_key.h"
     26          #include "hal_adc.h"
     27          
     28          #include "MT_UART.h"
     29          #include "MT_APP.h"
     30          #include "MT.h"
     31          
     32          /* 设置地锁设备编号 */
     33          #define Devic_Num 4 //0-99
     34          /* 字符串操作 */
     35          #include <string.h>
     36          #include "stdio.h"
     37          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     38          uint8 up_flag = 0;      //抬起标志
   \                     up_flag:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     39          uint8 dowm_flag = 0;    //落下标志
   \                     dowm_flag:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     40          uint8 up_over_flag = 0; //抬起限位标志
   \                     up_over_flag:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     41          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     42          void Delayms(unsigned int xms) //i=xms 即延时 i 毫秒
   \                     Delayms:
     43          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
     44          
     45            unsigned int i;
     46            
     47            for(i=xms;i>0;i--)
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   800E         SJMP    ??Delayms_0
     48                 MicroWait (1000);     // Wait 1ms
   \                     ??Delayms_1:
   \   00000A                ; Setup parameters for call to function Onboard_wait
   \   00000A   7AE8         MOV     R2,#-0x18
   \   00000C   7B03         MOV     R3,#0x3
   \   00000E   12....       LCALL   `??Onboard_wait::?relay`; Banked call to: Onboard_wait
   \   000011   EE           MOV     A,R6
   \   000012   24FF         ADD     A,#-0x1
   \   000014   1E           DEC     R6
   \   000015   EF           MOV     A,R7
   \   000016   34FF         ADDC    A,#-0x1
   \                     ??Delayms_0:
   \   000018   FF           MOV     R7,A
   \   000019   EE           MOV     A,R6
   \   00001A   4F           ORL     A,R7
   \   00001B   70ED         JNZ     ??Delayms_1
     49          }
   \   00001D   80..         SJMP    ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
     50          
     51          // This list should be filled with Application specific Cluster IDs.

   \                                 In  segment XDATA_ROM_C, align 1
     52          const cId_t SampleApp_ClusterList[SAMPLEAPP_MAX_CLUSTERS] =
   \                     SampleApp_ClusterList:
   \   000000   0100         DW 1
   \   000002   0200         DW 2
     53          {
     54            SAMPLEAPP_PERIODIC_CLUSTERID,
     55            SAMPLEAPP_FLASH_CLUSTERID
     56          };
     57          

   \                                 In  segment XDATA_ROM_C, align 1
     58          const SimpleDescriptionFormat_t SampleApp_SimpleDesc =
   \                     SampleApp_SimpleDesc:
   \   000000   14           DB 20
   \   000001   080F         DW 3848
   \   000003   0100         DW 1
   \   000005   00           DB 0
   \   000006   02           DB 2
   \   000007   ....         DW SampleApp_ClusterList
   \   000009   02           DB 2
   \   00000A   ....         DW SampleApp_ClusterList
     59          {
     60            SAMPLEAPP_ENDPOINT,              //  int Endpoint;
     61            SAMPLEAPP_PROFID,                //  uint16 AppProfId[2];
     62            SAMPLEAPP_DEVICEID,              //  uint16 AppDeviceId[2];
     63            SAMPLEAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
     64            SAMPLEAPP_FLAGS,                 //  int   AppFlags:4;
     65            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
     66            (cId_t *)SampleApp_ClusterList,  //  uint8 *pAppInClusterList;
     67            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
     68            (cId_t *)SampleApp_ClusterList   //  uint8 *pAppInClusterList;
     69          };
     70          
     71          // This is the Endpoint/Interface description.  It is defined here, but
     72          // filled-in in SampleApp_Init().  Another way to go would be to fill
     73          // in the structure here and make it a "const" (in code space).  The
     74          // way it's defined in this sample app it is define in RAM.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     75          endPointDesc_t SampleApp_epDesc;
   \                     SampleApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
     76          
     77          /*********************************************************************
     78           * EXTERNAL VARIABLES
     79           */
     80          
     81          /*********************************************************************
     82           * EXTERNAL FUNCTIONS
     83           */
     84          
     85          /*********************************************************************
     86           * LOCAL VARIABLES
     87           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     88          uint8 SampleApp_TaskID;   // Task ID for internal task/event processing
   \                     SampleApp_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     89                                    // This variable will be received when
     90                                    // SampleApp_Init() is called.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     91          uint8 AD1_TaskID;
   \                     AD1_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     92          uint8 MY_TaskID;
   \                     MY_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     93          uint8 Beep_Warn_TaskID;
   \                     Beep_Warn_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     94          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     95          devStates_t SampleApp_NwkState;
   \                     SampleApp_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     96          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     97          uint8 SampleApp_TransID;  // This is the unique message ID (counter)
   \                     SampleApp_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     98          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     99          afAddrType_t SampleApp_Periodic_DstAddr;
   \                     SampleApp_Periodic_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    100          afAddrType_t SampleApp_Flash_DstAddr;
   \                     SampleApp_Flash_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    101          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    102          aps_Group_t SampleApp_Group;
   \                     SampleApp_Group:
   \   000000                DS 18
   \   000012                REQUIRE __INIT_XDATA_Z
    103          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    104          uint8 SampleAppPeriodicCounter = 0;
   \                     SampleAppPeriodicCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    105          uint8 SampleAppFlashCounter = 0;
   \                     SampleAppFlashCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    106          
    107          /*********************************************************************
    108           * LOCAL FUNCTIONS
    109           */
    110          void SampleApp_HandleKeys( uint8 shift, uint8 keys );
    111          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
    112          void SampleApp_SendPeriodicMessage( void );
    113          void SampleApp_SendFlashMessage( uint16 flashTime );
    114          
    115          
    116          /*********************************************************************
    117           * @fn      AD_Init
    118           *
    119           * @brief   Initialization function for the Generic App Task.
    120           *          This is called during initialization and should contain
    121           *          any application specific initialization (ie. hardware
    122           *          initialization/setup, table initialization, power up
    123           *          notificaiton ... ).
    124           *
    125           * @param   task_id - the ID assigned by OSAL.  This ID should be
    126           *                    used to send messages and set timers.
    127           *
    128           * @return  none
    129           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    130          void AD_Init(uint8 task_id)
   \                     AD_Init:
    131          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
    132            AD1_TaskID = task_id;
   \   000006   90....       MOV     DPTR,#AD1_TaskID
   \   000009   F0           MOVX    @DPTR,A
    133            //AD 配置
    134            P0DIR |= 0x3F;
   \   00000A   43FD3F       ORL     0xfd,#0x3f
    135            HalAdcSetReference(HAL_ADC_REF_AVDD);
   \   00000D                ; Setup parameters for call to function HalAdcSetReference
   \   00000D   7980         MOV     R1,#-0x80
   \   00000F   12....       LCALL   `??HalAdcSetReference::?relay`; Banked call to: HalAdcSetReference
    136            //这里调试用 LED
    137            P2DIR |= 0x01;
   \   000012   43FF01       ORL     0xff,#0x1
    138            P2_0 = 0;
   \   000015   C2A0         CLR     0xa0.0
    139            
    140            //osal_start_timerEx(AD1_TaskID,0x01,500);
    141          
    142          }
   \   000017   80..         SJMP    ?Subroutine0
   \   000019                REQUIRE P0DIR
   \   000019                REQUIRE P2DIR
   \   000019                REQUIRE _A_P2
    143          
    144          /* Motor IO Init */
    145          #define Led_On (P1_3 = 1)
    146          #define Led_Off (P1_3 = 0)
    147          #define Beep_On (P1_2 = 1)
    148          #define Beep_Off (P1_2 = 0)
    149          #define Motor_A_H (P1_1 = 1)
    150          #define Motor_A_L (P1_1 = 0)
    151          #define Motor_B_H (P1_0 = 1)
    152          #define Motor_B_L (P1_0 = 0)
    153          #define Motor_Up {Motor_B_H;Motor_A_L;Led_On;Beep_On;}
    154          #define Motor_Dowm {Motor_A_H;Motor_B_L;Led_On;Beep_On;}
    155          #define Motor_Stop {Motor_A_L;Motor_B_L;Led_Off;Beep_Off;}//Delayms(100);Led_On;Beep_On;Delayms(100);Led_Off;Beep_Off;}

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    156          void Motor_IO_Init(void)
   \                     Motor_IO_Init:
    157          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    158            P1DIR |= 0x0F;
   \   000000   43FE0F       ORL     0xfe,#0xf
    159            //Motor_A_L;
    160            //Motor_B_L;
    161            Motor_Stop;
   \   000003   C291         CLR     0x90.1
   \   000005   C290         CLR     0x90.0
   \   000007   C293         CLR     0x90.3
   \   000009   C292         CLR     0x90.2
    162            
    163            P1_2 = 0;
   \   00000B   C292         CLR     0x90.2
    164            //P1_3 = 0;
    165          }
   \   00000D   02....       LJMP    ?BRET
   \   000010                REQUIRE P1DIR
   \   000010                REQUIRE _A_P1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    166          void MY_Test_Init(uint8 task_id)
   \                     MY_Test_Init:
    167          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
    168            MY_TaskID = task_id;
   \   000006   90....       MOV     DPTR,#MY_TaskID
   \   000009   F0           MOVX    @DPTR,A
    169              osal_start_timerEx(MY_TaskID,0x01,500);
   \   00000A                ; Setup parameters for call to function osal_start_timerEx
   \   00000A   7CF4         MOV     R4,#-0xc
   \   00000C   7D01         MOV     R5,#0x1
   \   00000E   7A01         MOV     R2,#0x1
   \   000010   7B00         MOV     R3,#0x0
   \   000012   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
    170          }
   \   000015                REQUIRE ?Subroutine0
   \   000015                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    171          void Beep_Warn_Init(uint8 task_id)
   \                     Beep_Warn_Init:
    172          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    173            Beep_Warn_TaskID = task_id;
   \   000004   E9           MOV     A,R1
   \   000005   90....       MOV     DPTR,#Beep_Warn_TaskID
   \   000008   F0           MOVX    @DPTR,A
    174          }
   \   000009                REQUIRE ?Subroutine1
   \   000009                ; // Fall through to label ?Subroutine1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    175           void Start_State(void)
   \                     Start_State:
    176          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    177           //初始状态 趴下
    178             Motor_A_H;
   \   000004   D291         SETB    0x90.1
    179             Motor_B_L;
   \   000006   C290         CLR     0x90.0
    180             dowm_flag = 1;
   \   000008   12....       LCALL   ?Subroutine5 & 0xFFFF
    181             up_flag = 0;
    182             up_over_flag = 0;
   \                     ??CrossCallReturnLabel_4:
   \   00000B   12....       LCALL   ?Subroutine4 & 0xFFFF
    183             osal_start_timerEx(AD1_TaskID,0x01,500);
   \                     ??CrossCallReturnLabel_2:
   \   00000E   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
    184          }
   \   000011   80..         SJMP    ?Subroutine1
   \   000013                REQUIRE _A_P1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   90....       MOV     DPTR,#dowm_flag
   \   000003   7401         MOV     A,#0x1
   \   000005   F0           MOVX    @DPTR,A
   \   000006   90....       MOV     DPTR,#up_flag
   \   000009   E4           CLR     A
   \   00000A   F0           MOVX    @DPTR,A
   \   00000B   90....       MOV     DPTR,#up_over_flag
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function osal_start_timerEx
   \   000001                ; Setup parameters for call to function osal_start_timerEx
   \   000001   7CF4         MOV     R4,#-0xc
   \   000003   7D01         MOV     R5,#0x1
   \   000005   7A01         MOV     R2,#0x1
   \   000007   FB           MOV     R3,A
   \   000008   90....       MOV     DPTR,#AD1_TaskID
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   F9           MOV     R1,A
   \   00000D   22           RET
    185          
    186          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    187          void SampleApp_Init( uint8 task_id )
   \                     SampleApp_Init:
    188          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    189            SampleApp_TaskID = task_id;
   \   000007   90....       MOV     DPTR,#SampleApp_TaskID
   \   00000A   F0           MOVX    @DPTR,A
    190            SampleApp_NwkState = DEV_INIT;
   \   00000B   90....       MOV     DPTR,#SampleApp_NwkState
   \   00000E   7401         MOV     A,#0x1
   \   000010   F0           MOVX    @DPTR,A
    191            SampleApp_TransID = 0;
   \   000011   90....       MOV     DPTR,#SampleApp_TransID
   \   000014   E4           CLR     A
   \   000015   F0           MOVX    @DPTR,A
    192            
    193            ///////////////// by Cavani //////////////////
    194            Motor_IO_Init();
   \   000016                ; Setup parameters for call to function Motor_IO_Init
   \   000016   12....       LCALL   `??Motor_IO_Init::?relay`; Banked call to: Motor_IO_Init
    195            MT_UartInit ();    
   \   000019                ; Setup parameters for call to function MT_UartInit
   \   000019   12....       LCALL   `??MT_UartInit::?relay`; Banked call to: MT_UartInit
    196            MT_UartRegisterTaskID(task_id);
   \   00001C                ; Setup parameters for call to function MT_UartRegisterTaskID
   \   00001C   EE           MOV     A,R6
   \   00001D   F9           MOV     R1,A
   \   00001E   12....       LCALL   `??MT_UartRegisterTaskID::?relay`; Banked call to: MT_UartRegisterTaskID
    197            
    198            HalUARTWrite(0,"The test is KEY.\n", 17);
   \   000021                ; Setup parameters for call to function HalUARTWrite
   \   000021   7C11         MOV     R4,#0x11
   \   000023   7D00         MOV     R5,#0x0
   \   000025   7A..         MOV     R2,#`?<Constant "The test is KEY.\\n">` & 0xff
   \   000027   7B..         MOV     R3,#(`?<Constant "The test is KEY.\\n">` >> 8) & 0xff
   \   000029   7900         MOV     R1,#0x0
   \   00002B   12....       LCALL   `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
    199              
    200            // Device hardware initialization can be added here or in main() (Zmain.c).
    201            // If the hardware is application specific - add it here.
    202            // If the hardware is other parts of the device add it in main().
    203          
    204           #if defined ( BUILD_ALL_DEVICES )
    205            // The "Demo" target is setup to have BUILD_ALL_DEVICES and HOLD_AUTO_START
    206            // We are looking at a jumper (defined in SampleAppHw.c) to be jumpered
    207            // together - if they are - we will start up a coordinator. Otherwise,
    208            // the device will start as a router.
    209            if ( readCoordinatorJumper() )
    210              zgDeviceLogicalType = ZG_DEVICETYPE_COORDINATOR;
    211            else
    212              zgDeviceLogicalType = ZG_DEVICETYPE_ROUTER;
    213          #endif // BUILD_ALL_DEVICES
    214          
    215          #if defined ( HOLD_AUTO_START )
    216            // HOLD_AUTO_START is a compile option that will surpress ZDApp
    217            //  from starting the device and wait for the application to
    218            //  start the device.
    219            ZDOInitDevice(0);
    220          #endif
    221            // Setup for the periodic message's destination address
    222            // Broadcast to everyone
    223            SampleApp_Periodic_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
   \   00002E   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr + 8
   \   000031   740F         MOV     A,#0xf
   \   000033   F0           MOVX    @DPTR,A
    224            SampleApp_Periodic_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   000034   A3           INC     DPTR
   \   000035   7414         MOV     A,#0x14
   \   000037   F0           MOVX    @DPTR,A
    225            SampleApp_Periodic_DstAddr.addr.shortAddr = 0xFFFF;//0xFFFC
   \   000038   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr
   \   00003B   74FF         MOV     A,#-0x1
   \   00003D   F0           MOVX    @DPTR,A
   \   00003E   A3           INC     DPTR
   \   00003F   F0           MOVX    @DPTR,A
    226          
    227            // Setup for the flash command's destination address - Group 1
    228            SampleApp_Flash_DstAddr.addrMode = (afAddrMode_t)afAddrGroup;
   \   000040   90....       MOV     DPTR,#SampleApp_Flash_DstAddr + 8
   \   000043   7401         MOV     A,#0x1
   \   000045   F0           MOVX    @DPTR,A
    229            SampleApp_Flash_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   000046   A3           INC     DPTR
   \   000047   7414         MOV     A,#0x14
   \   000049   F0           MOVX    @DPTR,A
    230            SampleApp_Flash_DstAddr.addr.shortAddr = SAMPLEAPP_FLASH_GROUP;
   \   00004A   90....       MOV     DPTR,#SampleApp_Flash_DstAddr
   \   00004D   12....       LCALL   ?Subroutine8 & 0xFFFF
    231          
    232            // Fill out the endpoint description.
    233            SampleApp_epDesc.endPoint = SAMPLEAPP_ENDPOINT;
   \                     ??CrossCallReturnLabel_29:
   \   000050   90....       MOV     DPTR,#SampleApp_epDesc
   \   000053   7414         MOV     A,#0x14
   \   000055   F0           MOVX    @DPTR,A
    234            SampleApp_epDesc.task_id = &SampleApp_TaskID;
   \   000056   A3           INC     DPTR
   \   000057   74..         MOV     A,#SampleApp_TaskID & 0xff
   \   000059   F0           MOVX    @DPTR,A
   \   00005A   A3           INC     DPTR
   \   00005B   74..         MOV     A,#(SampleApp_TaskID >> 8) & 0xff
   \   00005D   F0           MOVX    @DPTR,A
    235            SampleApp_epDesc.simpleDesc
    236                      = (SimpleDescriptionFormat_t *)&SampleApp_SimpleDesc;
   \   00005E   A3           INC     DPTR
   \   00005F   74..         MOV     A,#SampleApp_SimpleDesc & 0xff
   \   000061   F0           MOVX    @DPTR,A
   \   000062   A3           INC     DPTR
   \   000063   74..         MOV     A,#(SampleApp_SimpleDesc >> 8) & 0xff
   \   000065   12....       LCALL   ??Subroutine16_0 & 0xFFFF
    237            SampleApp_epDesc.latencyReq = noLatencyReqs;
    238          
    239            // Register the endpoint description with the AF
    240            afRegister( &SampleApp_epDesc );
   \                     ??CrossCallReturnLabel_25:
   \   000068                ; Setup parameters for call to function afRegister
   \   000068   7A..         MOV     R2,#SampleApp_epDesc & 0xff
   \   00006A   7B..         MOV     R3,#(SampleApp_epDesc >> 8) & 0xff
   \   00006C   12....       LCALL   `??afRegister::?relay`; Banked call to: afRegister
    241          
    242            // Register for all key events - This app will handle all key events
    243            RegisterForKeys( SampleApp_TaskID );
   \   00006F                ; Setup parameters for call to function RegisterForKeys
   \   00006F   90....       MOV     DPTR,#SampleApp_TaskID
   \   000072   E0           MOVX    A,@DPTR
   \   000073   F9           MOV     R1,A
   \   000074   12....       LCALL   `??RegisterForKeys::?relay`; Banked call to: RegisterForKeys
    244          
    245            // By default, all devices start out in Group 1
    246            SampleApp_Group.ID = 0x0001;
   \   000077   90....       MOV     DPTR,#SampleApp_Group
   \   00007A   12....       LCALL   ?Subroutine8 & 0xFFFF
    247            osal_memcpy( SampleApp_Group.name, "Group 1", 7  );
   \                     ??CrossCallReturnLabel_30:
   \   00007D                ; Setup parameters for call to function osal_memcpy
   \   00007D   75....       MOV     ?V0,#`?<Constant "Group 1">` & 0xff
   \   000080   75....       MOV     ?V1,#(`?<Constant "Group 1">` >> 8) & 0xff
   \   000083   F5..         MOV     ?V2,A
   \   000085   78..         MOV     R0,#?V0
   \   000087   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00008A   7C07         MOV     R4,#0x7
   \   00008C   7D00         MOV     R5,#0x0
   \   00008E   7A..         MOV     R2,#(SampleApp_Group + 2) & 0xff
   \   000090   7B..         MOV     R3,#((SampleApp_Group + 2) >> 8) & 0xff
   \   000092   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000095   7403         MOV     A,#0x3
   \   000097   12....       LCALL   ?DEALLOC_XSTACK8
    248            aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
   \   00009A                ; Setup parameters for call to function aps_AddGroup
   \   00009A   7A..         MOV     R2,#SampleApp_Group & 0xff
   \   00009C   7B..         MOV     R3,#(SampleApp_Group >> 8) & 0xff
   \   00009E   7914         MOV     R1,#0x14
   \   0000A0   12....       LCALL   `??aps_AddGroup::?relay`; Banked call to: aps_AddGroup
    249          
    250          #if defined ( LCD_SUPPORTED )
    251            HalLcdWriteString( "SampleApp", HAL_LCD_LINE_1 );
   \   0000A3                ; Setup parameters for call to function HalLcdWriteString
   \   0000A3   7901         MOV     R1,#0x1
   \   0000A5   7A..         MOV     R2,#`?<Constant "SampleApp">` & 0xff
   \   0000A7   7B..         MOV     R3,#(`?<Constant "SampleApp">` >> 8) & 0xff
   \   0000A9   12....       LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
    252          #endif
    253          }
   \   0000AC   7F03         MOV     R7,#0x3
   \   0000AE   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   7401         MOV     A,#0x1
   \   000002                REQUIRE ??Subroutine16_0
   \   000002                ; // Fall through to label ??Subroutine16_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine16_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   E4           CLR     A
   \   000003   F0           MOVX    @DPTR,A
   \   000004   22           RET
    254          
    255          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    256          uint8 K2_Base = 0,AD_D_H_Base = 0,AD_U_H_Base = 0;
   \                     K2_Base:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     AD_D_H_Base:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     AD_U_H_Base:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    257          uint16 AD_data,AD_data2;
   \                     AD_data:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     AD_data2:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    258          int lend = 0,lend2 = 0;
   \                     lend:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     lend2:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    259          int data_huancong[20],data_huancong2[20];
   \                     data_huancong:
   \   000000                DS 40
   \   000028                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     data_huancong2:
   \   000000                DS 40
   \   000028                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    260          uint8 s_data[60],s_data2[60],s2_data[60],s2_data2[60];
   \                     s_data:
   \   000000                DS 60
   \   00003C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     s_data2:
   \   000000                DS 60
   \   00003C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     s2_data:
   \   000000                DS 60
   \   00003C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     s2_data2:
   \   000000                DS 60
   \   00003C                REQUIRE __INIT_XDATA_Z
    261          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    262          uint16 MY_ProcessEvent( uint8 task_id, uint16 events )
   \                     MY_ProcessEvent:
    263          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    264            uint8 i;
    265            uint8 *str;
    266            uint8 *buf_send;
    267            buf_send = &s_data[1];//第0元素用于存储发送长度
    268            str = s_data2;
    269           //osal_start_timerEx(AD1_TaskID,0x01,500);
    270           P2_0 = ~P2_0;
   \   000005   E5A0         MOV     A,0xa0
   \   000007   F4           CPL     A
   \   000008   FE           MOV     R6,A
   \   000009   D2F0         SETB    B.0
   \   00000B   A2A0         MOV     C,0xa0.0
   \   00000D   30F001       JNB     B.0,??MY_ProcessEvent_0
   \   000010   B3           CPL     C
   \                     ??MY_ProcessEvent_0:
   \   000011   92A0         MOV     0xa0.0,C
    271            //AD 采集 电机状态
    272            AD_data = HalAdcRead(HAL_ADC_CHANNEL_6,HAL_ADC_RESOLUTION_14);
   \   000013                ; Setup parameters for call to function HalAdcRead
   \   000013   7A04         MOV     R2,#0x4
   \   000015   7906         MOV     R1,#0x6
   \   000017   12....       LCALL   `??HalAdcRead::?relay`; Banked call to: HalAdcRead
   \   00001A   90....       MOV     DPTR,#AD_data
   \   00001D   EA           MOV     A,R2
   \   00001E   F0           MOVX    @DPTR,A
   \   00001F   A3           INC     DPTR
   \   000020   EB           MOV     A,R3
   \   000021   F0           MOVX    @DPTR,A
    273          
    274            
    275          }
                 ^
Warning[Pe940]: missing return statement at end of non-void function
          "MY_ProcessEvent"

    uint8 i;
          ^
"D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\Source\SampleApp.c",264  Warning[Pe177]: 
          variable "i" was declared but never referenced

    uint8 *str;
           ^
"D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\Source\SampleApp.c",265  Warning[Pe550]: 
          variable "str" was set but never used

    uint8 *buf_send;
           ^
"D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\Source\SampleApp.c",266  Warning[Pe550]: 
          variable "buf_send" was set but never used
   \   000022   02....       LJMP    ?Subroutine0 & 0xFFFF
   \   000025                REQUIRE _A_P2
    276          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    277          uint16 AD1_ProcessEvent( uint8 task_id, uint16 events )
   \                     AD1_ProcessEvent:
    278          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    279            uint8 i;
    280            uint8 *str;
    281            uint8 *buf_send;
    282            buf_send = &s_data[1];//第0元素用于存储发送长度
    283            str = s_data2;
    284           //osal_start_timerEx(AD1_TaskID,0x01,500);
    285           // P2_0 = ~P2_0;
    286            //AD 采集  电机状态
    287            AD_data = HalAdcRead(HAL_ADC_CHANNEL_6,HAL_ADC_RESOLUTION_14);
   \   000005                ; Setup parameters for call to function HalAdcRead
   \   000005   7A04         MOV     R2,#0x4
   \   000007   7906         MOV     R1,#0x6
   \   000009   12....       LCALL   `??HalAdcRead::?relay`; Banked call to: HalAdcRead
   \   00000C   90....       MOV     DPTR,#AD_data
   \   00000F   EA           MOV     A,R2
   \   000010   F0           MOVX    @DPTR,A
   \   000011   A3           INC     DPTR
   \   000012   EB           MOV     A,R3
   \   000013   F0           MOVX    @DPTR,A
    288           
    289          #if 1
    290            data_huancong[0]=Devic_Num;//Device_number;
   \   000014   90....       MOV     DPTR,#data_huancong
   \   000017   7404         MOV     A,#0x4
   \   000019   12....       LCALL   ??Subroutine16_0 & 0xFFFF
    291            data_huancong[1]=AD_data;
   \                     ??CrossCallReturnLabel_26:
   \   00001C   90....       MOV     DPTR,#AD_data
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   F8           MOV     R0,A
   \   000021   A3           INC     DPTR
   \   000022   E0           MOVX    A,@DPTR
   \   000023   F9           MOV     R1,A
   \   000024   90....       MOV     DPTR,#data_huancong + 2
   \   000027   12....       LCALL   ?Subroutine3 & 0xFFFF
    292            data_huancong[2]=P1_5;
    293            data_huancong[3]=0;
    294            data_huancong[4]=0;
    295            data_huancong[5]=0;
    296            data_huancong[6]=0;
    297            data_huancong[7]=0;
    298            data_huancong[8]=0;
    299            data_huancong[9]=0;
    300            data_huancong[10]=0;
    301            data_huancong[11]=0;
    302             
    303            for(i=0;i<lend;i++)
   \                     ??CrossCallReturnLabel_0:
   \   00002A   7E00         MOV     R6,#0x0
   \   00002C   8019         SJMP    ??AD1_ProcessEvent_0
    304            {
    305             s_data[i] = 0;
   \                     ??AD1_ProcessEvent_1:
   \   00002E   74..         MOV     A,#s_data & 0xff
   \   000030   28           ADD     A,R0
   \   000031   F582         MOV     DPL,A
   \   000033   E4           CLR     A
   \   000034   34..         ADDC    A,#(s_data >> 8) & 0xff
   \   000036   F583         MOV     DPH,A
   \   000038   E4           CLR     A
   \   000039   F0           MOVX    @DPTR,A
    306             s_data2[i] = 0;
   \   00003A   74..         MOV     A,#s_data2 & 0xff
   \   00003C   28           ADD     A,R0
   \   00003D   F582         MOV     DPL,A
   \   00003F   E4           CLR     A
   \   000040   34..         ADDC    A,#(s_data2 >> 8) & 0xff
   \   000042   F583         MOV     DPH,A
   \   000044   E4           CLR     A
   \   000045   F0           MOVX    @DPTR,A
    307            }
   \   000046   0E           INC     R6
   \                     ??AD1_ProcessEvent_0:
   \   000047   EE           MOV     A,R6
   \   000048   F8           MOV     R0,A
   \   000049   90....       MOV     DPTR,#lend
   \   00004C   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   00004F   40DD         JC      ??AD1_ProcessEvent_1
    308            for(i=0;i<12;i++)//data_huancong的元素个数次循环
   \   000051   7E00         MOV     R6,#0x0
    309            {
    310              if(i==1 || i==6)
    311                sprintf(str,"%X,",data_huancong[i]);
                               ^
Warning[Pe167]: argument of type "unsigned char *" is incompatible with
          parameter of type "char *"
    312              else if(i==11)
    313                sprintf(str,"%d",data_huancong[i]);
                               ^
Warning[Pe167]: argument of type "unsigned char *" is incompatible with
          parameter of type "char *"
    314              else
    315                sprintf(str,"%d,",data_huancong[i]);
                               ^
Warning[Pe167]: argument of type "unsigned char *" is incompatible with
          parameter of type "char *"
   \                     ??AD1_ProcessEvent_2:
   \   000053                ; Setup parameters for call to function sprintf
   \   000053   EE           MOV     A,R6
   \   000054   25E0         ADD     A,0xE0 /* A   */
   \   000056   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   000059   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00005C   7C..         MOV     R4,#`?<Constant "%d,">` & 0xff
   \   00005E   7D..         MOV     R5,#(`?<Constant "%d,">` >> 8) & 0xff
   \   000060   8027         SJMP    ??AD1_ProcessEvent_3
   \                     ??AD1_ProcessEvent_4:
   \   000062   7401         MOV     A,#0x1
   \   000064   6E           XRL     A,R6
   \   000065   6016         JZ      ??AD1_ProcessEvent_5
   \   000067   7406         MOV     A,#0x6
   \   000069   6E           XRL     A,R6
   \   00006A   6011         JZ      ??AD1_ProcessEvent_5
   \   00006C   740B         MOV     A,#0xb
   \   00006E   6E           XRL     A,R6
   \   00006F   70E2         JNZ     ??AD1_ProcessEvent_2
   \   000071                ; Setup parameters for call to function sprintf
   \   000071   90....       MOV     DPTR,#data_huancong + 22
   \   000074   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000077   7C..         MOV     R4,#`?<Constant "%d">` & 0xff
   \   000079   7D..         MOV     R5,#(`?<Constant "%d">` >> 8) & 0xff
   \   00007B   800C         SJMP    ??AD1_ProcessEvent_3
   \                     ??AD1_ProcessEvent_5:
   \   00007D                ; Setup parameters for call to function sprintf
   \   00007D   EE           MOV     A,R6
   \   00007E   2E           ADD     A,R6
   \   00007F   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   000082   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000085   7C..         MOV     R4,#`?<Constant "%X,">` & 0xff
   \   000087   7D..         MOV     R5,#(`?<Constant "%X,">` >> 8) & 0xff
   \                     ??AD1_ProcessEvent_3:
   \   000089   7A..         MOV     R2,#s_data2 & 0xff
   \   00008B   7B..         MOV     R3,#(s_data2 >> 8) & 0xff
   \   00008D   12....       LCALL   `??sprintf::?relay`  ; Banked call to: sprintf
   \   000090   7402         MOV     A,#0x2
   \   000092   12....       LCALL   ?DEALLOC_XSTACK8
    316              strcat(buf_send,str);//连接字符串
                            ^
Warning[Pe167]: argument of type "unsigned char *" is incompatible with
          parameter of type "char *"

      strcat(buf_send,str);//连接字符串
                      ^
"D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\Source\SampleApp.c",316  Warning[Pe167]: 
          argument of type "unsigned char *" is incompatible with parameter of
          type "char const *"
   \   000095                ; Setup parameters for call to function strcat
   \   000095   7C..         MOV     R4,#s_data2 & 0xff
   \   000097   7D..         MOV     R5,#(s_data2 >> 8) & 0xff
   \   000099   7A..         MOV     R2,#(s_data + 1) & 0xff
   \   00009B   7B..         MOV     R3,#((s_data + 1) >> 8) & 0xff
   \   00009D   12....       LCALL   `??strcat::?relay`   ; Banked call to: strcat
    317            }
   \   0000A0   0E           INC     R6
   \   0000A1   EE           MOV     A,R6
   \   0000A2   C3           CLR     C
   \   0000A3   940C         SUBB    A,#0xc
   \   0000A5   40BB         JC      ??AD1_ProcessEvent_4
    318            lend = (byte)osal_strlen( (void*)buf_send );
   \   0000A7                ; Setup parameters for call to function osal_strlen
   \   0000A7   7A..         MOV     R2,#(s_data + 1) & 0xff
   \   0000A9   7B..         MOV     R3,#((s_data + 1) >> 8) & 0xff
   \   0000AB   12....       LCALL   `??osal_strlen::?relay`; Banked call to: osal_strlen
   \   0000AE   90....       MOV     DPTR,#lend
   \   0000B1   EA           MOV     A,R2
   \   0000B2   12....       LCALL   ??Subroutine16_0 & 0xFFFF
    319            s_data[0]=lend+1;
   \                     ??CrossCallReturnLabel_27:
   \   0000B5   90....       MOV     DPTR,#lend
   \   0000B8   E0           MOVX    A,@DPTR
   \   0000B9   04           INC     A
   \   0000BA   90....       MOV     DPTR,#s_data
   \   0000BD   12....       LCALL   ?Subroutine6 & 0xFFFF
    320            
    321            
    322            if ( AF_DataRequest( &SampleApp_Periodic_DstAddr, &SampleApp_epDesc,
    323                                 SAMPLEAPP_PERIODIC_CLUSTERID,
    324                                 s_data[0],
    325                                 s_data,
    326                                 &SampleApp_TransID,
    327                                 AF_DISCV_ROUTE,
    328                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \                     ??CrossCallReturnLabel_6:
   \   0000C0   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000C3   75....       MOV     ?V0,#SampleApp_TransID & 0xff
   \   0000C6   75....       MOV     ?V1,#(SampleApp_TransID >> 8) & 0xff
   \   0000C9   78..         MOV     R0,#?V0
   \   0000CB   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000CE   75....       MOV     ?V0,#s_data & 0xff
   \   0000D1   75....       MOV     ?V1,#(s_data >> 8) & 0xff
   \   0000D4   78..         MOV     R0,#?V0
   \   0000D6   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000D9   90....       MOV     DPTR,#s_data
   \   0000DC   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   0000DF   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000E2   75..01       MOV     ?V0,#0x1
   \   0000E5   78..         MOV     R0,#?V0
   \   0000E7   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000EA   7920         MOV     R1,#0x20
   \   0000EC   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   0000EE   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   0000F0   7A..         MOV     R2,#SampleApp_Periodic_DstAddr & 0xff
   \   0000F2   7B..         MOV     R3,#(SampleApp_Periodic_DstAddr >> 8) & 0xff
   \   0000F4   12....       LCALL   `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
   \   0000F7   7409         MOV     A,#0x9
   \   0000F9   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000FC   E9           MOV     A,R1
   \   0000FD   701B         JNZ     ??AD1_ProcessEvent_6
    329          #endif
    330            
    331            if(dowm_flag == 1 && AD_data >= 200)
   \   0000FF   90....       MOV     DPTR,#dowm_flag
   \   000102   E0           MOVX    A,@DPTR
   \   000103   6401         XRL     A,#0x1
   \   000105   706D         JNZ     ??AD1_ProcessEvent_7
   \   000107   90....       MOV     DPTR,#AD_data
   \   00010A   C3           CLR     C
   \   00010B   E0           MOVX    A,@DPTR
   \   00010C   94C8         SUBB    A,#-0x38
   \   00010E   A3           INC     DPTR
   \   00010F   E0           MOVX    A,@DPTR
   \   000110   9400         SUBB    A,#0x0
   \   000112   4060         JC      ??AD1_ProcessEvent_7
    332            {
    333               AD_D_H_Base++ ;
   \   000114   90....       MOV     DPTR,#AD_D_H_Base
   \                     ??AD1_ProcessEvent_8:
   \   000117   E0           MOVX    A,@DPTR
   \   000118   04           INC     A
   \   000119   F0           MOVX    @DPTR,A
    334            }
    335            else if(up_flag == 1 && AD_data >=200)
    336            {
    337              AD_U_H_Base++ ;
    338            }
    339            else
    340            {
    341               AD_D_H_Base = 0;
    342               AD_U_H_Base = 0;
    343            }
    344            if(AD_D_H_Base >=2)
   \                     ??AD1_ProcessEvent_6:
   \   00011A   90....       MOV     DPTR,#AD_D_H_Base
   \   00011D   E0           MOVX    A,@DPTR
   \   00011E   C3           CLR     C
   \   00011F   9402         SUBB    A,#0x2
   \   000121   400B         JC      ??CrossCallReturnLabel_9
    345            {
    346              dowm_flag = 0;
   \   000123   90....       MOV     DPTR,#dowm_flag
   \   000126   E4           CLR     A
   \   000127   F0           MOVX    @DPTR,A
    347              up_flag = 0;
   \   000128   90....       MOV     DPTR,#up_flag
   \   00012B   12....       LCALL   ?Subroutine7 & 0xFFFF
    348              Motor_Stop;
    349              
    350            }
    351            
    352            if(AD_U_H_Base >=2)
   \                     ??CrossCallReturnLabel_9:
   \   00012E   90....       MOV     DPTR,#AD_U_H_Base
   \   000131   E0           MOVX    A,@DPTR
   \   000132   C3           CLR     C
   \   000133   9402         SUBB    A,#0x2
   \   000135   4016         JC      ??AD1_ProcessEvent_9
    353            {
    354              dowm_flag = 1;
   \   000137   90....       MOV     DPTR,#dowm_flag
   \   00013A   7401         MOV     A,#0x1
   \   00013C   12....       LCALL   ?Subroutine7 & 0xFFFF
    355              Motor_Stop;
    356              Delayms(300);
   \                     ??CrossCallReturnLabel_10:
   \   00013F                ; Setup parameters for call to function Delayms
   \   00013F   7A2C         MOV     R2,#0x2c
   \   000141   FB           MOV     R3,A
   \   000142   12....       LCALL   `??Delayms::?relay`  ; Banked call to: Delayms
    357              Motor_Dowm;
   \   000145   D291         SETB    0x90.1
   \   000147   C290         CLR     0x90.0
   \   000149   D293         SETB    0x90.3
   \   00014B   D292         SETB    0x90.2
    358            }
    359            if(dowm_flag == 1 || up_flag == 1)
   \                     ??AD1_ProcessEvent_9:
   \   00014D   90....       MOV     DPTR,#dowm_flag
   \   000150   E0           MOVX    A,@DPTR
   \   000151   6401         XRL     A,#0x1
   \   000153   6008         JZ      ??AD1_ProcessEvent_10
   \   000155   90....       MOV     DPTR,#up_flag
   \   000158   E0           MOVX    A,@DPTR
   \   000159   6401         XRL     A,#0x1
   \   00015B   7010         JNZ     ??AD1_ProcessEvent_11
    360            osal_start_timerEx(AD1_TaskID,0x01,500);
   \                     ??AD1_ProcessEvent_10:
   \   00015D                ; Setup parameters for call to function osal_start_timerEx
   \   00015D   7CF4         MOV     R4,#-0xc
   \   00015F   7D01         MOV     R5,#0x1
   \   000161   7A01         MOV     R2,#0x1
   \   000163   7B00         MOV     R3,#0x0
   \   000165   90....       MOV     DPTR,#AD1_TaskID
   \   000168   E0           MOVX    A,@DPTR
   \   000169   F9           MOV     R1,A
   \   00016A   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
    361            return 0;//(events ^ 0x04);
   \                     ??AD1_ProcessEvent_11:
   \   00016D   7A00         MOV     R2,#0x0
   \   00016F   7B00         MOV     R3,#0x0
   \   000171   02....       LJMP    ??Subroutine17_0 & 0xFFFF
   \                     ??AD1_ProcessEvent_7:
   \   000174   90....       MOV     DPTR,#up_flag
   \   000177   E0           MOVX    A,@DPTR
   \   000178   6401         XRL     A,#0x1
   \   00017A   7012         JNZ     ??AD1_ProcessEvent_12
   \   00017C   90....       MOV     DPTR,#AD_data
   \   00017F   C3           CLR     C
   \   000180   E0           MOVX    A,@DPTR
   \   000181   94C8         SUBB    A,#-0x38
   \   000183   A3           INC     DPTR
   \   000184   E0           MOVX    A,@DPTR
   \   000185   9400         SUBB    A,#0x0
   \   000187   4005         JC      ??AD1_ProcessEvent_12
   \   000189   90....       MOV     DPTR,#AD_U_H_Base
   \   00018C   8089         SJMP    ??AD1_ProcessEvent_8
   \                     ??AD1_ProcessEvent_12:
   \   00018E   90....       MOV     DPTR,#AD_D_H_Base
   \   000191   E4           CLR     A
   \   000192   F0           MOVX    @DPTR,A
   \   000193   90....       MOV     DPTR,#AD_U_H_Base
   \   000196   F0           MOVX    @DPTR,A
   \   000197   80B4         SJMP    ??AD1_ProcessEvent_9
   \   000199                REQUIRE _A_P1
    362          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   F8           MOV     R0,A
   \   000001   E4           CLR     A
   \   000002   33           RLC     A
   \   000003   F9           MOV     R1,A
   \   000004   74..         MOV     A,#data_huancong & 0xff
   \   000006   28           ADD     A,R0
   \   000007   F582         MOV     DPL,A
   \   000009   74..         MOV     A,#(data_huancong >> 8) & 0xff
   \   00000B   39           ADDC    A,R1
   \   00000C   F583         MOV     DPH,A
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   C291         CLR     0x90.1
   \   000003   C290         CLR     0x90.0
   \   000005   C293         CLR     0x90.3
   \   000007   C292         CLR     0x90.2
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0,A
   \   000003   75..00       MOV     ?V1,#0x0
   \   000006   78..         MOV     R0,#?V0
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   C3           CLR     C
   \   000006   E8           MOV     A,R0
   \   000007   9A           SUBB    A,R2
   \   000008   E4           CLR     A
   \   000009   9B           SUBB    A,R3
   \   00000A   A2D2         MOV     C,0xD0 /* PSW */.2
   \   00000C   65D0         XRL     A,PSW
   \   00000E   33           RLC     A
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function AF_DataRequest
   \   000001                ; Setup parameters for call to function AF_DataRequest
   \   000001                ; Setup parameters for call to function AF_DataRequest
   \   000001   75..1E       MOV     ?V0,#0x1e
   \   000004   78..         MOV     R0,#?V0
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   E8           MOV     A,R0
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   E9           MOV     A,R1
   \   000004   F0           MOVX    @DPTR,A
   \   000005   A295         MOV     C,0x90.5
   \   000007   E4           CLR     A
   \   000008   33           RLC     A
   \   000009   A3           INC     DPTR
   \   00000A   F0           MOVX    @DPTR,A
   \   00000B   A3           INC     DPTR
   \   00000C   E4           CLR     A
   \   00000D   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   000010   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   000013   F0           MOVX    @DPTR,A
   \   000014   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   000003   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   000006   F0           MOVX    @DPTR,A
   \   000007   A3           INC     DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   F0           MOVX    @DPTR,A
   \   000003   A3           INC     DPTR
   \   000004   F0           MOVX    @DPTR,A
   \   000005   A3           INC     DPTR
   \   000006   F0           MOVX    @DPTR,A
   \   000007   A3           INC     DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine17_0:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    363          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    364          uint16 Beep_Warn_ProcessEvent( uint8 task_id, uint16 events )
   \                     Beep_Warn_ProcessEvent:
    365          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    366            //如果up_over_flag=1，启动一次蜂鸣器任务，如果K2=0，蜂鸣器响，指示灯亮
    367            if(up_over_flag == 1)
   \   000004   90....       MOV     DPTR,#up_over_flag
   \   000007   E0           MOVX    A,@DPTR
   \   000008   6401         XRL     A,#0x1
   \   00000A   701E         JNZ     ??Beep_Warn_ProcessEvent_0
    368            {
    369              osal_start_timerEx(Beep_Warn_TaskID,0x01,500);
   \   00000C                ; Setup parameters for call to function osal_start_timerEx
   \   00000C   7CF4         MOV     R4,#-0xc
   \   00000E   7D01         MOV     R5,#0x1
   \   000010   7A01         MOV     R2,#0x1
   \   000012   7B00         MOV     R3,#0x0
   \   000014   90....       MOV     DPTR,#Beep_Warn_TaskID
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F9           MOV     R1,A
   \   000019   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
    370              if(P1_5 == 0)
   \   00001C   A295         MOV     C,0x90.5
   \   00001E   4006         JC      ??Beep_Warn_ProcessEvent_1
    371               // P2_0 = 0;
    372              {
    373                Beep_On;
   \   000020   D292         SETB    0x90.2
    374                Led_On;
   \   000022   D293         SETB    0x90.3
   \   000024   8004         SJMP    ??Beep_Warn_ProcessEvent_0
    375              }
    376              //如果K2=1关闭蜂鸣器和指示灯
    377              else //P2_0 = 1;
    378              {
    379                Beep_Off;
   \                     ??Beep_Warn_ProcessEvent_1:
   \   000026   C292         CLR     0x90.2
    380                Led_Off;
   \   000028   C293         CLR     0x90.3
    381              }
    382            }
    383            return 0;//(events ^ 0x04);
   \                     ??Beep_Warn_ProcessEvent_0:
   \   00002A   7A00         MOV     R2,#0x0
   \   00002C   7B00         MOV     R3,#0x0
   \   00002E   02....       LJMP    ?Subroutine1 & 0xFFFF
   \   000031                REQUIRE _A_P1
    384          }
    385          
    386          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    387          uint16 SampleApp_ProcessEvent( uint8 task_id, uint16 events )
   \                     SampleApp_ProcessEvent:
    388          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    389            afIncomingMSGPacket_t *MSGpkt;
    390            (void)task_id;  // Intentionally unreferenced parameter
    391          
    392            if ( events & SYS_EVENT_MSG )
   \   000009   5480         ANL     A,#0x80
   \   00000B   607D         JZ      ??SampleApp_ProcessEvent_0
    393            {
    394              MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   00000D                ; Setup parameters for call to function osal_msg_receive
   \   00000D   801D         SJMP    ??SampleApp_ProcessEvent_1
    395              while ( MSGpkt )
    396              {
    397                switch ( MSGpkt->hdr.event )
    398                {
    399                  // Received when a key is pressed
    400                  case KEY_CHANGE:
    401                    HalUARTWrite(0,"The pressed KEY is:", 19);
    402                    SampleApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    403                    break;
    404          
    405                  // Received when a messages is received (OTA) for this endpoint
    406                  case AF_INCOMING_MSG_CMD:
    407                    SampleApp_MessageMSGCB( MSGpkt );
    408                    break;
    409          
    410                  // Received whenever the device changes state in the network
    411                  case ZDO_STATE_CHANGE:
    412                    SampleApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
   \                     ??SampleApp_ProcessEvent_2:
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   90....       MOV     DPTR,#SampleApp_NwkState
   \   000014   F0           MOVX    @DPTR,A
    413                    if ( (SampleApp_NwkState == DEV_ZB_COORD)
    414                        || (SampleApp_NwkState == DEV_ROUTER)
    415                        || (SampleApp_NwkState == DEV_END_DEVICE) )
   \   000015   6409         XRL     A,#0x9
   \   000017   600A         JZ      ??SampleApp_ProcessEvent_3
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   6407         XRL     A,#0x7
   \   00001C   6005         JZ      ??SampleApp_ProcessEvent_3
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   6406         XRL     A,#0x6
   \   000021   7002         JNZ     ??SampleApp_ProcessEvent_4
    416                    {
    417                      P2_0 = 1;
   \                     ??SampleApp_ProcessEvent_3:
   \   000023   D2A0         SETB    0xa0.0
    418                      // Start sending the periodic message in a regular interval.
    419                      //osal_start_timerEx( SampleApp_TaskID,
    420                         //               SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    421                             //           SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT );
    422                    }
    423                    else
    424                    {
    425                      // Device is no longer in the network
    426                    }
    427                    break;
    428          
    429                  default:
    430                    break;
    431                }
    432          
    433                // Release the memory
    434                osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??SampleApp_ProcessEvent_4:
   \   000025                ; Setup parameters for call to function osal_msg_deallocate
   \   000025   AA..         MOV     R2,?V0
   \   000027   AB..         MOV     R3,?V1
   \   000029   12....       LCALL   `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
    435          
    436                // Next - if one is available
    437                MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   00002C                ; Setup parameters for call to function osal_msg_receive
   \                     ??SampleApp_ProcessEvent_1:
   \   00002C   90....       MOV     DPTR,#SampleApp_TaskID
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   F9           MOV     R1,A
   \   000031   12....       LCALL   `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
   \   000034   8A..         MOV     ?V0,R2
   \   000036   8B..         MOV     ?V1,R3
   \   000038   E5..         MOV     A,?V0
   \   00003A   45..         ORL     A,?V1
   \   00003C   6045         JZ      ??SampleApp_ProcessEvent_5
   \   00003E   85..82       MOV     DPL,?V0
   \   000041   85..83       MOV     DPH,?V1
   \   000044   E0           MOVX    A,@DPTR
   \   000045   24E6         ADD     A,#-0x1a
   \   000047   6031         JZ      ??SampleApp_ProcessEvent_6
   \   000049   245A         ADD     A,#0x5a
   \   00004B   6006         JZ      ??SampleApp_ProcessEvent_7
   \   00004D   24EF         ADD     A,#-0x11
   \   00004F   60BE         JZ      ??SampleApp_ProcessEvent_2
   \   000051   80D2         SJMP    ??SampleApp_ProcessEvent_4
   \                     ??SampleApp_ProcessEvent_7:
   \   000053                ; Setup parameters for call to function HalUARTWrite
   \   000053   7C13         MOV     R4,#0x13
   \   000055   7D00         MOV     R5,#0x0
   \   000057   7A..         MOV     R2,#`?<Constant "The pressed KEY is:">` & 0xff
   \   000059   7B..         MOV     R3,#(`?<Constant "The pressed KEY is:">` >> 8) & 0xff
   \   00005B   7900         MOV     R1,#0x0
   \   00005D   12....       LCALL   `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
   \   000060                ; Setup parameters for call to function SampleApp_HandleKeys
   \   000060   85..82       MOV     DPL,?V0
   \   000063   85..83       MOV     DPH,?V1
   \   000066   A3           INC     DPTR
   \   000067   A3           INC     DPTR
   \   000068   A3           INC     DPTR
   \   000069   E0           MOVX    A,@DPTR
   \   00006A   FA           MOV     R2,A
   \   00006B   85..82       MOV     DPL,?V0
   \   00006E   85..83       MOV     DPH,?V1
   \   000071   A3           INC     DPTR
   \   000072   A3           INC     DPTR
   \   000073   E0           MOVX    A,@DPTR
   \   000074   F9           MOV     R1,A
   \   000075   12....       LCALL   `??SampleApp_HandleKeys::?relay`; Banked call to: SampleApp_HandleKeys
   \   000078   80AB         SJMP    ??SampleApp_ProcessEvent_4
   \                     ??SampleApp_ProcessEvent_6:
   \   00007A                ; Setup parameters for call to function SampleApp_MessageMSGCB
   \   00007A   AA..         MOV     R2,?V0
   \   00007C   AB..         MOV     R3,?V1
   \   00007E   12....       LCALL   `??SampleApp_MessageMSGCB::?relay`; Banked call to: SampleApp_MessageMSGCB
   \   000081   80A2         SJMP    ??SampleApp_ProcessEvent_4
    438              }
    439          
    440              // return unprocessed events
    441              return (events ^ SYS_EVENT_MSG);
   \                     ??SampleApp_ProcessEvent_5:
   \   000083   EE           MOV     A,R6
   \   000084   FA           MOV     R2,A
   \   000085   EF           MOV     A,R7
   \   000086   6480         XRL     A,#0x80
   \   000088   8024         SJMP    ??SampleApp_ProcessEvent_8
    442            }
    443          
    444            // Send a message out - This event is generated by a timer
    445            //  (setup in SampleApp_Init()).
    446            if ( events & SAMPLEAPP_SEND_PERIODIC_MSG_EVT )
   \                     ??SampleApp_ProcessEvent_0:
   \   00008A   EE           MOV     A,R6
   \   00008B   A2E0         MOV     C,0xE0 /* A   */.0
   \   00008D   5022         JNC     ??SampleApp_ProcessEvent_9
    447            {
    448              // Send the periodic message
    449              SampleApp_SendPeriodicMessage();
   \   00008F                ; Setup parameters for call to function SampleApp_SendPeriodicMessage
   \   00008F   12....       LCALL   `??SampleApp_SendPeriodicMessage::?relay`; Banked call to: SampleApp_SendPeriodicMessage
    450          
    451              // Setup to send message again in normal period (+ a little jitter)
    452              osal_start_timerEx( SampleApp_TaskID, SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    453                  (SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT + (osal_rand() & 0x00FF)) );
   \   000092                ; Setup parameters for call to function osal_rand
   \   000092   12....       LCALL   `??osal_rand::?relay`; Banked call to: osal_rand
   \   000095                ; Setup parameters for call to function osal_start_timerEx
   \   000095   EA           MOV     A,R2
   \   000096   2488         ADD     A,#-0x78
   \   000098   FC           MOV     R4,A
   \   000099   E4           CLR     A
   \   00009A   3413         ADDC    A,#0x13
   \   00009C   FD           MOV     R5,A
   \   00009D   7A01         MOV     R2,#0x1
   \   00009F   7B00         MOV     R3,#0x0
   \   0000A1   90....       MOV     DPTR,#SampleApp_TaskID
   \   0000A4   E0           MOVX    A,@DPTR
   \   0000A5   F9           MOV     R1,A
   \   0000A6   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
    454          
    455              // return unprocessed events
    456              return (events ^ SAMPLEAPP_SEND_PERIODIC_MSG_EVT);
   \   0000A9   EE           MOV     A,R6
   \   0000AA   6401         XRL     A,#0x1
   \   0000AC   FA           MOV     R2,A
   \   0000AD   EF           MOV     A,R7
   \                     ??SampleApp_ProcessEvent_8:
   \   0000AE   FB           MOV     R3,A
   \   0000AF   8004         SJMP    ??SampleApp_ProcessEvent_10
    457            }
    458          
    459            // Discard unknown events
    460            return 0;
   \                     ??SampleApp_ProcessEvent_9:
   \   0000B1   7A00         MOV     R2,#0x0
   \   0000B3   7B00         MOV     R3,#0x0
   \                     ??SampleApp_ProcessEvent_10:
   \   0000B5   7F04         MOV     R7,#0x4
   \   0000B7   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   0000BA                REQUIRE _A_P2
    461          }
    462          
    463          
    464          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    465          void SampleApp_HandleKeys( uint8 shift, uint8 keys )
   \                     SampleApp_HandleKeys:
    466          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
    467            (void)shift;  // Intentionally unreferenced parameter
    468            
    469            if ( keys & HAL_KEY_SW_6 ) 
   \   000006   A2E5         MOV     C,0xE0 /* A   */.5
   \   000008   5033         JNC     ??SampleApp_HandleKeys_0
    470            { 
    471              //地锁收到up指令后将up_flag置1
    472              if(up_flag == 1)
   \   00000A   90....       MOV     DPTR,#up_flag
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   6401         XRL     A,#0x1
   \   000010   702B         JNZ     ??SampleApp_HandleKeys_0
    473              {
    474                //如果K2(P1_5)=1，电机停止，up_flag置0，up_over_flag=1,启动蜂鸣器任务
    475                Delayms(300);//i=xms 即延时 i 毫秒
   \   000012                ; Setup parameters for call to function Delayms
   \   000012   7A2C         MOV     R2,#0x2c
   \   000014   7B01         MOV     R3,#0x1
   \   000016   12....       LCALL   `??Delayms::?relay`  ; Banked call to: Delayms
    476                if(P1_5 == 1)
   \   000019   A295         MOV     C,0x90.5
   \   00001B   5020         JNC     ??SampleApp_HandleKeys_0
    477                {
    478                  Motor_Stop;
   \   00001D   C291         CLR     0x90.1
   \   00001F   C290         CLR     0x90.0
   \   000021   C293         CLR     0x90.3
   \   000023   C292         CLR     0x90.2
    479                  up_flag = 0;
   \   000025   90....       MOV     DPTR,#up_flag
   \   000028   E4           CLR     A
   \   000029   F0           MOVX    @DPTR,A
    480                  up_over_flag = 1;
   \   00002A   90....       MOV     DPTR,#up_over_flag
   \   00002D   04           INC     A
   \   00002E   F0           MOVX    @DPTR,A
    481                  osal_start_timerEx(Beep_Warn_TaskID,0x01,500);
   \   00002F                ; Setup parameters for call to function osal_start_timerEx
   \   00002F   7CF4         MOV     R4,#-0xc
   \   000031   FD           MOV     R5,A
   \   000032   FA           MOV     R2,A
   \   000033   7B00         MOV     R3,#0x0
   \   000035   90....       MOV     DPTR,#Beep_Warn_TaskID
   \   000038   E0           MOVX    A,@DPTR
   \   000039   F9           MOV     R1,A
   \   00003A   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
    482                }
    483              }
    484              //P1_5 = 1;
    485             // HalUARTWrite(0,"K1",2); //提示被按下的是KEY1 
    486             // HalUARTWrite(0,"\n",1); //
    487              //HalLedBlink( HAL_LED_1, 2, 50, 500 ); //LED1闪烁2次，每次为500ms，点亮时间为50%
    488            }
    489          #if 0
    490            if ( keys & HAL_KEY_SW_1 )
    491            {
    492              /* This key sends the Flash Command is sent to Group 1.
    493               * This device will not receive the Flash Command from this
    494               * device (even if it belongs to group 1).
    495               */
    496              SampleApp_SendFlashMessage( SAMPLEAPP_FLASH_DURATION );
    497            }
    498          
    499            if ( keys & HAL_KEY_SW_2 )
    500            {
    501              /* The Flashr Command is sent to Group 1.
    502               * This key toggles this device in and out of group 1.
    503               * If this device doesn't belong to group 1, this application
    504               * will not receive the Flash command sent to group 1.
    505               */
    506              aps_Group_t *grp;
    507              grp = aps_FindGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
    508              if ( grp )
    509              {
    510                // Remove from the group
    511                aps_RemoveGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
    512              }
    513              else
    514              {
    515                // Add to the flash group
    516                aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
    517              }
    518            }
    519          #endif
    520          }
   \                     ??SampleApp_HandleKeys_0:
   \   00003D   02....       LJMP    ?Subroutine0 & 0xFFFF
   \   000040                REQUIRE _A_P1
    521          
    522          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    523          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
   \                     SampleApp_MessageMSGCB:
    524          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
    525              uint16 flashTime;
    526              uint8 i;
    527              uint8 *str;
    528              uint8 *buf_send;
    529            switch ( pkt->clusterId)
   \   000005   8A82         MOV     DPL,R2
   \   000007   8B83         MOV     DPH,R3
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   A3           INC     DPTR
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   F5..         MOV     ?V0,A
   \   000010   A3           INC     DPTR
   \   000011   E0           MOVX    A,@DPTR
   \   000012   F5..         MOV     ?V1,A
   \   000014   78..         MOV     R0,#?V0
   \   000016   12....       LCALL   ?US_SWITCH_DENSE
   \                     `?<Jumptable for SampleApp_MessageMSGCB>_0`:
   \   000019   0200         DW        2
   \   00001B   01           DB        1
   \   00001C   ....         DW        ??SampleApp_MessageMSGCB_0
   \   00001E   ....         DW        ??SampleApp_MessageMSGCB_1
   \   000020   ....         DW        ??SampleApp_MessageMSGCB_2
    530            {
    531              case SAMPLEAPP_PERIODIC_CLUSTERID:
    532                break;
    533              case SAMPLEAPP_COM_CLUSTERID:     //如果是串口透传的信息
    534                if(((pkt->cmd.Data[1]-'0')*10+pkt->cmd.Data[2]-'0')==Devic_Num)
   \                     ??SampleApp_MessageMSGCB_2:
   \   000022   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   000025   75F00A       MOV     B,#0xa
   \   000028   A4           MUL     AB
   \   000029   FA           MOV     R2,A
   \   00002A   ABF0         MOV     R3,B
   \   00002C   8882         MOV     DPL,R0
   \   00002E   8983         MOV     DPH,R1
   \   000030   A3           INC     DPTR
   \   000031   A3           INC     DPTR
   \   000032   E0           MOVX    A,@DPTR
   \   000033   FC           MOV     R4,A
   \   000034   EA           MOV     A,R2
   \   000035   2C           ADD     A,R4
   \   000036   FA           MOV     R2,A
   \   000037   E4           CLR     A
   \   000038   3B           ADDC    A,R3
   \   000039   FB           MOV     R3,A
   \   00003A   EA           MOV     A,R2
   \   00003B   24F0         ADD     A,#-0x10
   \   00003D   FA           MOV     R2,A
   \   00003E   EB           MOV     A,R3
   \   00003F   34FD         ADDC    A,#-0x3
   \   000041   FB           MOV     R3,A
   \   000042   7404         MOV     A,#0x4
   \   000044   6A           XRL     A,R2
   \   000045   4B           ORL     A,R3
   \   000046   6003         JZ      $+5
   \   000048   02....       LJMP    ??SampleApp_MessageMSGCB_0 & 0xFFFF
    535                {
    536                  switch (pkt->cmd.Data[3]-'0')
   \   00004B   8882         MOV     DPL,R0
   \   00004D   8983         MOV     DPH,R1
   \   00004F   A3           INC     DPTR
   \   000050   A3           INC     DPTR
   \   000051   A3           INC     DPTR
   \   000052   E0           MOVX    A,@DPTR
   \   000053   24D0         ADD     A,#-0x30
   \   000055   F5..         MOV     ?V0,A
   \   000057   E4           CLR     A
   \   000058   34FF         ADDC    A,#-0x1
   \   00005A   F5..         MOV     ?V1,A
   \   00005C   78..         MOV     R0,#?V0
   \   00005E   12....       LCALL   ?US_SWITCH_DENSE
   \                     `?<Jumptable for SampleApp_MessageMSGCB>_1`:
   \   000061   0600         DW        6
   \   000063   03           DB        3
   \   000064   ....         DW        ??SampleApp_MessageMSGCB_0
   \   000066   ....         DW        ??SampleApp_MessageMSGCB_3
   \   000068   ....         DW        ??SampleApp_MessageMSGCB_4
   \   00006A   ....         DW        ??SampleApp_MessageMSGCB_5
   \   00006C   ....         DW        ??SampleApp_MessageMSGCB_6
    537                  {
    538                    case 7:
    539                       Motor_Up;
   \                     ??SampleApp_MessageMSGCB_4:
   \   00006E   D290         SETB    0x90.0
   \   000070   C291         CLR     0x90.1
   \   000072   D293         SETB    0x90.3
   \   000074   D292         SETB    0x90.2
    540                       Beep_On;
   \   000076   D292         SETB    0x90.2
    541                       Led_On;
   \   000078   D293         SETB    0x90.3
    542                       up_flag = 1;
   \   00007A   90....       MOV     DPTR,#up_flag
   \   00007D   7401         MOV     A,#0x1
   \   00007F   F0           MOVX    @DPTR,A
    543                       dowm_flag = 0;
   \   000080   90....       MOV     DPTR,#dowm_flag
   \   000083   E4           CLR     A
   \   000084   F0           MOVX    @DPTR,A
    544                       K2_Base = 0;
   \   000085   90....       MOV     DPTR,#K2_Base
   \   000088   800F         SJMP    ??CrossCallReturnLabel_5
    545                       osal_start_timerEx(AD1_TaskID,0x01,500);
    546                    break;
    547                    
    548                    case 8:
    549                       Motor_Dowm;
   \                     ??SampleApp_MessageMSGCB_5:
   \   00008A   D291         SETB    0x90.1
   \   00008C   C290         CLR     0x90.0
   \   00008E   D293         SETB    0x90.3
   \   000090   D292         SETB    0x90.2
    550                       Beep_On;
   \   000092   D292         SETB    0x90.2
    551                       Led_On;
   \   000094   D293         SETB    0x90.3
    552                       dowm_flag = 1;
   \   000096   12....       LCALL   ?Subroutine5 & 0xFFFF
    553                       up_flag = 0;
    554                       up_over_flag = 0;
   \                     ??CrossCallReturnLabel_5:
   \   000099   12....       LCALL   ?Subroutine4 & 0xFFFF
    555                       osal_start_timerEx(AD1_TaskID,0x01,500);
   \                     ??CrossCallReturnLabel_3:
   \   00009C   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
    556                    break; 
   \   00009F   02....       LJMP    ??SampleApp_MessageMSGCB_0 & 0xFFFF
    557                    
    558                    case 9:
    559                       Motor_Stop;
   \                     ??SampleApp_MessageMSGCB_6:
   \   0000A2   C291         CLR     0x90.1
   \   0000A4   C290         CLR     0x90.0
   \   0000A6   C293         CLR     0x90.3
   \   0000A8   C292         CLR     0x90.2
    560                       Beep_Off;
   \   0000AA   C292         CLR     0x90.2
    561                       Led_Off;
   \   0000AC   C293         CLR     0x90.3
    562                       up_flag = 0;
   \   0000AE   90....       MOV     DPTR,#up_flag
   \   0000B1   E4           CLR     A
   \   0000B2   F0           MOVX    @DPTR,A
    563                       dowm_flag = 0;
   \   0000B3   90....       MOV     DPTR,#dowm_flag
   \   0000B6   F0           MOVX    @DPTR,A
    564                       up_over_flag = 0;
   \   0000B7   90....       MOV     DPTR,#up_over_flag
   \   0000BA   F0           MOVX    @DPTR,A
    565                    break; 
   \   0000BB   02....       LJMP    ??SampleApp_MessageMSGCB_0 & 0xFFFF
    566                    
    567                    case 6:
    568                            
    569                      buf_send = &s2_data[1];//第0元素用于存储发送长度
    570                      str = s2_data2;
    571                      //AD 采集  电池电压
    572                      AD_data2 = HalAdcRead(HAL_ADC_CHANNEL_7,HAL_ADC_RESOLUTION_14);
    573                      AD_data2 = 0.02*AD_data2;
                                      ^
Warning[Pa093]: implicit conversion from floating point to integer
   \                     ??SampleApp_MessageMSGCB_3:
   \   0000BE                ; Setup parameters for call to function HalAdcRead
   \   0000BE   7A04         MOV     R2,#0x4
   \   0000C0   7907         MOV     R1,#0x7
   \   0000C2   12....       LCALL   `??HalAdcRead::?relay`; Banked call to: HalAdcRead
   \   0000C5   8A..         MOV     ?V0,R2
   \   0000C7   8B..         MOV     ?V1,R3
   \   0000C9   E4           CLR     A
   \   0000CA   F5..         MOV     ?V2,A
   \   0000CC   F5..         MOV     ?V3,A
   \   0000CE   78..         MOV     R0,#?V0
   \   0000D0   12....       LCALL   ?UL_TO_FLT
   \   0000D3   90....       MOV     DPTR,#__Constant_3ca3d70a
   \   0000D6   78..         MOV     R0,#?V4
   \   0000D8   12....       LCALL   ?L_MOV_X
   \   0000DB   78..         MOV     R0,#?V0
   \   0000DD   79..         MOV     R1,#?V4
   \   0000DF   12....       LCALL   ?FLT_MUL
   \   0000E2   78..         MOV     R0,#?V0
   \   0000E4   12....       LCALL   ?FLT_TO_L
   \   0000E7   90....       MOV     DPTR,#AD_data2
   \   0000EA   E5..         MOV     A,?V0
   \   0000EC   F0           MOVX    @DPTR,A
   \   0000ED   A3           INC     DPTR
   \   0000EE   E5..         MOV     A,?V1
   \   0000F0   F0           MOVX    @DPTR,A
    574                       //电量百分比转换 AD_data2*0.0227 即为相对 6.8V 的电量百分数
    575            #if 1
    576                      data_huancong2[0]=AD_data2;//Device_number;
   \   0000F1   90....       MOV     DPTR,#AD_data2
   \   0000F4   E0           MOVX    A,@DPTR
   \   0000F5   F8           MOV     R0,A
   \   0000F6   A3           INC     DPTR
   \   0000F7   E0           MOVX    A,@DPTR
   \   0000F8   F9           MOV     R1,A
   \   0000F9   90....       MOV     DPTR,#data_huancong2
   \   0000FC   12....       LCALL   ?Subroutine3 & 0xFFFF
    577                      data_huancong2[1]=P1_5;
    578                      data_huancong2[2]=0;
    579                      data_huancong2[3]=0;
    580                      data_huancong2[4]=0;
    581                      data_huancong2[5]=0;
    582                      data_huancong2[6]=0;
    583                      data_huancong2[7]=0;
    584                      data_huancong2[8]=0;
    585                      data_huancong2[9]=0;
    586                      data_huancong2[10]=0;
    587                      data_huancong2[11]=0;
   \                     ??CrossCallReturnLabel_1:
   \   0000FF   A3           INC     DPTR
   \   000100   F0           MOVX    @DPTR,A
   \   000101   A3           INC     DPTR
   \   000102   F0           MOVX    @DPTR,A
    588                       
    589                      for(i=0;i<lend2;i++)
   \   000103   7E00         MOV     R6,#0x0
   \   000105   8019         SJMP    ??SampleApp_MessageMSGCB_7
    590                      {
    591                       s2_data[i] = 0;
   \                     ??SampleApp_MessageMSGCB_8:
   \   000107   74..         MOV     A,#s2_data & 0xff
   \   000109   28           ADD     A,R0
   \   00010A   F582         MOV     DPL,A
   \   00010C   E4           CLR     A
   \   00010D   34..         ADDC    A,#(s2_data >> 8) & 0xff
   \   00010F   F583         MOV     DPH,A
   \   000111   E4           CLR     A
   \   000112   F0           MOVX    @DPTR,A
    592                       s2_data2[i] = 0;
   \   000113   74..         MOV     A,#s2_data2 & 0xff
   \   000115   28           ADD     A,R0
   \   000116   F582         MOV     DPL,A
   \   000118   E4           CLR     A
   \   000119   34..         ADDC    A,#(s2_data2 >> 8) & 0xff
   \   00011B   F583         MOV     DPH,A
   \   00011D   E4           CLR     A
   \   00011E   F0           MOVX    @DPTR,A
    593                      }
   \   00011F   0E           INC     R6
   \                     ??SampleApp_MessageMSGCB_7:
   \   000120   EE           MOV     A,R6
   \   000121   F8           MOV     R0,A
   \   000122   90....       MOV     DPTR,#lend2
   \   000125   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   000128   40DD         JC      ??SampleApp_MessageMSGCB_8
    594                      for(i=0;i<12;i++)//data_huancong的元素个数次循环
   \   00012A   7E00         MOV     R6,#0x0
    595                      {
    596                        if(i==1 || i==6)
    597                          sprintf(str,"%X,",data_huancong2[i]);
                                         ^
Warning[Pe167]: argument of type "unsigned char *" is incompatible with
          parameter of type "char *"
    598                        else if(i==11)
    599                          sprintf(str,"%d",data_huancong2[i]);
                                         ^
Warning[Pe167]: argument of type "unsigned char *" is incompatible with
          parameter of type "char *"
    600                        else
    601                          sprintf(str,"%d,",data_huancong2[i]);
                                         ^
Warning[Pe167]: argument of type "unsigned char *" is incompatible with
          parameter of type "char *"
   \                     ??SampleApp_MessageMSGCB_9:
   \   00012C                ; Setup parameters for call to function sprintf
   \   00012C   EE           MOV     A,R6
   \   00012D   25E0         ADD     A,0xE0 /* A   */
   \   00012F   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   000132   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000135   7C..         MOV     R4,#`?<Constant "%d,">` & 0xff
   \   000137   7D..         MOV     R5,#(`?<Constant "%d,">` >> 8) & 0xff
   \   000139   8027         SJMP    ??SampleApp_MessageMSGCB_10
   \                     ??SampleApp_MessageMSGCB_11:
   \   00013B   7401         MOV     A,#0x1
   \   00013D   6E           XRL     A,R6
   \   00013E   6016         JZ      ??SampleApp_MessageMSGCB_12
   \   000140   7406         MOV     A,#0x6
   \   000142   6E           XRL     A,R6
   \   000143   6011         JZ      ??SampleApp_MessageMSGCB_12
   \   000145   740B         MOV     A,#0xb
   \   000147   6E           XRL     A,R6
   \   000148   70E2         JNZ     ??SampleApp_MessageMSGCB_9
   \   00014A                ; Setup parameters for call to function sprintf
   \   00014A   90....       MOV     DPTR,#data_huancong2 + 22
   \   00014D   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000150   7C..         MOV     R4,#`?<Constant "%d">` & 0xff
   \   000152   7D..         MOV     R5,#(`?<Constant "%d">` >> 8) & 0xff
   \   000154   800C         SJMP    ??SampleApp_MessageMSGCB_10
   \                     ??SampleApp_MessageMSGCB_12:
   \   000156                ; Setup parameters for call to function sprintf
   \   000156   EE           MOV     A,R6
   \   000157   2E           ADD     A,R6
   \   000158   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   00015B   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00015E   7C..         MOV     R4,#`?<Constant "%X,">` & 0xff
   \   000160   7D..         MOV     R5,#(`?<Constant "%X,">` >> 8) & 0xff
   \                     ??SampleApp_MessageMSGCB_10:
   \   000162   7A..         MOV     R2,#s2_data2 & 0xff
   \   000164   7B..         MOV     R3,#(s2_data2 >> 8) & 0xff
   \   000166   12....       LCALL   `??sprintf::?relay`  ; Banked call to: sprintf
   \   000169   7402         MOV     A,#0x2
   \   00016B   12....       LCALL   ?DEALLOC_XSTACK8
    602                        strcat(buf_send,str);//连接字符串
                                      ^
Warning[Pe167]: argument of type "unsigned char *" is incompatible with
          parameter of type "char *"

                strcat(buf_send,str);//连接字符串
                                ^
"D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\Source\SampleApp.c",602  Warning[Pe167]: 
          argument of type "unsigned char *" is incompatible with parameter of
          type "char const *"
   \   00016E                ; Setup parameters for call to function strcat
   \   00016E   7C..         MOV     R4,#s2_data2 & 0xff
   \   000170   7D..         MOV     R5,#(s2_data2 >> 8) & 0xff
   \   000172   7A..         MOV     R2,#(s2_data + 1) & 0xff
   \   000174   7B..         MOV     R3,#((s2_data + 1) >> 8) & 0xff
   \   000176   12....       LCALL   `??strcat::?relay`   ; Banked call to: strcat
    603                      }
   \   000179   0E           INC     R6
   \   00017A   EE           MOV     A,R6
   \   00017B   C3           CLR     C
   \   00017C   940C         SUBB    A,#0xc
   \   00017E   40BB         JC      ??SampleApp_MessageMSGCB_11
    604                      lend2 = (byte)osal_strlen( (void*)buf_send );
   \   000180                ; Setup parameters for call to function osal_strlen
   \   000180   7A..         MOV     R2,#(s2_data + 1) & 0xff
   \   000182   7B..         MOV     R3,#((s2_data + 1) >> 8) & 0xff
   \   000184   12....       LCALL   `??osal_strlen::?relay`; Banked call to: osal_strlen
   \   000187   90....       MOV     DPTR,#lend2
   \   00018A   EA           MOV     A,R2
   \   00018B   12....       LCALL   ??Subroutine16_0 & 0xFFFF
    605                      s2_data[0]=lend2+1;
   \                     ??CrossCallReturnLabel_28:
   \   00018E   90....       MOV     DPTR,#lend2
   \   000191   E0           MOVX    A,@DPTR
   \   000192   04           INC     A
   \   000193   90....       MOV     DPTR,#s2_data
   \   000196   12....       LCALL   ?Subroutine6 & 0xFFFF
    606                      
    607                      
    608                      if ( AF_DataRequest( &SampleApp_Periodic_DstAddr, &SampleApp_epDesc,
    609                                           SAMPLEAPP_PERIODIC_CLUSTERID,
    610                                           s2_data[0],
    611                                           s2_data,
    612                                           &SampleApp_TransID,
    613                                           AF_DISCV_ROUTE,
    614                                           AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \                     ??CrossCallReturnLabel_7:
   \   000199   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00019C   75....       MOV     ?V0,#SampleApp_TransID & 0xff
   \   00019F   75....       MOV     ?V1,#(SampleApp_TransID >> 8) & 0xff
   \   0001A2   78..         MOV     R0,#?V0
   \   0001A4   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001A7   75....       MOV     ?V0,#s2_data & 0xff
   \   0001AA   75....       MOV     ?V1,#(s2_data >> 8) & 0xff
   \   0001AD   78..         MOV     R0,#?V0
   \   0001AF   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001B2   90....       MOV     DPTR,#s2_data
   \   0001B5   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   0001B8   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001BB   75..01       MOV     ?V0,#0x1
   \   0001BE   78..         MOV     R0,#?V0
   \   0001C0   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001C3   7920         MOV     R1,#0x20
   \   0001C5   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   0001C7   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   0001C9   7A..         MOV     R2,#SampleApp_Periodic_DstAddr & 0xff
   \   0001CB   7B..         MOV     R3,#(SampleApp_Periodic_DstAddr >> 8) & 0xff
   \   0001CD   12....       LCALL   `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
   \   0001D0   7409         MOV     A,#0x9
   \   0001D2   12....       LCALL   ?DEALLOC_XSTACK8
    615                            
    616                      {
    617                      }
    618            #endif
    619                    break;
   \   0001D5   802B         SJMP    ??SampleApp_MessageMSGCB_0
    620                  }
    621                }
    622                break;
    623              case SAMPLEAPP_FLASH_CLUSTERID:
    624                flashTime = BUILD_UINT16(pkt->cmd.Data[1], pkt->cmd.Data[2] );
    625                HalLedBlink( HAL_LED_4, 4, 50, (flashTime / 4) );
   \                     ??SampleApp_MessageMSGCB_1:
   \   0001D7   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   0001DA   FA           MOV     R2,A
   \   0001DB   8882         MOV     DPL,R0
   \   0001DD   8983         MOV     DPH,R1
   \   0001DF   A3           INC     DPTR
   \   0001E0   A3           INC     DPTR
   \   0001E1   E0           MOVX    A,@DPTR
   \   0001E2   F8           MOV     R0,A
   \   0001E3   E4           CLR     A
   \   0001E4   C8           XCH     A,R0
   \   0001E5   F9           MOV     R1,A
   \   0001E6   EA           MOV     A,R2
   \   0001E7   28           ADD     A,R0
   \   0001E8   F5..         MOV     ?V0,A
   \   0001EA   E4           CLR     A
   \   0001EB   39           ADDC    A,R1
   \   0001EC   F5..         MOV     ?V1,A
   \   0001EE   7402         MOV     A,#0x2
   \   0001F0   78..         MOV     R0,#?V0
   \   0001F2   12....       LCALL   ?US_SHR
   \   0001F5   AC..         MOV     R4,?V0
   \   0001F7   AD..         MOV     R5,?V1
   \   0001F9   7B32         MOV     R3,#0x32
   \   0001FB   7A04         MOV     R2,#0x4
   \   0001FD   7908         MOV     R1,#0x8
   \   0001FF   12....       LCALL   `??HalLedBlink::?relay`; Banked call to: HalLedBlink
    626                break;
    627            }
    628          }
   \                     ??SampleApp_MessageMSGCB_0:
   \   000202   7F08         MOV     R7,#0x8
   \   000204   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   000207                REQUIRE _A_P1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   F8           MOV     R0,A
   \   000001   E4           CLR     A
   \   000002   33           RLC     A
   \   000003   F9           MOV     R1,A
   \   000004   74..         MOV     A,#data_huancong2 & 0xff
   \   000006   28           ADD     A,R0
   \   000007   F582         MOV     DPL,A
   \   000009   74..         MOV     A,#(data_huancong2 >> 8) & 0xff
   \   00000B   39           ADDC    A,R1
   \   00000C   F583         MOV     DPH,A
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   EA           MOV     A,R2
   \   000001   2421         ADD     A,#0x21
   \   000003   F582         MOV     DPL,A
   \   000005   E4           CLR     A
   \   000006   3B           ADDC    A,R3
   \   000007   F583         MOV     DPH,A
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   F8           MOV     R0,A
   \   00000B   A3           INC     DPTR
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   F9           MOV     R1,A
   \   00000E                ; Setup parameters for call to function HalLedBlink
   \   00000E   8882         MOV     DPL,R0
   \   000010   8983         MOV     DPH,R1
   \   000012   A3           INC     DPTR
   \   000013   E0           MOVX    A,@DPTR
   \   000014   22           RET
    629          
    630          /*********************************************************************
    631           * @fn      SampleApp_SendPeriodicMessage
    632           *
    633           * @brief   Send the periodic message.
    634           *
    635           * @param   none
    636           *
    637           * @return  none
    638           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    639          void SampleApp_SendPeriodicMessage( void )
   \                     SampleApp_SendPeriodicMessage:
    640          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    641            P2_0 = ~P2_0;
   \   000005   E5A0         MOV     A,0xa0
   \   000007   F4           CPL     A
   \   000008   FE           MOV     R6,A
   \   000009   D2F0         SETB    B.0
   \   00000B   A2A0         MOV     C,0xa0.0
   \   00000D   30F001       JNB     B.0,??SampleApp_SendPeriodicMessage_0
   \   000010   B3           CPL     C
   \                     ??SampleApp_SendPeriodicMessage_0:
   \   000011   92A0         MOV     0xa0.0,C
    642            if ( AF_DataRequest( &SampleApp_Periodic_DstAddr, &SampleApp_epDesc,
    643                                 SAMPLEAPP_PERIODIC_CLUSTERID,
    644                                 1,
    645                                 (uint8*)&SampleAppPeriodicCounter,
    646                                 &SampleApp_TransID,
    647                                 AF_DISCV_ROUTE,
    648                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   000013                ; Setup parameters for call to function AF_DataRequest
   \   000013   75..1E       MOV     ?V0,#0x1e
   \   000016   78..         MOV     R0,#?V0
   \   000018   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00001B   75....       MOV     ?V0,#SampleApp_TransID & 0xff
   \   00001E   75....       MOV     ?V1,#(SampleApp_TransID >> 8) & 0xff
   \   000021   78..         MOV     R0,#?V0
   \   000023   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000026   75....       MOV     ?V0,#SampleAppPeriodicCounter & 0xff
   \   000029   75....       MOV     ?V1,#(SampleAppPeriodicCounter >> 8) & 0xff
   \   00002C   78..         MOV     R0,#?V0
   \   00002E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000031   75..01       MOV     ?V0,#0x1
   \   000034   75..00       MOV     ?V1,#0x0
   \   000037   78..         MOV     R0,#?V0
   \   000039   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003C   78..         MOV     R0,#?V0
   \   00003E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000041   7920         MOV     R1,#0x20
   \   000043   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   000045   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000047   7A..         MOV     R2,#SampleApp_Periodic_DstAddr & 0xff
   \   000049   7B..         MOV     R3,#(SampleApp_Periodic_DstAddr >> 8) & 0xff
   \   00004B   12....       LCALL   `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
   \   00004E   7409         MOV     A,#0x9
   \   000050                REQUIRE ?Subroutine2
   \   000050                REQUIRE _A_P2
   \   000050                ; // Fall through to label ?Subroutine2
    649            {
    650            }
    651            else
    652            {
    653              // Error occurred in request to send.
    654            }
    655          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine17_0
   \   000003                ; // Fall through to label ??Subroutine17_0
    656          
    657          /*********************************************************************
    658           * @fn      SampleApp_SendFlashMessage
    659           *
    660           * @brief   Send the flash message to group 1.
    661           *
    662           * @param   flashTime - in milliseconds
    663           *
    664           * @return  none
    665           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    666          void SampleApp_SendFlashMessage( uint16 flashTime )
   \                     SampleApp_SendFlashMessage:
    667          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    668            uint8 buffer[3];
    669            buffer[0] = (uint8)(SampleAppFlashCounter++);
   \   00000A   90....       MOV     DPTR,#SampleAppFlashCounter
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   F0           MOVX    @DPTR,A
   \   000015   90....       MOV     DPTR,#SampleAppFlashCounter
   \   000018   E0           MOVX    A,@DPTR
   \   000019   04           INC     A
   \   00001A   F0           MOVX    @DPTR,A
    670            buffer[1] = LO_UINT16( flashTime );
   \   00001B   7401         MOV     A,#0x1
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   EA           MOV     A,R2
   \   000021   F0           MOVX    @DPTR,A
    671            buffer[2] = HI_UINT16( flashTime );
   \   000022   7402         MOV     A,#0x2
   \   000024   12....       LCALL   ?XSTACK_DISP0_8
   \   000027   EB           MOV     A,R3
   \   000028   12....       LCALL   ?Subroutine6 & 0xFFFF
    672          
    673            if ( AF_DataRequest( &SampleApp_Flash_DstAddr, &SampleApp_epDesc,
    674                                 SAMPLEAPP_FLASH_CLUSTERID,
    675                                 3,
    676                                 buffer,
    677                                 &SampleApp_TransID,
    678                                 AF_DISCV_ROUTE,
    679                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \                     ??CrossCallReturnLabel_8:
   \   00002B   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00002E   75....       MOV     ?V0,#SampleApp_TransID & 0xff
   \   000031   75....       MOV     ?V1,#(SampleApp_TransID >> 8) & 0xff
   \   000034   78..         MOV     R0,#?V0
   \   000036   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000039   7403         MOV     A,#0x3
   \   00003B   12....       LCALL   ?XSTACK_DISP100_8
   \   00003E   88..         MOV     ?V0,R0
   \   000040   89..         MOV     ?V1,R1
   \   000042   78..         MOV     R0,#?V0
   \   000044   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000047   75..03       MOV     ?V0,#0x3
   \   00004A   75..00       MOV     ?V1,#0x0
   \   00004D   78..         MOV     R0,#?V0
   \   00004F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000052   75..02       MOV     ?V0,#0x2
   \   000055   78..         MOV     R0,#?V0
   \   000057   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005A   7920         MOV     R1,#0x20
   \   00005C   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   00005E   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000060   7A..         MOV     R2,#SampleApp_Flash_DstAddr & 0xff
   \   000062   7B..         MOV     R3,#(SampleApp_Flash_DstAddr >> 8) & 0xff
   \   000064   12....       LCALL   `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
   \   000067   7409         MOV     A,#0x9
   \   000069   12....       LCALL   ?DEALLOC_XSTACK8
    680            {
    681            }
    682            else
    683            {
    684              // Error occurred in request to send.
    685            }
    686          }
   \   00006C   7403         MOV     A,#0x3
   \   00006E   80..         SJMP    ?Subroutine2

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??Delayms::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Delayms

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??AD_Init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    AD_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??Motor_IO_Init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Motor_IO_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MY_Test_Init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MY_Test_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??Beep_Warn_Init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Beep_Warn_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??Start_State::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Start_State

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SampleApp_Init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MY_ProcessEvent::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MY_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??AD1_ProcessEvent::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    AD1_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??Beep_Warn_ProcessEvent::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Beep_Warn_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SampleApp_ProcessEvent::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SampleApp_HandleKeys::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_HandleKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SampleApp_MessageMSGCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_MessageMSGCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SampleApp_SendPeriodicMessage::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendPeriodicMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SampleApp_SendFlashMessage::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendFlashMessage

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "The test is KEY.\\n">`:
   \   000000   54686520     DB "The test is KEY.\012"
   \            74657374
   \            20697320
   \            4B45592E
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Group 1">`:
   \   000000   47726F75     DB "Group 1"
   \            70203100

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "SampleApp">`:
   \   000000   53616D70     DB "SampleApp"
   \            6C654170
   \            7000    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "%X,">`:
   \   000000   25582C00     DB "%X,"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "%d">`:
   \   000000   256400       DB "%d"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "%d,">`:
   \   000000   25642C00     DB "%d,"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "The pressed KEY is:">`:
   \   000000   54686520     DB "The pressed KEY is:"
   \            70726573
   \            73656420
   \            4B455920
   \            69733A00

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3ca3d70a:
   \   000000   0AD7A33C     DD 3CA3D70AH
    687          
    688          /*********************************************************************
    689          *********************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0     19   AD1_ProcessEvent
        0     19   -> AF_DataRequest
        0     10   -> Delayms
        0     10   -> HalAdcRead
        0     10   -> osal_start_timerEx
        0     10   -> osal_strlen
        0     12   -> sprintf
        0     10   -> strcat
      0      9   AD_Init
        0      9   -> HalAdcSetReference
      2      0   Beep_Warn_Init
      2      0   Beep_Warn_ProcessEvent
        2      0   -> osal_start_timerEx
      0     19   Delayms
        0      9   -> Onboard_wait
      0      9   MY_ProcessEvent
        0      9   -> HalAdcRead
      0      9   MY_Test_Init
        0      9   -> osal_start_timerEx
      0     11   Motor_IO_Init
      0     21   SampleApp_HandleKeys
        0      9   -> Delayms
        0      9   -> osal_start_timerEx
      0     14   SampleApp_Init
        0     11   -> HalLcdWriteString
        0     11   -> HalUARTWrite
        0     11   -> MT_UartInit
        0     11   -> MT_UartRegisterTaskID
        0     11   -> Motor_IO_Init
        0     11   -> RegisterForKeys
        0     11   -> afRegister
        0     11   -> aps_AddGroup
        0     14   -> osal_memcpy
      0     37   SampleApp_MessageMSGCB
        0     25   -> AF_DataRequest
        0     16   -> HalAdcRead
        0     16   -> HalLedBlink
        0     16   -> osal_start_timerEx
        0     16   -> osal_strlen
        0     18   -> sprintf
        0     16   -> strcat
      0     12   SampleApp_ProcessEvent
        0     12   -> HalUARTWrite
        0     12   -> SampleApp_HandleKeys
        0     12   -> SampleApp_MessageMSGCB
        0     12   -> SampleApp_SendPeriodicMessage
        0     12   -> osal_msg_deallocate
        0     12   -> osal_msg_receive
        0     12   -> osal_rand
        0     12   -> osal_start_timerEx
      1     22   SampleApp_SendFlashMessage
        0     22   -> AF_DataRequest
      0     31   SampleApp_SendPeriodicMessage
        0     19   -> AF_DataRequest
      2      0   Start_State
        2      0   -> osal_start_timerEx


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       4  ?<Constant "%X,">
       3  ?<Constant "%d">
       4  ?<Constant "%d,">
       8  ?<Constant "Group 1">
      10  ?<Constant "SampleApp">
      20  ?<Constant "The pressed KEY is:">
      18  ?<Constant "The test is KEY.\n">
       5  ??Subroutine16_0
       5  ??Subroutine17_0
       5  ?Subroutine0
       7  ?Subroutine1
      21  ?Subroutine10
       9  ?Subroutine11
      15  ?Subroutine12
      15  ?Subroutine13
       9  ?Subroutine14
       9  ?Subroutine15
       3  ?Subroutine2
      21  ?Subroutine3
      14  ?Subroutine4
      15  ?Subroutine5
       7  ?Subroutine6
      10  ?Subroutine7
       2  ?Subroutine8
      16  ?Subroutine9
     409  AD1_ProcessEvent
       6  AD1_ProcessEvent::?relay
       1  AD1_TaskID
       1  AD_D_H_Base
      25  AD_Init
       6  AD_Init::?relay
       1  AD_U_H_Base
       2  AD_data
       2  AD_data2
       9  Beep_Warn_Init
       6  Beep_Warn_Init::?relay
      49  Beep_Warn_ProcessEvent
       6  Beep_Warn_ProcessEvent::?relay
       1  Beep_Warn_TaskID
      31  Delayms
       6  Delayms::?relay
       1  K2_Base
      37  MY_ProcessEvent
       6  MY_ProcessEvent::?relay
       1  MY_TaskID
      21  MY_Test_Init
       6  MY_Test_Init::?relay
      16  Motor_IO_Init
       6  Motor_IO_Init::?relay
       1  P0DIR
       1  P1DIR
       1  P2DIR
       1  SampleAppFlashCounter
       1  SampleAppPeriodicCounter
       4  SampleApp_ClusterList
      12  SampleApp_Flash_DstAddr
      18  SampleApp_Group
      64  SampleApp_HandleKeys
       6  SampleApp_HandleKeys::?relay
     177  SampleApp_Init
       6  SampleApp_Init::?relay
     519  SampleApp_MessageMSGCB
       6  SampleApp_MessageMSGCB::?relay
       1  SampleApp_NwkState
      12  SampleApp_Periodic_DstAddr
     186  SampleApp_ProcessEvent
       6  SampleApp_ProcessEvent::?relay
     112  SampleApp_SendFlashMessage
       6  SampleApp_SendFlashMessage::?relay
      80  SampleApp_SendPeriodicMessage
       6  SampleApp_SendPeriodicMessage::?relay
      12  SampleApp_SimpleDesc
       1  SampleApp_TaskID
       1  SampleApp_TransID
       6  SampleApp_epDesc
      19  Start_State
       6  Start_State::?relay
       1  _A_P1
       1  _A_P2
       4  __Constant_3ca3d70a
      40  data_huancong
      40  data_huancong2
       1  dowm_flag
       2  lend
       2  lend2
      60  s2_data
      60  s2_data2
      60  s_data
      60  s_data2
       1  up_flag
       1  up_over_flag

 
 1 942 bytes in segment BANKED_CODE
    90 bytes in segment BANK_RELAYS
     5 bytes in segment SFR_AN
    87 bytes in segment XDATA_ROM_C
   390 bytes in segment XDATA_Z
 
 2 032 bytes of CODE  memory
    83 bytes of CONST memory (+ 4 bytes shared)
     0 bytes of DATA  memory (+ 5 bytes shared)
   390 bytes of XDATA memory

Errors: none
Warnings: 15
