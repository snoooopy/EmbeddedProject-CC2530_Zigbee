###############################################################################
#
# IAR C/C++ Compiler V9.20.1.2476 for 8051                03/May/2017  08:35:16
# Copyright 2004-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        F:\3_Jin_testCode\ZStack-CC2530-2.3.0-1.4.0µØËø\ZStack-CC2530-2.3.0-1.4.0µØËø\Components\mt\MT_DEBUG.c
#    Command line       =  
#        -f
#        F:\3_Jin_testCode\ZStack-CC2530-2.3.0-1.4.0µØËø\ZStack-CC2530-2.3.0-1.4.0µØËø\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DZDO_COORDINATOR -DRTR_NWK -DBLINK_LEDS) -f
#        F:\3_Jin_testCode\ZStack-CC2530-2.3.0-1.4.0µØËø\ZStack-CC2530-2.3.0-1.4.0µØËø\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_POLLED=3000
#        -DNWK_INDIRECT_MSG_TIMEOUT=7 -DMAX_RREQ_ENTRIES=8
#        -DAPSC_MAX_FRAME_RETRIES=3 -DNWK_MAX_DATA_RETRIES=2
#        -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9 -DAPS_MAX_GROUPS=16
#        -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000
#        -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
#        -DREJOIN_POLL_RATE=440
#        F:\3_Jin_testCode\ZStack-CC2530-2.3.0-1.4.0µØËø\ZStack-CC2530-2.3.0-1.4.0µØËø\Components\mt\MT_DEBUG.c
#        -D ZIGBEEPRO -D BUILD_ALL_DEVICES -D HOLD_AUTO_START -D LCD_SUPPORTED
#        -D HAL_UART=FALSE -lC
#        F:\3_Jin_testCode\ZStack-CC2530-2.3.0-1.4.0µØËø\ZStack-CC2530-2.3.0-1.4.0µØËø\Projects\zstack\Samples\SampleApp\CC2530DB\DemoEB-Pro\List\
#        -lA
#        F:\3_Jin_testCode\ZStack-CC2530-2.3.0-1.4.0µØËø\ZStack-CC2530-2.3.0-1.4.0µØËø\Projects\zstack\Samples\SampleApp\CC2530DB\DemoEB-Pro\List\
#        --diag_suppress Pe001,Pa010 -o
#        F:\3_Jin_testCode\ZStack-CC2530-2.3.0-1.4.0µØËø\ZStack-CC2530-2.3.0-1.4.0µØËø\Projects\zstack\Samples\SampleApp\CC2530DB\DemoEB-Pro\Obj\
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 8 -I
#        F:\3_Jin_testCode\ZStack-CC2530-2.3.0-1.4.0µØËø\ZStack-CC2530-2.3.0-1.4.0µØËø\Projects\zstack\Samples\SampleApp\CC2530DB\
#        -I
#        F:\3_Jin_testCode\ZStack-CC2530-2.3.0-1.4.0µØËø\ZStack-CC2530-2.3.0-1.4.0µØËø\Projects\zstack\Samples\SampleApp\CC2530DB\..\SOURCE\
#        -I
#        F:\3_Jin_testCode\ZStack-CC2530-2.3.0-1.4.0µØËø\ZStack-CC2530-2.3.0-1.4.0µØËø\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\ZMAIN\TI2530DB\
#        -I
#        F:\3_Jin_testCode\ZStack-CC2530-2.3.0-1.4.0µØËø\ZStack-CC2530-2.3.0-1.4.0µØËø\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MT\
#        -I
#        F:\3_Jin_testCode\ZStack-CC2530-2.3.0-1.4.0µØËø\ZStack-CC2530-2.3.0-1.4.0µØËø\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\INCLUDE\
#        -I
#        F:\3_Jin_testCode\ZStack-CC2530-2.3.0-1.4.0µØËø\ZStack-CC2530-2.3.0-1.4.0µØËø\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\TARGET\CC2530EB\
#        -I
#        F:\3_Jin_testCode\ZStack-CC2530-2.3.0-1.4.0µØËø\ZStack-CC2530-2.3.0-1.4.0µØËø\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\MCU\CCSOC\
#        -I
#        F:\3_Jin_testCode\ZStack-CC2530-2.3.0-1.4.0µØËø\ZStack-CC2530-2.3.0-1.4.0µØËø\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\INCLUDE\
#        -I
#        F:\3_Jin_testCode\ZStack-CC2530-2.3.0-1.4.0µØËø\ZStack-CC2530-2.3.0-1.4.0µØËø\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\AF\
#        -I
#        F:\3_Jin_testCode\ZStack-CC2530-2.3.0-1.4.0µØËø\ZStack-CC2530-2.3.0-1.4.0µØËø\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\NWK\
#        -I
#        F:\3_Jin_testCode\ZStack-CC2530-2.3.0-1.4.0µØËø\ZStack-CC2530-2.3.0-1.4.0µØËø\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SEC\
#        -I
#        F:\3_Jin_testCode\ZStack-CC2530-2.3.0-1.4.0µØËø\ZStack-CC2530-2.3.0-1.4.0µØËø\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SAPI\
#        -I
#        F:\3_Jin_testCode\ZStack-CC2530-2.3.0-1.4.0µØËø\ZStack-CC2530-2.3.0-1.4.0µØËø\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SYS\
#        -I
#        F:\3_Jin_testCode\ZStack-CC2530-2.3.0-1.4.0µØËø\ZStack-CC2530-2.3.0-1.4.0µØËø\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\ZDO\
#        -I
#        F:\3_Jin_testCode\ZStack-CC2530-2.3.0-1.4.0µØËø\ZStack-CC2530-2.3.0-1.4.0µØËø\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\F8W\
#        -I
#        F:\3_Jin_testCode\ZStack-CC2530-2.3.0-1.4.0µØËø\ZStack-CC2530-2.3.0-1.4.0µØËø\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\
#        -I
#        F:\3_Jin_testCode\ZStack-CC2530-2.3.0-1.4.0µØËø\ZStack-CC2530-2.3.0-1.4.0µØËø\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES\SADDR\
#        -I
#        F:\3_Jin_testCode\ZStack-CC2530-2.3.0-1.4.0µØËø\ZStack-CC2530-2.3.0-1.4.0µØËø\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES\SDATA\
#        -I
#        F:\3_Jin_testCode\ZStack-CC2530-2.3.0-1.4.0µØËø\ZStack-CC2530-2.3.0-1.4.0µØËø\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\INCLUDE\
#        -I
#        F:\3_Jin_testCode\ZStack-CC2530-2.3.0-1.4.0µØËø\ZStack-CC2530-2.3.0-1.4.0µØËø\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\HIGH_LEVEL\
#        -I
#        F:\3_Jin_testCode\ZStack-CC2530-2.3.0-1.4.0µØËø\ZStack-CC2530-2.3.0-1.4.0µØËø\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\
#        -I
#        F:\3_Jin_testCode\ZStack-CC2530-2.3.0-1.4.0µØËø\ZStack-CC2530-2.3.0-1.4.0µØËø\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\
#        -Ohz --require_prototypes
#    List file          =  
#        F:\3_Jin_testCode\ZStack-CC2530-2.3.0-1.4.0µØËø\ZStack-CC2530-2.3.0-1.4.0µØËø\Projects\zstack\Samples\SampleApp\CC2530DB\DemoEB-Pro\List\MT_DEBUG.lst
#    Object file        =  
#        F:\3_Jin_testCode\ZStack-CC2530-2.3.0-1.4.0µØËø\ZStack-CC2530-2.3.0-1.4.0µØËø\Projects\zstack\Samples\SampleApp\CC2530DB\DemoEB-Pro\Obj\MT_DEBUG.r51
#
###############################################################################

F:\3_Jin_testCode\ZStack-CC2530-2.3.0-1.4.0µØËø\ZStack-CC2530-2.3.0-1.4.0µØËø\Components\mt\MT_DEBUG.c
      1          /***************************************************************************************************
      2            Filename:       MT.c
      3            Revised:        $Date: 2008-02-12 16:28:45 -0800 (Tue, 12 Feb 2008) $
      4            Revision:       $Revision: 16392 $
      5          
      6            Description:
      7          
      8            Copyright 2007 Texas Instruments Incorporated. All rights reserved.
      9          
     10            IMPORTANT: Your use of this Software is limited to those specific rights
     11            granted under the terms of a software license agreement between the user
     12            who downloaded the software, his/her employer (which must be your employer)
     13            and Texas Instruments Incorporated (the "License").  You may not use this
     14            Software unless you agree to abide by the terms of the License. The License
     15            limits your use, and you acknowledge, that the Software may not be modified,
     16            copied or distributed unless embedded on a Texas Instruments microcontroller
     17            or used solely and exclusively in conjunction with a Texas Instruments radio
     18            frequency transceiver, which is integrated into your product.  Other than for
     19            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     20            works of, modify, distribute, perform, display or sell this Software and/or
     21            its documentation for any purpose.
     22          
     23            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     24            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     25            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     26            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     27            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     28            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     29            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     30            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     31            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     32            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     33            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     34          
     35            Should you have any questions regarding your right to use this Software,
     36            contact Texas Instruments Incorporated at www.TI.com.
     37          
     38           ***************************************************************************************************/
     39          
     40          /***************************************************************************************************
     41           * INCLUDES
     42           ***************************************************************************************************/
     43          #include "ZComDef.h"
     44          #include "MT.h"
     45          #include "MT_DEBUG.h"
     46          #include "MT_UART.h"
     47          
     48          /***************************************************************************************************
     49           * LOCAL FUNCTIONs
     50           ***************************************************************************************************/
     51          #if defined (MT_DEBUG_FUNC)
     52          void MT_DebugSetThreshold(uint8 *pBuf);
     53          #endif
     54          
     55          #if defined (MT_DEBUG_FUNC)
     56          /***************************************************************************************************
     57           * @fn      MT_DebugProcessing
     58           *
     59           * @brief   Process all the DEBUG commands that are issued by test tool
     60           *
     61           * @param   pBuf - pointer to received buffer
     62           *
     63           * @return  status
     64           ***************************************************************************************************/
     65          uint8 MT_DebugCommandProcessing(uint8 *pBuf)
     66          {
     67            uint8 status = MT_RPC_SUCCESS;
     68          
     69            switch (pBuf[MT_RPC_POS_CMD1])
     70            {
     71              case MT_DEBUG_SET_THRESHOLD:
     72                MT_DebugSetThreshold(pBuf);
     73                break;
     74          
     75              default:
     76                status = MT_RPC_ERR_COMMAND_ID;
     77                break;
     78            }
     79          
     80            return status;
     81          }
     82          
     83          /***************************************************************************************************
     84           * @fn      MT_DebugSetThreshold
     85           *
     86           * @brief   Process Debug Set Threshold
     87           *
     88           * @param   pBuf - pointer to received buffer
     89           *
     90           * @return  void
     91           ***************************************************************************************************/
     92          void MT_DebugSetThreshold(uint8 *pBuf)
     93          {
     94            uint8 retValue = ZSuccess;
     95            uint8 cmdId;
     96          
     97            /* parse header */
     98            cmdId = pBuf[MT_RPC_POS_CMD1];
     99            pBuf += MT_RPC_FRAME_HDR_SZ;
    100          
    101            /* Populate info */
    102            debugCompId = *pBuf++;
    103            debugThreshold = *pBuf++;
    104          
    105            /* Build and send back the response */
    106            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_DBG), cmdId, 1, &retValue);
    107          }
    108          #endif /* MT_DEBUG_FUNC */
    109          
    110          /***************************************************************************************************
    111           * @fn      MT_ProcessDebugMsg
    112           *
    113           * @brief   Build and send a debug message.
    114           *
    115           * @param   byte *data - pointer to the data portion of the debug message
    116           *
    117           * @return  void
    118           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    119          void MT_ProcessDebugMsg( mtDebugMsg_t *msg )
   \                     MT_ProcessDebugMsg:
    120          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 11
   \   000005   74F5         MOV     A,#-0xb
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    121            byte *msg_ptr;
    122            byte dataLen;
    123            uint8 buf[11];
    124            uint8 *pBuf;
    125          
    126            /* Calculate the data length based */
    127            dataLen = 5 + (msg->numParams * sizeof ( uint16 ));
    128          
    129            /* Get a message buffer to build the debug message */
    130            msg_ptr = osal_msg_allocate( (byte)(SPI_0DATA_MSG_LEN + dataLen + 1) );
   \   00000E   EE           MOV     A,R6
   \   00000F   2404         ADD     A,#0x4
   \   000011   F5..         MOV     ?V0,A
   \   000013   E4           CLR     A
   \   000014   3F           ADDC    A,R7
   \   000015   F5..         MOV     ?V1,A
   \   000017                ; Setup parameters for call to function osal_msg_allocate
   \   000017   85..82       MOV     DPL,?V0
   \   00001A   F583         MOV     DPH,A
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   C3           CLR     C
   \   00001E   33           RLC     A
   \   00001F   240B         ADD     A,#0xb
   \   000021   FA           MOV     R2,A
   \   000022   7B00         MOV     R3,#0x0
   \   000024   12....       LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
    131            if ( msg_ptr )
   \   000027   EA           MOV     A,R2
   \   000028   4B           ORL     A,R3
   \   000029   7003         JNZ     $+5
   \   00002B   02....       LJMP    ??MT_ProcessDebugMsg_0 & 0xFFFF
    132            {
    133              /* Build the message */
    134              pBuf = buf;
    135              *pBuf++ = msg->compID;
   \   00002E   8E82         MOV     DPL,R6
   \   000030   8F83         MOV     DPH,R7
   \   000032   A3           INC     DPTR
   \   000033   A3           INC     DPTR
   \   000034   E0           MOVX    A,@DPTR
   \   000035   85..82       MOV     DPL,?XSP + 0
   \   000038   85..83       MOV     DPH,?XSP + 1
   \   00003B   F0           MOVX    @DPTR,A
    136              *pBuf++ = msg->severity;
   \   00003C   8E82         MOV     DPL,R6
   \   00003E   8F83         MOV     DPH,R7
   \   000040   A3           INC     DPTR
   \   000041   A3           INC     DPTR
   \   000042   A3           INC     DPTR
   \   000043   E0           MOVX    A,@DPTR
   \   000044   C0E0         PUSH    A
   \   000046   7401         MOV     A,#0x1
   \   000048   12....       LCALL   ?XSTACK_DISP0_8
   \   00004B   D0E0         POP     A
   \   00004D   F0           MOVX    @DPTR,A
    137              *pBuf++ = msg->numParams;
   \   00004E   85..82       MOV     DPL,?V0
   \   000051   85..83       MOV     DPH,?V1
   \   000054   E0           MOVX    A,@DPTR
   \   000055   C0E0         PUSH    A
   \   000057   7402         MOV     A,#0x2
   \   000059   12....       LCALL   ?XSTACK_DISP0_8
   \   00005C   D0E0         POP     A
   \   00005E   F0           MOVX    @DPTR,A
   \   00005F   7403         MOV     A,#0x3
   \   000061   12....       LCALL   ?XSTACK_DISP0_8
   \   000064   A882         MOV     R0,DPL
   \   000066   A983         MOV     R1,DPH
    138          
    139              if ( msg->numParams >= 1 )
   \   000068   85..82       MOV     DPL,?V0
   \   00006B   85..83       MOV     DPH,?V1
   \   00006E   E0           MOVX    A,@DPTR
   \   00006F   7003         JNZ     $+5
   \   000071   02....       LJMP    ??MT_ProcessDebugMsg_1 & 0xFFFF
    140              {
    141                *pBuf++ = LO_UINT16( msg->param1 );
   \   000074   EE           MOV     A,R6
   \   000075   2405         ADD     A,#0x5
   \   000077   F8           MOV     R0,A
   \   000078   E4           CLR     A
   \   000079   3F           ADDC    A,R7
   \   00007A   F9           MOV     R1,A
   \   00007B   8882         MOV     DPL,R0
   \   00007D   8983         MOV     DPH,R1
   \   00007F   E0           MOVX    A,@DPTR
   \   000080   C0E0         PUSH    A
   \   000082   7403         MOV     A,#0x3
   \   000084   12....       LCALL   ?XSTACK_DISP0_8
   \   000087   D0E0         POP     A
   \   000089   F0           MOVX    @DPTR,A
    142                *pBuf++ = HI_UINT16( msg->param1 );
   \   00008A   8882         MOV     DPL,R0
   \   00008C   8983         MOV     DPH,R1
   \   00008E   A3           INC     DPTR
   \   00008F   E0           MOVX    A,@DPTR
   \   000090   C0E0         PUSH    A
   \   000092   7404         MOV     A,#0x4
   \   000094   12....       LCALL   ?XSTACK_DISP0_8
   \   000097   D0E0         POP     A
   \   000099   F0           MOVX    @DPTR,A
   \   00009A   7405         MOV     A,#0x5
   \   00009C   12....       LCALL   ?XSTACK_DISP0_8
   \   00009F   A882         MOV     R0,DPL
   \   0000A1   A983         MOV     R1,DPH
    143              }
    144          
    145              if ( msg->numParams >= 2 )
   \   0000A3   85..82       MOV     DPL,?V0
   \   0000A6   85..83       MOV     DPH,?V1
   \   0000A9   E0           MOVX    A,@DPTR
   \   0000AA   C3           CLR     C
   \   0000AB   9402         SUBB    A,#0x2
   \   0000AD   402F         JC      ??MT_ProcessDebugMsg_2
    146              {
    147                *pBuf++ = LO_UINT16( msg->param2 );
   \   0000AF   EE           MOV     A,R6
   \   0000B0   2407         ADD     A,#0x7
   \   0000B2   F8           MOV     R0,A
   \   0000B3   E4           CLR     A
   \   0000B4   3F           ADDC    A,R7
   \   0000B5   F9           MOV     R1,A
   \   0000B6   8882         MOV     DPL,R0
   \   0000B8   8983         MOV     DPH,R1
   \   0000BA   E0           MOVX    A,@DPTR
   \   0000BB   C0E0         PUSH    A
   \   0000BD   7405         MOV     A,#0x5
   \   0000BF   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C2   D0E0         POP     A
   \   0000C4   F0           MOVX    @DPTR,A
    148                *pBuf++ = HI_UINT16( msg->param2 );
   \   0000C5   8882         MOV     DPL,R0
   \   0000C7   8983         MOV     DPH,R1
   \   0000C9   A3           INC     DPTR
   \   0000CA   E0           MOVX    A,@DPTR
   \   0000CB   C0E0         PUSH    A
   \   0000CD   7406         MOV     A,#0x6
   \   0000CF   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D2   D0E0         POP     A
   \   0000D4   F0           MOVX    @DPTR,A
   \   0000D5   7407         MOV     A,#0x7
   \   0000D7   12....       LCALL   ?XSTACK_DISP0_8
   \   0000DA   A882         MOV     R0,DPL
   \   0000DC   A983         MOV     R1,DPH
    149              }
    150          
    151              if ( msg->numParams == 3 )
   \                     ??MT_ProcessDebugMsg_2:
   \   0000DE   85..82       MOV     DPL,?V0
   \   0000E1   85..83       MOV     DPH,?V1
   \   0000E4   E0           MOVX    A,@DPTR
   \   0000E5   6403         XRL     A,#0x3
   \   0000E7   700D         JNZ     ??MT_ProcessDebugMsg_1
    152              {
    153                *pBuf++ = LO_UINT16( msg->param3 );
   \   0000E9   EE           MOV     A,R6
   \   0000EA   2409         ADD     A,#0x9
   \   0000EC   12....       LCALL   ?Subroutine0 & 0xFFFF
    154                *pBuf++ = HI_UINT16( msg->param3 );
    155              }
   \                     ??CrossCallReturnLabel_0:
   \   0000EF   E8           MOV     A,R0
   \   0000F0   2402         ADD     A,#0x2
   \   0000F2   F8           MOV     R0,A
   \   0000F3   5001         JNC     ??MT_ProcessDebugMsg_1
   \   0000F5   09           INC     R1
    156          
    157              *pBuf++ = LO_UINT16( msg->timestamp );
   \                     ??MT_ProcessDebugMsg_1:
   \   0000F6   EE           MOV     A,R6
   \   0000F7   240B         ADD     A,#0xb
   \   0000F9   12....       LCALL   ?Subroutine0 & 0xFFFF
    158              *pBuf++ = HI_UINT16( msg->timestamp );
    159          
    160          #ifdef MT_UART_DEFAULT_PORT
    161              /* Debug message is set to AREQ CMD 0x80 for now */
    162              /* Build and send back the response */
    163              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_DBG), 0x80, dataLen, buf);
    164          #endif
    165              osal_msg_deallocate( msg_ptr );
   \                     ??CrossCallReturnLabel_1:
   \   0000FC                ; Setup parameters for call to function osal_msg_deallocate
   \   0000FC   12....       LCALL   `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
    166            }
    167          }
   \                     ??MT_ProcessDebugMsg_0:
   \   0000FF   740B         MOV     A,#0xb
   \   000101   12....       LCALL   ?DEALLOC_XSTACK8
   \   000104   7F04         MOV     R7,#0x4
   \   000106   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   FC           MOV     R4,A
   \   000001   E4           CLR     A
   \   000002   3F           ADDC    A,R7
   \   000003   FD           MOV     R5,A
   \   000004   8C82         MOV     DPL,R4
   \   000006   8D83         MOV     DPH,R5
   \   000008   E0           MOVX    A,@DPTR
   \   000009   8882         MOV     DPL,R0
   \   00000B   8983         MOV     DPH,R1
   \   00000D   F0           MOVX    @DPTR,A
   \   00000E   8C82         MOV     DPL,R4
   \   000010   8D83         MOV     DPH,R5
   \   000012   A3           INC     DPTR
   \   000013   E0           MOVX    A,@DPTR
   \   000014   8882         MOV     DPL,R0
   \   000016   8983         MOV     DPH,R1
   \   000018   A3           INC     DPTR
   \   000019   F0           MOVX    @DPTR,A
   \   00001A   22           RET
    168          
    169          /***************************************************************************************************
    170           * @fn      MT_ProcessDebugStr
    171           *
    172           * @brief   Build and send a debug string.
    173           *
    174           * @param   byte *dstr - pointer to the data portion of the debug message
    175           *
    176           * @return  void
    177           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    178          void MT_ProcessDebugStr(mtDebugStr_t *dstr)
   \                     MT_ProcessDebugStr:
    179          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    180            byte *msg_ptr;
    181          
    182            /* Get a message buffer to build the debug message */
    183            msg_ptr = osal_mem_alloc( (byte)(SPI_0DATA_MSG_LEN + dstr->strLen) );
   \   000005                ; Setup parameters for call to function osal_mem_alloc
   \   000005   8A82         MOV     DPL,R2
   \   000007   8B83         MOV     DPH,R3
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   2405         ADD     A,#0x5
   \   00000E   FA           MOV     R2,A
   \   00000F   7B00         MOV     R3,#0x0
   \   000011   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
    184            if ( msg_ptr )
   \   000014   EA           MOV     A,R2
   \   000015   4B           ORL     A,R3
   \   000016   6003         JZ      ??MT_ProcessDebugStr_0
    185            {
    186          #ifdef MT_UART_DEFAULT_PORT
    187              /* Debug message is set to AREQ CMD 0x80 for now */
    188              /* Build and send back the response */
    189              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_DBG), MT_DEBUG_MSG, dstr->strLen, dstr->pString);
    190          #endif
    191              osal_mem_free( msg_ptr );
   \   000018                ; Setup parameters for call to function osal_mem_free
   \   000018   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    192            }
    193          }
   \                     ??MT_ProcessDebugStr_0:
   \   00001B   7F02         MOV     R7,#0x2
   \   00001D   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ProcessDebugMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ProcessDebugMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ProcessDebugStr::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ProcessDebugStr
    194          /***************************************************************************************************
    195           ***************************************************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      1     23   MT_ProcessDebugMsg
        0     23   -> osal_msg_allocate
        0     23   -> osal_msg_deallocate
      0     10   MT_ProcessDebugStr
        0     10   -> osal_mem_alloc
        0     10   -> osal_mem_free


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      27  ?Subroutine0
     265  MT_ProcessDebugMsg
       6  MT_ProcessDebugMsg::?relay
      32  MT_ProcessDebugStr
       6  MT_ProcessDebugStr::?relay

 
 324 bytes in segment BANKED_CODE
  12 bytes in segment BANK_RELAYS
 
 336 bytes of CODE memory

Errors: none
Warnings: none
