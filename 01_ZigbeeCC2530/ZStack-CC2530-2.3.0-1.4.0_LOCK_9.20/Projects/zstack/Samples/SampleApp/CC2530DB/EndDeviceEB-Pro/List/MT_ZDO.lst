###############################################################################
#
# IAR C/C++ Compiler V9.20.1.2476 for 8051                26/May/2017  16:13:37
# Copyright 2004-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Components\mt\MT_ZDO.c
#    Command line       =  
#        -f
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DBLINK_LEDS) -f
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_POLLED=3000
#        -DNWK_INDIRECT_MSG_TIMEOUT=7 -DMAX_RREQ_ENTRIES=8
#        -DAPSC_MAX_FRAME_RETRIES=3 -DNWK_MAX_DATA_RETRIES=2
#        -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9 -DAPS_MAX_GROUPS=16
#        -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000
#        -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
#        -DREJOIN_POLL_RATE=440
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Components\mt\MT_ZDO.c -D
#        ZIGBEEPRO -D NWK_AUTO_POLL -D ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC -D
#        MT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG -lC
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\EndDeviceEB-Pro\List\
#        -lA
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\EndDeviceEB-Pro\List\
#        --diag_suppress Pe001,Pa010 -o
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\EndDeviceEB-Pro\Obj\
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 8 -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\SOURCE\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\ZMAIN\TI2530DB\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MT\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\INCLUDE\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\TARGET\CC2530EB\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\MCU\CCSOC\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\INCLUDE\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\AF\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\NWK\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SEC\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SAPI\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SYS\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\ZDO\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\F8W\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES\SADDR\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES\SDATA\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\INCLUDE\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\HIGH_LEVEL\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\
#        -Ohz --require_prototypes
#    List file          =  
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\EndDeviceEB-Pro\List\MT_ZDO.lst
#    Object file        =  
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\EndDeviceEB-Pro\Obj\MT_ZDO.r51
#
###############################################################################

D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Components\mt\MT_ZDO.c
      1          /**************************************************************************************************
      2            Filename:       MT_ZDO.c
      3            Revised:        $Date: 2009-12-29 11:40:43 -0800 (Tue, 29 Dec 2009) $
      4            Revision:       $Revision: 21414 $
      5          
      6            Description:    MonitorTest functions for the ZDO layer.
      7          
      8          
      9            Copyright 2004-2009 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          #ifdef MT_ZDO_FUNC
     41          
     42          /**************************************************************************************************
     43           * INCLUDES
     44           **************************************************************************************************/
     45          #include "ZComDef.h"
     46          #include "OSAL.h"
     47          #include "MT.h"
     48          #include "MT_ZDO.h"
     49          #include "APSMEDE.h"
     50          #include "ZDConfig.h"
     51          #include "ZDProfile.h"
     52          #include "ZDObject.h"
     53          #include "ZDApp.h"
     54          
     55          #if !defined( WIN32 )
     56            #include "OnBoard.h"
     57          #endif
     58          
     59          #if defined(ZDO_LINK_KEY_MANAGEMENT)
     60            #include "ZDSecMgr.h"
     61          #endif
     62          
     63          #include "nwk_util.h"
     64          
     65          /**************************************************************************************************
     66           * CONSTANTS
     67           **************************************************************************************************/
     68          #define MT_ZDO_END_DEVICE_ANNCE_IND_LEN   0x0D
     69          #define MT_ZDO_ADDR_RSP_LEN               0x0D
     70          #define MT_ZDO_BIND_UNBIND_RSP_LEN        0x03
     71          
     72          #define MTZDO_RESPONSE_BUFFER_LEN   100
     73          
     74          #define MTZDO_MAX_MATCH_CLUSTERS    16
     75          #define MTZDO_MAX_ED_BIND_CLUSTERS  15
     76          
     77          // Conversion from ZDO Cluster Id to the RPC AREQ Id is direct as follows:
     78          #define MT_ZDO_CID_TO_AREQ_ID(CId)  ((uint8)(CId) | 0x80)
     79          
     80          /**************************************************************************************************
     81           * GLOBAL VARIABLES
     82           **************************************************************************************************/

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     83          uint32 _zdoCallbackSub;
   \                     _zdoCallbackSub:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z
     84          
     85          /**************************************************************************************************
     86           * LOCAL VARIABLES
     87           **************************************************************************************************/
     88          
     89          /**************************************************************************************************
     90           * LOCAL FUNCTIONS
     91           **************************************************************************************************/
     92          #if defined (MT_ZDO_FUNC)
     93          void MT_ZdoNWKAddressRequest(uint8 *pBuf);
     94          void MT_ZdoIEEEAddrRequest(uint8 *pBuf);
     95          void MT_ZdoNodeDescRequest(uint8 *pBuf);
     96          void MT_ZdoPowerDescRequest(uint8 *pBuf);
     97          void MT_ZdoSimpleDescRequest(uint8 *pBuf);
     98          void MT_ZdoActiveEpRequest(uint8 *pBuf);
     99          void MT_ZdoMatchDescRequest(uint8 *pBuf);
    100          void MT_ZdoComplexDescRequest(uint8 *pBuf);
    101          void MT_ZdoUserDescRequest(uint8 *pBuf);
    102          void MT_ZdoEndDevAnnce(uint8 *pBuf);
    103          void MT_ZdoUserDescSet(uint8 *pBuf);
    104          void MT_ZdoServiceDiscRequest(uint8 *pBuf);
    105          void MT_ZdoEndDevBindRequest(uint8 *pBuf);
    106          void MT_ZdoBindRequest(uint8 *pBuf);
    107          void MT_ZdoUnbindRequest(uint8 *pBuf);
    108          void MT_ZdoMgmtNwkDiscRequest(uint8 *pBuf);
    109          void MT_ZdoSetLinkKey(uint8 *pBuf);
    110          void MT_ZdoRemoveLinkKey(uint8 *pBuf);
    111          void MT_ZdoGetLinkKey(uint8 *pBuf);
    112          #if defined (MT_ZDO_MGMT)
    113          void MT_ZdoMgmtLqiRequest(uint8 *pBuf);
    114          void MT_ZdoMgmtRtgRequest(uint8 *pBuf);
    115          void MT_ZdoMgmtBindRequest(uint8 *pBuf);
    116          void MT_ZdoMgmtLeaveRequest(uint8 *pBuf);
    117          void MT_ZdoMgmtDirectJoinRequest(uint8 *pBuf);
    118          void MT_ZdoMgmtPermitJoinRequest(uint8 *pBuf);
    119          void MT_ZdoMgmtNwkUpdateRequest(uint8 *pBuf);
    120          #endif /* MT_ZDO_MGMT */
    121          void MT_ZdoStartupFromApp(uint8 *pBuf);
    122          void MT_ZdoRegisterForZDOMsg(uint8 *pBuf);
    123          void MT_ZdoRemoveRegisteredCB(uint8 *pBuf);
    124          #endif /* MT_ZDO_FUNC */
    125          
    126          #if defined (MT_ZDO_CB_FUNC)
    127          uint8 MT_ZdoHandleExceptions( afIncomingMSGPacket_t *pData, zdoIncomingMsg_t *inMsg );
    128          void MT_ZdoAddrRspCB( ZDO_NwkIEEEAddrResp_t *pMsg, uint16 clusterID );
    129          void MT_ZdoEndDevAnnceCB( ZDO_DeviceAnnce_t *pMsg, uint16 srcAddr );
    130          void MT_ZdoBindUnbindRspCB( uint16 clusterID, uint16 srcAddr, uint8 status );
    131          void* MT_ZdoSrcRtgCB( void *pStr );
    132          #endif /* MT_ZDO_CB_FUNC */
    133          
    134          #if defined (MT_ZDO_FUNC)
    135          /***************************************************************************************************
    136           * @fn      MT_ZdoInit
    137           *
    138           * @brief   MT ZDO initialization
    139           *
    140           * @param   none
    141           *
    142           * @return  none
    143           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    144          void MT_ZdoInit(void)
   \                     MT_ZdoInit:
    145          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    146          #ifdef MT_ZDO_CB_FUNC
    147            /* Register with ZDO for indication callbacks */
    148            ZDO_RegisterForZdoCB(ZDO_SRC_RTG_IND_CBID, &MT_ZdoSrcRtgCB);
    149          #endif
    150          }
   \   000000   02....       LJMP    ?BRET
    151          
    152          /***************************************************************************************************
    153           * @fn      MT_ZdoCommandProcessing
    154           *
    155           * @brief
    156           *
    157           *   Process all the ZDO commands that are issued by test tool
    158           *
    159           * @param   pBuf - pointer to the msg buffer
    160           *
    161           *          | LEN  | CMD0  | CMD1  |  DATA  |
    162           *          |  1   |   1   |   1   |  0-255 |
    163           *
    164           * @return  status
    165           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    166          uint8 MT_ZdoCommandProcessing(uint8* pBuf)
   \                     MT_ZdoCommandProcessing:
    167          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    168            uint8 status = MT_RPC_SUCCESS;
   \   000005   7E00         MOV     R6,#0x0
    169          
    170            switch (pBuf[MT_RPC_POS_CMD1])
   \   000007   8A82         MOV     DPL,R2
   \   000009   8B83         MOV     DPH,R3
   \   00000B   A3           INC     DPTR
   \   00000C   A3           INC     DPTR
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   6041         JZ      ??MT_ZdoCommandProcessing_0
   \   000010   14           DEC     A
   \   000011   6043         JZ      ??MT_ZdoCommandProcessing_1
   \   000013   14           DEC     A
   \   000014   6045         JZ      ??MT_ZdoCommandProcessing_2
   \   000016   14           DEC     A
   \   000017   6047         JZ      ??MT_ZdoCommandProcessing_3
   \   000019   14           DEC     A
   \   00001A   6049         JZ      ??MT_ZdoCommandProcessing_4
   \   00001C   14           DEC     A
   \   00001D   604B         JZ      ??MT_ZdoCommandProcessing_5
   \   00001F   14           DEC     A
   \   000020   604D         JZ      ??MT_ZdoCommandProcessing_6
   \   000022   14           DEC     A
   \   000023   604F         JZ      ??MT_ZdoCommandProcessing_7
   \   000025   14           DEC     A
   \   000026   6051         JZ      ??MT_ZdoCommandProcessing_8
   \   000028   24FE         ADD     A,#-0x2
   \   00002A   6052         JZ      ??MT_ZdoCommandProcessing_9
   \   00002C   14           DEC     A
   \   00002D   6054         JZ      ??MT_ZdoCommandProcessing_10
   \   00002F   14           DEC     A
   \   000030   6056         JZ      ??MT_ZdoCommandProcessing_11
   \   000032   24EC         ADD     A,#-0x14
   \   000034   6057         JZ      ??MT_ZdoCommandProcessing_12
   \   000036   14           DEC     A
   \   000037   6059         JZ      ??MT_ZdoCommandProcessing_13
   \   000039   14           DEC     A
   \   00003A   605B         JZ      ??MT_ZdoCommandProcessing_14
   \   00003C   14           DEC     A
   \   00003D   605D         JZ      ??MT_ZdoCommandProcessing_15
   \   00003F   14           DEC     A
   \   000040   605F         JZ      ??MT_ZdoCommandProcessing_16
   \   000042   14           DEC     A
   \   000043   6061         JZ      ??MT_ZdoCommandProcessing_17
   \   000045   24E7         ADD     A,#-0x19
   \   000047   6067         JZ      ??MT_ZdoCommandProcessing_18
   \   000049   14           DEC     A
   \   00004A   6069         JZ      ??MT_ZdoCommandProcessing_19
   \   00004C   14           DEC     A
   \   00004D   605C         JZ      ??MT_ZdoCommandProcessing_20
   \   00004F   8069         SJMP    ??MT_ZdoCommandProcessing_21
    171            {
    172          #if defined ( ZDO_NWKADDR_REQUEST )
    173              case MT_ZDO_NWK_ADDR_REQ:
    174                MT_ZdoNWKAddressRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_0:
   \   000051                ; Setup parameters for call to function MT_ZdoNWKAddressRequest
   \   000051   12....       LCALL   `??MT_ZdoNWKAddressRequest::?relay`; Banked call to: MT_ZdoNWKAddressRequest
    175                break;
   \   000054   8066         SJMP    ??MT_ZdoCommandProcessing_22
    176          #endif
    177          
    178          #if defined ( ZDO_IEEEADDR_REQUEST )
    179              case MT_ZDO_IEEE_ADDR_REQ:
    180                MT_ZdoIEEEAddrRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_1:
   \   000056                ; Setup parameters for call to function MT_ZdoIEEEAddrRequest
   \   000056   12....       LCALL   `??MT_ZdoIEEEAddrRequest::?relay`; Banked call to: MT_ZdoIEEEAddrRequest
    181                break;
   \   000059   8061         SJMP    ??MT_ZdoCommandProcessing_22
    182          #endif
    183          
    184          #if defined ( ZDO_NODEDESC_REQUEST )
    185              case MT_ZDO_NODE_DESC_REQ:
    186                MT_ZdoNodeDescRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_2:
   \   00005B                ; Setup parameters for call to function MT_ZdoNodeDescRequest
   \   00005B   12....       LCALL   `??MT_ZdoNodeDescRequest::?relay`; Banked call to: MT_ZdoNodeDescRequest
    187                break;
   \   00005E   805C         SJMP    ??MT_ZdoCommandProcessing_22
    188          #endif
    189          
    190          #if defined ( ZDO_POWERDESC_REQUEST )
    191              case MT_ZDO_POWER_DESC_REQ:
    192                MT_ZdoPowerDescRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_3:
   \   000060                ; Setup parameters for call to function MT_ZdoPowerDescRequest
   \   000060   12....       LCALL   `??MT_ZdoPowerDescRequest::?relay`; Banked call to: MT_ZdoPowerDescRequest
    193                break;
   \   000063   8057         SJMP    ??MT_ZdoCommandProcessing_22
    194          #endif
    195          
    196          #if defined ( ZDO_SIMPLEDESC_REQUEST )
    197              case MT_ZDO_SIMPLE_DESC_REQ:
    198                MT_ZdoSimpleDescRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_4:
   \   000065                ; Setup parameters for call to function MT_ZdoSimpleDescRequest
   \   000065   12....       LCALL   `??MT_ZdoSimpleDescRequest::?relay`; Banked call to: MT_ZdoSimpleDescRequest
    199                break;
   \   000068   8052         SJMP    ??MT_ZdoCommandProcessing_22
    200          #endif
    201          
    202          #if defined ( ZDO_ACTIVEEP_REQUEST )
    203              case MT_ZDO_ACTIVE_EP_REQ:
    204                MT_ZdoActiveEpRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_5:
   \   00006A                ; Setup parameters for call to function MT_ZdoActiveEpRequest
   \   00006A   12....       LCALL   `??MT_ZdoActiveEpRequest::?relay`; Banked call to: MT_ZdoActiveEpRequest
    205                break;
   \   00006D   804D         SJMP    ??MT_ZdoCommandProcessing_22
    206          #endif
    207          
    208          #if defined ( ZDO_MATCH_REQUEST )
    209              case MT_ZDO_MATCH_DESC_REQ:
    210                MT_ZdoMatchDescRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_6:
   \   00006F                ; Setup parameters for call to function MT_ZdoMatchDescRequest
   \   00006F   12....       LCALL   `??MT_ZdoMatchDescRequest::?relay`; Banked call to: MT_ZdoMatchDescRequest
    211                break;
   \   000072   8048         SJMP    ??MT_ZdoCommandProcessing_22
    212          #endif
    213          
    214          #if defined ( ZDO_COMPLEXDESC_REQUEST )
    215              case MT_ZDO_COMPLEX_DESC_REQ:
    216                MT_ZdoComplexDescRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_7:
   \   000074                ; Setup parameters for call to function MT_ZdoComplexDescRequest
   \   000074   12....       LCALL   `??MT_ZdoComplexDescRequest::?relay`; Banked call to: MT_ZdoComplexDescRequest
    217                break;
   \   000077   8043         SJMP    ??MT_ZdoCommandProcessing_22
    218          #endif
    219          
    220          #if defined ( ZDO_USERDESC_REQUEST )
    221              case MT_ZDO_USER_DESC_REQ:
    222                MT_ZdoUserDescRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_8:
   \   000079                ; Setup parameters for call to function MT_ZdoUserDescRequest
   \   000079   12....       LCALL   `??MT_ZdoUserDescRequest::?relay`; Banked call to: MT_ZdoUserDescRequest
    223                break;
   \   00007C   803E         SJMP    ??MT_ZdoCommandProcessing_22
    224          #endif
    225          
    226          #if defined ( ZDO_ENDDEVICE_ANNCE )
    227              case MT_ZDO_END_DEV_ANNCE:
    228                MT_ZdoEndDevAnnce(pBuf);
   \                     ??MT_ZdoCommandProcessing_9:
   \   00007E                ; Setup parameters for call to function MT_ZdoEndDevAnnce
   \   00007E   12....       LCALL   `??MT_ZdoEndDevAnnce::?relay`; Banked call to: MT_ZdoEndDevAnnce
    229                break;
   \   000081   8039         SJMP    ??MT_ZdoCommandProcessing_22
    230          #endif      
    231          
    232          #if defined ( ZDO_USERDESCSET_REQUEST )
    233              case MT_ZDO_USER_DESC_SET:
    234                MT_ZdoUserDescSet(pBuf);
   \                     ??MT_ZdoCommandProcessing_10:
   \   000083                ; Setup parameters for call to function MT_ZdoUserDescSet
   \   000083   12....       LCALL   `??MT_ZdoUserDescSet::?relay`; Banked call to: MT_ZdoUserDescSet
    235                break;
   \   000086   8034         SJMP    ??MT_ZdoCommandProcessing_22
    236          #endif
    237          
    238          #if defined ( ZDO_SERVERDISC_REQUEST )
    239              case MT_ZDO_SERVICE_DISC_REQ:
    240                MT_ZdoServiceDiscRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_11:
   \   000088                ; Setup parameters for call to function MT_ZdoServiceDiscRequest
   \   000088   12....       LCALL   `??MT_ZdoServiceDiscRequest::?relay`; Banked call to: MT_ZdoServiceDiscRequest
    241                break;
   \   00008B   802F         SJMP    ??MT_ZdoCommandProcessing_22
    242          #endif
    243          
    244          #if defined ( ZDO_ENDDEVICEBIND_REQUEST )
    245              case MT_ZDO_END_DEV_BIND_REQ:
    246                MT_ZdoEndDevBindRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_12:
   \   00008D                ; Setup parameters for call to function MT_ZdoEndDevBindRequest
   \   00008D   12....       LCALL   `??MT_ZdoEndDevBindRequest::?relay`; Banked call to: MT_ZdoEndDevBindRequest
    247                break;
   \   000090   802A         SJMP    ??MT_ZdoCommandProcessing_22
    248          #endif
    249          
    250          #if defined ( ZDO_BIND_UNBIND_REQUEST )
    251              case MT_ZDO_BIND_REQ:
    252                MT_ZdoBindRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_13:
   \   000092                ; Setup parameters for call to function MT_ZdoBindRequest
   \   000092   12....       LCALL   `??MT_ZdoBindRequest::?relay`; Banked call to: MT_ZdoBindRequest
    253                break;
   \   000095   8025         SJMP    ??MT_ZdoCommandProcessing_22
    254          #endif
    255          
    256          #if defined ( ZDO_BIND_UNBIND_REQUEST )
    257              case MT_ZDO_UNBIND_REQ:
    258                MT_ZdoUnbindRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_14:
   \   000097                ; Setup parameters for call to function MT_ZdoUnbindRequest
   \   000097   12....       LCALL   `??MT_ZdoUnbindRequest::?relay`; Banked call to: MT_ZdoUnbindRequest
    259                break;
   \   00009A   8020         SJMP    ??MT_ZdoCommandProcessing_22
    260          #endif
    261                
    262          #if defined ( ZDO_LINK_KEY_MANAGEMENT )
    263              case MT_ZDO_SET_LINK_KEY:
    264                MT_ZdoSetLinkKey(pBuf);
   \                     ??MT_ZdoCommandProcessing_15:
   \   00009C                ; Setup parameters for call to function MT_ZdoSetLinkKey
   \   00009C   12....       LCALL   `??MT_ZdoSetLinkKey::?relay`; Banked call to: MT_ZdoSetLinkKey
    265                break;
   \   00009F   801B         SJMP    ??MT_ZdoCommandProcessing_22
    266          
    267              case MT_ZDO_REMOVE_LINK_KEY:
    268                MT_ZdoRemoveLinkKey(pBuf);
   \                     ??MT_ZdoCommandProcessing_16:
   \   0000A1                ; Setup parameters for call to function MT_ZdoRemoveLinkKey
   \   0000A1   12....       LCALL   `??MT_ZdoRemoveLinkKey::?relay`; Banked call to: MT_ZdoRemoveLinkKey
    269                break;
   \   0000A4   8016         SJMP    ??MT_ZdoCommandProcessing_22
    270          
    271              case MT_ZDO_GET_LINK_KEY:
    272                MT_ZdoGetLinkKey(pBuf);
   \                     ??MT_ZdoCommandProcessing_17:
   \   0000A6                ; Setup parameters for call to function MT_ZdoGetLinkKey
   \   0000A6   12....       LCALL   `??MT_ZdoGetLinkKey::?relay`; Banked call to: MT_ZdoGetLinkKey
    273                break;
   \   0000A9   8011         SJMP    ??MT_ZdoCommandProcessing_22
    274          #endif      
    275          
    276          #if defined ( ZDO_MGMT_NWKDISC_REQUEST )
    277              case MT_ZDO_MGMT_NWKDISC_REQ:
    278                MT_ZdoMgmtNwkDiscRequest(pBuf);
    279                break;
    280          #endif
    281          
    282          #if defined ( ZDO_MGMT_LQI_REQUEST )
    283              case MT_ZDO_MGMT_LQI_REQ:
    284                MT_ZdoMgmtLqiRequest(pBuf);
    285                break;
    286          #endif
    287          
    288          #if defined ( ZDO_MGMT_RTG_REQUEST )
    289              case MT_ZDO_MGMT_RTG_REQ:
    290                MT_ZdoMgmtRtgRequest(pBuf);
    291                break;
    292          #endif
    293          
    294          #if defined ( ZDO_MGMT_BIND_REQUEST )
    295              case MT_ZDO_MGMT_BIND_REQ:
    296                MT_ZdoMgmtBindRequest(pBuf);
    297                break;
    298          #endif
    299          
    300          #if defined ( ZDO_MGMT_LEAVE_REQUEST )
    301              case MT_ZDO_MGMT_LEAVE_REQ:
    302                MT_ZdoMgmtLeaveRequest(pBuf);
    303                break;
    304          #endif
    305          
    306          #if defined ( ZDO_MGMT_JOINDIRECT_REQUEST )
    307              case MT_ZDO_MGMT_DIRECT_JOIN_REQ:
    308                MT_ZdoMgmtDirectJoinRequest(pBuf);
    309                break;
    310          #endif
    311          
    312          #if defined ( ZDO_MGMT_PERMIT_JOIN_REQUEST )
    313              case MT_ZDO_MGMT_PERMIT_JOIN_REQ:
    314                MT_ZdoMgmtPermitJoinRequest(pBuf);
    315                break;
    316          #endif
    317          
    318          #if defined ( ZDO_MGMT_NWKUPDATE_REQUEST )
    319              case MT_ZDO_MGMT_NWK_UPDATE_REQ:
    320                MT_ZdoMgmtNwkUpdateRequest(pBuf);
    321                break;
    322          #endif 
    323          
    324          #if defined ( ZDO_NETWORKSTART_REQUEST )
    325              case MT_ZDO_STARTUP_FROM_APP:
    326                MT_ZdoStartupFromApp(pBuf);
   \                     ??MT_ZdoCommandProcessing_20:
   \   0000AB                ; Setup parameters for call to function MT_ZdoStartupFromApp
   \   0000AB   12....       LCALL   `??MT_ZdoStartupFromApp::?relay`; Banked call to: MT_ZdoStartupFromApp
    327                break;
   \   0000AE   800C         SJMP    ??MT_ZdoCommandProcessing_22
    328          #endif
    329          
    330              case MT_ZDO_MSG_CB_REGISTER:
    331                MT_ZdoRegisterForZDOMsg(pBuf);
   \                     ??MT_ZdoCommandProcessing_18:
   \   0000B0                ; Setup parameters for call to function MT_ZdoRegisterForZDOMsg
   \   0000B0   12....       LCALL   `??MT_ZdoRegisterForZDOMsg::?relay`; Banked call to: MT_ZdoRegisterForZDOMsg
    332                break;
   \   0000B3   8007         SJMP    ??MT_ZdoCommandProcessing_22
    333          
    334              case MT_ZDO_MSG_CB_REMOVE:
    335                MT_ZdoRemoveRegisteredCB(pBuf);
   \                     ??MT_ZdoCommandProcessing_19:
   \   0000B5                ; Setup parameters for call to function MT_ZdoRemoveRegisteredCB
   \   0000B5   12....       LCALL   `??MT_ZdoRemoveRegisteredCB::?relay`; Banked call to: MT_ZdoRemoveRegisteredCB
    336                break;
   \   0000B8   8002         SJMP    ??MT_ZdoCommandProcessing_22
    337          
    338              default:
    339                status = MT_RPC_ERR_COMMAND_ID;
   \                     ??MT_ZdoCommandProcessing_21:
   \   0000BA   7E02         MOV     R6,#0x2
    340                break;
    341            }
    342          
    343            return status;
   \                     ??MT_ZdoCommandProcessing_22:
   \   0000BC   EE           MOV     A,R6
   \   0000BD   F9           MOV     R1,A
   \   0000BE   02....       LJMP    ??Subroutine45_0 & 0xFFFF
    344          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine45_0:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    345          
    346          /***************************************************************************************************
    347           * @fn      MT_ZdoNwkAddrReq
    348           *
    349           * @brief   Handle a nwk address request.
    350           *
    351           * @param   pData  - MT message data
    352           *
    353           * @return  void
    354           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    355          void MT_ZdoNWKAddressRequest(uint8 *pBuf)
   \                     MT_ZdoNWKAddressRequest:
    356          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    357            uint8 cmdId;
    358            uint8 retValue;
    359            uint8 reqType;
    360            uint8 startIndex;
    361            uint8 *pExtAddr;
    362          
    363            /* parse header */
    364            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000A   8A82         MOV     DPL,R2
   \   00000C   8B83         MOV     DPH,R3
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   FE           MOV     R6,A
    365            pBuf += MT_RPC_FRAME_HDR_SZ;
    366          
    367            /* parse parameters */
    368            pExtAddr = pBuf;
   \   000012   12....       LCALL   ?Subroutine24 & 0xFFFF
    369            pBuf += Z_EXTADDR_LEN;
   \                     ??CrossCallReturnLabel_39:
   \   000015   E5..         MOV     A,?V0
   \   000017   2408         ADD     A,#0x8
   \   000019   FA           MOV     R2,A
   \   00001A   E4           CLR     A
   \   00001B   35..         ADDC    A,?V1
   \   00001D   FB           MOV     R3,A
    370          
    371            /* Request type */
    372            reqType = *pBuf++;
    373          
    374            /* Start index */
    375            startIndex = *pBuf;
    376          
    377            retValue = (uint8)ZDP_NwkAddrReq(pExtAddr, reqType, startIndex, 0);
   \   00001E                ; Setup parameters for call to function ZDP_NwkAddrReq
   \   00001E   7D00         MOV     R5,#0x0
   \   000020   8A82         MOV     DPL,R2
   \   000022   8B83         MOV     DPH,R3
   \   000024   A3           INC     DPTR
   \   000025   E0           MOVX    A,@DPTR
   \   000026   FC           MOV     R4,A
   \   000027   8A82         MOV     DPL,R2
   \   000029   8B83         MOV     DPH,R3
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   F9           MOV     R1,A
   \   00002D   AA..         MOV     R2,?V0
   \   00002F   AB..         MOV     R3,?V1
   \   000031   12....       LCALL   `??ZDP_NwkAddrReq::?relay`; Banked call to: ZDP_NwkAddrReq
   \   000034                REQUIRE ?Subroutine1
   \   000034                ; // Fall through to label ?Subroutine1
    378          
    379            /* Build and send back the response */
    380            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    381          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_94:
   \   000003   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   \   000006   7401         MOV     A,#0x1
   \   000008   12....       LCALL   ?DEALLOC_XSTACK8
   \   00000B   7F02         MOV     R7,#0x2
   \   00000D   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   E9           MOV     A,R1
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007   F0           MOVX    @DPTR,A
   \   000008                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000008                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000008                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000008                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000008                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000008                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000008                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000008                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000008                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000008                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000008                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000008                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000008   AC..         MOV     R4,?XSP + 0
   \   00000A   AD..         MOV     R5,?XSP + 1
   \   00000C   7B01         MOV     R3,#0x1
   \   00000E   EE           MOV     A,R6
   \   00000F   FA           MOV     R2,A
   \   000010   7965         MOV     R1,#0x65
   \   000012   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   EA           MOV     A,R2
   \   000001   2403         ADD     A,#0x3
   \   000003   F5..         MOV     ?V0,A
   \   000005   E4           CLR     A
   \   000006   3B           ADDC    A,R3
   \   000007   F5..         MOV     ?V1,A
   \   000009   22           RET
    382          
    383          /***************************************************************************************************
    384           * @fn      MT_ZdoIEEEAddrRequest
    385           *
    386           * @brief   Handle a IEEE address request.
    387           *
    388           * @param   pData  - MT message data
    389           *
    390           * @return  void
    391           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    392          void MT_ZdoIEEEAddrRequest (uint8 *pBuf)
   \                     MT_ZdoIEEEAddrRequest:
    393          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    394            uint8 cmdId;
    395            uint8 retValue;
    396            uint16 shortAddr;
    397            uint8 reqType;
    398            uint8 startIndex;
    399          
    400            /* parse header */
    401            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000A   12....       LCALL   ??Subroutine41_0 & 0xFFFF
    402            pBuf += MT_RPC_FRAME_HDR_SZ;
   \                     ??CrossCallReturnLabel_85:
   \   00000D   5001         JNC     ??MT_ZdoIEEEAddrRequest_0
   \   00000F   0B           INC     R3
    403          
    404            /* Dev address */
    405            shortAddr = BUILD_UINT16(pBuf[0], pBuf[1]);
    406            pBuf += 2;
    407          
    408            /* request type */
    409            reqType = *pBuf++;
    410          
    411            /* start index */
    412            startIndex = *pBuf;
    413          
    414            retValue = (uint8)ZDP_IEEEAddrReq(shortAddr, reqType, startIndex, 0);
   \                     ??MT_ZdoIEEEAddrRequest_0:
   \   000010                ; Setup parameters for call to function ZDP_IEEEAddrReq
   \   000010   7D00         MOV     R5,#0x0
   \   000012   8A82         MOV     DPL,R2
   \   000014   8B83         MOV     DPH,R3
   \   000016   A3           INC     DPTR
   \   000017   A3           INC     DPTR
   \   000018   A3           INC     DPTR
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   FC           MOV     R4,A
   \   00001B   8A82         MOV     DPL,R2
   \   00001D   8B83         MOV     DPH,R3
   \   00001F   A3           INC     DPTR
   \   000020   A3           INC     DPTR
   \   000021   E0           MOVX    A,@DPTR
   \   000022   F9           MOV     R1,A
   \   000023   8A82         MOV     DPL,R2
   \   000025   8B83         MOV     DPH,R3
   \   000027   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   00002A   12....       LCALL   `??ZDP_IEEEAddrReq::?relay`; Banked call to: ZDP_IEEEAddrReq
   \   00002D   80..         SJMP    ?Subroutine1
    415          
    416            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    417          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   12....       LCALL   ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_78:
   \   000003   FB           MOV     R3,A
   \   000004   AA..         MOV     R2,?V0
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine41_0:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   FE           MOV     R6,A
   \   000008                ; Setup parameters for call to function ZDSecMgrDeviceRemoveByExtAddr
   \   000008   EA           MOV     A,R2
   \   000009   2403         ADD     A,#0x3
   \   00000B   FA           MOV     R2,A
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   22           RET
    418          
    419          /***************************************************************************************************
    420           * @fn      MT_ZdoNodeDescRequest
    421           *
    422           * @brief   Handle a Node Descriptor request.
    423           *
    424           * @param   pData  - MT message data
    425           *
    426           * @return  void
    427           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    428          void MT_ZdoNodeDescRequest (uint8 *pBuf)
   \                     MT_ZdoNodeDescRequest:
    429          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    430            uint8 cmdId;
    431            uint8 retValue;
    432            zAddrType_t destAddr;
    433            uint16 shortAddr;
    434          
    435            /* parse header */
    436            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000A   12....       LCALL   ??Subroutine41_0 & 0xFFFF
    437            pBuf += MT_RPC_FRAME_HDR_SZ;
   \                     ??CrossCallReturnLabel_86:
   \   00000D   5001         JNC     ??MT_ZdoNodeDescRequest_0
   \   00000F   0B           INC     R3
    438          
    439            /* Destination address */
    440            destAddr.addrMode = Addr16Bit;
   \                     ??MT_ZdoNodeDescRequest_0:
   \   000010   7409         MOV     A,#0x9
   \   000012   12....       LCALL   ?XSTACK_DISP0_8
   \   000015   12....       LCALL   ?Subroutine6 & 0xFFFF
    441            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??CrossCallReturnLabel_0:
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   12....       LCALL   ?Subroutine25 & 0xFFFF
    442            pBuf += 2;
   \                     ??CrossCallReturnLabel_41:
   \   00001E   5001         JNC     ??MT_ZdoNodeDescRequest_1
   \   000020   0B           INC     R3
    443          
    444            /* Network address of interest */
    445            shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
    446            pBuf += 2;
    447          
    448            retValue = (uint8)ZDP_NodeDescReq( &destAddr, shortAddr, 0);
   \                     ??MT_ZdoNodeDescRequest_1:
   \   000021                ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
   \   000021   75..00       MOV     ?V0,#0x0
   \   000024   78..         MOV     R0,#?V0
   \   000026   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000029   7902         MOV     R1,#0x2
   \   00002B   8A82         MOV     DPL,R2
   \   00002D   8B83         MOV     DPH,R3
   \   00002F   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   000032   E9           MOV     A,R1
   \   000033   02....       LJMP    ??Subroutine42_0 & 0xFFFF
    449          
    450            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    451          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   E8           MOV     A,R0
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   E9           MOV     A,R1
   \   000004   F0           MOVX    @DPTR,A
   \   000005   EA           MOV     A,R2
   \   000006   2402         ADD     A,#0x2
   \   000008   FA           MOV     R2,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   7402         MOV     A,#0x2
   \   000002   F0           MOVX    @DPTR,A
   \   000003   8A82         MOV     DPL,R2
   \   000005   8B83         MOV     DPH,R3
   \   000007   E0           MOVX    A,@DPTR
   \   000008   FC           MOV     R4,A
   \   000009   A3           INC     DPTR
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   F9           MOV     R1,A
   \   00000C   EC           MOV     A,R4
   \   00000D   F8           MOV     R0,A
   \   00000E   7401         MOV     A,#0x1
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_63:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FC           MOV     R4,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FA           MOV     R2,A
   \   000005   E4           CLR     A
   \   000006   CA           XCH     A,R2
   \   000007   FB           MOV     R3,A
   \   000008   EC           MOV     A,R4
   \   000009   2A           ADD     A,R2
   \   00000A   E4           CLR     A
   \   00000B   3B           ADDC    A,R3
   \   00000C   FD           MOV     R5,A
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine42_0:
   \   000000   12....       LCALL   ?XSTACK_DISP101_8
   \   000003   12....       LCALL   `??ZDP_NWKAddrOfInterestReq::?relay`; Banked call to: ZDP_NWKAddrOfInterestReq
   \   000006                REQUIRE ??Subroutine43_0
   \   000006                ; // Fall through to label ??Subroutine43_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine43_0:
   \   000000   7401         MOV     A,#0x1
   \   000002   12....       LCALL   ?DEALLOC_XSTACK8
   \   000005   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_95:
   \   000008   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   \   00000B   740A         MOV     A,#0xa
   \   00000D                REQUIRE ??Subroutine44_0
   \   00000D                ; // Fall through to label ??Subroutine44_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine44_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine45_0
   \   000003                ; // Fall through to label ??Subroutine45_0
    452          
    453          /***************************************************************************************************
    454           * @fn      MT_ZdoPowerDescRequest
    455           *
    456           * @brief   Handle a Power Descriptor request.
    457           *
    458           * @param   pData  - MT message data
    459           *
    460           * @return  void
    461           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    462          void MT_ZdoPowerDescRequest(uint8 *pBuf)
   \                     MT_ZdoPowerDescRequest:
    463          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    464            uint8 cmdId;
    465            uint8 retValue;
    466            zAddrType_t destAddr;
    467            uint16 shortAddr;
    468          
    469            /* parse header */
    470            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000A   12....       LCALL   ??Subroutine41_0 & 0xFFFF
    471            pBuf += MT_RPC_FRAME_HDR_SZ;
   \                     ??CrossCallReturnLabel_87:
   \   00000D   5001         JNC     ??MT_ZdoPowerDescRequest_0
   \   00000F   0B           INC     R3
    472          
    473            /* Dev address */
    474            destAddr.addrMode = Addr16Bit;
   \                     ??MT_ZdoPowerDescRequest_0:
   \   000010   7409         MOV     A,#0x9
   \   000012   12....       LCALL   ?XSTACK_DISP0_8
   \   000015   12....       LCALL   ?Subroutine6 & 0xFFFF
    475            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??CrossCallReturnLabel_1:
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   12....       LCALL   ?Subroutine25 & 0xFFFF
    476            pBuf += 2;
   \                     ??CrossCallReturnLabel_42:
   \   00001E   5001         JNC     ??MT_ZdoPowerDescRequest_1
   \   000020   0B           INC     R3
    477          
    478            /* Network address of interest */
    479            shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
    480            pBuf += 2;
    481          
    482            retValue = (uint8)ZDP_PowerDescReq( &destAddr, shortAddr, 0);
   \                     ??MT_ZdoPowerDescRequest_1:
   \   000021                ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
   \   000021   75..00       MOV     ?V0,#0x0
   \   000024   78..         MOV     R0,#?V0
   \   000026   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000029   7903         MOV     R1,#0x3
   \   00002B   02....       LJMP    ?Subroutine0 & 0xFFFF
    483          
    484            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    485          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   000003                REQUIRE ??Subroutine42_0
   \   000003                ; // Fall through to label ??Subroutine42_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   000007   7402         MOV     A,#0x2
   \   000009   22           RET
    486          
    487          /***************************************************************************************************
    488           * @fn      MT_ZdoSimpleDescRequest
    489           *
    490           * @brief   Handle a Simple Descriptor request.
    491           *
    492           * @param   pBuf  - MT message data
    493           *
    494           * @return  void
    495           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    496          void MT_ZdoSimpleDescRequest(uint8 *pBuf)
   \                     MT_ZdoSimpleDescRequest:
    497          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    498            uint8 cmdId;
    499            uint8 retValue;
    500            uint8 epInt;
    501            zAddrType_t destAddr;
    502            uint16 shortAddr;
    503          
    504            /* parse header */
    505            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000A   12....       LCALL   ??Subroutine41_0 & 0xFFFF
    506            pBuf += MT_RPC_FRAME_HDR_SZ;
   \                     ??CrossCallReturnLabel_88:
   \   00000D   5001         JNC     ??MT_ZdoSimpleDescRequest_0
   \   00000F   0B           INC     R3
    507          
    508            /* Dev address */
    509            destAddr.addrMode = Addr16Bit;
   \                     ??MT_ZdoSimpleDescRequest_0:
   \   000010   7409         MOV     A,#0x9
   \   000012   12....       LCALL   ?XSTACK_DISP0_8
   \   000015   12....       LCALL   ?Subroutine6 & 0xFFFF
    510            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??CrossCallReturnLabel_2:
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   12....       LCALL   ?Subroutine25 & 0xFFFF
    511            pBuf += 2;
   \                     ??CrossCallReturnLabel_43:
   \   00001E   5001         JNC     ??MT_ZdoSimpleDescRequest_1
   \   000020   0B           INC     R3
    512          
    513            /* Network address of interest */
    514            shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
    515            pBuf += 2;
    516          
    517            /* endpoint/interface */
    518            epInt = *pBuf++;
    519          
    520            retValue = (uint8)ZDP_SimpleDescReq( &destAddr, shortAddr, epInt, 0);
   \                     ??MT_ZdoSimpleDescRequest_1:
   \   000021                ; Setup parameters for call to function ZDP_SimpleDescReq
   \   000021   75..00       MOV     ?V0,#0x0
   \   000024   78..         MOV     R0,#?V0
   \   000026   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000029   8A82         MOV     DPL,R2
   \   00002B   8B83         MOV     DPH,R3
   \   00002D   A3           INC     DPTR
   \   00002E   A3           INC     DPTR
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   F9           MOV     R1,A
   \   000031   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   000034   12....       LCALL   ?XSTACK_DISP101_8
   \   000037   12....       LCALL   `??ZDP_SimpleDescReq::?relay`; Banked call to: ZDP_SimpleDescReq
   \   00003A   02....       LJMP    ??Subroutine43_0 & 0xFFFF
    521          
    522            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    523          }
    524          
    525          /***************************************************************************************************
    526           * @fn      MT_ZdoActiveEpRequest
    527           *
    528           * @brief   Handle a Active EP request.
    529           *
    530           * @param   pBuf  - MT message data
    531           *
    532           * @return  void
    533           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    534          void MT_ZdoActiveEpRequest(uint8 *pBuf)
   \                     MT_ZdoActiveEpRequest:
    535          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    536            uint8 cmdId;
    537            uint8 retValue;
    538            zAddrType_t destAddr;
    539            uint16 shortAddr;
    540          
    541            /* parse header */
    542            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000A   12....       LCALL   ??Subroutine41_0 & 0xFFFF
    543            pBuf += MT_RPC_FRAME_HDR_SZ;
   \                     ??CrossCallReturnLabel_89:
   \   00000D   5001         JNC     ??MT_ZdoActiveEpRequest_0
   \   00000F   0B           INC     R3
    544          
    545            /* Dev address */
    546            destAddr.addrMode = Addr16Bit;
   \                     ??MT_ZdoActiveEpRequest_0:
   \   000010   7409         MOV     A,#0x9
   \   000012   12....       LCALL   ?XSTACK_DISP0_8
   \   000015   12....       LCALL   ?Subroutine6 & 0xFFFF
    547            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??CrossCallReturnLabel_3:
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   12....       LCALL   ?Subroutine25 & 0xFFFF
    548            pBuf += 2;
   \                     ??CrossCallReturnLabel_44:
   \   00001E   5001         JNC     ??MT_ZdoActiveEpRequest_1
   \   000020   0B           INC     R3
    549          
    550            /* Network address of interest */
    551            shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
    552            pBuf += 2;
    553          
    554            retValue = (uint8)ZDP_ActiveEPReq( &destAddr, shortAddr, 0);
   \                     ??MT_ZdoActiveEpRequest_1:
   \   000021                ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
   \   000021   75..00       MOV     ?V0,#0x0
   \   000024   78..         MOV     R0,#?V0
   \   000026   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000029   7905         MOV     R1,#0x5
   \   00002B   02....       LJMP    ?Subroutine0 & 0xFFFF
    555          
    556            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    557          }
    558          
    559          /***************************************************************************************************
    560           * @fn      MT_ZdoMatchDescRequest
    561           *
    562           * @brief   Handle a Match Descriptor request.
    563           *
    564           * @param   pBuf  - MT message data
    565           *
    566           * @return  void
    567           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    568          void MT_ZdoMatchDescRequest(uint8 *pBuf)
   \                     MT_ZdoMatchDescRequest:
    569          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 74
   \   000005   74B6         MOV     A,#-0x4a
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   F8           MOV     R0,A
   \   00000C   EB           MOV     A,R3
   \   00000D   F9           MOV     R1,A
    570            uint8 cmdId;
    571            uint8 retValue = 0;
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   E4           CLR     A
   \   000015   12....       LCALL   ?Subroutine27 & 0xFFFF
    572            uint8 i, numInClusters, numOutClusters;
    573            uint16 profileId;
    574            zAddrType_t destAddr;
    575            uint16 shortAddr;
    576            uint16 inClusters[MTZDO_MAX_MATCH_CLUSTERS], outClusters[MTZDO_MAX_MATCH_CLUSTERS];
    577          
    578            /* parse header */
    579            cmdId = pBuf[MT_RPC_POS_CMD1];
   \                     ??CrossCallReturnLabel_48:
   \   000018   A3           INC     DPTR
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   FE           MOV     R6,A
    580            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   00001B   E8           MOV     A,R0
   \   00001C   2403         ADD     A,#0x3
   \   00001E   F8           MOV     R0,A
   \   00001F   5001         JNC     ??MT_ZdoMatchDescRequest_0
   \   000021   09           INC     R1
    581          
    582            /* Dev address */
    583            destAddr.addrMode = Addr16Bit;
   \                     ??MT_ZdoMatchDescRequest_0:
   \   000022   7409         MOV     A,#0x9
   \   000024   12....       LCALL   ?XSTACK_DISP0_8
   \   000027   7402         MOV     A,#0x2
   \   000029   F0           MOVX    @DPTR,A
    584            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \   00002A   8882         MOV     DPL,R0
   \   00002C   8983         MOV     DPH,R1
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   FC           MOV     R4,A
   \   000030   A3           INC     DPTR
   \   000031   E0           MOVX    A,@DPTR
   \   000032   FB           MOV     R3,A
   \   000033   EC           MOV     A,R4
   \   000034   FA           MOV     R2,A
   \   000035   7401         MOV     A,#0x1
   \   000037   12....       LCALL   ?XSTACK_DISP0_8
   \   00003A   EA           MOV     A,R2
   \   00003B   F0           MOVX    @DPTR,A
   \   00003C   A3           INC     DPTR
   \   00003D   EB           MOV     A,R3
   \   00003E   F0           MOVX    @DPTR,A
    585            pBuf += 2;
   \   00003F   E8           MOV     A,R0
   \   000040   2402         ADD     A,#0x2
   \   000042   F8           MOV     R0,A
   \   000043   5001         JNC     ??MT_ZdoMatchDescRequest_1
   \   000045   09           INC     R1
    586          
    587            /* Network address of interest */
    588            shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??MT_ZdoMatchDescRequest_1:
   \   000046   8882         MOV     DPL,R0
   \   000048   8983         MOV     DPH,R1
   \   00004A   12....       LCALL   ?Subroutine14 & 0xFFFF
    589            pBuf += 2;
   \                     ??CrossCallReturnLabel_18:
   \   00004D   E8           MOV     A,R0
   \   00004E   2402         ADD     A,#0x2
   \   000050   F8           MOV     R0,A
   \   000051   5001         JNC     ??MT_ZdoMatchDescRequest_2
   \   000053   09           INC     R1
    590          
    591            /* Profile ID */
    592            profileId = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??MT_ZdoMatchDescRequest_2:
   \   000054   8882         MOV     DPL,R0
   \   000056   8983         MOV     DPH,R1
   \   000058   12....       LCALL   ?Subroutine15 & 0xFFFF
    593            pBuf += 2;
    594          
    595            /* NumInClusters */
    596            numInClusters = *pBuf++;
   \                     ??CrossCallReturnLabel_20:
   \   00005B   8882         MOV     DPL,R0
   \   00005D   8983         MOV     DPH,R1
   \   00005F   A3           INC     DPTR
   \   000060   A3           INC     DPTR
   \   000061   E0           MOVX    A,@DPTR
   \   000062   FF           MOV     R7,A
   \   000063   E8           MOV     A,R0
   \   000064   2403         ADD     A,#0x3
   \   000066   F8           MOV     R0,A
   \   000067   5001         JNC     ??MT_ZdoMatchDescRequest_3
   \   000069   09           INC     R1
    597            if ( numInClusters <= MTZDO_MAX_MATCH_CLUSTERS )
   \                     ??MT_ZdoMatchDescRequest_3:
   \   00006A   EF           MOV     A,R7
   \   00006B   C3           CLR     C
   \   00006C   9411         SUBB    A,#0x11
   \   00006E   502F         JNC     ??MT_ZdoMatchDescRequest_4
    598            {
    599              /* IN clusters */
    600              for ( i = 0; i < numInClusters; i++ )
   \   000070   75..00       MOV     ?V3,#0x0
   \                     ??MT_ZdoMatchDescRequest_5:
   \   000073   E5..         MOV     A,?V3
   \   000075   C3           CLR     C
   \   000076   9F           SUBB    A,R7
   \   000077   502F         JNC     ??MT_ZdoMatchDescRequest_6
    601              {
    602                inClusters[i] = BUILD_UINT16( pBuf[0], pBuf[1]);
   \   000079   8882         MOV     DPL,R0
   \   00007B   8983         MOV     DPH,R1
   \   00007D   E0           MOVX    A,@DPTR
   \   00007E   F5..         MOV     ?V4,A
   \   000080   A3           INC     DPTR
   \   000081   E0           MOVX    A,@DPTR
   \   000082   F5..         MOV     ?V1,A
   \   000084   E5..         MOV     A,?V4
   \   000086   2400         ADD     A,#0x0
   \   000088   E4           CLR     A
   \   000089   35..         ADDC    A,?V1
   \   00008B   F5..         MOV     ?V5,A
   \   00008D   12....       LCALL   ?Subroutine30 & 0xFFFF
    603                pBuf += 2;
    604              }
   \                     ??CrossCallReturnLabel_57:
   \   000090   742A         MOV     A,#0x2a
   \   000092   12....       LCALL   ?XSTACK_DISP0_8
   \   000095   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   000098   5001         JNC     ??MT_ZdoMatchDescRequest_7
   \   00009A   09           INC     R1
   \                     ??MT_ZdoMatchDescRequest_7:
   \   00009B   05..         INC     ?V3
   \   00009D   80D4         SJMP    ??MT_ZdoMatchDescRequest_5
    605            }
    606            else
    607            {
    608              retValue = ZDP_INVALID_REQTYPE;
   \                     ??MT_ZdoMatchDescRequest_4:
   \   00009F   85..82       MOV     DPL,?XSP + 0
   \   0000A2   85..83       MOV     DPH,?XSP + 1
   \   0000A5   7480         MOV     A,#-0x80
   \   0000A7   F0           MOVX    @DPTR,A
    609            }
    610          
    611            /* NumOutClusters */
    612            numOutClusters = *pBuf++;
   \                     ??MT_ZdoMatchDescRequest_6:
   \   0000A8   8882         MOV     DPL,R0
   \   0000AA   8983         MOV     DPH,R1
   \   0000AC   E0           MOVX    A,@DPTR
   \   0000AD   F5..         MOV     ?V2,A
   \   0000AF   A3           INC     DPTR
   \   0000B0   A882         MOV     R0,DPL
   \   0000B2   A983         MOV     R1,DPH
    613            if ( numOutClusters <= MTZDO_MAX_MATCH_CLUSTERS )
   \   0000B4   C3           CLR     C
   \   0000B5   9411         SUBB    A,#0x11
   \   0000B7   5023         JNC     ??MT_ZdoMatchDescRequest_8
    614            {
    615              /* OUT Clusters */
    616              for ( i = 0; i < numOutClusters; i++ )
   \   0000B9   75..00       MOV     ?V3,#0x0
   \                     ??MT_ZdoMatchDescRequest_9:
   \   0000BC   E5..         MOV     A,?V3
   \   0000BE   C3           CLR     C
   \   0000BF   95..         SUBB    A,?V2
   \   0000C1   5023         JNC     ??MT_ZdoMatchDescRequest_10
    617              {
    618                outClusters[i] = BUILD_UINT16( pBuf[0], pBuf[1]);
   \   0000C3   8882         MOV     DPL,R0
   \   0000C5   8983         MOV     DPH,R1
   \   0000C7   12....       LCALL   ?Subroutine33 & 0xFFFF
    619                pBuf += 2;
    620              }
   \                     ??CrossCallReturnLabel_64:
   \   0000CA   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   0000CD   740A         MOV     A,#0xa
   \   0000CF   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D2   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   0000D5   5001         JNC     ??MT_ZdoMatchDescRequest_11
   \   0000D7   09           INC     R1
   \                     ??MT_ZdoMatchDescRequest_11:
   \   0000D8   05..         INC     ?V3
   \   0000DA   80E0         SJMP    ??MT_ZdoMatchDescRequest_9
    621            }
    622            else
    623            {
    624              retValue = ZDP_INVALID_REQTYPE;
   \                     ??MT_ZdoMatchDescRequest_8:
   \   0000DC   85..82       MOV     DPL,?XSP + 0
   \   0000DF   85..83       MOV     DPH,?XSP + 1
   \   0000E2   7480         MOV     A,#-0x80
   \   0000E4   8055         SJMP    ??MT_ZdoMatchDescRequest_12
    625            }
    626          
    627            if ( retValue == 0 )
   \                     ??MT_ZdoMatchDescRequest_10:
   \   0000E6   85..82       MOV     DPL,?XSP + 0
   \   0000E9   85..83       MOV     DPH,?XSP + 1
   \   0000EC   E0           MOVX    A,@DPTR
   \   0000ED   704D         JNZ     ??MT_ZdoMatchDescRequest_13
    628            {
    629              retValue = (uint8)ZDP_MatchDescReq( &destAddr, shortAddr, profileId, numInClusters,
    630                                                 inClusters, numOutClusters, outClusters, 0);
   \   0000EF                ; Setup parameters for call to function ZDP_MatchDescReq
   \   0000EF   75..00       MOV     ?V0,#0x0
   \   0000F2   78..         MOV     R0,#?V0
   \   0000F4   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000F7   740B         MOV     A,#0xb
   \   0000F9   12....       LCALL   ?XSTACK_DISP100_8
   \   0000FC   88..         MOV     ?V0,R0
   \   0000FE   89..         MOV     ?V1,R1
   \   000100   78..         MOV     R0,#?V0
   \   000102   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000105   E5..         MOV     A,?V2
   \   000107   F5..         MOV     ?V0,A
   \   000109   78..         MOV     R0,#?V0
   \   00010B   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00010E   742E         MOV     A,#0x2e
   \   000110   12....       LCALL   ?XSTACK_DISP100_8
   \   000113   88..         MOV     ?V0,R0
   \   000115   89..         MOV     ?V1,R1
   \   000117   78..         MOV     R0,#?V0
   \   000119   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00011C   8A..         MOV     ?V0,R2
   \   00011E   8B..         MOV     ?V1,R3
   \   000120   78..         MOV     R0,#?V0
   \   000122   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000125   EF           MOV     A,R7
   \   000126   F9           MOV     R1,A
   \   000127   7409         MOV     A,#0x9
   \   000129   12....       LCALL   ?XSTACK_DISP101_8
   \   00012C   12....       LCALL   `??ZDP_MatchDescReq::?relay`; Banked call to: ZDP_MatchDescReq
   \   00012F   7408         MOV     A,#0x8
   \   000131   12....       LCALL   ?DEALLOC_XSTACK8
   \   000134   E9           MOV     A,R1
   \   000135   85..82       MOV     DPL,?XSP + 0
   \   000138   85..83       MOV     DPH,?XSP + 1
   \                     ??MT_ZdoMatchDescRequest_12:
   \   00013B   F0           MOVX    @DPTR,A
    631            }
    632          
    633            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   \                     ??MT_ZdoMatchDescRequest_13:
   \   00013C                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00013C   AC..         MOV     R4,?XSP + 0
   \   00013E   AD..         MOV     R5,?XSP + 1
   \   000140   7B01         MOV     R3,#0x1
   \   000142   EE           MOV     A,R6
   \   000143   FA           MOV     R2,A
   \   000144   7965         MOV     R1,#0x65
   \   000146   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    634          }
   \   000149   744A         MOV     A,#0x4a
   \   00014B                REQUIRE ?Subroutine2
   \   00014B                ; // Fall through to label ?Subroutine2

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F06         MOV     R7,#0x6
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   85....       MOV     ?V0,?V3
   \   000003   12....       LCALL   ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_75:
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   12....       LCALL   ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   000003   E8           MOV     A,R0
   \   000004   2402         ADD     A,#0x2
   \   000006   F8           MOV     R0,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   E582         MOV     A,DPL
   \   000002   25..         ADD     A,?V0
   \   000004   F582         MOV     DPL,A
   \   000006   E583         MOV     A,DPH
   \   000008   35..         ADDC    A,?V1
   \   00000A   F583         MOV     DPH,A
   \   00000C   E5..         MOV     A,?V4
   \   00000E   F0           MOVX    @DPTR,A
   \   00000F   A3           INC     DPTR
   \   000010   E5..         MOV     A,?V5
   \   000012   F0           MOVX    @DPTR,A
   \   000013   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   E5..         MOV     A,?V0
   \   000002   25E0         ADD     A,0xE0 /* A   */
   \   000004   F5..         MOV     ?V0,A
   \   000006   E4           CLR     A
   \   000007   33           RLC     A
   \   000008   F5..         MOV     ?V1,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   12....       LCALL   ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_79:
   \   000003   F5..         MOV     ?V5,A
   \   000005   E5..         MOV     A,?V0
   \   000007   F5..         MOV     ?V4,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8882         MOV     DPL,R0
   \   000003   8983         MOV     DPH,R1
   \   000005   A3           INC     DPTR
   \   000006   22           RET
    635          
    636          /***************************************************************************************************
    637           * @fn      MT_ZdoComplexDescRequest
    638           *
    639           * @brief   Handle a Complex Descriptor request.
    640           *
    641           * @param   pBuf  - MT message data
    642           *
    643           * @return  void
    644           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    645          void MT_ZdoComplexDescRequest(uint8 *pBuf)
   \                     MT_ZdoComplexDescRequest:
    646          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    647            uint8 cmdId;
    648            uint8 retValue;
    649            zAddrType_t destAddr;
    650            uint16 shortAddr;
    651          
    652            /* parse header */
    653            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000A   12....       LCALL   ??Subroutine41_0 & 0xFFFF
    654            pBuf += MT_RPC_FRAME_HDR_SZ;
   \                     ??CrossCallReturnLabel_90:
   \   00000D   5001         JNC     ??MT_ZdoComplexDescRequest_0
   \   00000F   0B           INC     R3
    655          
    656            /* Dev address */
    657            destAddr.addrMode = Addr16Bit;
   \                     ??MT_ZdoComplexDescRequest_0:
   \   000010   7409         MOV     A,#0x9
   \   000012   12....       LCALL   ?XSTACK_DISP0_8
   \   000015   12....       LCALL   ?Subroutine6 & 0xFFFF
    658            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??CrossCallReturnLabel_4:
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   12....       LCALL   ?Subroutine25 & 0xFFFF
    659            pBuf += 2;
   \                     ??CrossCallReturnLabel_45:
   \   00001E   5001         JNC     ??MT_ZdoComplexDescRequest_1
   \   000020   0B           INC     R3
    660          
    661            /* Network address of interest */
    662            shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
    663            pBuf += 2;
    664          
    665            retValue = (uint8)ZDP_ComplexDescReq( &destAddr, shortAddr, 0);
   \                     ??MT_ZdoComplexDescRequest_1:
   \   000021                ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
   \   000021   75..00       MOV     ?V0,#0x0
   \   000024   78..         MOV     R0,#?V0
   \   000026   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000029   7910         MOV     R1,#0x10
   \   00002B   02....       LJMP    ?Subroutine0 & 0xFFFF
    666          
    667            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    668          }
    669          
    670          /***************************************************************************************************
    671           * @fn      MT_ZdoUserDescRequest
    672           *
    673           * @brief   Handle a User Descriptor request.
    674           *
    675           * @param   pBuf  - MT message data
    676           *
    677           * @return  void
    678           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    679          void MT_ZdoUserDescRequest(uint8 *pBuf)
   \                     MT_ZdoUserDescRequest:
    680          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    681            uint8 cmdId;
    682            uint8 retValue;
    683            zAddrType_t destAddr;
    684            uint16 shortAddr;
    685          
    686            /* parse header */
    687            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000A   12....       LCALL   ??Subroutine41_0 & 0xFFFF
    688            pBuf += MT_RPC_FRAME_HDR_SZ;
   \                     ??CrossCallReturnLabel_91:
   \   00000D   5001         JNC     ??MT_ZdoUserDescRequest_0
   \   00000F   0B           INC     R3
    689          
    690            /* Dev address */
    691            destAddr.addrMode = Addr16Bit;
   \                     ??MT_ZdoUserDescRequest_0:
   \   000010   7409         MOV     A,#0x9
   \   000012   12....       LCALL   ?XSTACK_DISP0_8
   \   000015   12....       LCALL   ?Subroutine6 & 0xFFFF
    692            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1]);
   \                     ??CrossCallReturnLabel_5:
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   12....       LCALL   ?Subroutine25 & 0xFFFF
    693            pBuf += 2;
   \                     ??CrossCallReturnLabel_46:
   \   00001E   5001         JNC     ??MT_ZdoUserDescRequest_1
   \   000020   0B           INC     R3
    694          
    695            /* Network address of interest */
    696            shortAddr = BUILD_UINT16( pBuf[0], pBuf[1]);
    697            pBuf += 2;
    698          
    699            retValue = (uint8)ZDP_UserDescReq( &destAddr, shortAddr, 0);
   \                     ??MT_ZdoUserDescRequest_1:
   \   000021                ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
   \   000021   75..00       MOV     ?V0,#0x0
   \   000024   78..         MOV     R0,#?V0
   \   000026   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000029   7911         MOV     R1,#0x11
   \   00002B   80..         SJMP    ?Subroutine0
    700          
    701            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    702          }
    703          
    704          /***************************************************************************************************
    705           * @fn      MT_ZdoEndDevAnnce
    706           *
    707           * @brief   Handle a End Device Announce Descriptor request.
    708           *
    709           * @param   pBuf  - MT message data
    710           *
    711           * @return  void
    712           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    713          void MT_ZdoEndDevAnnce(uint8 *pBuf)
   \                     MT_ZdoEndDevAnnce:
    714          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FC           MOV     R4,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FD           MOV     R5,A
    715            uint8 cmdId;
    716            uint8 retValue;
    717            uint16 shortAddr;
    718            uint8 *pIEEEAddr;
    719          
    720            /* parse header */
    721            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000E   8C82         MOV     DPL,R4
   \   000010   8D83         MOV     DPH,R5
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   E0           MOVX    A,@DPTR
   \   000015   FE           MOV     R6,A
    722            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000016   EC           MOV     A,R4
   \   000017   2403         ADD     A,#0x3
   \   000019   FC           MOV     R4,A
   \   00001A   5001         JNC     ??MT_ZdoEndDevAnnce_0
   \   00001C   0D           INC     R5
    723          
    724            /* network address */
    725            shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??MT_ZdoEndDevAnnce_0:
   \   00001D   12....       LCALL   ?Subroutine11 & 0xFFFF
    726            pBuf += 2;
   \                     ??CrossCallReturnLabel_13:
   \   000020   5001         JNC     ??MT_ZdoEndDevAnnce_1
   \   000022   0D           INC     R5
    727          
    728            /* extended address */
    729            pIEEEAddr = pBuf;
    730            pBuf += Z_EXTADDR_LEN;
    731          
    732            retValue = (uint8)ZDP_DeviceAnnce( shortAddr, pIEEEAddr, *pBuf, 0);
   \                     ??MT_ZdoEndDevAnnce_1:
   \   000023                ; Setup parameters for call to function ZDP_DeviceAnnce
   \   000023   88..         MOV     ?V0,R0
   \   000025   78..         MOV     R0,#?V0
   \   000027   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00002A   8C82         MOV     DPL,R4
   \   00002C   8D83         MOV     DPH,R5
   \   00002E   A3           INC     DPTR
   \   00002F   A3           INC     DPTR
   \   000030   A3           INC     DPTR
   \   000031   A3           INC     DPTR
   \   000032   A3           INC     DPTR
   \   000033   A3           INC     DPTR
   \   000034   A3           INC     DPTR
   \   000035   A3           INC     DPTR
   \   000036   E0           MOVX    A,@DPTR
   \   000037   F9           MOV     R1,A
   \   000038   12....       LCALL   `??ZDP_DeviceAnnce::?relay`; Banked call to: ZDP_DeviceAnnce
   \   00003B   7401         MOV     A,#0x1
   \   00003D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000040   02....       LJMP    ?Subroutine5 & 0xFFFF
    733          
    734            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    735          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F8           MOV     R0,A
   \   000005   E4           CLR     A
   \   000006   C8           XCH     A,R0
   \   000007   F9           MOV     R1,A
   \   000008   EA           MOV     A,R2
   \   000009   28           ADD     A,R0
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   8C82         MOV     DPL,R4
   \   000002   8D83         MOV     DPH,R5
   \   000004   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   000007   E4           CLR     A
   \   000008   39           ADDC    A,R1
   \   000009   FB           MOV     R3,A
   \   00000A   EC           MOV     A,R4
   \   00000B   2402         ADD     A,#0x2
   \   00000D   FC           MOV     R4,A
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_96:
   \   000003   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   \   000006                REQUIRE ??Subroutine47_0
   \   000006                ; // Fall through to label ??Subroutine47_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine47_0:
   \   000000   7401         MOV     A,#0x1
   \   000002   02....       LJMP    ??Subroutine44_0 & 0xFFFF
    736          
    737          /***************************************************************************************************
    738           * @fn      MT_ZdoUserDescSet
    739           *
    740           * @brief   Handle a User Descriptor Set.
    741           *
    742           * @param   pBuf  - MT message data
    743           *
    744           * @return  void
    745           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    746          void MT_ZdoUserDescSet(uint8 *pBuf)
   \                     MT_ZdoUserDescSet:
    747          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 27
   \   000005   74E5         MOV     A,#-0x1b
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    748            uint8 cmdId;
    749            uint8 retValue;
    750            zAddrType_t destAddr;
    751            uint16 shortAddr;
    752            UserDescriptorFormat_t userDesc;
    753          
    754            /* parse header */
    755            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000A   8A82         MOV     DPL,R2
   \   00000C   8B83         MOV     DPH,R3
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   F5..         MOV     ?V3,A
    756            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000013   EA           MOV     A,R2
   \   000014   2403         ADD     A,#0x3
   \   000016   FA           MOV     R2,A
   \   000017   5001         JNC     ??MT_ZdoUserDescSet_0
   \   000019   0B           INC     R3
    757          
    758            /* Dev address */
    759            destAddr.addrMode = Addr16Bit;
   \                     ??MT_ZdoUserDescSet_0:
   \   00001A   7409         MOV     A,#0x9
   \   00001C   12....       LCALL   ?XSTACK_DISP0_8
   \   00001F   12....       LCALL   ?Subroutine6 & 0xFFFF
    760            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??CrossCallReturnLabel_6:
   \   000022   12....       LCALL   ?XSTACK_DISP0_8
   \   000025   12....       LCALL   ?Subroutine25 & 0xFFFF
    761            pBuf += 2;
   \                     ??CrossCallReturnLabel_47:
   \   000028   5001         JNC     ??MT_ZdoUserDescSet_1
   \   00002A   0B           INC     R3
    762          
    763            /* Network address of interest */
    764            shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??MT_ZdoUserDescSet_1:
   \   00002B   12....       LCALL   ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   00002E   FE           MOV     R6,A
   \   00002F   E4           CLR     A
   \   000030   39           ADDC    A,R1
   \   000031   FF           MOV     R7,A
    765            pBuf += 2;
    766          
    767            /* User descriptor */
    768            userDesc.len = *pBuf++;
   \   000032   8A82         MOV     DPL,R2
   \   000034   8B83         MOV     DPH,R3
   \   000036   A3           INC     DPTR
   \   000037   A3           INC     DPTR
   \   000038   E0           MOVX    A,@DPTR
   \   000039   C0E0         PUSH    A
   \   00003B   740A         MOV     A,#0xa
   \   00003D   12....       LCALL   ?XSTACK_DISP0_8
   \   000040   D0E0         POP     A
   \   000042   F0           MOVX    @DPTR,A
    769            osal_memcpy( userDesc.desc, pBuf, userDesc.len );
   \   000043                ; Setup parameters for call to function osal_memcpy
   \   000043   8A82         MOV     DPL,R2
   \   000045   8B83         MOV     DPH,R3
   \   000047   A3           INC     DPTR
   \   000048   A3           INC     DPTR
   \   000049   A3           INC     DPTR
   \   00004A   A982         MOV     R1,DPL
   \   00004C   AA83         MOV     R2,DPH
   \   00004E   89..         MOV     ?V0,R1
   \   000050   8A..         MOV     ?V1,R2
   \   000052   88..         MOV     ?V2,R0
   \   000054   78..         MOV     R0,#?V0
   \   000056   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000059   740D         MOV     A,#0xd
   \   00005B   12....       LCALL   ?XSTACK_DISP0_8
   \   00005E   E0           MOVX    A,@DPTR
   \   00005F   FC           MOV     R4,A
   \   000060   7D00         MOV     R5,#0x0
   \   000062   740E         MOV     A,#0xe
   \   000064   12....       LCALL   ?XSTACK_DISP0_8
   \   000067   AA82         MOV     R2,DPL
   \   000069   AB83         MOV     R3,DPH
   \   00006B   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00006E   7403         MOV     A,#0x3
   \   000070   12....       LCALL   ?DEALLOC_XSTACK8
    770            pBuf += 16;
    771          
    772            retValue = (uint8)ZDP_UserDescSet( &destAddr, shortAddr, &userDesc, 0);
   \   000073                ; Setup parameters for call to function ZDP_UserDescSet
   \   000073   740A         MOV     A,#0xa
   \   000075   12....       LCALL   ?XSTACK_DISP100_8
   \   000078   88..         MOV     ?V0,R0
   \   00007A   89..         MOV     ?V1,R1
   \   00007C   78..         MOV     R0,#?V0
   \   00007E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000081   7900         MOV     R1,#0x0
   \   000083   EE           MOV     A,R6
   \   000084   FC           MOV     R4,A
   \   000085   EF           MOV     A,R7
   \   000086   FD           MOV     R5,A
   \   000087   7403         MOV     A,#0x3
   \   000089   12....       LCALL   ?XSTACK_DISP101_8
   \   00008C   12....       LCALL   `??ZDP_UserDescSet::?relay`; Banked call to: ZDP_UserDescSet
   \   00008F   7402         MOV     A,#0x2
   \   000091   12....       LCALL   ?DEALLOC_XSTACK8
   \   000094   12....       LCALL   ?Subroutine28 & 0xFFFF
    773          
    774            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   \                     ??CrossCallReturnLabel_52:
   \   000097   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    775          }
   \   00009A   741B         MOV     A,#0x1b
   \   00009C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00009F   7F04         MOV     R7,#0x4
   \   0000A1   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   E9           MOV     A,R1
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007   F0           MOVX    @DPTR,A
   \   000008                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000008                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000008                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000008   AC..         MOV     R4,?XSP + 0
   \   00000A   AD..         MOV     R5,?XSP + 1
   \   00000C   7B01         MOV     R3,#0x1
   \   00000E   AA..         MOV     R2,?V3
   \   000010   7965         MOV     R1,#0x65
   \   000012   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004   E0           MOVX    A,@DPTR
   \   000005   FC           MOV     R4,A
   \   000006   A3           INC     DPTR
   \   000007   E0           MOVX    A,@DPTR
   \   000008   F8           MOV     R0,A
   \   000009   E4           CLR     A
   \   00000A   C8           XCH     A,R0
   \   00000B   F9           MOV     R1,A
   \   00000C   EC           MOV     A,R4
   \   00000D   28           ADD     A,R0
   \   00000E   22           RET
    776          
    777          /***************************************************************************************************
    778           * @fn      MT_ZdoServiceDiscRequest
    779           *
    780           * @brief   Handle a Server Discovery request.
    781           *
    782           * @param   pBuf  - MT message data
    783           *
    784           * @return  void
    785           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    786          void MT_ZdoServiceDiscRequest(uint8 *pBuf)
   \                     MT_ZdoServiceDiscRequest:
    787          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    788            uint8 cmdId;
    789            uint8 retValue;
    790            uint16 serviceMask;
    791          
    792            /* parse header */
    793            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000A   12....       LCALL   ??Subroutine41_0 & 0xFFFF
    794            pBuf += MT_RPC_FRAME_HDR_SZ;
   \                     ??CrossCallReturnLabel_92:
   \   00000D   5001         JNC     ??MT_ZdoServiceDiscRequest_0
   \   00000F   0B           INC     R3
    795          
    796            /* Service Mask */
    797            serviceMask = BUILD_UINT16( pBuf[0], pBuf[1]);
    798            pBuf += 2;
    799          
    800            retValue = (uint8)ZDP_ServerDiscReq( serviceMask, 0);
   \                     ??MT_ZdoServiceDiscRequest_0:
   \   000010                ; Setup parameters for call to function ZDP_ServerDiscReq
   \   000010   7900         MOV     R1,#0x0
   \   000012   8A82         MOV     DPL,R2
   \   000014   8B83         MOV     DPH,R3
   \   000016   E0           MOVX    A,@DPTR
   \   000017   FC           MOV     R4,A
   \   000018   A3           INC     DPTR
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   FB           MOV     R3,A
   \   00001B   EC           MOV     A,R4
   \   00001C   FA           MOV     R2,A
   \   00001D   12....       LCALL   `??ZDP_ServerDiscReq::?relay`; Banked call to: ZDP_ServerDiscReq
   \   000020   02....       LJMP    ?Subroutine5 & 0xFFFF
    801          
    802            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    803          }
    804          
    805          /***************************************************************************************************
    806           * @fn      MT_ZdoEndDevBindRequest
    807           *
    808           * @brief   Handle a End Device Bind request.
    809           *
    810           * @param   pBuf  - MT message data
    811           *
    812           * @return  void
    813           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    814          void MT_ZdoEndDevBindRequest(uint8 *pBuf)
   \                     MT_ZdoEndDevBindRequest:
    815          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 70
   \   000005   74BA         MOV     A,#-0x46
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    816            uint8 cmdId;
    817            uint8 retValue = 0;
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   E4           CLR     A
   \   000015   F0           MOVX    @DPTR,A
    818            uint8 i, epInt, numInClusters, numOutClusters;
    819            zAddrType_t destAddr;
    820            uint16 shortAddr;
    821            uint16 profileID, inClusters[MTZDO_MAX_ED_BIND_CLUSTERS], outClusters[MTZDO_MAX_ED_BIND_CLUSTERS];
    822          
    823            /* parse header */
    824            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   000016   8E82         MOV     DPL,R6
   \   000018   8F83         MOV     DPH,R7
   \   00001A   A3           INC     DPTR
   \   00001B   A3           INC     DPTR
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   F5..         MOV     ?V6,A
    825            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   00001F   EE           MOV     A,R6
   \   000020   2403         ADD     A,#0x3
   \   000022   FE           MOV     R6,A
   \   000023   5001         JNC     ??MT_ZdoEndDevBindRequest_0
   \   000025   0F           INC     R7
    826          
    827            /* Dev address */
    828            destAddr.addrMode = Addr16Bit;
   \                     ??MT_ZdoEndDevBindRequest_0:
   \   000026   7409         MOV     A,#0x9
   \   000028   12....       LCALL   ?XSTACK_DISP0_8
   \   00002B   7402         MOV     A,#0x2
   \   00002D   F0           MOVX    @DPTR,A
    829            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \   00002E   8E82         MOV     DPL,R6
   \   000030   8F83         MOV     DPH,R7
   \   000032   12....       LCALL   ??Subroutine46_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_97:
   \   000035   12....       LCALL   ?XSTACK_DISP0_8
   \   000038   E8           MOV     A,R0
   \   000039   F0           MOVX    @DPTR,A
   \   00003A   A3           INC     DPTR
   \   00003B   E9           MOV     A,R1
   \   00003C   F0           MOVX    @DPTR,A
    830            pBuf += 2;
   \   00003D   EE           MOV     A,R6
   \   00003E   2402         ADD     A,#0x2
   \   000040   FE           MOV     R6,A
   \   000041   5001         JNC     ??MT_ZdoEndDevBindRequest_1
   \   000043   0F           INC     R7
    831          
    832            /* Local coordinator of the binding */
    833            shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??MT_ZdoEndDevBindRequest_1:
   \   000044   8E82         MOV     DPL,R6
   \   000046   8F83         MOV     DPH,R7
   \   000048   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_59:
   \   00004B   FC           MOV     R4,A
   \   00004C   E4           CLR     A
   \   00004D   39           ADDC    A,R1
   \   00004E   FD           MOV     R5,A
    834            pBuf += 2;
    835            
    836            /* For now, skip past the extended address */
    837            pBuf += Z_EXTADDR_LEN;
    838          
    839            /* Endpoint */
    840            epInt = *pBuf++;
   \   00004F   8E82         MOV     DPL,R6
   \   000051   8F83         MOV     DPH,R7
   \   000053   A3           INC     DPTR
   \   000054   A3           INC     DPTR
   \   000055   A3           INC     DPTR
   \   000056   A3           INC     DPTR
   \   000057   A3           INC     DPTR
   \   000058   A3           INC     DPTR
   \   000059   A3           INC     DPTR
   \   00005A   A3           INC     DPTR
   \   00005B   A3           INC     DPTR
   \   00005C   A3           INC     DPTR
   \   00005D   E0           MOVX    A,@DPTR
   \   00005E   F9           MOV     R1,A
   \   00005F   EE           MOV     A,R6
   \   000060   240B         ADD     A,#0xb
   \   000062   FE           MOV     R6,A
   \   000063   5001         JNC     ??MT_ZdoEndDevBindRequest_2
   \   000065   0F           INC     R7
    841          
    842            /* Profile ID */
    843            profileID = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??MT_ZdoEndDevBindRequest_2:
   \   000066   8E82         MOV     DPL,R6
   \   000068   8F83         MOV     DPH,R7
   \   00006A   12....       LCALL   ?Subroutine15 & 0xFFFF
    844            pBuf += 2;
    845          
    846            /* NumInClusters */
    847            numInClusters = *pBuf++;
   \                     ??CrossCallReturnLabel_21:
   \   00006D   8E82         MOV     DPL,R6
   \   00006F   8F83         MOV     DPH,R7
   \   000071   A3           INC     DPTR
   \   000072   A3           INC     DPTR
   \   000073   E0           MOVX    A,@DPTR
   \   000074   F5..         MOV     ?V2,A
   \   000076   EE           MOV     A,R6
   \   000077   2403         ADD     A,#0x3
   \   000079   FE           MOV     R6,A
   \   00007A   5001         JNC     ??MT_ZdoEndDevBindRequest_3
   \   00007C   0F           INC     R7
    848            if ( numInClusters <= MTZDO_MAX_ED_BIND_CLUSTERS )
   \                     ??MT_ZdoEndDevBindRequest_3:
   \   00007D   E5..         MOV     A,?V2
   \   00007F   C3           CLR     C
   \   000080   9410         SUBB    A,#0x10
   \   000082   5019         JNC     ??MT_ZdoEndDevBindRequest_4
    849            {
    850              for ( i = 0; i < numInClusters; i++ )
   \   000084   7800         MOV     R0,#0x0
   \                     ??MT_ZdoEndDevBindRequest_5:
   \   000086   E8           MOV     A,R0
   \   000087   C3           CLR     C
   \   000088   95..         SUBB    A,?V2
   \   00008A   501A         JNC     ??MT_ZdoEndDevBindRequest_6
    851              {
    852                inClusters[i] = BUILD_UINT16(pBuf[0], pBuf[1]);
   \   00008C   12....       LCALL   ?Subroutine9 & 0xFFFF
    853                pBuf += 2;
    854              }
   \                     ??CrossCallReturnLabel_9:
   \   00008F   7428         MOV     A,#0x28
   \   000091   12....       LCALL   ?XSTACK_DISP0_8
   \   000094   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   000097   5001         JNC     ??MT_ZdoEndDevBindRequest_7
   \   000099   0F           INC     R7
   \                     ??MT_ZdoEndDevBindRequest_7:
   \   00009A   08           INC     R0
   \   00009B   80E9         SJMP    ??MT_ZdoEndDevBindRequest_5
    855            }
    856            else
    857              retValue = ZDP_INVALID_REQTYPE;
   \                     ??MT_ZdoEndDevBindRequest_4:
   \   00009D   85..82       MOV     DPL,?XSP + 0
   \   0000A0   85..83       MOV     DPH,?XSP + 1
   \   0000A3   7480         MOV     A,#-0x80
   \   0000A5   F0           MOVX    @DPTR,A
    858          
    859            /* NumOutClusters */
    860            numOutClusters = *pBuf++;
   \                     ??MT_ZdoEndDevBindRequest_6:
   \   0000A6   8E82         MOV     DPL,R6
   \   0000A8   8F83         MOV     DPH,R7
   \   0000AA   E0           MOVX    A,@DPTR
   \   0000AB   F5..         MOV     ?V3,A
   \   0000AD   A3           INC     DPTR
   \   0000AE   AE82         MOV     R6,DPL
   \   0000B0   AF83         MOV     R7,DPH
    861            if ( numOutClusters <= MTZDO_MAX_ED_BIND_CLUSTERS )
   \   0000B2   C3           CLR     C
   \   0000B3   9410         SUBB    A,#0x10
   \   0000B5   5019         JNC     ??MT_ZdoEndDevBindRequest_8
    862            {
    863              for ( i = 0; i < numOutClusters; i++ )
   \   0000B7   7800         MOV     R0,#0x0
   \                     ??MT_ZdoEndDevBindRequest_9:
   \   0000B9   E8           MOV     A,R0
   \   0000BA   C3           CLR     C
   \   0000BB   95..         SUBB    A,?V3
   \   0000BD   501B         JNC     ??MT_ZdoEndDevBindRequest_10
    864              {
    865                outClusters[i] = BUILD_UINT16(pBuf[0], pBuf[1]);
   \   0000BF   12....       LCALL   ?Subroutine9 & 0xFFFF
    866                pBuf += 2;
    867              }
   \                     ??CrossCallReturnLabel_10:
   \   0000C2   740A         MOV     A,#0xa
   \   0000C4   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C7   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   0000CA   5001         JNC     ??MT_ZdoEndDevBindRequest_11
   \   0000CC   0F           INC     R7
   \                     ??MT_ZdoEndDevBindRequest_11:
   \   0000CD   08           INC     R0
   \   0000CE   80E9         SJMP    ??MT_ZdoEndDevBindRequest_9
    868            }
    869            else
    870              retValue = ZDP_INVALID_REQTYPE;
   \                     ??MT_ZdoEndDevBindRequest_8:
   \   0000D0   85..82       MOV     DPL,?XSP + 0
   \   0000D3   85..83       MOV     DPH,?XSP + 1
   \   0000D6   7480         MOV     A,#-0x80
   \   0000D8   805C         SJMP    ??MT_ZdoEndDevBindRequest_12
    871            
    872            if ( retValue == 0 )
   \                     ??MT_ZdoEndDevBindRequest_10:
   \   0000DA   85..82       MOV     DPL,?XSP + 0
   \   0000DD   85..83       MOV     DPH,?XSP + 1
   \   0000E0   E0           MOVX    A,@DPTR
   \   0000E1   7054         JNZ     ??MT_ZdoEndDevBindRequest_13
    873            {
    874              retValue = (uint8)ZDP_EndDeviceBindReq( &destAddr, shortAddr, epInt, profileID,
    875                                                    numInClusters, inClusters, numOutClusters, outClusters, 0);
   \   0000E3                ; Setup parameters for call to function ZDP_EndDeviceBindReq
   \   0000E3   75..00       MOV     ?V0,#0x0
   \   0000E6   78..         MOV     R0,#?V0
   \   0000E8   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000EB   740B         MOV     A,#0xb
   \   0000ED   12....       LCALL   ?XSTACK_DISP103_8
   \   0000F0   8E..         MOV     ?V0,R6
   \   0000F2   8F..         MOV     ?V1,R7
   \   0000F4   78..         MOV     R0,#?V0
   \   0000F6   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000F9   E5..         MOV     A,?V3
   \   0000FB   F5..         MOV     ?V0,A
   \   0000FD   78..         MOV     R0,#?V0
   \   0000FF   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000102   742C         MOV     A,#0x2c
   \   000104   12....       LCALL   ?XSTACK_DISP103_8
   \   000107   8E..         MOV     ?V0,R6
   \   000109   8F..         MOV     ?V1,R7
   \   00010B   78..         MOV     R0,#?V0
   \   00010D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000110   E5..         MOV     A,?V2
   \   000112   F5..         MOV     ?V0,A
   \   000114   78..         MOV     R0,#?V0
   \   000116   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000119   8A..         MOV     ?V0,R2
   \   00011B   8B..         MOV     ?V1,R3
   \   00011D   78..         MOV     R0,#?V0
   \   00011F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000122   740A         MOV     A,#0xa
   \   000124   12....       LCALL   ?XSTACK_DISP101_8
   \   000127   12....       LCALL   `??ZDP_EndDeviceBindReq::?relay`; Banked call to: ZDP_EndDeviceBindReq
   \   00012A   7409         MOV     A,#0x9
   \   00012C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00012F   E9           MOV     A,R1
   \   000130   85..82       MOV     DPL,?XSP + 0
   \   000133   85..83       MOV     DPH,?XSP + 1
   \                     ??MT_ZdoEndDevBindRequest_12:
   \   000136   F0           MOVX    @DPTR,A
    876            }
    877          
    878            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   \                     ??MT_ZdoEndDevBindRequest_13:
   \   000137                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000137   AC..         MOV     R4,?XSP + 0
   \   000139   AD..         MOV     R5,?XSP + 1
   \   00013B   7B01         MOV     R3,#0x1
   \   00013D   AA..         MOV     R2,?V6
   \   00013F   7965         MOV     R1,#0x65
   \   000141   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    879          }
   \   000144   7446         MOV     A,#0x46
   \   000146   12....       LCALL   ?DEALLOC_XSTACK8
   \   000149                REQUIRE ?Subroutine3
   \   000149                ; // Fall through to label ?Subroutine3

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   7F07         MOV     R7,#0x7
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   12....       LCALL   ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_67:
   \   000003   EE           MOV     A,R6
   \   000004   2402         ADD     A,#0x2
   \   000006   FE           MOV     R6,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   12....       LCALL   ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   000007   88..         MOV     ?V0,R0
   \   000009   12....       LCALL   ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine46_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   EA           MOV     A,R2
   \   000006   F8           MOV     R0,A
   \   000007   7401         MOV     A,#0x1
   \   000009   22           RET
    880          
    881          /***************************************************************************************************
    882           * @fn      MT_ZdoBindRequest
    883           *
    884           * @brief   Handle a Bind request.
    885           *
    886           * @param   pBuf  - MT message data
    887           *
    888           * @return  void
    889           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    890          void MT_ZdoBindRequest(uint8 *pBuf)
   \                     MT_ZdoBindRequest:
    891          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 19
   \   000005   74ED         MOV     A,#-0x13
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   12....       LCALL   ?Subroutine19 & 0xFFFF
    892            uint8 cmdId;
    893            uint8 retValue;
    894            zAddrType_t destAddr, devAddr;
    895            uint8 *pSrcAddr, *ptr;
    896            uint8 srcEPInt, dstEPInt;
    897            uint16 clusterID;
    898          
    899            /* parse header */
    900            cmdId = pBuf[MT_RPC_POS_CMD1];
    901            pBuf += MT_RPC_FRAME_HDR_SZ;
   \                     ??CrossCallReturnLabel_28:
   \   00000D   5002         JNC     ??MT_ZdoBindRequest_0
   \   00000F   05..         INC     ?V1
    902          
    903            /* Dev address */
    904            destAddr.addrMode = Addr16Bit;
   \                     ??MT_ZdoBindRequest_0:
   \   000011   7412         MOV     A,#0x12
   \   000013   12....       LCALL   ?XSTACK_DISP0_8
   \   000016   12....       LCALL   ?Subroutine18 & 0xFFFF
    905            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??CrossCallReturnLabel_26:
   \   000019   12....       LCALL   ?XSTACK_DISP0_8
   \   00001C   12....       LCALL   ?Subroutine7 & 0xFFFF
    906            pBuf += 2;
    907          
    908            /* SrcAddress */
    909            pSrcAddr = pBuf;
    910            pBuf += Z_EXTADDR_LEN;
    911          
    912            /* SrcEPInt */
    913            srcEPInt = *pBuf++;
    914          
    915            /* ClusterID */
    916            clusterID = BUILD_UINT16( pBuf[0], pBuf[1]);
    917            pBuf += 2;
    918          
    919            /* Destination Address mode */
    920            devAddr.addrMode = *pBuf++;
   \                     ??CrossCallReturnLabel_7:
   \   00001F   12....       LCALL   ?XSTACK_DISP0_8
   \   000022   E8           MOV     A,R0
   \   000023   F0           MOVX    @DPTR,A
   \   000024   E5..         MOV     A,?V0
   \   000026   2403         ADD     A,#0x3
   \   000028   F5..         MOV     ?V0,A
   \   00002A   5002         JNC     ??MT_ZdoBindRequest_1
   \   00002C   05..         INC     ?V1
    921          
    922            /* Destination Address */
    923            if ( devAddr.addrMode == Addr64Bit )
   \                     ??MT_ZdoBindRequest_1:
   \   00002E   7403         MOV     A,#0x3
   \   000030   68           XRL     A,R0
   \   000031   700E         JNZ     ??MT_ZdoBindRequest_2
    924            {
    925              ptr = pBuf;
    926              osal_cpyExtAddr( devAddr.addr.extAddr, ptr );
   \   000033                ; Setup parameters for call to function sAddrExtCpy
   \   000033   AC..         MOV     R4,?V0
   \   000035   AD..         MOV     R5,?V1
   \   000037   7401         MOV     A,#0x1
   \   000039   12....       LCALL   ?XSTACK_DISP101_8
   \   00003C   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   00003F   800B         SJMP    ??MT_ZdoBindRequest_3
    927            }
    928            else
    929            {
    930              devAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??MT_ZdoBindRequest_2:
   \   000041   12....       LCALL   ?Subroutine13 & 0xFFFF
    931            }
   \                     ??CrossCallReturnLabel_98:
   \   000044   12....       LCALL   ?XSTACK_DISP0_8
   \   000047   E8           MOV     A,R0
   \   000048   F0           MOVX    @DPTR,A
   \   000049   A3           INC     DPTR
   \   00004A   E9           MOV     A,R1
   \   00004B   F0           MOVX    @DPTR,A
    932            /* The short address occupies LSB two bytes */
    933            pBuf += Z_EXTADDR_LEN;
    934          
    935            /* DstEPInt */
    936            dstEPInt = *pBuf;
    937          
    938            retValue = (uint8)ZDP_BindReq( &destAddr, pSrcAddr, srcEPInt, clusterID, &devAddr, dstEPInt, 0);
   \                     ??MT_ZdoBindRequest_3:
   \   00004C                ; Setup parameters for call to function ZDP_BindUnbindReq
   \   00004C   75..00       MOV     ?V4,#0x0
   \   00004F   78..         MOV     R0,#?V4
   \   000051   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000054   85..82       MOV     DPL,?V0
   \   000057   85..83       MOV     DPH,?V1
   \   00005A   A3           INC     DPTR
   \   00005B   A3           INC     DPTR
   \   00005C   A3           INC     DPTR
   \   00005D   A3           INC     DPTR
   \   00005E   A3           INC     DPTR
   \   00005F   A3           INC     DPTR
   \   000060   A3           INC     DPTR
   \   000061   A3           INC     DPTR
   \   000062   E0           MOVX    A,@DPTR
   \   000063   F5..         MOV     ?V0,A
   \   000065   78..         MOV     R0,#?V0
   \   000067   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00006A   7403         MOV     A,#0x3
   \   00006C   12....       LCALL   ?XSTACK_DISP100_8
   \   00006F   88..         MOV     ?V0,R0
   \   000071   89..         MOV     ?V1,R1
   \   000073   78..         MOV     R0,#?V0
   \   000075   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000078   8E..         MOV     ?V0,R6
   \   00007A   8F..         MOV     ?V1,R7
   \   00007C   78..         MOV     R0,#?V0
   \   00007E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000081   78..         MOV     R0,#?V6
   \   000083   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000086   A9..         MOV     R1,?V2
   \   000088   7412         MOV     A,#0x12
   \   00008A   12....       LCALL   ?XSTACK_DISP102_8
   \   00008D   7A21         MOV     R2,#0x21
   \   00008F                REQUIRE ?Subroutine4
   \   00008F                ; // Fall through to label ?Subroutine4
    939          
    940            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    941          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   7B00         MOV     R3,#0x0
   \   000002   12....       LCALL   `??ZDP_BindUnbindReq::?relay`; Banked call to: ZDP_BindUnbindReq
   \   000005   7408         MOV     A,#0x8
   \   000007   12....       LCALL   ?DEALLOC_XSTACK8
   \   00000A   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   00000D   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   \   000010   7413         MOV     A,#0x13
   \   000012   12....       LCALL   ?DEALLOC_XSTACK8
   \   000015   7F08         MOV     R7,#0x8
   \   000017   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   85..82       MOV     DPL,?V0
   \   000003   85..83       MOV     DPH,?V1
   \   000006                REQUIRE ??Subroutine46_0
   \   000006                ; // Fall through to label ??Subroutine46_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   8B..         MOV     ?V1,R3
   \   000002   8A82         MOV     DPL,R2
   \   000004   8B83         MOV     DPH,R3
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   E0           MOVX    A,@DPTR
   \   000009   F5..         MOV     ?V3,A
   \   00000B   EA           MOV     A,R2
   \   00000C   2403         ADD     A,#0x3
   \   00000E   F5..         MOV     ?V0,A
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   7402         MOV     A,#0x2
   \   000002   F0           MOVX    @DPTR,A
   \   000003   85..82       MOV     DPL,?V0
   \   000006   85..83       MOV     DPH,?V1
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   FA           MOV     R2,A
   \   00000B   A3           INC     DPTR
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   F9           MOV     R1,A
   \   00000E   EA           MOV     A,R2
   \   00000F   F8           MOV     R0,A
   \   000010   740A         MOV     A,#0xa
   \   000012   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   E8           MOV     A,R0
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   E9           MOV     A,R1
   \   000004   F0           MOVX    @DPTR,A
   \   000005   E5..         MOV     A,?V0
   \   000007   2402         ADD     A,#0x2
   \   000009   F5..         MOV     ?V6,A
   \   00000B   E4           CLR     A
   \   00000C   35..         ADDC    A,?V1
   \   00000E   F5..         MOV     ?V7,A
   \   000010   E5..         MOV     A,?V6
   \   000012   2408         ADD     A,#0x8
   \   000014   F5..         MOV     ?V0,A
   \   000016   E4           CLR     A
   \   000017   35..         ADDC    A,?V7
   \   000019   85..82       MOV     DPL,?V0
   \   00001C   F583         MOV     DPH,A
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   F5..         MOV     ?V2,A
   \   000021   A3           INC     DPTR
   \   000022   8582..       MOV     ?V0,DPL
   \   000025   8583..       MOV     ?V1,DPH
   \   000028   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   00002B   FE           MOV     R6,A
   \   00002C   E4           CLR     A
   \   00002D   39           ADDC    A,R1
   \   00002E   FF           MOV     R7,A
   \   00002F   85..82       MOV     DPL,?V0
   \   000032   85..83       MOV     DPH,?V1
   \   000035   A3           INC     DPTR
   \   000036   A3           INC     DPTR
   \   000037   E0           MOVX    A,@DPTR
   \   000038   F8           MOV     R0,A
   \   000039   7409         MOV     A,#0x9
   \   00003B   22           RET
    942          
    943          /***************************************************************************************************
    944           * @fn      MT_ZdoUnbindRequest
    945           *
    946           * @brief   Handle a Unbind request.
    947           *
    948           * @param   pBuf  - MT message data
    949           *
    950           * @return  void
    951           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    952          void MT_ZdoUnbindRequest(uint8 *pBuf)
   \                     MT_ZdoUnbindRequest:
    953          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 19
   \   000005   74ED         MOV     A,#-0x13
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   12....       LCALL   ?Subroutine19 & 0xFFFF
    954            uint8 cmdId;
    955            uint8 retValue;
    956            zAddrType_t destAddr, devAddr;
    957            uint8 *pSrcAddr, *ptr;
    958            uint8 srcEPInt, dstEPInt;
    959            uint16 clusterID;
    960          
    961            /* parse header */
    962            cmdId = pBuf[MT_RPC_POS_CMD1];
    963            pBuf += MT_RPC_FRAME_HDR_SZ;
   \                     ??CrossCallReturnLabel_29:
   \   00000D   5002         JNC     ??MT_ZdoUnbindRequest_0
   \   00000F   05..         INC     ?V1
    964          
    965            /* dev address */
    966            destAddr.addrMode = Addr16Bit;
   \                     ??MT_ZdoUnbindRequest_0:
   \   000011   7412         MOV     A,#0x12
   \   000013   12....       LCALL   ?XSTACK_DISP0_8
   \   000016   12....       LCALL   ?Subroutine18 & 0xFFFF
    967            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??CrossCallReturnLabel_27:
   \   000019   12....       LCALL   ?XSTACK_DISP0_8
   \   00001C   12....       LCALL   ?Subroutine7 & 0xFFFF
    968            pBuf += 2;
    969          
    970            /* SrcAddress */
    971            pSrcAddr = pBuf;
    972            pBuf += Z_EXTADDR_LEN;
    973          
    974            /* SrcEPInt */
    975            srcEPInt = *pBuf++;
    976          
    977            /* ClusterID */
    978            clusterID = BUILD_UINT16( pBuf[0], pBuf[1]);
    979            pBuf += 2;
    980          
    981            /* Destination Address mode */
    982            devAddr.addrMode = *pBuf++;
   \                     ??CrossCallReturnLabel_8:
   \   00001F   12....       LCALL   ?XSTACK_DISP0_8
   \   000022   E8           MOV     A,R0
   \   000023   F0           MOVX    @DPTR,A
   \   000024   E5..         MOV     A,?V0
   \   000026   2403         ADD     A,#0x3
   \   000028   F5..         MOV     ?V0,A
   \   00002A   5002         JNC     ??MT_ZdoUnbindRequest_1
   \   00002C   05..         INC     ?V1
    983          
    984            /* Destination Address */
    985            if ( devAddr.addrMode == Addr64Bit )
   \                     ??MT_ZdoUnbindRequest_1:
   \   00002E   7403         MOV     A,#0x3
   \   000030   68           XRL     A,R0
   \   000031   700E         JNZ     ??MT_ZdoUnbindRequest_2
    986            {
    987              ptr = pBuf;
    988              osal_cpyExtAddr( devAddr.addr.extAddr, ptr );
   \   000033                ; Setup parameters for call to function sAddrExtCpy
   \   000033   AC..         MOV     R4,?V0
   \   000035   AD..         MOV     R5,?V1
   \   000037   7401         MOV     A,#0x1
   \   000039   12....       LCALL   ?XSTACK_DISP101_8
   \   00003C   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   00003F   800B         SJMP    ??MT_ZdoUnbindRequest_3
    989            }
    990            else
    991            {
    992              devAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??MT_ZdoUnbindRequest_2:
   \   000041   12....       LCALL   ?Subroutine13 & 0xFFFF
    993            }
   \                     ??CrossCallReturnLabel_99:
   \   000044   12....       LCALL   ?XSTACK_DISP0_8
   \   000047   E8           MOV     A,R0
   \   000048   F0           MOVX    @DPTR,A
   \   000049   A3           INC     DPTR
   \   00004A   E9           MOV     A,R1
   \   00004B   F0           MOVX    @DPTR,A
    994            /* The short address occupies LSB two bytes */
    995            pBuf += Z_EXTADDR_LEN;
    996          
    997            /* dstEPInt */
    998            dstEPInt = *pBuf;
    999          
   1000            retValue = (uint8)ZDP_UnbindReq( &destAddr, pSrcAddr, srcEPInt, clusterID, &devAddr, dstEPInt, 0);
   \                     ??MT_ZdoUnbindRequest_3:
   \   00004C                ; Setup parameters for call to function ZDP_BindUnbindReq
   \   00004C   75..00       MOV     ?V4,#0x0
   \   00004F   78..         MOV     R0,#?V4
   \   000051   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000054   85..82       MOV     DPL,?V0
   \   000057   85..83       MOV     DPH,?V1
   \   00005A   A3           INC     DPTR
   \   00005B   A3           INC     DPTR
   \   00005C   A3           INC     DPTR
   \   00005D   A3           INC     DPTR
   \   00005E   A3           INC     DPTR
   \   00005F   A3           INC     DPTR
   \   000060   A3           INC     DPTR
   \   000061   A3           INC     DPTR
   \   000062   E0           MOVX    A,@DPTR
   \   000063   F5..         MOV     ?V0,A
   \   000065   78..         MOV     R0,#?V0
   \   000067   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00006A   7403         MOV     A,#0x3
   \   00006C   12....       LCALL   ?XSTACK_DISP100_8
   \   00006F   88..         MOV     ?V0,R0
   \   000071   89..         MOV     ?V1,R1
   \   000073   78..         MOV     R0,#?V0
   \   000075   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000078   8E..         MOV     ?V0,R6
   \   00007A   8F..         MOV     ?V1,R7
   \   00007C   78..         MOV     R0,#?V0
   \   00007E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000081   78..         MOV     R0,#?V6
   \   000083   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000086   A9..         MOV     R1,?V2
   \   000088   7412         MOV     A,#0x12
   \   00008A   12....       LCALL   ?XSTACK_DISP102_8
   \   00008D   7A22         MOV     R2,#0x22
   \   00008F   02....       LJMP    ?Subroutine4 & 0xFFFF
   1001          
   1002            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1003          }
   1004          
   1005          /***************************************************************************************************
   1006           * @fn      MT_ZdoSetLinkKey
   1007           *
   1008           * @brief   Set an application or trust center link key.
   1009           *
   1010           * @param   pBuf  - MT message data
   1011           *
   1012           * @return  void
   1013           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1014          void MT_ZdoSetLinkKey(uint8 *pBuf)
   \                     MT_ZdoSetLinkKey:
   1015          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FC           MOV     R4,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FD           MOV     R5,A
   1016            uint8 cmdId;
   1017            uint8 retValue;
   1018            uint8 *pExtAddr;
   1019            uint8 *pKey;
   1020            uint16 shortAddr;
   1021            
   1022            /* parse header */
   1023            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000E   8C82         MOV     DPL,R4
   \   000010   8D83         MOV     DPH,R5
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   E0           MOVX    A,@DPTR
   \   000015   FE           MOV     R6,A
   1024            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000016   EC           MOV     A,R4
   \   000017   2403         ADD     A,#0x3
   \   000019   FC           MOV     R4,A
   \   00001A   5001         JNC     ??MT_ZdoSetLinkKey_0
   \   00001C   0D           INC     R5
   1025          
   1026            /* ShortAddr */
   1027            shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??MT_ZdoSetLinkKey_0:
   \   00001D   12....       LCALL   ?Subroutine11 & 0xFFFF
   1028            pBuf += 2;
   \                     ??CrossCallReturnLabel_14:
   \   000020   5001         JNC     ??MT_ZdoSetLinkKey_1
   \   000022   0D           INC     R5
   1029            
   1030            /* Extended Addr */
   1031            pExtAddr = pBuf;
   1032            pBuf += Z_EXTADDR_LEN;
   1033            
   1034            /* Key data */
   1035            pKey = pBuf;
   1036          
   1037            retValue = (uint8)ZDSecMgrAddLinkKey( shortAddr, pExtAddr, pKey);
   \                     ??MT_ZdoSetLinkKey_1:
   \   000023                ; Setup parameters for call to function ZDSecMgrAddLinkKey
   \   000023   2408         ADD     A,#0x8
   \   000025   F5..         MOV     ?V0,A
   \   000027   E4           CLR     A
   \   000028   3D           ADDC    A,R5
   \   000029   F5..         MOV     ?V1,A
   \   00002B   78..         MOV     R0,#?V0
   \   00002D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000030   12....       LCALL   `??ZDSecMgrAddLinkKey::?relay`; Banked call to: ZDSecMgrAddLinkKey
   \   000033   7402         MOV     A,#0x2
   \   000035   12....       LCALL   ?DEALLOC_XSTACK8
   \   000038   02....       LJMP    ?Subroutine1 & 0xFFFF
   1038          
   1039            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1040          }
   1041          
   1042          /***************************************************************************************************
   1043           * @fn      MT_ZdoRemoveLinkKey
   1044           *
   1045           * @brief   Remove an application or trust center link key.
   1046           *
   1047           * @param   pBuf  - MT message data
   1048           *
   1049           * @return  void
   1050           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1051          void MT_ZdoRemoveLinkKey(uint8 *pBuf)
   \                     MT_ZdoRemoveLinkKey:
   1052          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1053            uint8 cmdId;
   1054            uint8 retValue;
   1055            uint8 *pExtAddr;
   1056              
   1057            /* parse header */
   1058            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000A   12....       LCALL   ??Subroutine41_0 & 0xFFFF
   1059            pBuf += MT_RPC_FRAME_HDR_SZ;
   1060            
   1061            /* ShortAddr */
   1062            pExtAddr = pBuf;
   1063          
   1064            retValue = ZDSecMgrDeviceRemoveByExtAddr( pExtAddr );
   \                     ??CrossCallReturnLabel_93:
   \   00000D   5001         JNC     ??MT_ZdoRemoveLinkKey_0
   \   00000F   0B           INC     R3
   \                     ??MT_ZdoRemoveLinkKey_0:
   \   000010   12....       LCALL   `??ZDSecMgrDeviceRemoveByExtAddr::?relay`; Banked call to: ZDSecMgrDeviceRemoveByExtAddr
   \   000013   02....       LJMP    ?Subroutine5 & 0xFFFF
   1065          
   1066            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1067          }
   1068          
   1069          /***************************************************************************************************
   1070           * @fn      MT_ZdoGetLinkKey
   1071           *
   1072           * @brief   Get the application or trust center link key.
   1073           *
   1074           * @param   pBuf  - MT message data
   1075           *
   1076           * @return  void
   1077           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1078          void MT_ZdoGetLinkKey(uint8 *pBuf)
   \                     MT_ZdoGetLinkKey:
   1079          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1080            uint8 cmdId;
   1081            uint8 retValue;
   1082            uint8 *pExtAddr;
   1083            uint8 *retBuf;
   1084            uint8 len;
   1085            APSME_LinkKeyData_t *pLinkKey;
   1086              
   1087            /* parse header */
   1088            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000A   8A82         MOV     DPL,R2
   \   00000C   8B83         MOV     DPH,R3
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   FF           MOV     R7,A
   1089            pBuf += MT_RPC_FRAME_HDR_SZ;
   1090            
   1091            /* Extended Address */
   1092            pExtAddr = pBuf;
   \   000012   12....       LCALL   ?Subroutine24 & 0xFFFF
   1093          
   1094            /* Fetch the key data */
   1095            retValue = APSME_LinkKeyDataGet( pExtAddr, &pLinkKey );
   \                     ??CrossCallReturnLabel_40:
   \   000015                ; Setup parameters for call to function APSME_LinkKeyDataGet
   \   000015   AC..         MOV     R4,?XSP + 0
   \   000017   AD..         MOV     R5,?XSP + 1
   \   000019   0A           INC     R2
   \   00001A   0A           INC     R2
   \   00001B   0A           INC     R2
   \   00001C   FB           MOV     R3,A
   \   00001D   12....       LCALL   `??APSME_LinkKeyDataGet::?relay`; Banked call to: APSME_LinkKeyDataGet
   \   000020   E9           MOV     A,R1
   \   000021   FE           MOV     R6,A
   1096            
   1097            /* Construct the response message */
   1098            len = 1 + Z_EXTADDR_LEN + SEC_KEY_LEN; // status + extAddr + key
   1099            if ( ( retBuf = osal_mem_alloc( len ) ) == NULL )
   \   000022                ; Setup parameters for call to function osal_mem_alloc
   \   000022   7A19         MOV     R2,#0x19
   \   000024   7B00         MOV     R3,#0x0
   \   000026   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000029   8A..         MOV     ?V4,R2
   \   00002B   8B..         MOV     ?V5,R3
   \   00002D   8A82         MOV     DPL,R2
   \   00002F   8B83         MOV     DPH,R3
   \   000031   A3           INC     DPTR
   \   000032   AA82         MOV     R2,DPL
   \   000034   AB83         MOV     R3,DPH
   \   000036   E5..         MOV     A,?V4
   \   000038   45..         ORL     A,?V5
   \   00003A   7025         JNZ     ??MT_ZdoGetLinkKey_0
   1100            {
   1101              retValue = ZMemError;
   \   00003C   7E10         MOV     R6,#0x10
   1102            }
   1103            else
   1104            {  
   1105              if( retValue == ZSuccess )
   1106              {
   1107                /* Extended Address */
   1108                osal_memcpy( &(retBuf[1]), pExtAddr, Z_EXTADDR_LEN );
   1109                
   1110                /* Key data */
   1111                osal_memcpy( &(retBuf[1 + Z_EXTADDR_LEN]), pLinkKey->key, SEC_KEY_LEN );      
   1112              }
   1113            }
   1114              
   1115            if( retValue != ZSuccess )
   1116            {
   1117              /* Failed case - set the rest fields to all FF */
   1118              osal_memset( &(retBuf[1]), 0xFF, Z_EXTADDR_LEN + SEC_KEY_LEN );   
   \                     ??MT_ZdoGetLinkKey_1:
   \   00003E                ; Setup parameters for call to function osal_memset
   \   00003E   7C18         MOV     R4,#0x18
   \   000040   7D00         MOV     R5,#0x0
   \   000042   79FF         MOV     R1,#-0x1
   \   000044   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   1119            }    
   1120            
   1121            retBuf[0] = retValue;  /* Status */
   \                     ??MT_ZdoGetLinkKey_2:
   \   000047   EE           MOV     A,R6
   \   000048   85..82       MOV     DPL,?V4
   \   00004B   85..83       MOV     DPH,?V5
   \   00004E   F0           MOVX    @DPTR,A
   1122            
   1123            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, len, retBuf);
   \   00004F                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00004F   AC..         MOV     R4,?V4
   \   000051   AD..         MOV     R5,?V5
   \   000053   7B19         MOV     R3,#0x19
   \   000055   EF           MOV     A,R7
   \   000056   FA           MOV     R2,A
   \   000057   7965         MOV     R1,#0x65
   \   000059   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   1124            
   1125            return;
   \   00005C   7402         MOV     A,#0x2
   \   00005E   02....       LJMP    ?Subroutine2 & 0xFFFF
   \                     ??MT_ZdoGetLinkKey_0:
   \   000061   EE           MOV     A,R6
   \   000062   70DA         JNZ     ??MT_ZdoGetLinkKey_1
   \   000064                ; Setup parameters for call to function osal_memcpy
   \   000064   75..00       MOV     ?V2,#0x0
   \   000067   78..         MOV     R0,#?V0
   \   000069   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00006C   7C08         MOV     R4,#0x8
   \   00006E   7D00         MOV     R5,#0x0
   \   000070   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000073   7403         MOV     A,#0x3
   \   000075   12....       LCALL   ?DEALLOC_XSTACK8
   \   000078                ; Setup parameters for call to function osal_memcpy
   \   000078   85..82       MOV     DPL,?XSP + 0
   \   00007B   85..83       MOV     DPH,?XSP + 1
   \   00007E   E0           MOVX    A,@DPTR
   \   00007F   F8           MOV     R0,A
   \   000080   A3           INC     DPTR
   \   000081   E0           MOVX    A,@DPTR
   \   000082   F583         MOV     DPH,A
   \   000084   8882         MOV     DPL,R0
   \   000086   12....       LCALL   ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_76:
   \   000089   F5..         MOV     ?V1,A
   \   00008B   78..         MOV     R0,#?V0
   \   00008D   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000090   7C10         MOV     R4,#0x10
   \   000092   7D00         MOV     R5,#0x0
   \   000094   E5..         MOV     A,?V4
   \   000096   2409         ADD     A,#0x9
   \   000098   FA           MOV     R2,A
   \   000099   E4           CLR     A
   \   00009A   35..         ADDC    A,?V5
   \   00009C   FB           MOV     R3,A
   \   00009D   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000A0   7403         MOV     A,#0x3
   \   0000A2   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000A5   80A0         SJMP    ??MT_ZdoGetLinkKey_2
   1126          }
   1127          
   1128          #if defined (MT_ZDO_MGMT)
   1129          /***************************************************************************************************
   1130           * @fn      MT_ZdoMgmtNwkDiscRequest
   1131           *
   1132           * @brief   Handle a Mgmt Nwk Discovery request.
   1133           *
   1134           * @param   pBuf  - MT message data
   1135           *
   1136           * @return  void
   1137           ***************************************************************************************************/
   1138          void MT_ZdoMgmtNwkDiscRequest(uint8 *pBuf)
   1139          {
   1140            uint8 cmdId;
   1141            uint8 retValue;
   1142            zAddrType_t destAddr;
   1143            uint32 scanChannels;
   1144            uint8 scanDuration, startIndex;
   1145          
   1146            /* parse header */
   1147            cmdId = pBuf[MT_RPC_POS_CMD1];
   1148            pBuf += MT_RPC_FRAME_HDR_SZ;
   1149          
   1150            /* Dev address */
   1151            destAddr.addrMode = Addr16Bit;
   1152            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   1153            pBuf += 2;
   1154          
   1155            /* Scan Channels */
   1156            scanChannels = BUILD_UINT32( pBuf[0], pBuf[1], pBuf[2], pBuf[3] );
   1157            pBuf += 4;
   1158          
   1159            /* Scan Duration */
   1160            scanDuration = *pBuf++;
   1161          
   1162            /* Start Index */
   1163            startIndex = *pBuf;
   1164          
   1165            retValue = (uint8)ZDP_MgmtNwkDiscReq( &destAddr, scanChannels, scanDuration, startIndex, 0);
   1166          
   1167            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1168          }
   1169          
   1170          /***************************************************************************************************
   1171           * @fn      MT_ZdoMgmtLqiRequest
   1172           *
   1173           * @brief   Handle a Mgmt Lqi request.
   1174           *
   1175           * @param   pBuf  - MT message data
   1176           *
   1177           * @return  void
   1178           ***************************************************************************************************/
   1179          void MT_ZdoMgmtLqiRequest(uint8 *pBuf)
   1180          {
   1181            uint8 cmdId;
   1182            uint8 retValue;
   1183            zAddrType_t destAddr;
   1184            uint8 startIndex;
   1185          
   1186            /* parse header */
   1187            cmdId = pBuf[MT_RPC_POS_CMD1];
   1188            pBuf += MT_RPC_FRAME_HDR_SZ;
   1189          
   1190            /* Dev address */
   1191            destAddr.addrMode = Addr16Bit;
   1192            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   1193            pBuf += 2;
   1194          
   1195            /* Start Index */
   1196            startIndex = *pBuf;
   1197          
   1198            retValue = (uint8)ZDP_MgmtLqiReq( &destAddr, startIndex, 0);
   1199          
   1200            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1201          }
   1202          
   1203          /***************************************************************************************************
   1204           * @fn      MT_ZdoMgmtRtgRequest
   1205           *
   1206           * @brief   Handle a Mgmt Rtg request.
   1207           *
   1208           * @param   pBuf  - MT message data
   1209           *
   1210           * @return  void
   1211           ***************************************************************************************************/
   1212          void MT_ZdoMgmtRtgRequest(uint8 *pBuf)
   1213          {
   1214            uint8 cmdId;
   1215            uint8 retValue;
   1216            zAddrType_t destAddr;
   1217            uint8 startIndex;
   1218          
   1219            /* parse header */
   1220            cmdId = pBuf[MT_RPC_POS_CMD1];
   1221            pBuf += MT_RPC_FRAME_HDR_SZ;
   1222          
   1223            /* Dev Address */
   1224            destAddr.addrMode = Addr16Bit;
   1225            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1]);
   1226            pBuf += 2;
   1227          
   1228            /* Start Index */
   1229            startIndex = *pBuf;
   1230          
   1231            retValue = (byte)ZDP_MgmtRtgReq( &destAddr, startIndex, 0);
   1232          
   1233            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1234          }
   1235          
   1236          /***************************************************************************************************
   1237           * @fn      MT_ZdoMgmtBindRequest
   1238           *
   1239           * @brief   Handle a Mgmt Bind request.
   1240           *
   1241           * @param   pBuf  - MT message data
   1242           *
   1243           * @return  void
   1244           ***************************************************************************************************/
   1245          void MT_ZdoMgmtBindRequest(uint8 *pBuf)
   1246          {
   1247            uint8 cmdId;
   1248            uint8 retValue;
   1249            zAddrType_t destAddr;
   1250            uint8 startIndex;
   1251          
   1252            /* parse header */
   1253            cmdId = pBuf[MT_RPC_POS_CMD1];
   1254            pBuf += MT_RPC_FRAME_HDR_SZ;
   1255          
   1256            /* Dev Address */
   1257            destAddr.addrMode = Addr16Bit;
   1258            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   1259            pBuf += 2;
   1260          
   1261            /* Start Index */
   1262            startIndex = *pBuf;
   1263          
   1264            retValue = (uint8)ZDP_MgmtBindReq( &destAddr, startIndex, 0);
   1265          
   1266            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1267          }
   1268          
   1269          /***************************************************************************************************
   1270           * @fn      MT_ZdoMgmtLeaveRequest
   1271           *
   1272           * @brief   Handle a Mgmt Leave request.
   1273           *
   1274           * @param   pBuf  - MT message data
   1275           *
   1276           * @return  void
   1277           ***************************************************************************************************/
   1278          void MT_ZdoMgmtLeaveRequest(uint8 *pBuf)
   1279          {
   1280            uint8 cmdId;
   1281            uint8 retValue;
   1282            zAddrType_t destAddr;
   1283            uint8 *pIEEEAddr;
   1284            uint8 removeChildren, rejoin;
   1285          
   1286            /* parse header */
   1287            cmdId = pBuf[MT_RPC_POS_CMD1];
   1288            pBuf += MT_RPC_FRAME_HDR_SZ;
   1289          
   1290            /* Destination Address */
   1291            destAddr.addrMode = Addr16Bit;
   1292            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   1293            pBuf += 2;
   1294          
   1295            /* IEEE address */
   1296            pIEEEAddr = pBuf;
   1297            pBuf += Z_EXTADDR_LEN;
   1298          
   1299            /* Remove Children */
   1300            removeChildren = *pBuf++;
   1301          
   1302            /* Rejoin */
   1303            rejoin = *pBuf;
   1304          
   1305            retValue = (byte)ZDP_MgmtLeaveReq( &destAddr, pIEEEAddr, removeChildren, rejoin, 0);
   1306          
   1307            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1308          }
   1309          
   1310          
   1311          /***************************************************************************************************
   1312           * @fn      MT_ZdoMgmtDirectJoinRequest
   1313           *
   1314           * @brief   Handle a Mgmt Direct Join request.
   1315           *
   1316           * @param   pBuf  - MT message data
   1317           *
   1318           * @return  void
   1319           ***************************************************************************************************/
   1320          void MT_ZdoMgmtDirectJoinRequest(uint8 *pBuf)
   1321          {
   1322            uint8 cmdId;
   1323            uint8 retValue;
   1324            zAddrType_t destAddr;
   1325            uint8 *deviceAddr;
   1326            uint8 capInfo;
   1327          
   1328            /* parse header */
   1329            cmdId = pBuf[MT_RPC_POS_CMD1];
   1330            pBuf += MT_RPC_FRAME_HDR_SZ;
   1331          
   1332            /* Destination Address */
   1333            destAddr.addrMode = Addr16Bit;
   1334            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   1335            pBuf += 2;
   1336          
   1337            /* Device Address */
   1338            deviceAddr = pBuf;
   1339            pBuf += Z_EXTADDR_LEN;
   1340          
   1341            /* Capability information */
   1342            capInfo = *pBuf;
   1343          
   1344            retValue = (uint8)ZDP_MgmtDirectJoinReq( &destAddr, deviceAddr, capInfo, 0);
   1345          
   1346            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1347          }
   1348          
   1349          /***************************************************************************************************
   1350           * @fn      MT_ZdoMgmtPermitJoinRequest
   1351           *
   1352           * @brief   Handle a Mgmt Permit Join request.
   1353           *
   1354           * @param   pBuf  - MT message data
   1355           *
   1356           * @return  void
   1357           ***************************************************************************************************/
   1358          void MT_ZdoMgmtPermitJoinRequest(uint8 *pBuf)
   1359          {
   1360            uint8 cmdId;
   1361            uint8 retValue;
   1362            zAddrType_t destAddr;
   1363            uint8 duration, tcSignificance;
   1364          
   1365            /* parse header */
   1366            cmdId = pBuf[MT_RPC_POS_CMD1];
   1367            pBuf += MT_RPC_FRAME_HDR_SZ;
   1368          
   1369            /* Destination Address */
   1370            destAddr.addrMode = Addr16Bit;
   1371            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   1372            pBuf += 2;
   1373          
   1374            /* Duration */
   1375            duration = *pBuf++;
   1376          
   1377            /* Trust center significance */
   1378            tcSignificance = *pBuf;
   1379          
   1380            retValue = (byte)ZDP_MgmtPermitJoinReq( &destAddr, duration, tcSignificance, 0);
   1381          
   1382            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1383          }
   1384          
   1385          /***************************************************************************************************
   1386           * @fn      MT_ZdoMgmtNwkUpdateRequest
   1387           *
   1388           * @brief   Handle a Mgmt Nwk Update request.
   1389           *
   1390           * @param   pBuf  - MT message data
   1391           *
   1392           * @return  void
   1393           ***************************************************************************************************/
   1394          void MT_ZdoMgmtNwkUpdateRequest(uint8 *pBuf)
   1395          {
   1396            uint8 cmdId;
   1397            uint8 retValue;
   1398            zAddrType_t destAddr;
   1399            uint32 channelMask;
   1400            uint8 scanDuration, scanCount;
   1401            uint16 nwkManagerAddr;
   1402          
   1403              /* parse header */
   1404            cmdId = pBuf[MT_RPC_POS_CMD1];
   1405            pBuf += MT_RPC_FRAME_HDR_SZ;
   1406          
   1407            /* Destination address */
   1408            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   1409            pBuf += 2;
   1410          
   1411            /* Destination address mode */
   1412            destAddr.addrMode = *pBuf++;
   1413          
   1414            channelMask = BUILD_UINT32( pBuf[0], pBuf[1], pBuf[2], pBuf[3]);
   1415            pBuf += 4;
   1416          
   1417            /* Scan duration */
   1418            scanDuration = *pBuf++;
   1419          
   1420            /* Scan count */
   1421            scanCount = *pBuf++;
   1422          
   1423            /* NWK manager address */
   1424            nwkManagerAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   1425          
   1426            /* Send the Management Network Update request */
   1427            retValue = (uint8)ZDP_MgmtNwkUpdateReq( &destAddr, channelMask, scanDuration,
   1428                                                    scanCount, _NIB.nwkUpdateId+1, nwkManagerAddr );
   1429          
   1430            /*
   1431              Since we don't recevied our own broadcast messages, we should
   1432              send a unicast copy of the message to ourself.
   1433            */
   1434            if ( destAddr.addrMode == AddrBroadcast )
   1435            {
   1436              destAddr.addrMode = Addr16Bit;
   1437              destAddr.addr.shortAddr = _NIB.nwkDevAddress;
   1438              retValue = (uint8) ZDP_MgmtNwkUpdateReq( &destAddr, channelMask, scanDuration,
   1439                                                       scanCount, _NIB.nwkUpdateId+1, nwkManagerAddr );
   1440            }
   1441          
   1442            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1443          }
   1444          #endif /* MT_ZDO_MGMT */
   1445          
   1446          /***************************************************************************************************
   1447           * @fn      MT_ZdoStartupFromApp
   1448           *
   1449           * @brief   Handle a Startup from App request.
   1450           *
   1451           * @param   pBuf  - MT message data
   1452           *
   1453           * @return  void
   1454           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1455          void MT_ZdoStartupFromApp(uint8 *pBuf)
   \                     MT_ZdoStartupFromApp:
   1456          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1457            uint8 cmd0, cmd1, retValue;
   1458          
   1459            /* parse header */
   1460            cmd0 = pBuf[MT_RPC_POS_CMD0];
   \   00000A   8A82         MOV     DPL,R2
   \   00000C   8B83         MOV     DPH,R3
   \   00000E   A3           INC     DPTR
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   FF           MOV     R7,A
   1461            cmd1 = pBuf[MT_RPC_POS_CMD1];
   \   000011   8A82         MOV     DPL,R2
   \   000013   8B83         MOV     DPH,R3
   \   000015   A3           INC     DPTR
   \   000016   A3           INC     DPTR
   \   000017   E0           MOVX    A,@DPTR
   \   000018   FE           MOV     R6,A
   1462            pBuf += MT_RPC_FRAME_HDR_SZ;
   1463          
   1464            retValue = ZDOInitDevice(100);
   \   000019                ; Setup parameters for call to function ZDOInitDevice
   \   000019   7A64         MOV     R2,#0x64
   \   00001B   7B00         MOV     R3,#0x0
   \   00001D   12....       LCALL   `??ZDOInitDevice::?relay`; Banked call to: ZDOInitDevice
   \   000020   12....       LCALL   ?Subroutine29 & 0xFFFF
   1465          
   1466            if (MT_RPC_CMD_SREQ == (cmd0 & MT_RPC_CMD_TYPE_MASK))
   \                     ??CrossCallReturnLabel_54:
   \   000023   700D         JNZ     ??MT_ZdoStartupFromApp_0
   1467            {
   1468              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP|(uint8)MT_RPC_SYS_ZDO), cmd1,1, &retValue);
   \   000025                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000025   AC..         MOV     R4,?XSP + 0
   \   000027   AD..         MOV     R5,?XSP + 1
   \   000029   7B01         MOV     R3,#0x1
   \   00002B   EE           MOV     A,R6
   \   00002C   FA           MOV     R2,A
   \   00002D   7965         MOV     R1,#0x65
   \   00002F   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   1469            }
   1470          }
   \                     ??MT_ZdoStartupFromApp_0:
   \   000032   80..         SJMP    ??Subroutine47_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   E9           MOV     A,R1
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007   F0           MOVX    @DPTR,A
   \   000008   74E0         MOV     A,#-0x20
   \   00000A   5F           ANL     A,R7
   \   00000B   6420         XRL     A,#0x20
   \   00000D   22           RET
   1471          
   1472          /*************************************************************************************************
   1473           * @fn      MT_ZdoRegisterForZDOMsg(pBuf);
   1474           *
   1475           * @brief   MT proxy for ZDO_RegisterForZDOMsg.
   1476           *
   1477           * @param   pBuf  - MT message data
   1478           *
   1479           * @return  void
   1480           *************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   FF           MOV     R7,A
   \   000007                REQUIRE ??Subroutine41_0
   \   000007                ; // Fall through to label ??Subroutine41_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1481          void MT_ZdoRegisterForZDOMsg(uint8 *pBuf)
   \                     MT_ZdoRegisterForZDOMsg:
   1482          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1483            uint8 cmd0, cmd1, tmp;
   1484            uint16 cId;
   1485          
   1486            /* parse header */
   1487            cmd0 = pBuf[MT_RPC_POS_CMD0];
   \   00000A   12....       LCALL   ?Subroutine8 & 0xFFFF
   1488            cmd1 = pBuf[MT_RPC_POS_CMD1];
   1489            pBuf += MT_RPC_FRAME_HDR_SZ;
   \                     ??CrossCallReturnLabel_83:
   \   00000D   5001         JNC     ??MT_ZdoRegisterForZDOMsg_0
   \   00000F   0B           INC     R3
   1490          
   1491            cId = BUILD_UINT16(pBuf[0], pBuf[1]);
   1492            tmp = ZDO_RegisterForZDOMsg(MT_TaskID, cId);
   \                     ??MT_ZdoRegisterForZDOMsg_0:
   \   000010                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000010   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   000013   12....       LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
   \   000016   12....       LCALL   ?Subroutine29 & 0xFFFF
   1493          
   1494            if (MT_RPC_CMD_SREQ == (cmd0 & MT_RPC_CMD_TYPE_MASK))
   \                     ??CrossCallReturnLabel_55:
   \   000019   700D         JNZ     ??MT_ZdoRegisterForZDOMsg_1
   1495            {
   1496              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP|(uint8)MT_RPC_SYS_ZDO), cmd1, 1, &tmp);
   \   00001B                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00001B   AC..         MOV     R4,?XSP + 0
   \   00001D   AD..         MOV     R5,?XSP + 1
   \   00001F   7B01         MOV     R3,#0x1
   \   000021   EE           MOV     A,R6
   \   000022   FA           MOV     R2,A
   \   000023   7965         MOV     R1,#0x65
   \   000025   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   1497            }
   1498          }
   \                     ??MT_ZdoRegisterForZDOMsg_1:
   \   000028   80..         SJMP    ??Subroutine47_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   12....       LCALL   ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_71:
   \   000003   FA           MOV     R2,A
   \   000004   E4           CLR     A
   \   000005   39           ADDC    A,R1
   \   000006   FB           MOV     R3,A
   \   000007   90....       MOV     DPTR,#MT_TaskID
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   F9           MOV     R1,A
   \   00000C   22           RET
   1499          
   1500          /*************************************************************************************************
   1501           * @fn      MT_ZdoRemoveRegisteredCB(pBuf);
   1502           *
   1503           * @brief   MT proxy for ZDO_RemoveRegisteredCB.
   1504           *
   1505           * @param   pBuf  - MT message data
   1506           *
   1507           * @return  void
   1508           *************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1509          void MT_ZdoRemoveRegisteredCB(uint8 *pBuf)
   \                     MT_ZdoRemoveRegisteredCB:
   1510          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1511            uint8 cmd0, cmd1, tmp;
   1512            uint16 cId;
   1513          
   1514            /* parse header */
   1515            cmd0 = pBuf[MT_RPC_POS_CMD0];
   \   00000A   12....       LCALL   ?Subroutine8 & 0xFFFF
   1516            cmd1 = pBuf[MT_RPC_POS_CMD1];
   1517            pBuf += MT_RPC_FRAME_HDR_SZ;
   \                     ??CrossCallReturnLabel_84:
   \   00000D   5001         JNC     ??MT_ZdoRemoveRegisteredCB_0
   \   00000F   0B           INC     R3
   1518          
   1519            cId = BUILD_UINT16(pBuf[0], pBuf[1]);
   1520            tmp = ZDO_RemoveRegisteredCB(MT_TaskID, cId);
   \                     ??MT_ZdoRemoveRegisteredCB_0:
   \   000010                ; Setup parameters for call to function ZDO_RemoveRegisteredCB
   \   000010   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   000013   12....       LCALL   `??ZDO_RemoveRegisteredCB::?relay`; Banked call to: ZDO_RemoveRegisteredCB
   \   000016   12....       LCALL   ?Subroutine29 & 0xFFFF
   1521          
   1522            if (MT_RPC_CMD_SREQ == (cmd0 & MT_RPC_CMD_TYPE_MASK))
   \                     ??CrossCallReturnLabel_56:
   \   000019   700D         JNZ     ??MT_ZdoRemoveRegisteredCB_1
   1523            {
   1524              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP|(uint8)MT_RPC_SYS_ZDO), cmd1, 1, &tmp);
   \   00001B                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00001B   AC..         MOV     R4,?XSP + 0
   \   00001D   AD..         MOV     R5,?XSP + 1
   \   00001F   7B01         MOV     R3,#0x1
   \   000021   EE           MOV     A,R6
   \   000022   FA           MOV     R2,A
   \   000023   7965         MOV     R1,#0x65
   \   000025   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   1525            }
   1526          }
   \                     ??MT_ZdoRemoveRegisteredCB_1:
   \   000028   80..         SJMP    ??Subroutine47_0
   1527          
   1528          #endif /* MT_ZDO_FUNC */
   1529          
   1530          
   1531          /***************************************************************************************************
   1532           * Callback handling function
   1533           ***************************************************************************************************/
   1534          
   1535          #if defined (MT_ZDO_CB_FUNC)
   1536          
   1537          /***************************************************************************************************
   1538           * @fn      MT_ZdoStateChangeCB
   1539           *
   1540           * @brief   Handle state change OSAL message from ZDO.
   1541           *
   1542           * @param   pMsg  - Message data
   1543           *
   1544           * @return  void
   1545           */
   1546          void MT_ZdoStateChangeCB(osal_event_hdr_t *pMsg)
   1547          {
   1548            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   1549                                                 MT_ZDO_STATE_CHANGE_IND, 1, &pMsg->status);
   1550          }
   1551          
   1552          /***************************************************************************************************
   1553           * @fn     MT_ZdoDirectCB()
   1554           *
   1555           * @brief  ZDO direct callback.  Build an MT message directly from the
   1556           *         over-the-air ZDO message.
   1557           *
   1558           * @param  pData - Incoming AF frame.
   1559           *
   1560           * @return  none
   1561           ***************************************************************************************************/
   1562          void MT_ZdoDirectCB( afIncomingMSGPacket_t *pData,  zdoIncomingMsg_t *inMsg )
   1563          {
   1564            uint8 len, *pBuf;
   1565            
   1566            // Is the message an exception or not a response?
   1567            if ( MT_ZdoHandleExceptions( pData, inMsg ) || ( (pData->clusterId & ZDO_RESPONSE_BIT) == 0 ) )
   1568            {
   1569              return;  // Handled somewhere else or not needed.
   1570            }
   1571          
   1572            /* ZDO data starts after one-byte sequence number and the msg buffer length includes
   1573             * two bytes for srcAddr.
   1574             */
   1575            len = pData->cmd.DataLength - 1 + sizeof(uint16);
   1576          
   1577            if (NULL != (pBuf = (uint8 *)osal_mem_alloc(len)))
   1578            {
   1579              uint8 id = MT_ZDO_CID_TO_AREQ_ID(pData->clusterId);
   1580          
   1581              pBuf[0] = LO_UINT16(pData->srcAddr.addr.shortAddr);
   1582              pBuf[1] = HI_UINT16(pData->srcAddr.addr.shortAddr);
   1583          
   1584              /* copy ZDO data, skipping one-byte sequence number */
   1585              osal_memcpy(pBuf+2, (pData->cmd.Data + 1), pData->cmd.DataLength-1);
   1586          
   1587              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO), id, len, pBuf);
   1588              osal_mem_free(pBuf);
   1589            }
   1590          }
   1591          
   1592          /***************************************************************************************************
   1593           * @fn     MT_ZdoHandleExceptions()
   1594           *
   1595           * @brief  Handles all messages that are an expection to the generic MT ZDO Response.
   1596           *
   1597           * @param  pData - Incoming AF frame.
   1598           *
   1599           * @return  TRUE if handled by this function, FALSE if not
   1600           ***************************************************************************************************/
   1601          uint8 MT_ZdoHandleExceptions( afIncomingMSGPacket_t *pData, zdoIncomingMsg_t *inMsg )
   1602          {
   1603            uint8 ret = TRUE;
   1604            ZDO_NwkIEEEAddrResp_t *nwkRsp = NULL;
   1605            ZDO_DeviceAnnce_t devAnnce;
   1606            uint8 doDefault = FALSE;
   1607            
   1608            switch ( inMsg->clusterID )
   1609            {
   1610              case NWK_addr_rsp:
   1611              case IEEE_addr_rsp:
   1612                nwkRsp = ZDO_ParseAddrRsp( inMsg );
   1613                MT_ZdoAddrRspCB( nwkRsp, inMsg->clusterID );
   1614                if ( nwkRsp )
   1615                  osal_mem_free( nwkRsp );
   1616                break;
   1617                
   1618              case Device_annce:
   1619                ZDO_ParseDeviceAnnce( inMsg, &devAnnce );
   1620                MT_ZdoEndDevAnnceCB( &devAnnce, inMsg->srcAddr.addr.shortAddr );
   1621                break;
   1622                
   1623              case Simple_Desc_rsp:
   1624                if ( pData->cmd.DataLength > 5 )
   1625                  ret = FALSE;
   1626                else
   1627                  doDefault = TRUE;        
   1628                break;  
   1629                
   1630              default:
   1631                ret = FALSE;
   1632                break;
   1633            }
   1634            
   1635            if ( doDefault )
   1636            {
   1637              ret = FALSE;
   1638              pData->clusterId = MtZdoDef_rsp;
   1639              pData->cmd.DataLength = 2;
   1640            }
   1641          
   1642            return ( ret );
   1643          }
   1644          
   1645          /***************************************************************************************************
   1646           * @fn      MT_ZdoAddrRspCB
   1647           *
   1648           * @brief   Handle IEEE or nwk address response OSAL message from ZDO.
   1649           *
   1650           * @param   pMsg  - Message data
   1651           *
   1652           * @return  void
   1653           */
   1654          void MT_ZdoAddrRspCB( ZDO_NwkIEEEAddrResp_t *pMsg, uint16 clusterID )
   1655          {
   1656            uint8   listLen, len, *pBuf;
   1657          
   1658            /* both ZDO_NwkAddrResp_t and ZDO_IEEEAddrResp_t must be the same */
   1659          
   1660            /* get length, sanity check length */
   1661            listLen = pMsg->numAssocDevs;
   1662            
   1663            /* calculate msg length */
   1664            len = MT_ZDO_ADDR_RSP_LEN + (listLen * sizeof(uint16));
   1665          
   1666            /* get buffer */
   1667            if (NULL != (pBuf = (uint8 *)osal_mem_alloc(len)))
   1668            {
   1669              uint8 id = MT_ZDO_CID_TO_AREQ_ID(clusterID);
   1670              uint8 *pTmp = pBuf;
   1671          
   1672              *pTmp++ = pMsg->status;
   1673          
   1674              osal_cpyExtAddr(pTmp, pMsg->extAddr);
   1675              pTmp += Z_EXTADDR_LEN;
   1676          
   1677              *pTmp++ = LO_UINT16(pMsg->nwkAddr);
   1678              *pTmp++ = HI_UINT16(pMsg->nwkAddr);
   1679          
   1680              *pTmp++ = pMsg->startIndex;
   1681              *pTmp++ = listLen;
   1682          
   1683              MT_Word2Buf(pTmp, pMsg->devList, listLen);
   1684          
   1685              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO), id, len, pBuf);
   1686              osal_mem_free(pBuf);
   1687            }
   1688          }
   1689          
   1690          /***************************************************************************************************
   1691           * @fn      MT_ZdoEndDevAnnceCB
   1692           *
   1693           * @brief   Handle end device announce OSAL message from ZDO.
   1694           *
   1695           * @param   pMsg  - Message data
   1696           *
   1697           * @return  void
   1698           */
   1699          void MT_ZdoEndDevAnnceCB( ZDO_DeviceAnnce_t *pMsg, uint16 srcAddr )
   1700          {
   1701            uint8 *pBuf;
   1702          
   1703            if (NULL != (pBuf = (uint8 *)osal_mem_alloc(MT_ZDO_END_DEVICE_ANNCE_IND_LEN)))
   1704            {
   1705              uint8 *pTmp = pBuf;
   1706          
   1707              *pTmp++ = LO_UINT16(srcAddr);
   1708              *pTmp++ = HI_UINT16(srcAddr);
   1709          
   1710              *pTmp++ = LO_UINT16(pMsg->nwkAddr);
   1711              *pTmp++ = HI_UINT16(pMsg->nwkAddr);
   1712          
   1713              osal_cpyExtAddr(pTmp, pMsg->extAddr);
   1714              pTmp += Z_EXTADDR_LEN;
   1715          
   1716              *pTmp = pMsg->capabilities;
   1717          
   1718              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO), 
   1719                                                   MT_ZDO_END_DEVICE_ANNCE_IND, 
   1720                                                   MT_ZDO_END_DEVICE_ANNCE_IND_LEN, pBuf);
   1721              osal_mem_free(pBuf);
   1722            }
   1723          }
   1724          
   1725          /***************************************************************************************************
   1726           * @fn      MT_ZdoSrcRtgCB
   1727           *
   1728           * @brief   Handle Src Route from ZDO.
   1729           *
   1730           * @param   pStr  - pointer to the data structure for the src route
   1731           *
   1732           * @return  void* 
   1733           */
   1734          void* MT_ZdoSrcRtgCB( void *pStr )
   1735          {
   1736            uint8 len, *pBuf;
   1737            zdoSrcRtg_t *pSrcRtg = pStr;
   1738            
   1739            // srcAddr (2) + relayCnt (1) + relayList( relaycnt * 2 )
   1740            len = 2 + 1 + pSrcRtg->relayCnt * sizeof(uint16);
   1741          
   1742            if (NULL != (pBuf = (uint8 *)osal_mem_alloc(len)))
   1743            {
   1744              uint8 idx, *pTmp = pBuf;
   1745              uint16 *pRelay;
   1746          
   1747              // Packet payload
   1748              *pTmp++ = LO_UINT16(pSrcRtg->srcAddr);
   1749              *pTmp++ = HI_UINT16(pSrcRtg->srcAddr);
   1750              *pTmp++ = pSrcRtg->relayCnt;
   1751              
   1752              // Relay List
   1753              if( ( pRelay = pSrcRtg->pRelayList ) != NULL )
   1754              {
   1755                for( idx = 0; idx < pSrcRtg->relayCnt; idx ++ )
   1756                {
   1757                  *pTmp++ = LO_UINT16(*pRelay);
   1758                  *pTmp++ = HI_UINT16(*pRelay);
   1759                  pRelay++;
   1760                }
   1761              }
   1762              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   1763                                                   MT_ZDO_SRC_RTG_IND, len, pBuf);
   1764              osal_mem_free(pBuf);
   1765            }
   1766            
   1767            return NULL;
   1768          }
   1769          #endif // MT_ZDO_CB_FUNC
   1770          
   1771          /***************************************************************************************************
   1772           * @fn      MT_ZdoSendMsgCB
   1773           *
   1774           * @brief   Proxy the ZDO_SendMsgCBs one message at a time.
   1775           *
   1776           * @param   pMsg  - Message data
   1777           *
   1778           * @return  void
   1779           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1780          void MT_ZdoSendMsgCB(zdoIncomingMsg_t *pMsg)
   \                     MT_ZdoSendMsgCB:
   1781          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0,R2
   \   000007   8B..         MOV     ?V1,R3
   1782            uint8 len = pMsg->asduLen + 9;
   \   000009   EA           MOV     A,R2
   \   00000A   2410         ADD     A,#0x10
   \   00000C   F5..         MOV     ?V4,A
   \   00000E   E4           CLR     A
   \   00000F   35..         ADDC    A,?V1
   \   000011   F5..         MOV     ?V5,A
   \   000013   85..82       MOV     DPL,?V4
   \   000016   F583         MOV     DPH,A
   \   000018   E0           MOVX    A,@DPTR
   \   000019   2409         ADD     A,#0x9
   \   00001B   F5..         MOV     ?V6,A
   1783            uint8 *pBuf = (uint8 *)osal_mem_alloc(len);
   \   00001D                ; Setup parameters for call to function osal_mem_alloc
   \   00001D   FA           MOV     R2,A
   \   00001E   7B00         MOV     R3,#0x0
   \   000020   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000023   8A..         MOV     ?V2,R2
   \   000025   8B..         MOV     ?V3,R3
   \   000027   AE..         MOV     R6,?V2
   \   000029   AF..         MOV     R7,?V3
   1784          
   1785            if (pBuf != NULL)
   \   00002B   EE           MOV     A,R6
   \   00002C   4F           ORL     A,R7
   \   00002D   7003         JNZ     $+5
   \   00002F   02....       LJMP    ??MT_ZdoSendMsgCB_0 & 0xFFFF
   1786            {
   1787              uint8 *pTmp = pBuf;
   1788          
   1789              // Assuming exclusive use of network short addresses.
   1790              *pTmp++ = LO_UINT16(pMsg->srcAddr.addr.shortAddr);
   \   000032   E5..         MOV     A,?V0
   \   000034   2402         ADD     A,#0x2
   \   000036   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   000039   E0           MOVX    A,@DPTR
   \   00003A   8E82         MOV     DPL,R6
   \   00003C   8F83         MOV     DPH,R7
   \   00003E   12....       LCALL   ?Subroutine27 & 0xFFFF
   1791              *pTmp++ = HI_UINT16(pMsg->srcAddr.addr.shortAddr);
   \                     ??CrossCallReturnLabel_49:
   \   000041   12....       LCALL   ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_80:
   \   000044   F0           MOVX    @DPTR,A
   1792              *pTmp++ = pMsg->wasBroadcast;
   \   000045   E5..         MOV     A,?V0
   \   000047   240B         ADD     A,#0xb
   \   000049   12....       LCALL   ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   00004C   F0           MOVX    @DPTR,A
   1793              *pTmp++ = LO_UINT16(pMsg->clusterID);
   \   00004D   E5..         MOV     A,?V0
   \   00004F   240C         ADD     A,#0xc
   \   000051   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   000054   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   000057   12....       LCALL   ?Subroutine27 & 0xFFFF
   1794              *pTmp++ = HI_UINT16(pMsg->clusterID);
   \                     ??CrossCallReturnLabel_50:
   \   00005A   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   00005D   A3           INC     DPTR
   \   00005E   F0           MOVX    @DPTR,A
   1795              *pTmp++ = pMsg->SecurityUse;
   \   00005F   E5..         MOV     A,?V0
   \   000061   240E         ADD     A,#0xe
   \   000063   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   000066   F0           MOVX    @DPTR,A
   1796              *pTmp++ = pMsg->TransSeq;
   \   000067   E5..         MOV     A,?V0
   \   000069   240F         ADD     A,#0xf
   \   00006B   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   00006E   A3           INC     DPTR
   \   00006F   F0           MOVX    @DPTR,A
   1797              // Skipping asduLen since it can be deduced from the RPC packet length.
   1798              *pTmp++ = LO_UINT16(pMsg->macDestAddr);
   \   000070   E5..         MOV     A,?V0
   \   000072   2411         ADD     A,#0x11
   \   000074   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   000077   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   00007A   12....       LCALL   ?Subroutine27 & 0xFFFF
   1799              *pTmp++ = HI_UINT16(pMsg->macDestAddr);
   \                     ??CrossCallReturnLabel_51:
   \   00007D   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   000080   A3           INC     DPTR
   \   000081   F0           MOVX    @DPTR,A
   1800              (void)osal_memcpy(pTmp, pMsg->asdu, pMsg->asduLen);
   \   000082                ; Setup parameters for call to function osal_memcpy
   \   000082   E5..         MOV     A,?V0
   \   000084   2413         ADD     A,#0x13
   \   000086   F582         MOV     DPL,A
   \   000088   E4           CLR     A
   \   000089   35..         ADDC    A,?V1
   \   00008B   F583         MOV     DPH,A
   \   00008D   12....       LCALL   ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_77:
   \   000090   F5..         MOV     ?V1,A
   \   000092   75..00       MOV     ?V2,#0x0
   \   000095   78..         MOV     R0,#?V0
   \   000097   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00009A   85..82       MOV     DPL,?V4
   \   00009D   85..83       MOV     DPH,?V5
   \   0000A0   E0           MOVX    A,@DPTR
   \   0000A1   FC           MOV     R4,A
   \   0000A2   7D00         MOV     R5,#0x0
   \   0000A4   EE           MOV     A,R6
   \   0000A5   2409         ADD     A,#0x9
   \   0000A7   FA           MOV     R2,A
   \   0000A8   E4           CLR     A
   \   0000A9   3F           ADDC    A,R7
   \   0000AA   FB           MOV     R3,A
   \   0000AB   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000AE   7403         MOV     A,#0x3
   \   0000B0   12....       LCALL   ?DEALLOC_XSTACK8
   1801          
   1802              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   1803                                                   MT_ZDO_MSG_CB_INCOMING, len, pBuf);
   \   0000B3                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   0000B3   EE           MOV     A,R6
   \   0000B4   FC           MOV     R4,A
   \   0000B5   EF           MOV     A,R7
   \   0000B6   FD           MOV     R5,A
   \   0000B7   AB..         MOV     R3,?V6
   \   0000B9   7AFF         MOV     R2,#-0x1
   \   0000BB   7945         MOV     R1,#0x45
   \   0000BD   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   1804            }
   1805          }
   \                     ??MT_ZdoSendMsgCB_0:
   \   0000C0   02....       LJMP    ?Subroutine3 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   F8           MOV     R0,A
   \   000001   E4           CLR     A
   \   000002   35..         ADDC    A,?V1
   \   000004   F9           MOV     R1,A
   \   000005   8882         MOV     DPL,R0
   \   000007   8983         MOV     DPH,R1
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   12....       LCALL   ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   12....       LCALL   ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_82:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   A3           INC     DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   12....       LCALL   ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_69:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   F582         MOV     DPL,A
   \   000002   E4           CLR     A
   \   000003   35..         ADDC    A,?V1
   \   000005   F583         MOV     DPH,A
   \   000007   12....       LCALL   ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_81:
   \   00000A   A3           INC     DPTR
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   12....       LCALL   ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_72:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   22           RET

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoCommandProcessing::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoCommandProcessing

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoNWKAddressRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoNWKAddressRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoIEEEAddrRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoIEEEAddrRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoNodeDescRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoNodeDescRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoPowerDescRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoPowerDescRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoSimpleDescRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoSimpleDescRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoActiveEpRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoActiveEpRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoMatchDescRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoMatchDescRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoComplexDescRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoComplexDescRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoUserDescRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoUserDescRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoEndDevAnnce::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoEndDevAnnce

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoUserDescSet::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoUserDescSet

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoServiceDiscRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoServiceDiscRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoEndDevBindRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoEndDevBindRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoBindRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoBindRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoUnbindRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoUnbindRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoSetLinkKey::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoSetLinkKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoRemoveLinkKey::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoRemoveLinkKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoGetLinkKey::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoGetLinkKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoStartupFromApp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoStartupFromApp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoRegisterForZDOMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoRegisterForZDOMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoRemoveRegisteredCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoRemoveRegisteredCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoSendMsgCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoSendMsgCB
   1806          
   1807          #endif   /*ZDO Command Processing in MT*/
   1808          /***************************************************************************************************
   1809          ***************************************************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      1     29   MT_ZdoActiveEpRequest
        0     19   -> MT_BuildAndSendZToolResponse
        0     20   -> ZDP_NWKAddrOfInterestReq
      1     52   MT_ZdoBindRequest
        0     35   -> MT_BuildAndSendZToolResponse
        0     43   -> ZDP_BindUnbindReq
        0     35   -> sAddrExtCpy
      0      9   MT_ZdoCommandProcessing
        0      9   -> MT_ZdoActiveEpRequest
        0      9   -> MT_ZdoBindRequest
        0      9   -> MT_ZdoComplexDescRequest
        0      9   -> MT_ZdoEndDevAnnce
        0      9   -> MT_ZdoEndDevBindRequest
        0      9   -> MT_ZdoGetLinkKey
        0      9   -> MT_ZdoIEEEAddrRequest
        0      9   -> MT_ZdoMatchDescRequest
        0      9   -> MT_ZdoNWKAddressRequest
        0      9   -> MT_ZdoNodeDescRequest
        0      9   -> MT_ZdoPowerDescRequest
        0      9   -> MT_ZdoRegisterForZDOMsg
        0      9   -> MT_ZdoRemoveLinkKey
        0      9   -> MT_ZdoRemoveRegisteredCB
        0      9   -> MT_ZdoServiceDiscRequest
        0      9   -> MT_ZdoSetLinkKey
        0      9   -> MT_ZdoSimpleDescRequest
        0      9   -> MT_ZdoStartupFromApp
        0      9   -> MT_ZdoUnbindRequest
        0      9   -> MT_ZdoUserDescRequest
        0      9   -> MT_ZdoUserDescSet
      1     29   MT_ZdoComplexDescRequest
        0     19   -> MT_BuildAndSendZToolResponse
        0     20   -> ZDP_NWKAddrOfInterestReq
      1     20   MT_ZdoEndDevAnnce
        0     10   -> MT_BuildAndSendZToolResponse
        0     11   -> ZDP_DeviceAnnce
      1    103   MT_ZdoEndDevBindRequest
        0     85   -> MT_BuildAndSendZToolResponse
        0     94   -> ZDP_EndDeviceBindReq
      1     28   MT_ZdoGetLinkKey
        0     16   -> APSME_LinkKeyDataGet
        0     16   -> MT_BuildAndSendZToolResponse
        0     16   -> osal_mem_alloc
        0     19   -> osal_memcpy
        0     16   -> osal_memset
      1     20   MT_ZdoIEEEAddrRequest
        0     11   -> MT_BuildAndSendZToolResponse
        0     11   -> ZDP_IEEEAddrReq
      0      0   MT_ZdoInit
      1    105   MT_ZdoMatchDescRequest
        0     88   -> MT_BuildAndSendZToolResponse
        0     96   -> ZDP_MatchDescReq
      1     20   MT_ZdoNWKAddressRequest
        0     11   -> MT_BuildAndSendZToolResponse
        0     11   -> ZDP_NwkAddrReq
      1     29   MT_ZdoNodeDescRequest
        0     19   -> MT_BuildAndSendZToolResponse
        0     20   -> ZDP_NWKAddrOfInterestReq
      1     29   MT_ZdoPowerDescRequest
        0     19   -> MT_BuildAndSendZToolResponse
        0     20   -> ZDP_NWKAddrOfInterestReq
      1     19   MT_ZdoRegisterForZDOMsg
        0     10   -> MT_BuildAndSendZToolResponse
        0     10   -> ZDO_RegisterForZDOMsg
      1     19   MT_ZdoRemoveLinkKey
        0     10   -> MT_BuildAndSendZToolResponse
        0     10   -> ZDSecMgrDeviceRemoveByExtAddr
      1     19   MT_ZdoRemoveRegisteredCB
        0     10   -> MT_BuildAndSendZToolResponse
        0     10   -> ZDO_RemoveRegisteredCB
      1     18   MT_ZdoSendMsgCB
        0     15   -> MT_BuildAndSendZToolResponse
        0     15   -> osal_mem_alloc
        0     18   -> osal_memcpy
      1     19   MT_ZdoServiceDiscRequest
        0     10   -> MT_BuildAndSendZToolResponse
        0     10   -> ZDP_ServerDiscReq
      1     22   MT_ZdoSetLinkKey
        0     11   -> MT_BuildAndSendZToolResponse
        0     13   -> ZDSecMgrAddLinkKey
      1     29   MT_ZdoSimpleDescRequest
        0     19   -> MT_BuildAndSendZToolResponse
        0     20   -> ZDP_SimpleDescReq
      1     19   MT_ZdoStartupFromApp
        0     10   -> MT_BuildAndSendZToolResponse
        0     10   -> ZDOInitDevice
      1     52   MT_ZdoUnbindRequest
        0     35   -> MT_BuildAndSendZToolResponse
        0     43   -> ZDP_BindUnbindReq
        0     35   -> sAddrExtCpy
      1     29   MT_ZdoUserDescRequest
        0     19   -> MT_BuildAndSendZToolResponse
        0     20   -> ZDP_NWKAddrOfInterestReq
      1     51   MT_ZdoUserDescSet
        0     39   -> MT_BuildAndSendZToolResponse
        0     41   -> ZDP_UserDescSet
        0     42   -> osal_memcpy


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      13  ??Subroutine41_0
       6  ??Subroutine42_0
      13  ??Subroutine43_0
       3  ??Subroutine44_0
       5  ??Subroutine45_0
      10  ??Subroutine46_0
       5  ??Subroutine47_0
       3  ?Subroutine0
      16  ?Subroutine1
      13  ?Subroutine10
      15  ?Subroutine11
      10  ?Subroutine12
       6  ?Subroutine13
       4  ?Subroutine14
       7  ?Subroutine15
       8  ?Subroutine16
       7  ?Subroutine17
      19  ?Subroutine18
      17  ?Subroutine19
       8  ?Subroutine2
       4  ?Subroutine20
       8  ?Subroutine21
       8  ?Subroutine22
      10  ?Subroutine23
      10  ?Subroutine24
      10  ?Subroutine25
      19  ?Subroutine26
       7  ?Subroutine27
      19  ?Subroutine28
      14  ?Subroutine29
       5  ?Subroutine3
       7  ?Subroutine30
      11  ?Subroutine31
      14  ?Subroutine32
      10  ?Subroutine33
      20  ?Subroutine34
      12  ?Subroutine35
      15  ?Subroutine36
       6  ?Subroutine37
      11  ?Subroutine38
       6  ?Subroutine39
      26  ?Subroutine4
       7  ?Subroutine40
       6  ?Subroutine5
      17  ?Subroutine6
      60  ?Subroutine7
       7  ?Subroutine8
      13  ?Subroutine9
      46  MT_ZdoActiveEpRequest
       6  MT_ZdoActiveEpRequest::?relay
     143  MT_ZdoBindRequest
       6  MT_ZdoBindRequest::?relay
     193  MT_ZdoCommandProcessing
       6  MT_ZdoCommandProcessing::?relay
      46  MT_ZdoComplexDescRequest
       6  MT_ZdoComplexDescRequest::?relay
      67  MT_ZdoEndDevAnnce
       6  MT_ZdoEndDevAnnce::?relay
     329  MT_ZdoEndDevBindRequest
       6  MT_ZdoEndDevBindRequest::?relay
     167  MT_ZdoGetLinkKey
       6  MT_ZdoGetLinkKey::?relay
      47  MT_ZdoIEEEAddrRequest
       6  MT_ZdoIEEEAddrRequest::?relay
       3  MT_ZdoInit
       6  MT_ZdoInit::?relay
     331  MT_ZdoMatchDescRequest
       6  MT_ZdoMatchDescRequest::?relay
      52  MT_ZdoNWKAddressRequest
       6  MT_ZdoNWKAddressRequest::?relay
      54  MT_ZdoNodeDescRequest
       6  MT_ZdoNodeDescRequest::?relay
      46  MT_ZdoPowerDescRequest
       6  MT_ZdoPowerDescRequest::?relay
      42  MT_ZdoRegisterForZDOMsg
       6  MT_ZdoRegisterForZDOMsg::?relay
      22  MT_ZdoRemoveLinkKey
       6  MT_ZdoRemoveLinkKey::?relay
      42  MT_ZdoRemoveRegisteredCB
       6  MT_ZdoRemoveRegisteredCB::?relay
     195  MT_ZdoSendMsgCB
       6  MT_ZdoSendMsgCB::?relay
      35  MT_ZdoServiceDiscRequest
       6  MT_ZdoServiceDiscRequest::?relay
      59  MT_ZdoSetLinkKey
       6  MT_ZdoSetLinkKey::?relay
      61  MT_ZdoSimpleDescRequest
       6  MT_ZdoSimpleDescRequest::?relay
      52  MT_ZdoStartupFromApp
       6  MT_ZdoStartupFromApp::?relay
     146  MT_ZdoUnbindRequest
       6  MT_ZdoUnbindRequest::?relay
      45  MT_ZdoUserDescRequest
       6  MT_ZdoUserDescRequest::?relay
     164  MT_ZdoUserDescSet
       6  MT_ZdoUserDescSet::?relay
       4  _zdoCallbackSub

 
 2 937 bytes in segment BANKED_CODE
   144 bytes in segment BANK_RELAYS
     4 bytes in segment XDATA_Z
 
 3 081 bytes of CODE  memory
     4 bytes of XDATA memory

Errors: none
Warnings: none
