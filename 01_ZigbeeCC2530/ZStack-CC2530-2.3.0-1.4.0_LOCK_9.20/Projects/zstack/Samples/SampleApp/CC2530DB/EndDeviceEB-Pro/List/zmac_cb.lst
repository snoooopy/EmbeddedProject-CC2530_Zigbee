###############################################################################
#
# IAR C/C++ Compiler V9.20.1.2476 for 8051                26/May/2017  16:13:47
# Copyright 2004-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Components\zmac\f8w\zmac_cb.c
#    Command line       =  
#        -f
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DBLINK_LEDS) -f
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_POLLED=3000
#        -DNWK_INDIRECT_MSG_TIMEOUT=7 -DMAX_RREQ_ENTRIES=8
#        -DAPSC_MAX_FRAME_RETRIES=3 -DNWK_MAX_DATA_RETRIES=2
#        -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9 -DAPS_MAX_GROUPS=16
#        -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000
#        -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
#        -DREJOIN_POLL_RATE=440
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Components\zmac\f8w\zmac_cb.c -D
#        ZIGBEEPRO -D NWK_AUTO_POLL -D ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC -D
#        MT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG -lC
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\EndDeviceEB-Pro\List\
#        -lA
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\EndDeviceEB-Pro\List\
#        --diag_suppress Pe001,Pa010 -o
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\EndDeviceEB-Pro\Obj\
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 8 -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\SOURCE\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\ZMAIN\TI2530DB\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MT\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\INCLUDE\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\TARGET\CC2530EB\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\MCU\CCSOC\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\INCLUDE\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\AF\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\NWK\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SEC\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SAPI\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SYS\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\ZDO\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\F8W\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES\SADDR\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES\SDATA\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\INCLUDE\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\HIGH_LEVEL\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\
#        -Ohz --require_prototypes
#    List file          =  
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\EndDeviceEB-Pro\List\zmac_cb.lst
#    Object file        =  
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\EndDeviceEB-Pro\Obj\zmac_cb.r51
#
###############################################################################

D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Components\zmac\f8w\zmac_cb.c
      1          /**************************************************************************************************
      2            Filename:       zmac_cb.c
      3            Revised:        $Date: 2009-12-04 08:04:20 -0800 (Fri, 04 Dec 2009) $
      4            Revision:       $Revision: 21276 $
      5          
      6            Description:    This file contains the NWK functions that the ZMAC calls
      7          
      8          
      9            Copyright 2005-2009 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /********************************************************************************************************
     41           *                                               INCLUDES
     42           ********************************************************************************************************/
     43          
     44          #include "ZComDef.h"
     45          #include "OSAL.h"
     46          #include "ZMAC.h"
     47          #include "MT_MAC.h"
     48          #include "hal_mcu.h"

   \                                 In  segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IEN0
   \                     _A_IEN0:
   \   000000                DS 1
     49          
     50          #if !defined NONWK
     51          #include "nwk.h"
     52          #include "nwk_bufs.h"
     53          #include "ZGlobals.h"
     54          #endif
     55          
     56          #if defined( MACSIM )
     57            #include "mac_sim.h"
     58          #endif
     59          
     60          #include "mac_main.h"
     61          extern void *ZMac_ScanBuf;
     62          
     63          /********************************************************************************************************
     64           *                                               CONSTANTS
     65           ********************************************************************************************************/
     66          
     67          #if !defined NONWK
     68          /* Lookup table for size of structures. Must match with the order of MAC callback events */

   \                                 In  segment CODE_C, align 1
     69          const uint8 CODE zmacCBSizeTable [] = {
   \                     zmacCBSizeTable:
   \   000000   00           DB 0
   \   000001   16           DB 22
   \   000002   0F           DB 15
   \   000003   00           DB 0
   \   000004   00           DB 0
   \   000005   0B           DB 11
   \   000006   15           DB 21
   \   000007   0B           DB 11
   \   000008   02           DB 2
   \   000009   00           DB 0
   \   00000A   02           DB 2
   \   00000B   22           DB 34
   \   00000C   0F           DB 15
   \   00000D   32           DB 50
   \   00000E   00           DB 0
   \   00000F   00           DB 0
   \   000010   06           DB 6
     70            0,
     71            sizeof(ZMacAssociateInd_t),       // MAC_MLME_ASSOCIATE_IND      1   Associate indication
     72            sizeof(ZMacAssociateCnf_t),       // MAC_MLME_ASSOCIATE_CNF      2   Associate confirm
     73            0,                                // MAC_MLME_DISASSOCIATE_IND   3   Disassociate indication
     74            0,                                // MAC_MLME_DISASSOCIATE_CNF   4   Disassociate confirm
     75            sizeof(macMlmeBeaconNotifyInd_t), // MAC_MLME_BEACON_NOTIFY_IND  5   con notify indication
     76            sizeof(ZMacOrphanInd_t),          // MAC_MLME_ORPHAN_IND         6   Orphan indication
     77            sizeof(ZMacScanCnf_t),            // MAC_MLME_SCAN_CNF           7   Scan confirm
     78            sizeof(ZMacStartCnf_t),           // MAC_MLME_START_CNF          8   Start confirm
     79            0,                                // MAC_MLME_SYNC_LOSS_IND      9   Sync loss indication
     80            sizeof(ZMacPollCnf_t),            // MAC_MLME_POLL_CNF           10  Poll confirm
     81            sizeof(ZMacCommStatusInd_t),      // MAC_MLME_COMM_STATUS_IND    11  Comm status indication
     82            sizeof(ZMacDataCnf_t),            // MAC_MCPS_DATA_CNF           12  Data confirm
     83            sizeof(macMcpsDataInd_t),         // MAC_MCPS_DATA_IND           13  Data indication
     84            0,                                // MAC_MCPS_PURGE_CNF          14  Purge confirm
     85            0,                                // MAC_PWR_ON_CNF              15  Power on confirm
     86            sizeof(ZMacPollInd_t)             // MAC_MLME_POLL_IND           16  Poll indication
     87          };
     88          #endif /* !defined NONWK */
     89          
     90          
     91          /*********************************************************************
     92           * ZMAC Function Pointers
     93           */
     94          
     95          /*
     96           * ZMac Application callback function. This function will be called
     97           * for every MAC message that is received over-the-air or generated
     98           * locally by MAC for the application.
     99           *
    100           * The callback function should return TRUE if it has handled the
    101           * MAC message and no further action should be taken with it. It
    102           * should return FALSE if it has not handled the MAC message and
    103           * normal processing should take place.
    104           *
    105           * NOTE: The processing in this function should be kept to the
    106           *       minimum.
    107           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    108          uint8 (*pZMac_AppCallback)( uint8 *msgPtr ) = (void*)NULL;
   \                     pZMac_AppCallback:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    109          
    110          
    111          /*********************************************************************
    112           * ZMAC Functions
    113           */
    114          
    115          /**************************************************************************************************
    116           * @fn       MAC_CbackEvent()
    117           *
    118           * @brief    convert MAC data confirm and indication to ZMac and send to NWK
    119           *
    120           * @param    pData - pointer to macCbackEvent_t
    121           *
    122           * @return   none
    123           *************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    124          void MAC_CbackEvent(macCbackEvent_t *pData)
   \                     MAC_CbackEvent:
    125          #ifndef MT_MAC_CB_FUNC
    126          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 7
   \   000005   74F9         MOV     A,#-0x7
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   EA           MOV     A,R2
   \   000011   F0           MOVX    @DPTR,A
   \   000012   A3           INC     DPTR
   \   000013   EB           MOV     A,R3
   \   000014   F0           MOVX    @DPTR,A
    127          #if !defined NONWK
    128            uint8 event = pData->hdr.event;
   \   000015   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   000018   E0           MOVX    A,@DPTR
   \   000019   F5..         MOV     ?V3,A
    129            uint16 tmp = zmacCBSizeTable[event];
   \   00001B   F8           MOV     R0,A
   \   00001C   74..         MOV     A,#zmacCBSizeTable & 0xff
   \   00001E   28           ADD     A,R0
   \   00001F   F582         MOV     DPL,A
   \   000021   E4           CLR     A
   \   000022   34..         ADDC    A,#(zmacCBSizeTable >> 8) & 0xff
   \   000024   F583         MOV     DPH,A
   \   000026   E4           CLR     A
   \   000027   93           MOVC    A,@A+DPTR
   \   000028   FE           MOV     R6,A
   \   000029   7402         MOV     A,#0x2
   \   00002B   12....       LCALL   ?XSTACK_DISP0_8
   \   00002E   EE           MOV     A,R6
   \   00002F   F0           MOVX    @DPTR,A
   \   000030   A3           INC     DPTR
   \   000031   E4           CLR     A
   \   000032   F0           MOVX    @DPTR,A
    130            macCbackEvent_t *msgPtr;
    131          
    132            /* If the Network layer will handle a new MAC callback, a non-zero value must be entered in the
    133             * corresponding location in the zmacCBSizeTable[] - thus the table acts as "should handle"?
    134             */
    135            if (tmp == 0)
   \   000033   7402         MOV     A,#0x2
   \   000035   12....       LCALL   ?XSTACK_DISP0_8
   \   000038   E0           MOVX    A,@DPTR
   \   000039   7003         JNZ     $+5
   \   00003B   02....       LJMP    ??MAC_CbackEvent_0 & 0xFFFF
    136            {
    137              return;
    138            }
    139          
    140            // MAC_MCPS_DATA_IND is very special - it is the only event where the MAC does not free *pData.
    141            if ( event == MAC_MCPS_DATA_IND )
   \   00003E   740D         MOV     A,#0xd
   \   000040   65..         XRL     A,?V3
   \   000042   7047         JNZ     ??MAC_CbackEvent_1
    142            {
    143              MAC_MlmeGetReq( MAC_SHORT_ADDRESS, &tmp );
   \   000044                ; Setup parameters for call to function MAC_MlmeGetReq
   \   000044   7402         MOV     A,#0x2
   \   000046   12....       LCALL   ?XSTACK_DISP101_8
   \   000049   7953         MOV     R1,#0x53
   \   00004B   12....       LCALL   `??MAC_MlmeGetReq::?relay`; Banked call to: MAC_MlmeGetReq
    144              if ((tmp == INVALID_NODE_ADDR) || (tmp == NWK_BROADCAST_SHORTADDR_DEVALL) ||
    145                  (pData->dataInd.msdu.len == 0))
   \   00004E   7402         MOV     A,#0x2
   \   000050   12....       LCALL   ?XSTACK_DISP0_8
   \   000053   E0           MOVX    A,@DPTR
   \   000054   64FE         XRL     A,#0xfe
   \   000056   7003         JNZ     ??MAC_CbackEvent_2
   \   000058   A3           INC     DPTR
   \   000059   E0           MOVX    A,@DPTR
   \   00005A   F4           CPL     A
   \                     ??MAC_CbackEvent_2:
   \   00005B   7003         JNZ     $+5
   \   00005D   02....       LJMP    ??MAC_CbackEvent_3 & 0xFFFF
   \   000060   7402         MOV     A,#0x2
   \   000062   12....       LCALL   ?XSTACK_DISP0_8
   \   000065   E0           MOVX    A,@DPTR
   \   000066   F4           CPL     A
   \   000067   7003         JNZ     ??MAC_CbackEvent_4
   \   000069   A3           INC     DPTR
   \   00006A   E0           MOVX    A,@DPTR
   \   00006B   F4           CPL     A
   \                     ??MAC_CbackEvent_4:
   \   00006C   7003         JNZ     $+5
   \   00006E   02....       LJMP    ??MAC_CbackEvent_3 & 0xFFFF
   \   000071   12....       LCALL   ?Subroutine0 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   000074   A3           INC     DPTR
   \   000075   E0           MOVX    A,@DPTR
   \   000076   7003         JNZ     $+5
   \   000078   02....       LJMP    ??MAC_CbackEvent_3 & 0xFFFF
    146              {
    147                mac_msg_deallocate( (uint8 **)&pData );
    148                return;
    149              }
    150              msgPtr = pData;
   \   00007B   85..82       MOV     DPL,?XSP + 0
   \   00007E   85..83       MOV     DPH,?XSP + 1
   \   000081   E0           MOVX    A,@DPTR
   \   000082   F5..         MOV     ?V4,A
   \   000084   A3           INC     DPTR
   \   000085   E0           MOVX    A,@DPTR
   \   000086   F5..         MOV     ?V5,A
   \   000088   02....       LJMP    ??MAC_CbackEvent_5 & 0xFFFF
    151            }
    152            else
    153            {
    154              if (event == MAC_MLME_BEACON_NOTIFY_IND )
   \                     ??MAC_CbackEvent_1:
   \   00008B   7405         MOV     A,#0x5
   \   00008D   65..         XRL     A,?V3
   \   00008F   7015         JNZ     ??MAC_CbackEvent_6
    155              {
    156                tmp += sizeof(macPanDesc_t) + pData->beaconNotifyInd.sduLength;
   \   000091   85..82       MOV     DPL,?XSP + 0
   \   000094   85..83       MOV     DPH,?XSP + 1
   \   000097   E0           MOVX    A,@DPTR
   \   000098   F8           MOV     R0,A
   \   000099   12....       LCALL   ?Subroutine2 & 0xFFFF
    157              }
   \                     ??CrossCallReturnLabel_4:
   \   00009C   7900         MOV     R1,#0x0
   \   00009E   2421         ADD     A,#0x21
   \   0000A0   F8           MOV     R0,A
   \   0000A1   502D         JNC     ??MAC_CbackEvent_7
   \   0000A3   09           INC     R1
   \   0000A4   802A         SJMP    ??MAC_CbackEvent_7
    158              else if (event == MAC_MLME_SCAN_CNF)
   \                     ??MAC_CbackEvent_6:
   \   0000A6   7407         MOV     A,#0x7
   \   0000A8   65..         XRL     A,?V3
   \   0000AA   7030         JNZ     ??MAC_CbackEvent_8
    159              {
    160                if (pData->scanCnf.scanType == ZMAC_ED_SCAN)
   \   0000AC   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   0000AF   700F         JNZ     ??MAC_CbackEvent_9
    161                {
    162                  tmp += ZMAC_ED_SCAN_MAXCHANNELS;
   \   0000B1   7402         MOV     A,#0x2
   \   0000B3   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B6   E0           MOVX    A,@DPTR
   \   0000B7   241B         ADD     A,#0x1b
   \   0000B9   F0           MOVX    @DPTR,A
   \   0000BA   A3           INC     DPTR
   \   0000BB   E0           MOVX    A,@DPTR
   \   0000BC   3400         ADDC    A,#0x0
   \   0000BE   801B         SJMP    ??MAC_CbackEvent_10
    163                }
    164                else
    165                {
    166                  tmp += sizeof( ZMacPanDesc_t ) * pData->scanCnf.resultListSize;
   \                     ??MAC_CbackEvent_9:
   \   0000C0   85..82       MOV     DPL,?XSP + 0
   \   0000C3   85..83       MOV     DPH,?XSP + 1
   \   0000C6   12....       LCALL   ?Subroutine2 & 0xFFFF
    167                }
    168              }
   \                     ??CrossCallReturnLabel_5:
   \   0000C9   75F021       MOV     B,#0x21
   \   0000CC   A4           MUL     AB
   \   0000CD   F8           MOV     R0,A
   \   0000CE   A9F0         MOV     R1,B
   \                     ??MAC_CbackEvent_7:
   \   0000D0   7402         MOV     A,#0x2
   \   0000D2   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D5   E0           MOVX    A,@DPTR
   \   0000D6   28           ADD     A,R0
   \   0000D7   F0           MOVX    @DPTR,A
   \   0000D8   A3           INC     DPTR
   \   0000D9   E0           MOVX    A,@DPTR
   \   0000DA   39           ADDC    A,R1
   \                     ??MAC_CbackEvent_10:
   \   0000DB   F0           MOVX    @DPTR,A
    169          
    170              if ( !(msgPtr = (macCbackEvent_t *)osal_msg_allocate(tmp)) )
   \                     ??MAC_CbackEvent_8:
   \   0000DC                ; Setup parameters for call to function osal_msg_allocate
   \   0000DC   7402         MOV     A,#0x2
   \   0000DE   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E1   E0           MOVX    A,@DPTR
   \   0000E2   FA           MOV     R2,A
   \   0000E3   A3           INC     DPTR
   \   0000E4   E0           MOVX    A,@DPTR
   \   0000E5   FB           MOV     R3,A
   \   0000E6   12....       LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   0000E9   8A..         MOV     ?V4,R2
   \   0000EB   8B..         MOV     ?V5,R3
   \   0000ED   EA           MOV     A,R2
   \   0000EE   45..         ORL     A,?V5
   \   0000F0   704F         JNZ     ??MAC_CbackEvent_11
    171              {
    172                // Not enough memory. If data confirm - try again
    173                if ( event == MAC_MCPS_DATA_CNF )
   \   0000F2   740C         MOV     A,#0xc
   \   0000F4   65..         XRL     A,?V3
   \   0000F6   6003         JZ      $+5
   \   0000F8   02....       LJMP    ??MAC_CbackEvent_0 & 0xFFFF
    174                {
    175                  halIntState_t intState;
    176          
    177                  // This is not normally deallocated here because the pZMac_AppCallback()
    178                  // application may need it.
    179                  HAL_ENTER_CRITICAL_SECTION( intState );  // Hold off interrupts.
   \   0000FB   A2AF         MOV     C,0xa8.7
   \   0000FD   E4           CLR     A
   \   0000FE   33           RLC     A
   \   0000FF   F5..         MOV     ?V2,A
   \   000101   C2AF         CLR     0xa8.7
    180          
    181                  mac_msg_deallocate( (uint8**)&(pData->dataCnf.pDataReq) );
   \   000103                ; Setup parameters for call to function mac_msg_deallocate
   \   000103   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   000106   12....       LCALL   `??mac_msg_deallocate::?relay`; Banked call to: mac_msg_deallocate
    182                  if ( !(msgPtr = (macCbackEvent_t *)osal_msg_allocate(tmp)) )
   \   000109                ; Setup parameters for call to function osal_msg_allocate
   \   000109   7402         MOV     A,#0x2
   \   00010B   12....       LCALL   ?XSTACK_DISP0_8
   \   00010E   E0           MOVX    A,@DPTR
   \   00010F   FA           MOV     R2,A
   \   000110   A3           INC     DPTR
   \   000111   E0           MOVX    A,@DPTR
   \   000112   FB           MOV     R3,A
   \   000113   12....       LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   000116   8A..         MOV     ?V4,R2
   \   000118   8B..         MOV     ?V5,R3
   \   00011A   EA           MOV     A,R2
   \   00011B   45..         ORL     A,?V5
   \   00011D   700F         JNZ     ??MAC_CbackEvent_12
    183                  {
    184                    // Still no allocation, something is wrong
    185                    HAL_EXIT_CRITICAL_SECTION( intState );   // Re-enable interrupts.
   \   00011F   7404         MOV     A,#0x4
   \   000121   12....       LCALL   ?XSTACK_DISP0_8
   \   000124   E5..         MOV     A,?V2
   \   000126   F0           MOVX    @DPTR,A
   \   000127   A2E0         MOV     C,0xE0 /* A   */.0
   \   000129   92AF         MOV     0xa8.7,C
    186                    return;
   \   00012B   02....       LJMP    ??MAC_CbackEvent_0 & 0xFFFF
    187                  }
    188                  HAL_EXIT_CRITICAL_SECTION( intState );   // Re-enable interrupts.
   \                     ??MAC_CbackEvent_12:
   \   00012E   7404         MOV     A,#0x4
   \   000130   12....       LCALL   ?XSTACK_DISP0_8
   \   000133   E5..         MOV     A,?V2
   \   000135   F0           MOVX    @DPTR,A
   \   000136   A2E0         MOV     C,0xE0 /* A   */.0
   \   000138   92AF         MOV     0xa8.7,C
    189                  pData->dataCnf.pDataReq = NULL;
   \   00013A   12....       LCALL   ?Subroutine0 & 0xFFFF
    190                }
    191                else
    192                {
    193                  // This message is dropped
    194                  return;
    195                }
    196              }
   \                     ??CrossCallReturnLabel_1:
   \   00013D   E4           CLR     A
   \   00013E   F0           MOVX    @DPTR,A
   \   00013F   A3           INC     DPTR
   \   000140   F0           MOVX    @DPTR,A
    197              osal_memcpy(msgPtr, pData, zmacCBSizeTable[event]);
   \                     ??MAC_CbackEvent_11:
   \   000141                ; Setup parameters for call to function osal_memcpy
   \   000141   85..82       MOV     DPL,?XSP + 0
   \   000144   85..83       MOV     DPH,?XSP + 1
   \   000147   12....       LCALL   ?Subroutine6 & 0xFFFF
    198            }
   \                     ??CrossCallReturnLabel_12:
   \   00014A   75..00       MOV     ?V2,#0x0
   \   00014D   78..         MOV     R0,#?V0
   \   00014F   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000152   EE           MOV     A,R6
   \   000153   FC           MOV     R4,A
   \   000154   7D00         MOV     R5,#0x0
   \   000156   AA..         MOV     R2,?V4
   \   000158   AB..         MOV     R3,?V5
   \   00015A   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00015D   7403         MOV     A,#0x3
   \   00015F   12....       LCALL   ?DEALLOC_XSTACK8
    199          
    200            if ( event == MAC_MLME_BEACON_NOTIFY_IND )
   \   000162   E5..         MOV     A,?V4
   \   000164   2409         ADD     A,#0x9
   \   000166   F5..         MOV     ?V6,A
   \   000168   E4           CLR     A
   \   000169   35..         ADDC    A,?V5
   \   00016B   F5..         MOV     ?V7,A
   \   00016D   7405         MOV     A,#0x5
   \   00016F   65..         XRL     A,?V3
   \   000171   7075         JNZ     ??MAC_CbackEvent_13
    201            {
    202              macMlmeBeaconNotifyInd_t *pBeacon = (macMlmeBeaconNotifyInd_t*)msgPtr;
    203          
    204              osal_memcpy(pBeacon+1, pBeacon->pPanDesc, sizeof(macPanDesc_t));
   \   000173   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   000176   A3           INC     DPTR
   \   000177   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   00017A   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00017D   7C21         MOV     R4,#0x21
   \   00017F   7D00         MOV     R5,#0x0
   \   000181   EE           MOV     A,R6
   \   000182   FA           MOV     R2,A
   \   000183   EF           MOV     A,R7
   \   000184   FB           MOV     R3,A
   \   000185   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000188   7403         MOV     A,#0x3
   \   00018A   12....       LCALL   ?DEALLOC_XSTACK8
    205              pBeacon->pPanDesc = (macPanDesc_t *)(pBeacon+1);
   \   00018D   85..82       MOV     DPL,?V4
   \   000190   85..83       MOV     DPH,?V5
   \   000193   A3           INC     DPTR
   \   000194   A3           INC     DPTR
   \   000195   A3           INC     DPTR
   \   000196   EE           MOV     A,R6
   \   000197   F0           MOVX    @DPTR,A
   \   000198   A3           INC     DPTR
   \   000199   EF           MOV     A,R7
   \   00019A   F0           MOVX    @DPTR,A
    206              osal_memcpy(pBeacon->pPanDesc+1, pBeacon->pSdu, pBeacon->sduLength);
   \   00019B                ; Setup parameters for call to function osal_memcpy
   \   00019B   85..82       MOV     DPL,?V6
   \   00019E   85..83       MOV     DPH,?V7
   \   0001A1   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   0001A4   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0001A7   85..82       MOV     DPL,?V4
   \   0001AA   85..83       MOV     DPH,?V5
   \   0001AD   A3           INC     DPTR
   \   0001AE   A3           INC     DPTR
   \   0001AF   A3           INC     DPTR
   \   0001B0   A3           INC     DPTR
   \   0001B1   A3           INC     DPTR
   \   0001B2   A3           INC     DPTR
   \   0001B3   A3           INC     DPTR
   \   0001B4   A3           INC     DPTR
   \   0001B5   E0           MOVX    A,@DPTR
   \   0001B6   FC           MOV     R4,A
   \   0001B7   7D00         MOV     R5,#0x0
   \   0001B9   EE           MOV     A,R6
   \   0001BA   2421         ADD     A,#0x21
   \   0001BC   FA           MOV     R2,A
   \   0001BD   E4           CLR     A
   \   0001BE   3F           ADDC    A,R7
   \   0001BF   FB           MOV     R3,A
   \   0001C0   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0001C3   7403         MOV     A,#0x3
   \   0001C5   12....       LCALL   ?DEALLOC_XSTACK8
    207              pBeacon->pSdu = (uint8 *)(pBeacon->pPanDesc+1);
   \   0001C8   85..82       MOV     DPL,?V4
   \   0001CB   85..83       MOV     DPH,?V5
   \   0001CE   A3           INC     DPTR
   \   0001CF   A3           INC     DPTR
   \   0001D0   A3           INC     DPTR
   \   0001D1   E0           MOVX    A,@DPTR
   \   0001D2   2421         ADD     A,#0x21
   \   0001D4   F8           MOV     R0,A
   \   0001D5   A3           INC     DPTR
   \   0001D6   E0           MOVX    A,@DPTR
   \   0001D7   3400         ADDC    A,#0x0
   \   0001D9   F9           MOV     R1,A
   \   0001DA   85..82       MOV     DPL,?V6
   \   0001DD   85..83       MOV     DPH,?V7
   \   0001E0   E8           MOV     A,R0
   \   0001E1   F0           MOVX    @DPTR,A
   \   0001E2   A3           INC     DPTR
   \   0001E3   E9           MOV     A,R1
   \   0001E4   F0           MOVX    @DPTR,A
   \   0001E5   02....       LJMP    ??MAC_CbackEvent_5 & 0xFFFF
    208            }
    209            else if (event == MAC_MLME_SCAN_CNF)
   \                     ??MAC_CbackEvent_13:
   \   0001E8   7407         MOV     A,#0x7
   \   0001EA   65..         XRL     A,?V3
   \   0001EC   707A         JNZ     ??MAC_CbackEvent_5
    210            {
    211              macMlmeScanCnf_t *pScan = (macMlmeScanCnf_t*)msgPtr;
    212          
    213              if (ZMac_ScanBuf != NULL)
   \   0001EE   90....       MOV     DPTR,#ZMac_ScanBuf
   \   0001F1   E0           MOVX    A,@DPTR
   \   0001F2   F8           MOV     R0,A
   \   0001F3   A3           INC     DPTR
   \   0001F4   E0           MOVX    A,@DPTR
   \   0001F5   F9           MOV     R1,A
   \   0001F6   E8           MOV     A,R0
   \   0001F7   49           ORL     A,R1
   \   0001F8   606E         JZ      ??MAC_CbackEvent_5
    214              {
    215                void *pTmp = ZMac_ScanBuf;
   \   0001FA   7405         MOV     A,#0x5
   \   0001FC   12....       LCALL   ?XSTACK_DISP0_8
   \   0001FF   E8           MOV     A,R0
   \   000200   F0           MOVX    @DPTR,A
   \   000201   A3           INC     DPTR
   \   000202   E9           MOV     A,R1
   \   000203   F0           MOVX    @DPTR,A
    216                ZMac_ScanBuf = NULL;
   \   000204   90....       MOV     DPTR,#ZMac_ScanBuf
   \   000207   E4           CLR     A
   \   000208   F0           MOVX    @DPTR,A
   \   000209   A3           INC     DPTR
   \   00020A   F0           MOVX    @DPTR,A
    217          
    218                if (pScan->scanType == ZMAC_ED_SCAN)
   \   00020B   7405         MOV     A,#0x5
   \   00020D   12....       LCALL   ?XSTACK_DISP0_8
   \   000210   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   000213   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   000216   E0           MOVX    A,@DPTR
   \   000217   85..82       MOV     DPL,?V6
   \   00021A   85..83       MOV     DPH,?V7
   \   00021D   7010         JNZ     ??MAC_CbackEvent_14
    219                {
    220                  pScan->result.pEnergyDetect = (uint8*) (pScan + 1);
   \   00021F   EE           MOV     A,R6
   \   000220   F0           MOVX    @DPTR,A
   \   000221   A3           INC     DPTR
   \   000222   EF           MOV     A,R7
   \   000223   F0           MOVX    @DPTR,A
    221                  osal_memcpy(pScan->result.pEnergyDetect, pTmp, ZMAC_ED_SCAN_MAXCHANNELS);
   \   000224                ; Setup parameters for call to function osal_memcpy
   \   000224   78..         MOV     R0,#?V0
   \   000226   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000229   7C1B         MOV     R4,#0x1b
   \   00022B   7D00         MOV     R5,#0x0
   \   00022D   8020         SJMP    ??MAC_CbackEvent_15
    222                }
    223                else
    224                {
    225                  pScan->result.pPanDescriptor = (macPanDesc_t*) (pScan + 1);
   \                     ??MAC_CbackEvent_14:
   \   00022F   EE           MOV     A,R6
   \   000230   F0           MOVX    @DPTR,A
   \   000231   A3           INC     DPTR
   \   000232   EF           MOV     A,R7
   \   000233   F0           MOVX    @DPTR,A
    226                  osal_memcpy(pScan + 1, pTmp, sizeof( ZMacPanDesc_t ) * pScan->resultListSize);
   \   000234                ; Setup parameters for call to function osal_memcpy
   \   000234   78..         MOV     R0,#?V0
   \   000236   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000239   85..82       MOV     DPL,?V4
   \   00023C   85..83       MOV     DPH,?V5
   \   00023F   A3           INC     DPTR
   \   000240   A3           INC     DPTR
   \   000241   A3           INC     DPTR
   \   000242   A3           INC     DPTR
   \   000243   A3           INC     DPTR
   \   000244   A3           INC     DPTR
   \   000245   A3           INC     DPTR
   \   000246   A3           INC     DPTR
   \   000247   E0           MOVX    A,@DPTR
   \   000248   75F021       MOV     B,#0x21
   \   00024B   A4           MUL     AB
   \   00024C   FC           MOV     R4,A
   \   00024D   ADF0         MOV     R5,B
   \                     ??MAC_CbackEvent_15:
   \   00024F   EE           MOV     A,R6
   \   000250   FA           MOV     R2,A
   \   000251   EF           MOV     A,R7
   \   000252   FB           MOV     R3,A
   \   000253   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000256   7403         MOV     A,#0x3
   \   000258   12....       LCALL   ?DEALLOC_XSTACK8
    227                }
    228          
    229                osal_mem_free(pTmp);
   \   00025B                ; Setup parameters for call to function osal_mem_free
   \   00025B   7405         MOV     A,#0x5
   \   00025D   12....       LCALL   ?XSTACK_DISP0_8
   \   000260   E0           MOVX    A,@DPTR
   \   000261   FA           MOV     R2,A
   \   000262   A3           INC     DPTR
   \   000263   E0           MOVX    A,@DPTR
   \   000264   FB           MOV     R3,A
   \   000265   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    230              }
    231            }
    232          
    233            if ( ( pZMac_AppCallback == NULL ) || ( pZMac_AppCallback( (uint8 *)msgPtr ) == FALSE ) )
   \                     ??MAC_CbackEvent_5:
   \   000268   90....       MOV     DPTR,#pZMac_AppCallback
   \   00026B   E0           MOVX    A,@DPTR
   \   00026C   F8           MOV     R0,A
   \   00026D   A3           INC     DPTR
   \   00026E   E0           MOVX    A,@DPTR
   \   00026F   F9           MOV     R1,A
   \   000270   E8           MOV     A,R0
   \   000271   49           ORL     A,R1
   \   000272   6012         JZ      ??MAC_CbackEvent_16
   \   000274                ; Setup parameters for indirect call
   \   000274   AA..         MOV     R2,?V4
   \   000276   AB..         MOV     R3,?V5
   \   000278   E0           MOVX    A,@DPTR
   \   000279   F583         MOV     DPH,A
   \   00027B   8882         MOV     DPL,R0
   \   00027D   12....       LCALL   ?CALL_IND
   \   000280   E9           MOV     A,R1
   \   000281   6003         JZ      $+5
   \   000283   02....       LJMP    ??MAC_CbackEvent_17 & 0xFFFF
    234            {
    235              // Filter out non-zigbee packets
    236              if ( event == MAC_MCPS_DATA_IND )
   \                     ??MAC_CbackEvent_16:
   \   000286   740D         MOV     A,#0xd
   \   000288   65..         XRL     A,?V3
   \   00028A   7074         JNZ     ??MAC_CbackEvent_18
    237              {
    238                uint8 fcFrameType = (pData->dataInd.msdu.p[0] & 0x03);
    239                uint8 fcProtoVer = ((pData->dataInd.msdu.p[0] >> 2) & 0x0F);
    240                uint8 fcReserve = (pData->dataInd.msdu.p[1] & 0xE0);
   \   00028C   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   00028F   F8           MOV     R0,A
   \   000290   A3           INC     DPTR
   \   000291   E0           MOVX    A,@DPTR
   \   000292   F9           MOV     R1,A
   \   000293   8882         MOV     DPL,R0
   \   000295   8983         MOV     DPH,R1
   \   000297   A3           INC     DPTR
   \   000298   E0           MOVX    A,@DPTR
   \   000299   FA           MOV     R2,A
    241                if ( (fcFrameType > 0x01) || (fcProtoVer != _NIB.nwkProtocolVersion) || (fcReserve != 0) 
    242                    || (pData->dataInd.mac.srcAddr.addrMode != SADDR_MODE_SHORT) )
   \   00029A   8882         MOV     DPL,R0
   \   00029C   8983         MOV     DPH,R1
   \   00029E   E0           MOVX    A,@DPTR
   \   00029F   F8           MOV     R0,A
   \   0002A0   7403         MOV     A,#0x3
   \   0002A2   58           ANL     A,R0
   \   0002A3   C3           CLR     C
   \   0002A4   9402         SUBB    A,#0x2
   \   0002A6   5052         JNC     ??MAC_CbackEvent_3
   \   0002A8   E8           MOV     A,R0
   \   0002A9   13           RRC     A
   \   0002AA   13           RRC     A
   \   0002AB   543F         ANL     A,#0x3f
   \   0002AD   540F         ANL     A,#0xf
   \   0002AF   F8           MOV     R0,A
   \   0002B0   90....       MOV     DPTR,#_NIB + 17
   \   0002B3   E0           MOVX    A,@DPTR
   \   0002B4   68           XRL     A,R0
   \   0002B5   7043         JNZ     ??MAC_CbackEvent_3
   \   0002B7   74E0         MOV     A,#-0x20
   \   0002B9   5A           ANL     A,R2
   \   0002BA   703E         JNZ     ??MAC_CbackEvent_3
   \   0002BC   85..82       MOV     DPL,?XSP + 0
   \   0002BF   85..83       MOV     DPH,?XSP + 1
   \   0002C2   E0           MOVX    A,@DPTR
   \   0002C3   F8           MOV     R0,A
   \   0002C4   A3           INC     DPTR
   \   0002C5   E0           MOVX    A,@DPTR
   \   0002C6   C8           XCH     A,R0
   \   0002C7   241A         ADD     A,#0x1a
   \   0002C9   F582         MOV     DPL,A
   \   0002CB   E4           CLR     A
   \   0002CC   38           ADDC    A,R0
   \   0002CD   F583         MOV     DPH,A
   \   0002CF   E0           MOVX    A,@DPTR
   \   0002D0   6402         XRL     A,#0x2
   \   0002D2   7026         JNZ     ??MAC_CbackEvent_3
    243                {
    244                  // Drop the message 
    245                  mac_msg_deallocate( (uint8 **)&pData );
    246                  return;
    247                }
    248                else if ( pData->dataInd.mac.dstAddr.addr.shortAddr == 0xFFFF )
   \   0002D4   85..82       MOV     DPL,?XSP + 0
   \   0002D7   85..83       MOV     DPH,?XSP + 1
   \   0002DA   E0           MOVX    A,@DPTR
   \   0002DB   F8           MOV     R0,A
   \   0002DC   A3           INC     DPTR
   \   0002DD   E0           MOVX    A,@DPTR
   \   0002DE   C8           XCH     A,R0
   \   0002DF   241B         ADD     A,#0x1b
   \   0002E1   F582         MOV     DPL,A
   \   0002E3   E4           CLR     A
   \   0002E4   38           ADDC    A,R0
   \   0002E5   F583         MOV     DPH,A
   \   0002E7   E0           MOVX    A,@DPTR
   \   0002E8   F4           CPL     A
   \   0002E9   7003         JNZ     ??MAC_CbackEvent_19
   \   0002EB   A3           INC     DPTR
   \   0002EC   E0           MOVX    A,@DPTR
   \   0002ED   F4           CPL     A
   \                     ??MAC_CbackEvent_19:
   \   0002EE   7010         JNZ     ??MAC_CbackEvent_18
    249                {
    250                  // Send the messsage to a special broadcast queue
    251                  if ( nwk_broadcastSend( (uint8 *)msgPtr ) == SUCCESS )
   \   0002F0                ; Setup parameters for call to function nwk_broadcastSend
   \   0002F0   AA..         MOV     R2,?V4
   \   0002F2   AB..         MOV     R3,?V5
   \   0002F4   12....       LCALL   `??nwk_broadcastSend::?relay`; Banked call to: nwk_broadcastSend
   \   0002F7   E9           MOV     A,R1
   \   0002F8   601E         JZ      ??MAC_CbackEvent_0
    252                  {
    253                    return;
    254                  }
    255                  else
    256                  {
    257                    // Drop the message, too many broadcast messages to process
    258                    mac_msg_deallocate( (uint8 **)&pData );
   \                     ??MAC_CbackEvent_3:
   \   0002FA                ; Setup parameters for call to function mac_msg_deallocate
   \   0002FA   AA..         MOV     R2,?XSP + 0
   \   0002FC   AB..         MOV     R3,?XSP + 1
   \   0002FE   8015         SJMP    ??CrossCallReturnLabel_7
    259                    return;
    260                  }
    261                }
    262              }
    263              
    264              // Application hasn't already processed this message. Send it to NWK task.
    265              osal_msg_send( NWK_TaskID, (uint8 *)msgPtr );
   \                     ??MAC_CbackEvent_18:
   \   000300                ; Setup parameters for call to function osal_msg_send
   \   000300   AA..         MOV     R2,?V4
   \   000302   AB..         MOV     R3,?V5
   \   000304   90....       MOV     DPTR,#NWK_TaskID
   \   000307   E0           MOVX    A,@DPTR
   \   000308   F9           MOV     R1,A
   \   000309   12....       LCALL   `??osal_msg_send::?relay`; Banked call to: osal_msg_send
    266            }
    267          
    268            if ( event == MAC_MCPS_DATA_CNF )
   \                     ??MAC_CbackEvent_17:
   \   00030C   740C         MOV     A,#0xc
   \   00030E   65..         XRL     A,?V3
   \   000310   7006         JNZ     ??MAC_CbackEvent_0
    269            {
    270              // If the application needs 'pDataReq' then we cannot free it here.
    271              // The application must free it after using it. Note that 'pDataReq'
    272              // is of macMcpsDataReq_t (and not ZMacDataReq_t) type.
    273          
    274              mac_msg_deallocate( (uint8**)&(pData->dataCnf.pDataReq) );
   \   000312                ; Setup parameters for call to function mac_msg_deallocate
   \   000312   12....       LCALL   ?Subroutine3 & 0xFFFF
    275            }
   \                     ??CrossCallReturnLabel_7:
   \   000315   12....       LCALL   `??mac_msg_deallocate::?relay`; Banked call to: mac_msg_deallocate
    276          #endif
    277          }
   \                     ??MAC_CbackEvent_0:
   \   000318   7407         MOV     A,#0x7
   \   00031A   12....       LCALL   ?DEALLOC_XSTACK8
   \   00031D   7F08         MOV     R7,#0x8
   \   00031F   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   000322                REQUIRE _A_IEN0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   E5..         MOV     A,?V4
   \   000002   240B         ADD     A,#0xb
   \   000004   FE           MOV     R6,A
   \   000005   E4           CLR     A
   \   000006   35..         ADDC    A,?V5
   \   000008   FF           MOV     R7,A
   \   000009                ; Setup parameters for call to function osal_memcpy
   \   000009   85..82       MOV     DPL,?V4
   \   00000C   85..83       MOV     DPH,?V5
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   000003   78..         MOV     R0,#?V0
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V1,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006   E0           MOVX    A,@DPTR
   \   000007   2403         ADD     A,#0x3
   \   000009   FA           MOV     R2,A
   \   00000A   A3           INC     DPTR
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   3400         ADDC    A,#0x0
   \   00000E   FB           MOV     R3,A
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   A3           INC     DPTR
   \   000001   E0           MOVX    A,@DPTR
   \   000002   C8           XCH     A,R0
   \   000003   2408         ADD     A,#0x8
   \   000005   F582         MOV     DPL,A
   \   000007   E4           CLR     A
   \   000008   38           ADDC    A,R0
   \   000009   F583         MOV     DPH,A
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   000003   A3           INC     DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006   E0           MOVX    A,@DPTR
   \   000007   F8           MOV     R0,A
   \   000008   A3           INC     DPTR
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   F583         MOV     DPH,A
   \   00000C   8882         MOV     DPL,R0
   \   00000E   22           RET
    278          #else  // ifdef MT_MAC_CB_FUNC
    279          {
    280            /* Check if MT has subscribed for this callback If so, pass it as an event to MonitorTest */
    281            switch (pData->hdr.event)
    282            {
    283              case MAC_MLME_ASSOCIATE_IND:
    284                if ( _macCallbackSub & CB_ID_NWK_ASSOCIATE_IND )
    285                  nwk_MTCallbackSubNwkAssociateInd ( (ZMacAssociateInd_t *)pData );
    286                break;
    287          
    288              case MAC_MLME_ASSOCIATE_CNF:
    289                if ( _macCallbackSub & CB_ID_NWK_ASSOCIATE_CNF )
    290                  nwk_MTCallbackSubNwkAssociateCnf ( (ZMacAssociateCnf_t *)pData );
    291                break;
    292          
    293              case MAC_MLME_DISASSOCIATE_IND:
    294                if ( _macCallbackSub & CB_ID_NWK_DISASSOCIATE_IND )
    295                  nwk_MTCallbackSubNwkDisassociateInd ( (ZMacDisassociateInd_t *)pData );
    296                break;
    297          
    298              case MAC_MLME_DISASSOCIATE_CNF:
    299                if ( _macCallbackSub & CB_ID_NWK_DISASSOCIATE_CNF )
    300                  nwk_MTCallbackSubNwkDisassociateCnf ( (ZMacDisassociateCnf_t *)pData );
    301                break;
    302          
    303              case MAC_MLME_BEACON_NOTIFY_IND:
    304                if ( _macCallbackSub & CB_ID_NWK_BEACON_NOTIFY_IND )
    305                  nwk_MTCallbackSubNwkBeaconNotifyInd( (ZMacBeaconNotifyInd_t *)pData );
    306                break;
    307          
    308              case MAC_MLME_ORPHAN_IND:
    309                if ( _macCallbackSub & CB_ID_NWK_ORPHAN_IND )
    310                  nwk_MTCallbackSubNwkOrphanInd( (ZMacOrphanInd_t *) pData );
    311                break;
    312          
    313              case MAC_MLME_SCAN_CNF:
    314                if ( _macCallbackSub & CB_ID_NWK_SCAN_CNF )
    315                {
    316                  pData->scanCnf.result.pEnergyDetect = ZMac_ScanBuf;
    317                  nwk_MTCallbackSubNwkScanCnf ( (ZMacScanCnf_t *) pData );
    318                }
    319          
    320                if (ZMac_ScanBuf != NULL)
    321                {
    322                  void *pTmp = ZMac_ScanBuf;
    323                  ZMac_ScanBuf = NULL;
    324                  osal_mem_free(pTmp);
    325                }
    326                break;
    327          
    328              case MAC_MLME_START_CNF:
    329                if ( _macCallbackSub & CB_ID_NWK_START_CNF )
    330                  nwk_MTCallbackSubNwkStartCnf ( pData->hdr.status );
    331                break;
    332          
    333              case MAC_MLME_SYNC_LOSS_IND:
    334                if ( _macCallbackSub & CB_ID_NWK_SYNC_LOSS_IND )
    335                 nwk_MTCallbackSubNwkSyncLossInd( (ZMacSyncLossInd_t *) pData );
    336                break;
    337          
    338              case MAC_MLME_POLL_CNF:
    339                if ( _macCallbackSub & CB_ID_NWK_POLL_CNF )
    340                   nwk_MTCallbackSubNwkPollCnf( pData->hdr.status );
    341                break;
    342          
    343              case MAC_MLME_COMM_STATUS_IND:
    344                if ( _macCallbackSub & CB_ID_NWK_COMM_STATUS_IND )
    345                  nwk_MTCallbackSubCommStatusInd ( (ZMacCommStatusInd_t *) pData );
    346                break;
    347          
    348              case MAC_MCPS_DATA_CNF:
    349                mac_msg_deallocate((uint8**)&pData->dataCnf.pDataReq);
    350          
    351                if ( _macCallbackSub & CB_ID_NWK_DATA_CNF )
    352                  nwk_MTCallbackSubNwkDataCnf( (ZMacDataCnf_t *) pData );
    353                break;
    354          
    355              case MAC_MCPS_DATA_IND:
    356                  {
    357                    /*
    358                       Data Ind is unconventional: to save an alloc/copy, reuse the MAC
    359                       buffer and re-organize the contents into ZMAC format.
    360                    */
    361                    ZMacDataInd_t *pDataInd = (ZMacDataInd_t *) pData;
    362                    uint8 event, status, len, *msdu;
    363          
    364                    /* Store parameters */
    365                    event = pData->hdr.event;
    366                    status = pData->hdr.status;
    367                    len = pData->dataInd.msdu.len;
    368                    msdu = pData->dataInd.msdu.p;
    369          
    370                    /* Copy header */
    371                    osal_memcpy(&pDataInd->SrcAddr, &pData->dataInd.mac, sizeof(ZMacDataInd_t) - sizeof(ZMacEventHdr_t));
    372          
    373                    /* Security - set to zero for now*/
    374                    pDataInd->Sec.SecurityLevel = false;
    375          
    376                    /* Restore parameters */
    377                    pDataInd->hdr.Status = status;
    378                    pDataInd->hdr.Event = event;
    379                    pDataInd->msduLength = len;
    380          
    381                    if (len)
    382                      pDataInd->msdu = msdu;
    383                    else
    384                      pDataInd->msdu = NULL;
    385          
    386                    if ( _macCallbackSub & CB_ID_NWK_DATA_IND )
    387                      nwk_MTCallbackSubNwkDataInd ( pDataInd );
    388          
    389                    /* free buffer */
    390                    mac_msg_deallocate( (uint8 **)&pData );
    391                  }
    392                  break;
    393          
    394              case MAC_MCPS_PURGE_CNF:
    395                if ( _macCallbackSub & CB_ID_NWK_PURGE_CNF )
    396                  nwk_MTCallbackSubNwkPurgeCnf( (ZMacPurgeCnf_t *) pData);
    397                break;
    398          
    399              default:
    400                break;
    401            }
    402          }
    403          #endif
    404          
    405          /********************************************************************************************************
    406           * @fn      MAC_CbackCheckPending
    407           *
    408           * @brief   Return number of pending indirect msg
    409           *
    410           * @param   None
    411           *
    412           * @return  Number of indirect msg holding
    413           ********************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    414          uint8 MAC_CbackCheckPending(void)
   \                     MAC_CbackCheckPending:
    415          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    416          #if !defined (NONWK)
    417            if ( ZSTACK_ROUTER_BUILD )
    418            {
    419              return (nwkDB_ReturnIndirectHoldingCnt());
    420            }
    421            else
    422            {
    423              return (0);
   \   000000   7900         MOV     R1,#0x0
   \   000002   02....       LJMP    ?BRET
    424            }
    425          #else
    426            return (0);
    427          #endif
    428          }

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MAC_CbackEvent::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MAC_CbackEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MAC_CbackCheckPending::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MAC_CbackCheckPending

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0      0   MAC_CbackCheckPending
      1     26   MAC_CbackEvent
        0     23   -> MAC_MlmeGetReq
        0     23   -> mac_msg_deallocate
        0     23   -> nwk_broadcastSend
        0     23   -> osal_mem_free
        0     26   -> osal_memcpy
        0     23   -> osal_msg_allocate
        0     23   -> osal_msg_send


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       5  ?Subroutine0
       5  ?Subroutine1
      13  ?Subroutine2
      16  ?Subroutine3
       6  ?Subroutine4
      18  ?Subroutine5
       8  ?Subroutine6
       6  ?Subroutine7
      15  ?Subroutine8
       5  MAC_CbackCheckPending
       6  MAC_CbackCheckPending::?relay
     802  MAC_CbackEvent
       6  MAC_CbackEvent::?relay
       1  _A_IEN0
       2  pZMac_AppCallback
      17  zmacCBSizeTable

 
 899 bytes in segment BANKED_CODE
  12 bytes in segment BANK_RELAYS
  17 bytes in segment CODE_C
   1 byte  in segment SFR_AN
   2 bytes in segment XDATA_Z
 
 928 bytes of CODE  memory
   0 bytes of DATA  memory (+ 1 byte shared)
   2 bytes of XDATA memory

Errors: none
Warnings: none
