###############################################################################
#
# IAR C/C++ Compiler V9.20.1.2476 for 8051                26/May/2017  14:07:36
# Copyright 2004-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Components\stack\zdo\ZDProfile.c
#    Command line       =  
#        -f
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DBLINK_LEDS) -f
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_POLLED=3000
#        -DNWK_INDIRECT_MSG_TIMEOUT=7 -DMAX_RREQ_ENTRIES=8
#        -DAPSC_MAX_FRAME_RETRIES=3 -DNWK_MAX_DATA_RETRIES=2
#        -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9 -DAPS_MAX_GROUPS=16
#        -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000
#        -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
#        -DREJOIN_POLL_RATE=440
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Components\stack\zdo\ZDProfile.c
#        -D NWK_AUTO_POLL -D ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC
#        -D POWER_SAVING -lC
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\EndDeviceEB\List\
#        -lA
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\EndDeviceEB\List\
#        --diag_suppress Pe001,Pa010 -o
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\EndDeviceEB\Obj\
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 8 -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\SOURCE\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\ZMAIN\TI2530DB\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MT\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\INCLUDE\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\TARGET\CC2530EB\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\MCU\CCSOC\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\INCLUDE\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\AF\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\NWK\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SEC\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SAPI\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SYS\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\ZDO\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\F8W\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES\SADDR\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES\SDATA\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\INCLUDE\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\HIGH_LEVEL\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\
#        -Ohz --require_prototypes
#    List file          =  
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\EndDeviceEB\List\ZDProfile.lst
#    Object file        =  
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\EndDeviceEB\Obj\ZDProfile.r51
#
###############################################################################

D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Components\stack\zdo\ZDProfile.c
      1          /**************************************************************************************************
      2            Filename:       ZDProfile.c
      3            Revised:        $Date: 2010-01-17 08:58:03 -0800 (Sun, 17 Jan 2010) $
      4            Revision:       $Revision: 21533 $
      5          
      6            Description:    This is the Zigbee Device Profile.
      7          
      8          
      9            Copyright 2004-2009 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          #include "ZComdef.h"
     44          #include "OSAL.h"
     45          #include "AF.h"
     46          #include "NLMEDE.h"
     47          #include "nwk_util.h"
     48          #include "APS.h"
     49          
     50          #include "AddrMgr.h"
     51          #include "ZDConfig.h"
     52          #include "ZDProfile.h"
     53          #include "ZDObject.h"
     54          #include "ZDNwkMgr.h"
     55          
     56          #if defined( LCD_SUPPORTED )
     57            #include "OnBoard.h"
     58          #endif
     59          
     60          #include "nwk_util.h"
     61          
     62          #if defined( MT_ZDO_FUNC )
     63            #include "MT_ZDO.h"
     64          #endif
     65          
     66          /*********************************************************************
     67           * MACROS
     68           */
     69          
     70          #define ZADDR_TO_AFADDR( pZADDR, AFADDR ) {                            \
     71            (AFADDR).endPoint = ZDP_AF_ENDPOINT;                                 \
     72            (AFADDR).addrMode = (afAddrMode_t)(pZADDR)->addrMode;                \
     73            (AFADDR).addr.shortAddr = (pZADDR)->addr.shortAddr;                  \
     74          }
     75          
     76          #define FillAndSendBuffer( TRANSSEQ, ADDR, ID, LEN, BUF ) {     \
     77            afStatus_t stat;                                    \
     78            ZDP_TmpBuf = (BUF)+1;                               \
     79            stat = fillAndSend( (TRANSSEQ), (ADDR), (ID), (LEN) );          \
     80            osal_mem_free( (BUF) );                             \
     81            ZDP_TmpBuf = ZDP_Buf+1;                             \
     82            return stat;                                        \
     83          }
     84          
     85          #define FillAndSendTxOptions( TRANSSEQ, ADDR, ID, LEN, TxO ) {  \
     86            afStatus_t stat;                                    \
     87            ZDP_TxOptions = (TxO);                              \
     88            stat = fillAndSend( (TRANSSEQ), (ADDR), (ID), (LEN) );          \
     89            ZDP_TxOptions = AF_TX_OPTIONS_NONE;                 \
     90            return stat;                                        \
     91          }
     92          
     93          #define FillAndSendBufferTxOptions( TRANSSEQ, ADDR, ID, LEN, BUF, TxO ) { \
     94            afStatus_t stat;                                    \
     95            ZDP_TmpBuf = (BUF)+1;                               \
     96            ZDP_TxOptions = (TxO);                              \
     97            stat = fillAndSend( (TRANSSEQ), (ADDR), (ID), (LEN) );          \
     98            osal_mem_free( (BUF) );                             \
     99            ZDP_TmpBuf = ZDP_Buf+1;                             \
    100            ZDP_TxOptions = AF_TX_OPTIONS_NONE;                 \
    101            return stat;                                        \
    102          }
    103          
    104          /*********************************************************************
    105           * CONSTANTS
    106           */
    107          
    108          #define ZDP_BUF_SZ          80
    109          

   \                                 In  segment CODE_C, align 1
    110          CONST byte ZDP_AF_ENDPOINT = 0;
   \                     ZDP_AF_ENDPOINT:
   \   000000   00           DB 0
    111          
    112          /*********************************************************************
    113           * TYPEDEFS
    114           */
    115          typedef struct
    116          {
    117            void *next;
    118            uint8 taskID;
    119            uint16 clusterID;
    120          } ZDO_MsgCB_t;
    121          
    122          
    123          /*********************************************************************
    124           * GLOBAL VARIABLES
    125           */
    126          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    127          byte ZDP_TransID = 0;
   \                     ZDP_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    128          
    129          /*********************************************************************
    130           * EXTERNAL VARIABLES
    131           */
    132          
    133          extern endPointDesc_t ZDApp_epDesc;
    134          
    135          /*********************************************************************
    136           * EXTERNAL FUNCTIONS
    137           */
    138          
    139          /*********************************************************************
    140           * LOCAL FUNCTIONS
    141           */
    142          
    143          static afStatus_t fillAndSend( uint8 *transSeq, zAddrType_t *addr, cId_t clusterID, byte len );
    144          uint8 ZDO_SendMsgCBs( zdoIncomingMsg_t *inMsg );
    145          void zdpProcessAddrReq( zdoIncomingMsg_t *inMsg );
    146          
    147          /*********************************************************************
    148           * LOCAL VARIABLES
    149           */
    150          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    151          static uint8  ZDP_Buf[ ZDP_BUF_SZ ];
   \                     ZDP_Buf:
   \   000000                DS 80
   \   000050                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_I, align 1, keep-with-next
    152          static uint8 *ZDP_TmpBuf = ZDP_Buf+1;
   \                     ZDP_TmpBuf:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for ZDP_TmpBuf>`
   \   000002                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    153          static byte ZDP_TxOptions = AF_TX_OPTIONS_NONE;
   \                     ZDP_TxOptions:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    154          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    155          ZDO_MsgCB_t *zdoMsgCBs = (ZDO_MsgCB_t *)NULL;
   \                     zdoMsgCBs:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    156          
    157          /*********************************************************************
    158           * ZDO Message Processing table
    159           */
    160          
    161          typedef void (*pfnZDPMsgProcessor)( zdoIncomingMsg_t *inMsg );
    162          
    163          typedef struct
    164          {
    165            uint16                clusterID;
    166            pfnZDPMsgProcessor    pFn;
    167          } zdpMsgProcItem_t;
    168          

   \                                 In  segment CODE_C, align 1
    169          CONST zdpMsgProcItem_t zdpMsgProcs[] =
   \                     zdpMsgProcs:
   \   000000   0100         DW 1
   \   000002   ....         DW `??zdpProcessAddrReq::?relay`
   \   000004   0200         DW 2
   \   000006   ....         DW `??ZDO_ProcessNodeDescReq::?relay`
   \   000008   0300         DW 3
   \   00000A   ....         DW `??ZDO_ProcessPowerDescReq::?relay`
   \   00000C   0400         DW 4
   \   00000E   ....         DW `??ZDO_ProcessSimpleDescReq::?relay`
   \   000010   0500         DW 5
   \   000012   ....         DW `??ZDO_ProcessActiveEPReq::?relay`
   \   000014   0600         DW 6
   \   000016   ....         DW `??ZDO_ProcessMatchDescReq::?relay`
   \   000018   1100         DW 17
   \   00001A   ....         DW `??ZDO_ProcessUserDescReq::?relay`
   \   00001C   1400         DW 20
   \   00001E   ....         DW `??ZDO_ProcessUserDescSet::?relay`
   \   000020   1500         DW 21
   \   000022   ....         DW `??ZDO_ProcessServerDiscReq::?relay`
   \   000024   FFFF         DW 65535
   \   000026   0000         DW 0H
    170          {
    171          #if ( RFD_RCVC_ALWAYS_ON==TRUE ) || ( ZG_BUILD_RTR_TYPE )
    172            // These aren't processed by sleeping end devices.
    173            { NWK_addr_req,           zdpProcessAddrReq },
    174            { Device_annce,           ZDO_ProcessDeviceAnnce },
    175          #endif
    176            { IEEE_addr_req,          zdpProcessAddrReq },
    177            { Node_Desc_req,          ZDO_ProcessNodeDescReq },
    178            { Power_Desc_req,         ZDO_ProcessPowerDescReq },
    179            { Simple_Desc_req,        ZDO_ProcessSimpleDescReq },
    180            { Active_EP_req,          ZDO_ProcessActiveEPReq },
    181            { Match_Desc_req,         ZDO_ProcessMatchDescReq },
    182          #if defined ( ZDO_MGMT_NWKDISC_RESPONSE )
    183            { Mgmt_NWK_Disc_req,      ZDO_ProcessMgmtNwkDiscReq },
    184          #endif
    185          #if defined ( ZDO_MGMT_LQI_RESPONSE ) && ( ZG_BUILD_RTR_TYPE )
    186            { Mgmt_Lqi_req,           ZDO_ProcessMgmtLqiReq },
    187          #endif
    188          #if defined ( ZDO_MGMT_RTG_RESPONSE ) && ( ZG_BUILD_RTR_TYPE )
    189            { Mgmt_Rtg_req,           ZDO_ProcessMgmtRtgReq },
    190          #endif
    191          #if defined ( ZDO_MGMT_BIND_RESPONSE ) && defined ( REFLECTOR )
    192            { Mgmt_Bind_req,          ZDO_ProcessMgmtBindReq },
    193          #endif
    194          #if defined ( ZDO_MGMT_JOINDIRECT_RESPONSE ) && ( ZG_BUILD_RTR_TYPE )
    195            { Mgmt_Direct_Join_req,   ZDO_ProcessMgmtDirectJoinReq },
    196          #endif
    197          #if defined ( ZDO_MGMT_LEAVE_RESPONSE )
    198            { Mgmt_Leave_req,         ZDO_ProcessMgmtLeaveReq },
    199          #endif
    200          #if defined ( ZDO_MGMT_PERMIT_JOIN_RESPONSE )  && ( ZG_BUILD_RTR_TYPE )
    201            { Mgmt_Permit_Join_req,   ZDO_ProcessMgmtPermitJoinReq },
    202          #endif
    203          #if defined ( ZDO_USERDESC_RESPONSE )
    204            { User_Desc_req,          ZDO_ProcessUserDescReq },
    205          #endif
    206          #if defined ( ZDO_USERDESCSET_RESPONSE )
    207            { User_Desc_set,          ZDO_ProcessUserDescSet },
    208          #endif
    209          #if defined ( ZDO_SERVERDISC_RESPONSE )
    210            { Server_Discovery_req,   ZDO_ProcessServerDiscReq },
    211          #endif
    212            {0xFFFF, NULL} // Last
    213          };
    214          
    215          /*********************************************************************
    216           * @fn          fillAndSend
    217           *
    218           * @brief       Combined to reduce space
    219           *
    220           * @param
    221           * @param
    222           *
    223           * @return      afStatus_t
    224           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    225          static afStatus_t fillAndSend( uint8 *transSeq, zAddrType_t *addr, cId_t clusterID, byte len )
   \                     fillAndSend:
    226          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000   74F3         MOV     A,#-0xd
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 13
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV     A,#-0xc
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V2,R2
   \   00000C   8B..         MOV     ?V3,R3
   \   00000E   8C..         MOV     ?V0,R4
   \   000010   8D..         MOV     ?V1,R5
   \   000012   E9           MOV     A,R1
   \   000013   FE           MOV     R6,A
    227            afAddrType_t afAddr;
    228          
    229            osal_memset( &afAddr, 0, sizeof(afAddrType_t) );
   \   000014                ; Setup parameters for call to function osal_memset
   \   000014   7C0C         MOV     R4,#0xc
   \   000016   7D00         MOV     R5,#0x0
   \   000018   7900         MOV     R1,#0x0
   \   00001A   AA..         MOV     R2,?XSP + 0
   \   00001C   AB..         MOV     R3,?XSP + 1
   \   00001E   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
    230            ZADDR_TO_AFADDR( addr, afAddr );
   \   000021   7409         MOV     A,#0x9
   \   000023   12....       LCALL   ?XSTACK_DISP0_8
   \   000026   E4           CLR     A
   \   000027   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   00002A   A3           INC     DPTR
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   C0E0         PUSH    A
   \   00002E   7408         MOV     A,#0x8
   \   000030   12....       LCALL   ?XSTACK_DISP0_8
   \   000033   D0E0         POP     A
   \   000035   F0           MOVX    @DPTR,A
   \   000036   85..82       MOV     DPL,?V0
   \   000039   85..83       MOV     DPH,?V1
   \   00003C   12....       LCALL   ?Subroutine51 & 0xFFFF
   \                     ??CrossCallReturnLabel_80:
   \   00003F   12....       LCALL   ??Subroutine122_0 & 0xFFFF
    231          
    232            *(ZDP_TmpBuf-1) = *transSeq;
   \                     ??CrossCallReturnLabel_226:
   \   000042   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000045   E0           MOVX    A,@DPTR
   \   000046   24FF         ADD     A,#-0x1
   \   000048   F5..         MOV     ?V0,A
   \   00004A   A3           INC     DPTR
   \   00004B   E0           MOVX    A,@DPTR
   \   00004C   34FF         ADDC    A,#-0x1
   \   00004E   F5..         MOV     ?V1,A
   \   000050   85..82       MOV     DPL,?V2
   \   000053   85..83       MOV     DPH,?V3
   \   000056   12....       LCALL   ?Subroutine64 & 0xFFFF
   \                     ??CrossCallReturnLabel_101:
   \   000059   F0           MOVX    @DPTR,A
    233          
    234            return AF_DataRequest( &afAddr, &ZDApp_epDesc, clusterID,
    235                                     (uint16)(len+1), (uint8*)(ZDP_TmpBuf-1),
    236                                     transSeq, ZDP_TxOptions,  AF_DEFAULT_RADIUS );
   \   00005A                ; Setup parameters for call to function AF_DataRequest
   \   00005A   75..1E       MOV     ?V4,#0x1e
   \   00005D   78..         MOV     R0,#?V4
   \   00005F   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000062   78..         MOV     R0,#?V2
   \   000064   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000067   78..         MOV     R0,#?V0
   \   000069   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00006C   EE           MOV     A,R6
   \   00006D   2401         ADD     A,#0x1
   \   00006F   F5..         MOV     ?V0,A
   \   000071   E4           CLR     A
   \   000072   3400         ADDC    A,#0x0
   \   000074   F5..         MOV     ?V1,A
   \   000076   78..         MOV     R0,#?V0
   \   000078   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00007B   7420         MOV     A,#0x20
   \   00007D   12....       LCALL   ?XSTACK_DISP0_8
   \   000080   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000083   90....       MOV     DPTR,#ZDP_TxOptions
   \   000086   E0           MOVX    A,@DPTR
   \   000087   F9           MOV     R1,A
   \   000088   7C..         MOV     R4,#ZDApp_epDesc & 0xff
   \   00008A   7D..         MOV     R5,#(ZDApp_epDesc >> 8) & 0xff
   \   00008C   7409         MOV     A,#0x9
   \   00008E   12....       LCALL   ?XSTACK_DISP101_8
   \   000091   12....       LCALL   `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
   \   000094   7409         MOV     A,#0x9
   \   000096   12....       LCALL   ?DEALLOC_XSTACK8
   \   000099   740C         MOV     A,#0xc
   \   00009B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00009E   7F05         MOV     R7,#0x5
   \   0000A0   02....       LJMP    ?BANKED_LEAVE_XDATA
    237          
    238          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine51:
   \   000000   12....       LCALL   ?Subroutine81 & 0xFFFF
   \                     ??CrossCallReturnLabel_268:
   \   000003   85..82       MOV     DPL,?XSP + 0
   \   000006   85..83       MOV     DPH,?XSP + 1
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine64:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   85..82       MOV     DPL,?V0
   \   000004   85..83       MOV     DPH,?V1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   12....       LCALL   ?Subroutine85 & 0xFFFF
   \                     ??CrossCallReturnLabel_137:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine85:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   85..82       MOV     DPL,?V0
   \   000004   85..83       MOV     DPH,?V1
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine122_0:
   \   000000   E8           MOV     A,R0
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   E9           MOV     A,R1
   \   000004   F0           MOVX    @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine81:
   \   000000   12....       LCALL   ??Subroutine129_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_277:
   \   000003   F9           MOV     R1,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine129_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET
    239          
    240          /*********************************************************************
    241           * @fn          ZDP_SendData
    242           *
    243           * @brief       This builds and send a request message that has
    244           *              NWKAddrOfInterest as its only parameter.
    245           *
    246           * @param       dstAddr - destination address
    247           * @param       cmd - clusterID
    248           * @param       dataLen - number of bytes of data
    249           * @param       data - pointer to the data
    250           * @param       SecurityEnable - Security Options
    251           *
    252           * @return      afStatus_t
    253           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    254          afStatus_t ZDP_SendData( uint8 *TransSeq, zAddrType_t *dstAddr, uint16 cmd,
   \                     ZDP_SendData:
    255                                  byte len, uint8 *buf, byte SecurityEnable )
    256          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0,R1
    257            uint8 *pBuf = ZDP_TmpBuf;
   \   000007   12....       LCALL   ?Subroutine42 & 0xFFFF
    258            byte cnt = len;
   \                     ??CrossCallReturnLabel_151:
   \   00000A   AE..         MOV     R6,?V0
   \   00000C   740E         MOV     A,#0xe
   \   00000E   12....       LCALL   ?XSTACK_DISP0_8
   \   000011   12....       LCALL   ??Subroutine128_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_260:
   \   000014   801F         SJMP    ??ZDP_SendData_0
    259          
    260            while ( cnt-- )
    261            {
    262              *pBuf++ = *buf++;
   \                     ??ZDP_SendData_1:
   \   000016   8882         MOV     DPL,R0
   \   000018   8983         MOV     DPH,R1
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   85..82       MOV     DPL,?V2
   \   00001E   85..83       MOV     DPH,?V3
   \   000021   12....       LCALL   ??Subroutine102_0 & 0xFFFF
    263            }
   \                     ??CrossCallReturnLabel_156:
   \   000024   A882         MOV     R0,DPL
   \   000026   A983         MOV     R1,DPH
   \   000028   85..82       MOV     DPL,?V2
   \   00002B   85..83       MOV     DPH,?V3
   \   00002E   A3           INC     DPTR
   \   00002F   8582..       MOV     ?V2,DPL
   \   000032   8583..       MOV     ?V3,DPH
   \                     ??ZDP_SendData_0:
   \   000035   EE           MOV     A,R6
   \   000036   FF           MOV     R7,A
   \   000037   74FF         MOV     A,#-0x1
   \   000039   2F           ADD     A,R7
   \   00003A   FE           MOV     R6,A
   \   00003B   04           INC     A
   \   00003C   70D8         JNZ     ??ZDP_SendData_1
    264          
    265            FillAndSendTxOptions( TransSeq, dstAddr, cmd, len,
    266                         (AF_DEFAULT_RADIUS | ((SecurityEnable) ? AF_EN_SECURITY : 0)) );
   \   00003E   7410         MOV     A,#0x10
   \   000040   12....       LCALL   ?XSTACK_DISP0_8
   \   000043   E0           MOVX    A,@DPTR
   \   000044   90....       MOV     DPTR,#ZDP_TxOptions
   \   000047   6004         JZ      ??ZDP_SendData_2
   \   000049   745E         MOV     A,#0x5e
   \   00004B   8002         SJMP    ??ZDP_SendData_3
   \                     ??ZDP_SendData_2:
   \   00004D   741E         MOV     A,#0x1e
   \                     ??ZDP_SendData_3:
   \   00004F   F0           MOVX    @DPTR,A
   \   000050                ; Setup parameters for call to function fillAndSend
   \   000050   740C         MOV     A,#0xc
   \   000052   12....       LCALL   ?XSTACK_DISP0_8
   \   000055   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000058   A9..         MOV     R1,?V0
   \   00005A   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   00005D   7402         MOV     A,#0x2
   \   00005F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000062   E9           MOV     A,R1
   \   000063   F9           MOV     R1,A
   \   000064   90....       MOV     DPTR,#ZDP_TxOptions
   \   000067   E4           CLR     A
   \   000068   F0           MOVX    @DPTR,A
   \   000069   02....       LJMP    ??Subroutine115_0 & 0xFFFF
    267          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000003                REQUIRE ??Subroutine95_0
   \   000003                ; // Fall through to label ??Subroutine95_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine95_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V2,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V3,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine102_0:
   \   000000   12....       LCALL   ?Subroutine87 & 0xFFFF
   \                     ??CrossCallReturnLabel_164:
   \   000003   A3           INC     DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine87:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function osal_memcpy
   \   000001   8882         MOV     DPL,R0
   \   000003   8983         MOV     DPH,R1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine115_0:
   \   000000   7F04         MOV     R7,#0x4
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine128_0:
   \   000000   12....       LCALL   ?Subroutine81 & 0xFFFF
   \                     ??CrossCallReturnLabel_271:
   \   000003   22           RET
    268          
    269          /*********************************************************************
    270           * @fn          ZDP_NWKAddrOfInterestReq
    271           *
    272           * @brief       This builds and send a request message that has
    273           *              NWKAddrOfInterest as its only parameter.
    274           *
    275           * @param       dstAddr - destination address
    276           * @param       nwkAddr - 16 bit address
    277           * @param       SecurityEnable - Security Options
    278           *
    279           * @return      afStatus_t
    280           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    281          afStatus_t ZDP_NWKAddrOfInterestReq( zAddrType_t *dstAddr, uint16 nwkAddr,
   \                     ZDP_NWKAddrOfInterestReq:
    282                                               byte cmd, byte SecurityEnable )
    283          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    284            (void)SecurityEnable;  // Intentionally unreferenced parameter
    285          
    286            ZDP_TmpBuf[0] = LO_UINT16( nwkAddr );
   \   000007   12....       LCALL   ?Subroutine15 & 0xFFFF
    287            ZDP_TmpBuf[1] = HI_UINT16( nwkAddr );
   \                     ??CrossCallReturnLabel_15:
   \   00000A   F0           MOVX    @DPTR,A
    288          
    289            return fillAndSend( &ZDP_TransID, dstAddr, cmd, 2 );
   \   00000B                ; Setup parameters for call to function fillAndSend
   \   00000B   8E..         MOV     ?V0,R6
   \   00000D   02....       LJMP    ?Subroutine1 & 0xFFFF
    290          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   75..00       MOV     ?V1,#0x0
   \   000003   78..         MOV     R0,#?V0
   \   000005   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000008   7902         MOV     R1,#0x2
   \   00000A                REQUIRE ??Subroutine97_0
   \   00000A                ; // Fall through to label ??Subroutine97_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine97_0:
   \   000000   EA           MOV     A,R2
   \   000001   FC           MOV     R4,A
   \   000002   EB           MOV     A,R3
   \   000003   FD           MOV     R5,A
   \   000004   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   000006   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   000008                REQUIRE ??Subroutine98_0
   \   000008                ; // Fall through to label ??Subroutine98_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine98_0:
   \   000000   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   000003   7402         MOV     A,#0x2
   \   000005                REQUIRE ??Subroutine99_0
   \   000005                ; // Fall through to label ??Subroutine99_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine99_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F02         MOV     R7,#0x2
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000003   12....       LCALL   ?Subroutine84 & 0xFFFF
   \                     ??CrossCallReturnLabel_199:
   \   000006   EC           MOV     A,R4
   \   000007   12....       LCALL   ?Subroutine77 & 0xFFFF
   \                     ??CrossCallReturnLabel_126:
   \   00000A   ED           MOV     A,R5
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine84:
   \   000000   12....       LCALL   ?Subroutine93 & 0xFFFF
   \                     ??CrossCallReturnLabel_202:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine93:
   \   000000   12....       LCALL   ??Subroutine129_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_276:
   \   000003   F583         MOV     DPH,A
   \   000005   8882         MOV     DPL,R0
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine77:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000004   12....       LCALL   ?Subroutine93 & 0xFFFF
   \                     ??CrossCallReturnLabel_201:
   \   000007   A3           INC     DPTR
   \   000008   22           RET
    291          
    292          /*********************************************************************
    293           * Address Requests
    294           */
    295          
    296          /*********************************************************************
    297           * @fn          ZDP_NwkAddrReq
    298           *
    299           * @brief       This builds and send a NWK_addr_req message.  This
    300           *              function sends a broadcast message looking for a 16
    301           *              bit address with a 64 bit address as bait.
    302           *
    303           * @param       IEEEAddress - looking for this device
    304           * @param       SecurityEnable - Security Options
    305           *
    306           * @return      afStatus_t
    307           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    308          afStatus_t ZDP_NwkAddrReq( uint8 *IEEEAddress, byte ReqType,
   \                     ZDP_NwkAddrReq:
    309                                     byte StartIndex, byte SecurityEnable )
    310          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   \   00000E   89..         MOV     ?V1,R1
   \   000010   8C..         MOV     ?V0,R4
    311            uint8 *pBuf = ZDP_TmpBuf;
   \   000012   12....       LCALL   ?Subroutine42 & 0xFFFF
    312            byte len = Z_EXTADDR_LEN + 1 + 1;  // IEEEAddress + ReqType + StartIndex.
    313            zAddrType_t dstAddr;
    314          
    315            (void)SecurityEnable;  // Intentionally unreferenced parameter
    316          
    317            if ( osal_ExtAddrEqual( saveExtAddr, IEEEAddress ) == FALSE )
   \                     ??CrossCallReturnLabel_152:
   \   000015                ; Setup parameters for call to function sAddrExtCmp
   \   000015   EE           MOV     A,R6
   \   000016   FC           MOV     R4,A
   \   000017   EF           MOV     A,R7
   \   000018   FD           MOV     R5,A
   \   000019   7A..         MOV     R2,#saveExtAddr & 0xff
   \   00001B   7B..         MOV     R3,#(saveExtAddr >> 8) & 0xff
   \   00001D   12....       LCALL   `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   000020   E9           MOV     A,R1
   \   000021   7012         JNZ     ??ZDP_NwkAddrReq_0
    318            {
    319              dstAddr.addrMode = AddrBroadcast;
   \   000023   7408         MOV     A,#0x8
   \   000025   12....       LCALL   ?XSTACK_DISP0_8
   \   000028   740F         MOV     A,#0xf
   \   00002A   12....       LCALL   ?Subroutine23 & 0xFFFF
    320              dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVRXON;
    321            }
   \                     ??CrossCallReturnLabel_27:
   \   00002D   74FD         MOV     A,#-0x3
   \   00002F   F0           MOVX    @DPTR,A
   \   000030   A3           INC     DPTR
   \   000031   74FF         MOV     A,#-0x1
   \   000033   8012         SJMP    ??ZDP_NwkAddrReq_1
    322            else
    323            {
    324              dstAddr.addrMode = Addr16Bit;
   \                     ??ZDP_NwkAddrReq_0:
   \   000035   7408         MOV     A,#0x8
   \   000037   12....       LCALL   ?XSTACK_DISP0_8
   \   00003A   7402         MOV     A,#0x2
   \   00003C   F0           MOVX    @DPTR,A
    325              dstAddr.addr.shortAddr = ZDAppNwkAddr.addr.shortAddr;
   \   00003D   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000040   12....       LCALL   ?Subroutine51 & 0xFFFF
    326            }
   \                     ??CrossCallReturnLabel_81:
   \   000043   E8           MOV     A,R0
   \   000044   F0           MOVX    @DPTR,A
   \   000045   A3           INC     DPTR
   \   000046   E9           MOV     A,R1
   \                     ??ZDP_NwkAddrReq_1:
   \   000047   F0           MOVX    @DPTR,A
    327          
    328            pBuf = osal_cpyExtAddr( pBuf, IEEEAddress );
   \   000048                ; Setup parameters for call to function sAddrExtCpy
   \   000048   EE           MOV     A,R6
   \   000049   FC           MOV     R4,A
   \   00004A   EF           MOV     A,R7
   \   00004B   FD           MOV     R5,A
   \   00004C   AA..         MOV     R2,?V2
   \   00004E   AB..         MOV     R3,?V3
   \   000050   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   000053   8A82         MOV     DPL,R2
   \   000055   8B83         MOV     DPH,R3
    329          
    330            *pBuf++ = ReqType;
   \   000057   E5..         MOV     A,?V1
   \   000059   F0           MOVX    @DPTR,A
    331            *pBuf++ = StartIndex;
   \   00005A   A3           INC     DPTR
   \   00005B   E5..         MOV     A,?V0
   \   00005D   F0           MOVX    @DPTR,A
    332          
    333            return fillAndSend( &ZDP_TransID, &dstAddr, NWK_addr_req, len );
   \   00005E                ; Setup parameters for call to function fillAndSend
   \   00005E   E4           CLR     A
   \   00005F   F5..         MOV     ?V2,A
   \   000061   F5..         MOV     ?V3,A
   \   000063   78..         MOV     R0,#?V2
   \   000065   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000068   790A         MOV     R1,#0xa
   \   00006A   7402         MOV     A,#0x2
   \   00006C   12....       LCALL   ?XSTACK_DISP102_8
   \   00006F   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   000071   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   000073   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   000076   7402         MOV     A,#0x2
   \   000078   12....       LCALL   ?DEALLOC_XSTACK8
   \   00007B   7409         MOV     A,#0x9
   \   00007D   02....       LJMP    ??Subroutine114_0 & 0xFFFF
    334          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine114_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine115_0
   \   000003                ; // Fall through to label ??Subroutine115_0
    335          
    336          /*********************************************************************
    337           * @fn          ZDP_IEEEAddrReq
    338           *
    339           * @brief       This builds and send a IEEE_addr_req message.  This
    340           *              function sends a unicast message looking for a 64
    341           *              bit IEEE address with a 16 bit address as bait.
    342           *
    343           * @param       ReqType - ZDP_IEEEADDR_REQTYPE_SINGLE or
    344           *                        ZDP_IEEEADDR_REQTYPE_EXTENDED
    345           * @param       SecurityEnable - Security Options
    346           *
    347           * @return      afStatus_t
    348           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    349          afStatus_t ZDP_IEEEAddrReq( uint16 shortAddr, byte ReqType,
   \                     ZDP_IEEEAddrReq:
    350                                      byte StartIndex, byte SecurityEnable )
    351          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FF           MOV     R7,A
   \   00000C   EC           MOV     A,R4
   \   00000D   12....       LCALL   ??Subroutine127_0 & 0xFFFF
    352            uint8 *pBuf = ZDP_TmpBuf;
    353            byte len = 2 + 1 + 1;  // shortAddr + ReqType + StartIndex.
    354            zAddrType_t dstAddr;
    355          
    356            (void)SecurityEnable;  // Intentionally unreferenced parameter
    357          
    358            dstAddr.addrMode = (afAddrMode_t)Addr16Bit;
   \                     ??CrossCallReturnLabel_259:
   \   000010   7408         MOV     A,#0x8
   \   000012   12....       LCALL   ?XSTACK_DISP0_8
   \   000015   7402         MOV     A,#0x2
   \   000017   12....       LCALL   ?Subroutine23 & 0xFFFF
    359            dstAddr.addr.shortAddr = shortAddr;
   \                     ??CrossCallReturnLabel_28:
   \   00001A   12....       LCALL   ?Subroutine31 & 0xFFFF
    360          
    361            *pBuf++ = LO_UINT16( shortAddr );
   \                     ??CrossCallReturnLabel_42:
   \   00001D   EA           MOV     A,R2
   \   00001E   8882         MOV     DPL,R0
   \   000020   8983         MOV     DPH,R1
   \   000022   F0           MOVX    @DPTR,A
    362            *pBuf++ = HI_UINT16( shortAddr );
   \   000023   EB           MOV     A,R3
   \   000024   A3           INC     DPTR
   \   000025   F0           MOVX    @DPTR,A
    363          
    364            *pBuf++ = ReqType;
   \   000026   EF           MOV     A,R7
   \   000027   8882         MOV     DPL,R0
   \   000029   8983         MOV     DPH,R1
   \   00002B   12....       LCALL   ?Subroutine32 & 0xFFFF
    365            *pBuf++ = StartIndex;
   \                     ??CrossCallReturnLabel_49:
   \   00002E   F0           MOVX    @DPTR,A
    366          
    367            return fillAndSend( &ZDP_TransID, &dstAddr, IEEE_addr_req, len );
   \   00002F                ; Setup parameters for call to function fillAndSend
   \   00002F   75..01       MOV     ?V0,#0x1
   \   000032   75..00       MOV     ?V1,#0x0
   \   000035   78..         MOV     R0,#?V0
   \   000037   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003A   7904         MOV     R1,#0x4
   \   00003C                REQUIRE ?Subroutine5
   \   00003C                ; // Fall through to label ?Subroutine5
    368          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   7402         MOV     A,#0x2
   \   000002   12....       LCALL   ?XSTACK_DISP102_8
   \   000005   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   000007   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   000009   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   00000C   7402         MOV     A,#0x2
   \   00000E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000011                REQUIRE ??Subroutine96_0
   \   000011                ; // Fall through to label ??Subroutine96_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine96_0:
   \   000000   7409         MOV     A,#0x9
   \   000002   80..         SJMP    ??Subroutine99_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   F0           MOVX    @DPTR,A
   \   000003   EE           MOV     A,R6
   \   000004   8882         MOV     DPL,R0
   \   000006   8983         MOV     DPH,R1
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   EA           MOV     A,R2
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   EB           MOV     A,R3
   \   000004   F0           MOVX    @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine127_0:
   \   000000   FE           MOV     R6,A
   \   000001   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000004                REQUIRE ??Subroutine128_0
   \   000004                ; // Fall through to label ??Subroutine128_0
    369          
    370          /*********************************************************************
    371           * @fn          ZDP_MatchDescReq
    372           *
    373           * @brief       This builds and send a Match_Desc_req message.  This
    374           *              function sends a broadcast or unicast message
    375           *              requesting the list of endpoint/interfaces that
    376           *              match profile ID and cluster IDs.
    377           *
    378           * @param       dstAddr - destination address
    379           * @param       nwkAddr - network address of interest
    380           * @param       ProfileID - Profile ID
    381           * @param       NumInClusters - number of input clusters
    382           * @param       InClusterList - input cluster ID list
    383           * @param       NumOutClusters - number of output clusters
    384           * @param       OutClusterList - output cluster ID list
    385           * @param       SecurityEnable - Security Options
    386           *
    387           * @return      afStatus_t
    388           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    389          afStatus_t ZDP_MatchDescReq( zAddrType_t *dstAddr, uint16 nwkAddr,
   \                     ZDP_MatchDescReq:
    390                                          uint16 ProfileID,
    391                                          byte NumInClusters, cId_t *InClusterList,
    392                                          byte NumOutClusters, cId_t *OutClusterList,
    393                                          byte SecurityEnable )
    394          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8C..         MOV     ?V0,R4
   \   000007   8D..         MOV     ?V1,R5
   \   000009   12....       LCALL   ?Subroutine57 & 0xFFFF
    395            uint8 *pBuf = ZDP_TmpBuf;
   \                     ??CrossCallReturnLabel_257:
   \   00000C   7412         MOV     A,#0x12
   \   00000E   12....       LCALL   ?XSTACK_DISP0_8
   \   000011   E0           MOVX    A,@DPTR
   \   000012   FD           MOV     R5,A
    396            // nwkAddr+ProfileID+NumInClusters+NumOutClusters.
    397            byte i, len = 2 + 2 + 1 + 1;  // nwkAddr+ProfileID+NumInClusters+NumOutClusters.
    398          
    399            (void)SecurityEnable;  // Intentionally unreferenced parameter
    400          
    401            len += (NumInClusters + NumOutClusters) * sizeof(uint16);
   \   000013   EE           MOV     A,R6
   \   000014   2D           ADD     A,R5
   \   000015   C3           CLR     C
   \   000016   33           RLC     A
   \   000017   2406         ADD     A,#0x6
   \   000019   FF           MOV     R7,A
    402          
    403            if ( len >= ZDP_BUF_SZ-1 )
   \   00001A   C3           CLR     C
   \   00001B   944F         SUBB    A,#0x4f
   \   00001D   4005         JC      ??ZDP_MatchDescReq_0
    404            {
    405              return afStatus_MEM_FAIL;
   \   00001F   7910         MOV     R1,#0x10
   \   000021   02....       LJMP    ??ZDP_MatchDescReq_1 & 0xFFFF
    406            }
    407          
    408            // The spec changed in Zigbee 2007 (2.4.3.1.7.1) to not allow sending
    409            // this command to 0xFFFF.  So, here we will filter this and replace 
    410            // with 0xFFFD to only send to devices with RX ON.  This includes the 
    411            // network address of interest.
    412            if ( ((dstAddr->addrMode == AddrBroadcast) || (dstAddr->addrMode == Addr16Bit))
    413                && (dstAddr->addr.shortAddr == NWK_BROADCAST_SHORTADDR_DEVALL) )
   \                     ??ZDP_MatchDescReq_0:
   \   000024   8A82         MOV     DPL,R2
   \   000026   8B83         MOV     DPH,R3
   \   000028   A3           INC     DPTR
   \   000029   A3           INC     DPTR
   \   00002A   A3           INC     DPTR
   \   00002B   A3           INC     DPTR
   \   00002C   A3           INC     DPTR
   \   00002D   A3           INC     DPTR
   \   00002E   A3           INC     DPTR
   \   00002F   A3           INC     DPTR
   \   000030   E0           MOVX    A,@DPTR
   \   000031   FC           MOV     R4,A
   \   000032   740F         MOV     A,#0xf
   \   000034   6C           XRL     A,R4
   \   000035   6005         JZ      ??ZDP_MatchDescReq_2
   \   000037   7402         MOV     A,#0x2
   \   000039   6C           XRL     A,R4
   \   00003A   7018         JNZ     ??ZDP_MatchDescReq_3
   \                     ??ZDP_MatchDescReq_2:
   \   00003C   8A82         MOV     DPL,R2
   \   00003E   8B83         MOV     DPH,R3
   \   000040   E0           MOVX    A,@DPTR
   \   000041   F4           CPL     A
   \   000042   7003         JNZ     ??ZDP_MatchDescReq_4
   \   000044   A3           INC     DPTR
   \   000045   E0           MOVX    A,@DPTR
   \   000046   F4           CPL     A
   \                     ??ZDP_MatchDescReq_4:
   \   000047   700B         JNZ     ??ZDP_MatchDescReq_3
    414            {
    415              dstAddr->addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVRXON;
   \   000049   8A82         MOV     DPL,R2
   \   00004B   8B83         MOV     DPH,R3
   \   00004D   74FD         MOV     A,#-0x3
   \   00004F   F0           MOVX    @DPTR,A
   \   000050   A3           INC     DPTR
   \   000051   74FF         MOV     A,#-0x1
   \   000053   F0           MOVX    @DPTR,A
    416            }
    417            if ( nwkAddr == NWK_BROADCAST_SHORTADDR_DEVALL )
   \                     ??ZDP_MatchDescReq_3:
   \   000054   74FF         MOV     A,#-0x1
   \   000056   65..         XRL     A,?V0
   \   000058   7004         JNZ     ??ZDP_MatchDescReq_5
   \   00005A   74FF         MOV     A,#-0x1
   \   00005C   65..         XRL     A,?V1
   \                     ??ZDP_MatchDescReq_5:
   \   00005E   7006         JNZ     ??ZDP_MatchDescReq_6
    418            {
    419              nwkAddr = NWK_BROADCAST_SHORTADDR_DEVRXON;
   \   000060   75..FD       MOV     ?V0,#-0x3
   \   000063   75..FF       MOV     ?V1,#-0x1
    420            }
    421            
    422            *pBuf++ = LO_UINT16( nwkAddr );   // NWKAddrOfInterest
   \                     ??ZDP_MatchDescReq_6:
   \   000066   8882         MOV     DPL,R0
   \   000068   8983         MOV     DPH,R1
   \   00006A   E5..         MOV     A,?V0
   \   00006C   F0           MOVX    @DPTR,A
    423            *pBuf++ = HI_UINT16( nwkAddr );
   \   00006D   E5..         MOV     A,?V1
   \   00006F   A3           INC     DPTR
   \   000070   F0           MOVX    @DPTR,A
   \   000071   740E         MOV     A,#0xe
   \   000073   12....       LCALL   ?XSTACK_DISP0_8
   \   000076   12....       LCALL   ??Subroutine112_0 & 0xFFFF
    424          
    425            *pBuf++ = LO_UINT16( ProfileID );   // Profile ID
   \                     ??CrossCallReturnLabel_203:
   \   000079   8882         MOV     DPL,R0
   \   00007B   8983         MOV     DPH,R1
   \   00007D   A3           INC     DPTR
   \   00007E   A3           INC     DPTR
   \   00007F   E5..         MOV     A,?V0
   \   000081   F0           MOVX    @DPTR,A
    426            *pBuf++ = HI_UINT16( ProfileID );
   \   000082   E5..         MOV     A,?V1
   \   000084   8882         MOV     DPL,R0
   \   000086   8983         MOV     DPH,R1
   \   000088   A3           INC     DPTR
   \   000089   12....       LCALL   ?Subroutine32 & 0xFFFF
    427          
    428            *pBuf++ = NumInClusters; // Input cluster list
   \                     ??CrossCallReturnLabel_50:
   \   00008C   A3           INC     DPTR
   \   00008D   F0           MOVX    @DPTR,A
   \   00008E   E8           MOV     A,R0
   \   00008F   2405         ADD     A,#0x5
   \   000091   F8           MOV     R0,A
   \   000092   5001         JNC     ??ZDP_MatchDescReq_7
   \   000094   09           INC     R1
    429            if ( NumInClusters )
   \                     ??ZDP_MatchDescReq_7:
   \   000095   EE           MOV     A,R6
   \   000096   6016         JZ      ??ZDP_MatchDescReq_8
    430            {
    431              for (i=0; i<NumInClusters; ++i)  {
   \   000098   7C00         MOV     R4,#0x0
   \   00009A   7410         MOV     A,#0x10
   \   00009C   12....       LCALL   ?XSTACK_DISP0_8
   \   00009F   12....       LCALL   ??Subroutine112_0 & 0xFFFF
    432                *pBuf++ = LO_UINT16( InClusterList[i] );
   \                     ??CrossCallReturnLabel_204:
   \   0000A2   12....       LCALL   ?Subroutine8 & 0xFFFF
    433                *pBuf++ = HI_UINT16( InClusterList[i] );
    434              }
   \                     ??CrossCallReturnLabel_0:
   \   0000A5   5001         JNC     ??ZDP_MatchDescReq_9
   \   0000A7   09           INC     R1
   \                     ??ZDP_MatchDescReq_9:
   \   0000A8   0C           INC     R4
   \   0000A9   EC           MOV     A,R4
   \   0000AA   C3           CLR     C
   \   0000AB   9E           SUBB    A,R6
   \   0000AC   40F4         JC      ??CrossCallReturnLabel_204
    435            }
    436          
    437            *pBuf++ = NumOutClusters; // Output cluster list
   \                     ??ZDP_MatchDescReq_8:
   \   0000AE   ED           MOV     A,R5
   \   0000AF   8882         MOV     DPL,R0
   \   0000B1   8983         MOV     DPH,R1
   \   0000B3   F0           MOVX    @DPTR,A
   \   0000B4   A3           INC     DPTR
   \   0000B5   A882         MOV     R0,DPL
   \   0000B7   A983         MOV     R1,DPH
    438            if ( NumOutClusters )
   \   0000B9   6016         JZ      ??ZDP_MatchDescReq_10
    439            {
    440              for (i=0; i<NumOutClusters; ++i)  {
   \   0000BB   7C00         MOV     R4,#0x0
   \   0000BD   7413         MOV     A,#0x13
   \   0000BF   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C2   12....       LCALL   ??Subroutine112_0 & 0xFFFF
    441                *pBuf++ = LO_UINT16( OutClusterList[i] );
   \                     ??CrossCallReturnLabel_205:
   \   0000C5   12....       LCALL   ?Subroutine8 & 0xFFFF
    442                *pBuf++ = HI_UINT16( OutClusterList[i] );
    443              }
   \                     ??CrossCallReturnLabel_1:
   \   0000C8   5001         JNC     ??ZDP_MatchDescReq_11
   \   0000CA   09           INC     R1
   \                     ??ZDP_MatchDescReq_11:
   \   0000CB   0C           INC     R4
   \   0000CC   EC           MOV     A,R4
   \   0000CD   C3           CLR     C
   \   0000CE   9D           SUBB    A,R5
   \   0000CF   40F4         JC      ??CrossCallReturnLabel_205
    444            }
    445          
    446            return fillAndSend( &ZDP_TransID, dstAddr, Match_Desc_req, len );
   \                     ??ZDP_MatchDescReq_10:
   \   0000D1                ; Setup parameters for call to function fillAndSend
   \   0000D1   75..06       MOV     ?V0,#0x6
   \   0000D4   75..00       MOV     ?V1,#0x0
   \   0000D7   78..         MOV     R0,#?V0
   \   0000D9   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000DC   EF           MOV     A,R7
   \   0000DD   F9           MOV     R1,A
   \   0000DE   EA           MOV     A,R2
   \   0000DF   FC           MOV     R4,A
   \   0000E0   EB           MOV     A,R3
   \   0000E1   FD           MOV     R5,A
   \   0000E2   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   0000E4   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   0000E6   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   0000E9   7402         MOV     A,#0x2
   \   0000EB   12....       LCALL   ?DEALLOC_XSTACK8
   \                     ??ZDP_MatchDescReq_1:
   \   0000EE   80..         SJMP    ??Subroutine100_0
    447          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   8C..         MOV     ?V2,R4
   \   000002   E5..         MOV     A,?V2
   \   000004   25E0         ADD     A,0xE0 /* A   */
   \   000006   F5..         MOV     ?V2,A
   \   000008   E4           CLR     A
   \   000009   33           RLC     A
   \   00000A   F5..         MOV     ?V3,A
   \   00000C   E5..         MOV     A,?V0
   \   00000E   25..         ADD     A,?V2
   \   000010   F5..         MOV     ?V4,A
   \   000012   E5..         MOV     A,?V1
   \   000014   35..         ADDC    A,?V3
   \   000016   F5..         MOV     ?V5,A
   \   000018   85..82       MOV     DPL,?V4
   \   00001B   12....       LCALL   ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_217:
   \   00001E   12....       LCALL   ?Subroutine88 & 0xFFFF
   \                     ??CrossCallReturnLabel_141:
   \   000021   12....       LCALL   ??Subroutine119_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_216:
   \   000024   A3           INC     DPTR
   \   000025   F0           MOVX    @DPTR,A
   \   000026   E8           MOV     A,R0
   \   000027   2402         ADD     A,#0x2
   \   000029   F8           MOV     R0,A
   \   00002A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine100_0:
   \   000000   7F06         MOV     R7,#0x6
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine112_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V1,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine88:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function osal_memcpy
   \   000001   85..82       MOV     DPL,?V4
   \   000004   85..83       MOV     DPH,?V5
   \   000007   A3           INC     DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine82:
   \   000000   F583         MOV     DPH,A
   \   000002                REQUIRE ??Subroutine119_0
   \   000002                ; // Fall through to label ??Subroutine119_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine119_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8882         MOV     DPL,R0
   \   000003   8983         MOV     DPH,R1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine57:
   \   000000   E9           MOV     A,R1
   \   000001                REQUIRE ??Subroutine127_0
   \   000001                ; // Fall through to label ??Subroutine127_0
    448          
    449          /*********************************************************************
    450           * @fn          ZDP_SimpleDescReq
    451           *
    452           * @brief       This builds and send a NWK_Simple_Desc_req
    453           *              message.  This function sends unicast message to the
    454           *              destination device.
    455           *
    456           * @param       dstAddr - destination address
    457           * @param       nwkAddr - 16 bit address
    458           * @param       epIntf - endpoint/interface
    459           * @param       SecurityEnable - Security Options
    460           *
    461           * @return      afStatus_t
    462           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    463          afStatus_t ZDP_SimpleDescReq( zAddrType_t *dstAddr, uint16 nwkAddr,
   \                     ZDP_SimpleDescReq:
    464                                              byte endPoint, byte SecurityEnable )
    465          
    466          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    467            (void)SecurityEnable;  // Intentionally unreferenced parameter
    468          
    469            ZDP_TmpBuf[0] = LO_UINT16( nwkAddr );
   \   000005   12....       LCALL   ?Subroutine15 & 0xFFFF
    470            ZDP_TmpBuf[1] = HI_UINT16( nwkAddr );
   \                     ??CrossCallReturnLabel_16:
   \   000008   12....       LCALL   ?Subroutine11 & 0xFFFF
    471            ZDP_TmpBuf[2] = endPoint;
    472          
    473            return fillAndSend( &ZDP_TransID, dstAddr, Simple_Desc_req, 3 );
   \                     ??CrossCallReturnLabel_6:
   \   00000B                ; Setup parameters for call to function fillAndSend
   \   00000B   75..04       MOV     ?V0,#0x4
   \   00000E   75..00       MOV     ?V1,#0x0
   \   000011   78..         MOV     R0,#?V0
   \   000013   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000016   7903         MOV     R1,#0x3
   \   000018   02....       LJMP    ??Subroutine97_0 & 0xFFFF
    474          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   12....       LCALL   ?Subroutine77 & 0xFFFF
   \                     ??CrossCallReturnLabel_127:
   \   000003   A3           INC     DPTR
   \   000004   E9           MOV     A,R1
   \   000005   F0           MOVX    @DPTR,A
   \   000006   22           RET
    475          
    476          /*********************************************************************
    477           * @fn          ZDP_UserDescSet
    478           *
    479           * @brief       This builds and send a User_Desc_set message to set
    480           *              the user descriptor.  This function sends unicast
    481           *              message to the destination device.
    482           *
    483           * @param       dstAddr - destination address
    484           * @param       nwkAddr - 16 bit address
    485           * @param       UserDescriptor - user descriptor
    486           * @param       SecurityEnable - Security Options
    487           *
    488           * @return      afStatus_t
    489           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   AC..         MOV     R4,?V4
   \   000002   AD..         MOV     R5,?V5
   \   000004   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   000006   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   000008   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   00000B   7402         MOV     A,#0x2
   \   00000D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000010                REQUIRE ??Subroutine100_0
   \   000010                ; // Fall through to label ??Subroutine100_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    490          afStatus_t ZDP_UserDescSet( zAddrType_t *dstAddr, uint16 nwkAddr,
   \                     ZDP_UserDescSet:
    491                                    UserDescriptorFormat_t *UserDescriptor,
    492                                    byte SecurityEnable )
    493          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V4,R2
   \   000007   8B..         MOV     ?V5,R3
    494            uint8 *pBuf = ZDP_TmpBuf;
   \   000009   12....       LCALL   ??Subroutine109_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_185:
   \   00000C   740E         MOV     A,#0xe
   \   00000E   12....       LCALL   ?XSTACK_DISP0_8
   \   000011   12....       LCALL   ?Subroutine41 & 0xFFFF
    495            byte len = (UserDescriptor->len < AF_MAX_USER_DESCRIPTOR_LEN) ?
    496                        UserDescriptor->len : AF_MAX_USER_DESCRIPTOR_LEN;
   \                     ??CrossCallReturnLabel_63:
   \   000014   FE           MOV     R6,A
   \   000015   C3           CLR     C
   \   000016   9410         SUBB    A,#0x10
   \   000018   5004         JNC     ??ZDP_UserDescSet_0
   \   00001A   EE           MOV     A,R6
   \   00001B   FF           MOV     R7,A
   \   00001C   8002         SJMP    ??ZDP_UserDescSet_1
   \                     ??ZDP_UserDescSet_0:
   \   00001E   7F10         MOV     R7,#0x10
    497            byte addrLen = 2;
    498          
    499            (void)SecurityEnable;  // Intentionally unreferenced parameter
    500          
    501            *pBuf++ = LO_UINT16( nwkAddr );
   \                     ??ZDP_UserDescSet_1:
   \   000020   EC           MOV     A,R4
   \   000021   8A82         MOV     DPL,R2
   \   000023   8B83         MOV     DPH,R3
   \   000025   F0           MOVX    @DPTR,A
    502            *pBuf++ = HI_UINT16( nwkAddr );
   \   000026   ED           MOV     A,R5
   \   000027   A3           INC     DPTR
   \   000028   F0           MOVX    @DPTR,A
    503          
    504            *pBuf++ = len;
   \   000029   EF           MOV     A,R7
   \   00002A   8A82         MOV     DPL,R2
   \   00002C   8B83         MOV     DPH,R3
   \   00002E   12....       LCALL   ??Subroutine101_0 & 0xFFFF
    505            addrLen = 3;
    506          
    507            pBuf = osal_memcpy( pBuf, UserDescriptor->desc, len );
   \                     ??CrossCallReturnLabel_155:
   \   000031   AC82         MOV     R4,DPL
   \   000033   AD83         MOV     R5,DPH
   \   000035   8C..         MOV     ?V0,R4
   \   000037   8D..         MOV     ?V1,R5
   \   000039   75..00       MOV     ?V2,#0x0
   \   00003C   78..         MOV     R0,#?V0
   \   00003E   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000041   EF           MOV     A,R7
   \   000042   FC           MOV     R4,A
   \   000043   7D00         MOV     R5,#0x0
   \   000045   EA           MOV     A,R2
   \   000046   2403         ADD     A,#0x3
   \   000048   FA           MOV     R2,A
   \   000049   5001         JNC     ??ZDP_UserDescSet_2
   \   00004B   0B           INC     R3
   \                     ??ZDP_UserDescSet_2:
   \   00004C   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00004F   7403         MOV     A,#0x3
   \   000051   12....       LCALL   ?DEALLOC_XSTACK8
    508            osal_memset( pBuf, AF_USER_DESCRIPTOR_FILL, AF_MAX_USER_DESCRIPTOR_LEN-len );
   \   000054                ; Setup parameters for call to function osal_memset
   \   000054   EF           MOV     A,R7
   \   000055   F8           MOV     R0,A
   \   000056   7410         MOV     A,#0x10
   \   000058   C3           CLR     C
   \   000059   98           SUBB    A,R0
   \   00005A   FC           MOV     R4,A
   \   00005B   95E0         SUBB    A,0xE0 /* A   */
   \   00005D   FD           MOV     R5,A
   \   00005E   7920         MOV     R1,#0x20
   \   000060   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
    509          
    510            return fillAndSend( &ZDP_TransID, dstAddr, User_Desc_set, (AF_MAX_USER_DESCRIPTOR_LEN + addrLen) );
   \   000063                ; Setup parameters for call to function fillAndSend
   \   000063   75..14       MOV     ?V0,#0x14
   \   000066   75..00       MOV     ?V1,#0x0
   \   000069   78..         MOV     R0,#?V0
   \   00006B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00006E   7913         MOV     R1,#0x13
   \   000070   02....       LJMP    ?Subroutine2 & 0xFFFF
    511          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine101_0:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002                REQUIRE ??Subroutine102_0
   \   000002                ; // Fall through to label ??Subroutine102_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000   12....       LCALL   ?Subroutine81 & 0xFFFF
   \                     ??CrossCallReturnLabel_267:
   \   000003   8882         MOV     DPL,R0
   \   000005   8983         MOV     DPH,R1
   \   000007   E0           MOVX    A,@DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine109_0:
   \   000000   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000003                REQUIRE ??Subroutine110_0
   \   000003                ; // Fall through to label ??Subroutine110_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine110_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   22           RET
    512          
    513          /*********************************************************************
    514           * @fn          ZDP_ServerDiscReq
    515           *
    516           * @brief       Build and send a Server_Discovery_req request message.
    517           *
    518           * @param       serverMask - 16-bit bit-mask of server services being sought.
    519           * @param       SecurityEnable - Security Options
    520           *
    521           * @return      afStatus_t
    522           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    523          afStatus_t ZDP_ServerDiscReq( uint16 serverMask, byte SecurityEnable )
   \                     ZDP_ServerDiscReq:
    524          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   12....       LCALL   ?Subroutine57 & 0xFFFF
    525            uint8 *pBuf = ZDP_TmpBuf;
    526            zAddrType_t dstAddr;
    527          
    528            dstAddr.addrMode = AddrBroadcast;
   \                     ??CrossCallReturnLabel_258:
   \   00000D   7408         MOV     A,#0x8
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   12....       LCALL   ?Subroutine16 & 0xFFFF
    529            dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVRXON;
    530          
    531            *pBuf++ = LO_UINT16( serverMask );
   \                     ??CrossCallReturnLabel_17:
   \   000015   EA           MOV     A,R2
   \   000016   8882         MOV     DPL,R0
   \   000018   8983         MOV     DPH,R1
   \   00001A   F0           MOVX    @DPTR,A
    532            *pBuf = HI_UINT16( serverMask );
   \   00001B   EB           MOV     A,R3
   \   00001C   A3           INC     DPTR
   \   00001D   F0           MOVX    @DPTR,A
    533          
    534            FillAndSendTxOptions( &ZDP_TransID, &dstAddr, Server_Discovery_req, 2,
    535                       ((SecurityEnable) ? AF_EN_SECURITY : AF_TX_OPTIONS_NONE) );
   \   00001E   EE           MOV     A,R6
   \   00001F   90....       MOV     DPTR,#ZDP_TxOptions
   \   000022   6004         JZ      ??ZDP_ServerDiscReq_0
   \   000024   7440         MOV     A,#0x40
   \   000026   8001         SJMP    ??ZDP_ServerDiscReq_1
   \                     ??ZDP_ServerDiscReq_0:
   \   000028   E4           CLR     A
   \                     ??ZDP_ServerDiscReq_1:
   \   000029   F0           MOVX    @DPTR,A
   \   00002A                ; Setup parameters for call to function fillAndSend
   \   00002A   75..15       MOV     ?V0,#0x15
   \   00002D   75..00       MOV     ?V1,#0x0
   \   000030   78..         MOV     R0,#?V0
   \   000032   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000035   7902         MOV     R1,#0x2
   \   000037   E9           MOV     A,R1
   \   000038   12....       LCALL   ?XSTACK_DISP102_8
   \   00003B   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   00003D   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   00003F   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   000042   7402         MOV     A,#0x2
   \   000044   12....       LCALL   ?DEALLOC_XSTACK8
   \   000047   E9           MOV     A,R1
   \   000048   F9           MOV     R1,A
   \   000049   90....       MOV     DPTR,#ZDP_TxOptions
   \   00004C   E4           CLR     A
   \   00004D   F0           MOVX    @DPTR,A
   \   00004E   02....       LJMP    ??Subroutine96_0 & 0xFFFF
    536          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   740F         MOV     A,#0xf
   \   000002   F0           MOVX    @DPTR,A
   \   000003   85..82       MOV     DPL,?XSP + 0
   \   000006   85..83       MOV     DPH,?XSP + 1
   \   000009   74FD         MOV     A,#-0x3
   \   00000B   F0           MOVX    @DPTR,A
   \   00000C   A3           INC     DPTR
   \   00000D   74FF         MOV     A,#-0x1
   \   00000F   F0           MOVX    @DPTR,A
   \   000010   22           RET
    537          
    538          /*********************************************************************
    539           * @fn          ZDP_DeviceAnnce
    540           *
    541           * @brief       This builds and send a Device_Annce message.  This
    542           *              function sends a broadcast message.
    543           *
    544           * @param       nwkAddr - 16 bit address of the device
    545           * @param       IEEEAddr - 64 bit address of the device
    546           * @param       capabilities - device capabilities.  This field is only
    547           *                 sent for v1.1 networks.
    548           * @param       SecurityEnable - Security Options
    549           *
    550           * @return      afStatus_t
    551           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    552          afStatus_t ZDP_DeviceAnnce( uint16 nwkAddr, uint8 *IEEEAddr,
   \                     ZDP_DeviceAnnce:
    553                                        byte capabilities, byte SecurityEnable )
    554          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
    555            zAddrType_t dstAddr;
    556            uint8 len;
    557          
    558            (void)SecurityEnable;  // Intentionally unreferenced parameter
    559          
    560            dstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
   \   00000C   7408         MOV     A,#0x8
   \   00000E   12....       LCALL   ?XSTACK_DISP0_8
   \   000011   12....       LCALL   ?Subroutine16 & 0xFFFF
    561            dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVRXON;
    562          
    563            ZDP_TmpBuf[0] = LO_UINT16( nwkAddr );
   \                     ??CrossCallReturnLabel_18:
   \   000014   12....       LCALL   ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_194:
   \   000017   EA           MOV     A,R2
   \   000018   12....       LCALL   ?Subroutine18 & 0xFFFF
    564            ZDP_TmpBuf[1] = HI_UINT16( nwkAddr );
   \                     ??CrossCallReturnLabel_21:
   \   00001B   EB           MOV     A,R3
   \   00001C   F0           MOVX    @DPTR,A
    565            osal_cpyExtAddr( &ZDP_TmpBuf[2], IEEEAddr );
   \   00001D                ; Setup parameters for call to function sAddrExtCpy
   \   00001D   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000020   E0           MOVX    A,@DPTR
   \   000021   2402         ADD     A,#0x2
   \   000023   FA           MOV     R2,A
   \   000024   A3           INC     DPTR
   \   000025   E0           MOVX    A,@DPTR
   \   000026   3400         ADDC    A,#0x0
   \   000028   FB           MOV     R3,A
   \   000029   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
    566            len = 2 + Z_EXTADDR_LEN;
    567          
    568            ZDP_TmpBuf[10] = capabilities;
   \   00002C   12....       LCALL   ?Subroutine94 & 0xFFFF
   \                     ??CrossCallReturnLabel_274:
   \   00002F   C8           XCH     A,R0
   \   000030   240A         ADD     A,#0xa
   \   000032   F582         MOV     DPL,A
   \   000034   E4           CLR     A
   \   000035   38           ADDC    A,R0
   \   000036   F583         MOV     DPH,A
   \   000038   EE           MOV     A,R6
   \   000039   F0           MOVX    @DPTR,A
    569            len++;
    570          
    571            return fillAndSend( &ZDP_TransID, &dstAddr, Device_annce, len );
   \   00003A                ; Setup parameters for call to function fillAndSend
   \   00003A   75..13       MOV     ?V0,#0x13
   \   00003D   75..00       MOV     ?V1,#0x0
   \   000040   78..         MOV     R0,#?V0
   \   000042   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000045   790B         MOV     R1,#0xb
   \   000047   02....       LJMP    ?Subroutine5 & 0xFFFF
    572          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine44:
   \   000000   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000003                REQUIRE ??Subroutine111_0
   \   000003                ; // Fall through to label ??Subroutine111_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine111_0:
   \   000000   12....       LCALL   ?Subroutine84 & 0xFFFF
   \                     ??CrossCallReturnLabel_200:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   12....       LCALL   ?Subroutine77 & 0xFFFF
   \                     ??CrossCallReturnLabel_128:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine94:
   \   000000   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000003                REQUIRE ??Subroutine129_0
   \   000003                ; // Fall through to label ??Subroutine129_0
    573          
    574          /*********************************************************************
    575           * Address Responses
    576           */
    577          
    578          /*********************************************************************
    579           * @fn      zdpProcessAddrReq
    580           *
    581           * @brief   Process an incoming NWK_addr_req or IEEE_addr_req message and then
    582           *          build and send a corresponding NWK_addr_rsp or IEEE_addr_rsp msg.
    583           *
    584           * @param   inMsg - incoming message
    585           *
    586           * @return  none
    587           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    588          void zdpProcessAddrReq( zdoIncomingMsg_t *inMsg )
   \                     zdpProcessAddrReq:
    589          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V2,R2
   \   000007   8B..         MOV     ?V3,R3
    590            associated_devices_t *pAssoc;
    591            uint8 reqType;
    592            uint16 aoi = INVALID_NODE_ADDR;
   \   000009   7EFE         MOV     R6,#-0x2
   \   00000B   7FFF         MOV     R7,#-0x1
    593            uint8 *ieee = NULL;
   \   00000D   75..00       MOV     ?V0,#0x0
   \   000010   75..00       MOV     ?V1,#0x0
    594          
    595            reqType = inMsg->asdu[(inMsg->clusterID == NWK_addr_req) ? Z_EXTADDR_LEN : sizeof( uint16 ) ];
   \   000013   EA           MOV     A,R2
   \   000014   240C         ADD     A,#0xc
   \   000016   12....       LCALL   ?Subroutine71 & 0xFFFF
   \                     ??CrossCallReturnLabel_114:
   \   000019   12....       LCALL   ??Subroutine110_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_182:
   \   00001C   EA           MOV     A,R2
   \   00001D   4B           ORL     A,R3
   \   00001E   7004         JNZ     ??zdpProcessAddrReq_0
   \   000020   7C08         MOV     R4,#0x8
   \   000022   8002         SJMP    ??zdpProcessAddrReq_1
   \                     ??zdpProcessAddrReq_0:
   \   000024   7C02         MOV     R4,#0x2
   \                     ??zdpProcessAddrReq_1:
   \   000026   E5..         MOV     A,?V2
   \   000028   2413         ADD     A,#0x13
   \   00002A   F582         MOV     DPL,A
   \   00002C   E4           CLR     A
   \   00002D   35..         ADDC    A,?V3
   \   00002F   F583         MOV     DPH,A
   \   000031   12....       LCALL   ??Subroutine105_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_170:
   \   000034   2C           ADD     A,R4
   \   000035   F582         MOV     DPL,A
   \   000037   E4           CLR     A
   \   000038   39           ADDC    A,R1
   \   000039   F583         MOV     DPH,A
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   F5..         MOV     ?V4,A
    596          
    597            if ( inMsg->clusterID == NWK_addr_req )
   \   00003E   EA           MOV     A,R2
   \   00003F   4B           ORL     A,R3
   \   000040   7017         JNZ     ??zdpProcessAddrReq_2
    598          
    599            {
    600              ieee = inMsg->asdu;
   \   000042   88..         MOV     ?V0,R0
   \   000044   89..         MOV     ?V1,R1
    601          
    602              if ( osal_ExtAddrEqual( saveExtAddr, ieee ) )
   \   000046                ; Setup parameters for call to function sAddrExtCmp
   \   000046   AC..         MOV     R4,?V0
   \   000048   AD..         MOV     R5,?V1
   \   00004A   7A..         MOV     R2,#saveExtAddr & 0xff
   \   00004C   7B..         MOV     R3,#(saveExtAddr >> 8) & 0xff
   \   00004E   12....       LCALL   `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   000051   E9           MOV     A,R1
   \   000052   6039         JZ      ??zdpProcessAddrReq_3
    603              {
    604                aoi = ZDAppNwkAddr.addr.shortAddr;
   \   000054   12....       LCALL   ?Subroutine53 & 0xFFFF
    605              }
    606              // Handle response for sleeping end devices
    607              else if ( (ZSTACK_ROUTER_BUILD)
    608                && (((pAssoc = AssocGetWithExt( ieee )) != NULL)
    609                       && (pAssoc->nodeRelation == CHILD_RFD)) )
    610              {
    611                aoi = pAssoc->shortAddr;
    612                if ( reqType != ZDP_ADDR_REQTYPE_SINGLE )
    613                  reqType = 0xFF; // Force Invalid
    614              }
    615            }
   \                     ??CrossCallReturnLabel_255:
   \   000057   8024         SJMP    ??zdpProcessAddrReq_4
    616            else  // if ( inMsg->clusterID == IEEE_addr_req )
    617            {
    618              aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
   \                     ??zdpProcessAddrReq_2:
   \   000059   8882         MOV     DPL,R0
   \   00005B   8983         MOV     DPH,R1
   \   00005D   E0           MOVX    A,@DPTR
   \   00005E   FA           MOV     R2,A
   \   00005F   A3           INC     DPTR
   \   000060   E0           MOVX    A,@DPTR
   \   000061   F8           MOV     R0,A
   \   000062   E4           CLR     A
   \   000063   C8           XCH     A,R0
   \   000064   F9           MOV     R1,A
   \   000065   EA           MOV     A,R2
   \   000066   28           ADD     A,R0
   \   000067   FE           MOV     R6,A
   \   000068   E4           CLR     A
   \   000069   39           ADDC    A,R1
   \   00006A   FF           MOV     R7,A
    619          
    620              if ( aoi == ZDAppNwkAddr.addr.shortAddr )
   \   00006B   90....       MOV     DPTR,#ZDAppNwkAddr
   \   00006E   E0           MOVX    A,@DPTR
   \   00006F   6E           XRL     A,R6
   \   000070   7003         JNZ     ??zdpProcessAddrReq_5
   \   000072   A3           INC     DPTR
   \   000073   E0           MOVX    A,@DPTR
   \   000074   6F           XRL     A,R7
   \                     ??zdpProcessAddrReq_5:
   \   000075   7016         JNZ     ??zdpProcessAddrReq_3
    621              {
    622                ieee = saveExtAddr;
   \   000077   75....       MOV     ?V0,#saveExtAddr & 0xff
   \   00007A   75....       MOV     ?V1,#(saveExtAddr >> 8) & 0xff
    623              }
    624              else if ( (ZSTACK_ROUTER_BUILD)
    625                && (((pAssoc = AssocGetWithShort( aoi )) != NULL)
    626                       && (pAssoc->nodeRelation == CHILD_RFD)) )
    627              {
    628                AddrMgrEntry_t addrEntry;
    629                addrEntry.user = ADDRMGR_USER_DEFAULT;
    630                addrEntry.index = pAssoc->addrIdx;
    631                if ( AddrMgrEntryGet( &addrEntry ) )
    632                {
    633                  ieee = addrEntry.extAddr;
    634                }
    635          
    636                if ( reqType != ZDP_ADDR_REQTYPE_SINGLE )
    637                  reqType = 0xFF; // Force Invalid
    638              }
    639            }
    640          
    641            if ( ((aoi != INVALID_NODE_ADDR) && (ieee != NULL)) || (inMsg->wasBroadcast == FALSE) )
   \                     ??zdpProcessAddrReq_4:
   \   00007D   74FE         MOV     A,#-0x2
   \   00007F   6E           XRL     A,R6
   \   000080   7003         JNZ     ??zdpProcessAddrReq_6
   \   000082   74FF         MOV     A,#-0x1
   \   000084   6F           XRL     A,R7
   \                     ??zdpProcessAddrReq_6:
   \   000085   6006         JZ      ??zdpProcessAddrReq_3
   \   000087   E5..         MOV     A,?V0
   \   000089   45..         ORL     A,?V1
   \   00008B   7011         JNZ     ??zdpProcessAddrReq_7
   \                     ??zdpProcessAddrReq_3:
   \   00008D   E5..         MOV     A,?V2
   \   00008F   240B         ADD     A,#0xb
   \   000091   F582         MOV     DPL,A
   \   000093   E4           CLR     A
   \   000094   35..         ADDC    A,?V3
   \   000096   F583         MOV     DPH,A
   \   000098   E0           MOVX    A,@DPTR
   \   000099   6003         JZ      $+5
   \   00009B   02....       LJMP    ??zdpProcessAddrReq_8 & 0xFFFF
    642            {
    643              uint8 stat;
    644              uint8 *pBuf = ZDP_TmpBuf;
   \                     ??zdpProcessAddrReq_7:
   \   00009E   12....       LCALL   ??Subroutine109_0 & 0xFFFF
    645              // Status + IEEE-Addr + Nwk-Addr.
    646              uint8 len = 1 + Z_EXTADDR_LEN + 2;
    647              
    648              // If aoi and iee are both setup, we found results
    649              if ( (aoi != INVALID_NODE_ADDR) && (ieee != NULL) )
   \                     ??CrossCallReturnLabel_186:
   \   0000A1   74FE         MOV     A,#-0x2
   \   0000A3   6E           XRL     A,R6
   \   0000A4   7003         JNZ     ??zdpProcessAddrReq_9
   \   0000A6   74FF         MOV     A,#-0x1
   \   0000A8   6F           XRL     A,R7
   \                     ??zdpProcessAddrReq_9:
   \   0000A9   6018         JZ      ??zdpProcessAddrReq_10
   \   0000AB   E5..         MOV     A,?V0
   \   0000AD   45..         ORL     A,?V1
   \   0000AF   6012         JZ      ??zdpProcessAddrReq_10
    650              {
    651                stat = ((reqType == ZDP_ADDR_REQTYPE_SINGLE) || (reqType == ZDP_ADDR_REQTYPE_EXTENDED)) 
    652                              ? ZDP_SUCCESS : ZDP_INVALID_REQTYPE;
   \   0000B1   E5..         MOV     A,?V4
   \   0000B3   6006         JZ      ??zdpProcessAddrReq_11
   \   0000B5   7401         MOV     A,#0x1
   \   0000B7   65..         XRL     A,?V4
   \   0000B9   7004         JNZ     ??zdpProcessAddrReq_12
   \                     ??zdpProcessAddrReq_11:
   \   0000BB   7800         MOV     R0,#0x0
   \   0000BD   801E         SJMP    ??zdpProcessAddrReq_13
   \                     ??zdpProcessAddrReq_12:
   \   0000BF   7880         MOV     R0,#-0x80
   \   0000C1   801A         SJMP    ??zdpProcessAddrReq_13
    653              }
    654              else 
    655              {
    656                // not found and the req was unicast to this device
    657                stat = ZDP_DEVICE_NOT_FOUND;
   \                     ??zdpProcessAddrReq_10:
   \   0000C3   7881         MOV     R0,#-0x7f
    658                
    659                // Fill in the missing field with this device's address
    660                if ( inMsg->clusterID == NWK_addr_req )
   \   0000C5   85..82       MOV     DPL,?V6
   \   0000C8   85..83       MOV     DPH,?V7
   \   0000CB   12....       LCALL   ?Subroutine59 & 0xFFFF
   \                     ??CrossCallReturnLabel_91:
   \   0000CE   EC           MOV     A,R4
   \   0000CF   4D           ORL     A,R5
   \   0000D0   7005         JNZ     ??zdpProcessAddrReq_14
    661                {
    662                  aoi = ZDAppNwkAddr.addr.shortAddr;
   \   0000D2   12....       LCALL   ?Subroutine53 & 0xFFFF
    663                }
   \                     ??CrossCallReturnLabel_256:
   \   0000D5   8006         SJMP    ??zdpProcessAddrReq_13
    664                else
    665                {
    666                  ieee = saveExtAddr;
   \                     ??zdpProcessAddrReq_14:
   \   0000D7   75....       MOV     ?V0,#saveExtAddr & 0xff
   \   0000DA   75....       MOV     ?V1,#(saveExtAddr >> 8) & 0xff
    667                }
    668              }
    669          
    670              *pBuf++ = stat;
   \                     ??zdpProcessAddrReq_13:
   \   0000DD   E8           MOV     A,R0
   \   0000DE   12....       LCALL   ??Subroutine107_0 & 0xFFFF
    671          
    672              pBuf = osal_cpyExtAddr( pBuf, ieee );
   \                     ??CrossCallReturnLabel_177:
   \   0000E1                ; Setup parameters for call to function sAddrExtCpy
   \   0000E1   AC..         MOV     R4,?V0
   \   0000E3   AD..         MOV     R5,?V1
   \   0000E5   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   0000E8   8A82         MOV     DPL,R2
   \   0000EA   8B83         MOV     DPH,R3
    673          
    674              *pBuf++ = LO_UINT16( aoi );
   \   0000EC   EE           MOV     A,R6
   \   0000ED   F0           MOVX    @DPTR,A
    675              *pBuf++ = HI_UINT16( aoi );
   \   0000EE   EF           MOV     A,R7
   \   0000EF   A3           INC     DPTR
   \   0000F0   F0           MOVX    @DPTR,A
    676          
    677              if ( ZSTACK_ROUTER_BUILD )
    678              {
    679                if ( (reqType == ZDP_ADDR_REQTYPE_EXTENDED) && (aoi == ZDAppNwkAddr.addr.shortAddr)
    680                     && (stat == ZDP_SUCCESS) )
    681                {
    682                  uint8  cnt = 0;
    683                  uint16 *list = AssocMakeList( &cnt );
    684          
    685                  if ( list != NULL )
    686                  {
    687                    byte idx = inMsg->asdu[(((inMsg->clusterID == NWK_addr_req) ? Z_EXTADDR_LEN : sizeof( uint16 )) + 1)];
    688                    uint16 *pList = list + idx;
    689          
    690                    // NumAssocDev field is only present on success.
    691                    if ( cnt > idx )
    692                    {
    693                      cnt -= idx;
    694                      len += (cnt * sizeof( uint16 ));
    695                    }
    696                    else
    697                    {
    698                      cnt = 0;
    699                    }
    700                    *pBuf++ = cnt;
    701                    len++;
    702          
    703                    // StartIndex field is only present if NumAssocDev field is non-zero.
    704                    *pBuf++ = idx;
    705                    len++;
    706          
    707                    while ( cnt != 0 )
    708                    {
    709                      *pBuf++ = LO_UINT16( *pList );
    710                      *pBuf++ = HI_UINT16( *pList );
    711                      pList++;
    712                      cnt--;
    713                    }
    714          
    715                    osal_mem_free( (uint8 *)list );
    716                  }
    717                  else
    718                  {
    719                    // NumAssocDev field is only present on success.
    720                    *pBuf++ = 0;
    721                    len++;
    722                  }
    723                }
    724              }
    725          
    726              ZDP_TxOptions = AF_MSG_ACK_REQUEST;
   \   0000F1   90....       MOV     DPTR,#ZDP_TxOptions
   \   0000F4   7410         MOV     A,#0x10
   \   0000F6   12....       LCALL   ?Subroutine35 & 0xFFFF
    727              fillAndSend( &(inMsg->TransSeq), &(inMsg->srcAddr), (cId_t)(inMsg->clusterID | ZDO_RESPONSE_BIT), len );
   \                     ??CrossCallReturnLabel_55:
   \   0000F9   F5..         MOV     ?V0,A
   \   0000FB   A3           INC     DPTR
   \   0000FC   E0           MOVX    A,@DPTR
   \   0000FD   4480         ORL     A,#0x80
   \   0000FF   F5..         MOV     ?V1,A
   \   000101   78..         MOV     R0,#?V0
   \   000103   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000106   790B         MOV     R1,#0xb
   \   000108   E5..         MOV     A,?V2
   \   00010A   2402         ADD     A,#0x2
   \   00010C   FC           MOV     R4,A
   \   00010D   E4           CLR     A
   \   00010E   35..         ADDC    A,?V3
   \   000110   FD           MOV     R5,A
   \   000111   E5..         MOV     A,?V2
   \   000113   240F         ADD     A,#0xf
   \   000115   FA           MOV     R2,A
   \   000116   E4           CLR     A
   \   000117   35..         ADDC    A,?V3
   \   000119   FB           MOV     R3,A
   \   00011A   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   00011D   7402         MOV     A,#0x2
   \   00011F   12....       LCALL   ?DEALLOC_XSTACK8
    728              ZDP_TxOptions = AF_TX_OPTIONS_NONE;
   \   000122   90....       MOV     DPTR,#ZDP_TxOptions
   \   000125   E4           CLR     A
   \   000126   F0           MOVX    @DPTR,A
    729            }
    730          }
   \                     ??zdpProcessAddrReq_8:
   \   000127   02....       LJMP    ??Subroutine117_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine105_0:
   \   000000   12....       LCALL   ?Subroutine81 & 0xFFFF
   \                     ??CrossCallReturnLabel_270:
   \   000003   E8           MOV     A,R0
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function fillAndSend
   \   000001   85..82       MOV     DPL,?V6
   \   000004   85..83       MOV     DPH,?V7
   \   000007   E0           MOVX    A,@DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine107_0:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004                REQUIRE ??Subroutine108_0
   \   000004                ; // Fall through to label ??Subroutine108_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine108_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   AA82         MOV     R2,DPL
   \   000004   AB83         MOV     R3,DPH
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine71:
   \   000000   F5..         MOV     ?V6,A
   \   000002   E4           CLR     A
   \   000003   35..         ADDC    A,?V3
   \   000005   F5..         MOV     ?V7,A
   \   000007   85..82       MOV     DPL,?V6
   \   00000A   F583         MOV     DPH,A
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine59:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FC           MOV     R4,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FD           MOV     R5,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine117_0:
   \   000000   7F08         MOV     R7,#0x8
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine53:
   \   000000   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000003                REQUIRE ??Subroutine126_0
   \   000003                ; // Fall through to label ??Subroutine126_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine126_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FE           MOV     R6,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FF           MOV     R7,A
   \   000005   22           RET
    731          
    732          /*********************************************************************
    733           * @fn          ZDP_NodeDescMsg
    734           *
    735           * @brief       Builds and sends a Node Descriptor message, unicast to the
    736           *              specified device.
    737           *
    738           * @param       inMsg - incoming message
    739           * @param       nwkAddr - 16 bit network address for device
    740           * @param       pNodeDesc - pointer to the node descriptor
    741           *
    742           * @return      afStatus_t
    743           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine101_0
   \   000001                ; // Fall through to label ??Subroutine101_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    744          afStatus_t ZDP_NodeDescMsg( zdoIncomingMsg_t *inMsg,
   \                     ZDP_NodeDescMsg:
    745                                     uint16 nwkAddr, NodeDescriptorFormat_t *pNodeDesc )
    746          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    747            uint8 *pBuf = ZDP_TmpBuf;
   \   000005   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000008   E0           MOVX    A,@DPTR
   \   000009   FE           MOV     R6,A
   \   00000A   A3           INC     DPTR
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   12....       LCALL   ?Subroutine17 & 0xFFFF
    748            byte len;
    749          
    750            len = 1 + 2 + 13;  // Status + nwkAddr + Node descriptor
    751          
    752            *pBuf++ = ZDP_SUCCESS;
    753          
    754            *pBuf++ = LO_UINT16( nwkAddr );
    755            *pBuf++ = HI_UINT16( nwkAddr );
   \                     ??CrossCallReturnLabel_19:
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   12....       LCALL   ?Subroutine41 & 0xFFFF
    756          
    757            *pBuf++ = (byte)((pNodeDesc->ComplexDescAvail << 3) |
    758                               (pNodeDesc->UserDescAvail << 4) |
    759                               (pNodeDesc->LogicalType & 0x07));
   \                     ??CrossCallReturnLabel_64:
   \   000015   541F         ANL     A,#0x1f
   \   000017   8E82         MOV     DPL,R6
   \   000019   8F83         MOV     DPH,R7
   \   00001B   12....       LCALL   ?Subroutine29 & 0xFFFF
    760          
    761            *pBuf++ = (byte)((pNodeDesc->FrequencyBand << 3) | (pNodeDesc->APSFlags & 0x07));
   \                     ??CrossCallReturnLabel_153:
   \   00001E   12....       LCALL   ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   000021   12....       LCALL   ?Subroutine29 & 0xFFFF
    762            *pBuf++ = pNodeDesc->CapabilityFlags;
   \                     ??CrossCallReturnLabel_154:
   \   000024   12....       LCALL   ?Subroutine60 & 0xFFFF
   \                     ??CrossCallReturnLabel_159:
   \   000027   12....       LCALL   ?Subroutine28 & 0xFFFF
    763            *pBuf++ = pNodeDesc->ManufacturerCode[0];
   \                     ??CrossCallReturnLabel_161:
   \   00002A   12....       LCALL   ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_75:
   \   00002D   12....       LCALL   ?Subroutine28 & 0xFFFF
    764            *pBuf++ = pNodeDesc->ManufacturerCode[1];
   \                     ??CrossCallReturnLabel_162:
   \   000030   12....       LCALL   ?Subroutine60 & 0xFFFF
   \                     ??CrossCallReturnLabel_160:
   \   000033   12....       LCALL   ?Subroutine27 & 0xFFFF
    765            *pBuf++ = pNodeDesc->MaxBufferSize;
   \                     ??CrossCallReturnLabel_38:
   \   000036   12....       LCALL   ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_76:
   \   000039   12....       LCALL   ?Subroutine27 & 0xFFFF
    766            *pBuf++ = pNodeDesc->MaxInTransferSize[0];
   \                     ??CrossCallReturnLabel_39:
   \   00003C   A3           INC     DPTR
   \   00003D   12....       LCALL   ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   000040   12....       LCALL   ?Subroutine20 & 0xFFFF
    767            *pBuf++ = pNodeDesc->MaxInTransferSize[1];
   \                     ??CrossCallReturnLabel_23:
   \   000043   12....       LCALL   ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_67:
   \   000046   A3           INC     DPTR
   \   000047   F0           MOVX    @DPTR,A
    768          
    769            *pBuf++ = LO_UINT16( pNodeDesc->ServerMask );
   \   000048   E8           MOV     A,R0
   \   000049   2408         ADD     A,#0x8
   \   00004B   FC           MOV     R4,A
   \   00004C   E4           CLR     A
   \   00004D   39           ADDC    A,R1
   \   00004E   FD           MOV     R5,A
   \   00004F   8C82         MOV     DPL,R4
   \   000051   8D83         MOV     DPH,R5
   \   000053   E0           MOVX    A,@DPTR
   \   000054   F5..         MOV     ?V0,A
   \   000056   EE           MOV     A,R6
   \   000057   240B         ADD     A,#0xb
   \   000059   F582         MOV     DPL,A
   \   00005B   E4           CLR     A
   \   00005C   3F           ADDC    A,R7
   \   00005D   F583         MOV     DPH,A
   \   00005F   E5..         MOV     A,?V0
   \   000061   12....       LCALL   ?Subroutine25 & 0xFFFF
    770            *pBuf++ = HI_UINT16( pNodeDesc->ServerMask );
   \                     ??CrossCallReturnLabel_33:
   \   000064   C0E0         PUSH    A
   \   000066   EE           MOV     A,R6
   \   000067   240C         ADD     A,#0xc
   \   000069   F582         MOV     DPL,A
   \   00006B   E4           CLR     A
   \   00006C   3F           ADDC    A,R7
   \   00006D   F583         MOV     DPH,A
   \   00006F   D0E0         POP     A
   \   000071   12....       LCALL   ?Subroutine20 & 0xFFFF
    771            *pBuf++ = pNodeDesc->MaxOutTransferSize[0];
   \                     ??CrossCallReturnLabel_24:
   \   000074   A3           INC     DPTR
   \   000075   A3           INC     DPTR
   \   000076   A3           INC     DPTR
   \   000077   E0           MOVX    A,@DPTR
   \   000078   C0E0         PUSH    A
   \   00007A   EE           MOV     A,R6
   \   00007B   240D         ADD     A,#0xd
   \   00007D   F582         MOV     DPL,A
   \   00007F   E4           CLR     A
   \   000080   3F           ADDC    A,R7
   \   000081   F583         MOV     DPH,A
   \   000083   D0E0         POP     A
   \   000085   F0           MOVX    @DPTR,A
    772            *pBuf++ = pNodeDesc->MaxOutTransferSize[1];
   \   000086   E8           MOV     A,R0
   \   000087   240B         ADD     A,#0xb
   \   000089   F582         MOV     DPL,A
   \   00008B   E4           CLR     A
   \   00008C   39           ADDC    A,R1
   \   00008D   F583         MOV     DPH,A
   \   00008F   E0           MOVX    A,@DPTR
   \   000090   C0E0         PUSH    A
   \   000092   EE           MOV     A,R6
   \   000093   240E         ADD     A,#0xe
   \   000095   F582         MOV     DPL,A
   \   000097   E4           CLR     A
   \   000098   3F           ADDC    A,R7
   \   000099   F583         MOV     DPH,A
   \   00009B   D0E0         POP     A
   \   00009D   F0           MOVX    @DPTR,A
    773            *pBuf = pNodeDesc->DescriptorCapability;
   \   00009E   E8           MOV     A,R0
   \   00009F   240C         ADD     A,#0xc
   \   0000A1   F582         MOV     DPL,A
   \   0000A3   E4           CLR     A
   \   0000A4   39           ADDC    A,R1
   \   0000A5   F583         MOV     DPH,A
   \   0000A7   E0           MOVX    A,@DPTR
   \   0000A8   C0E0         PUSH    A
   \   0000AA   EE           MOV     A,R6
   \   0000AB   240F         ADD     A,#0xf
   \   0000AD   F582         MOV     DPL,A
   \   0000AF   E4           CLR     A
   \   0000B0   3F           ADDC    A,R7
   \   0000B1   F583         MOV     DPH,A
   \   0000B3   D0E0         POP     A
   \   0000B5   F0           MOVX    @DPTR,A
    774          
    775            return fillAndSend( &(inMsg->TransSeq), &(inMsg->srcAddr), Node_Desc_rsp, len );
   \   0000B6                ; Setup parameters for call to function fillAndSend
   \   0000B6   75..02       MOV     ?V0,#0x2
   \   0000B9   75..80       MOV     ?V1,#-0x80
   \   0000BC   78..         MOV     R0,#?V0
   \   0000BE   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000C1   7910         MOV     R1,#0x10
   \   0000C3   12....       LCALL   ?Subroutine72 & 0xFFFF
   \                     ??CrossCallReturnLabel_117:
   \   0000C6   5001         JNC     ??ZDP_NodeDescMsg_0
   \   0000C8   0B           INC     R3
   \                     ??ZDP_NodeDescMsg_0:
   \   0000C9   02....       LJMP    ??Subroutine98_0 & 0xFFFF
    776          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine60:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine103_0
   \   000001                ; // Fall through to label ??Subroutine103_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine103_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine43:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   A3           INC     DPTR
   \   00000D   A3           INC     DPTR
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005                REQUIRE ??Subroutine104_0
   \   000005                ; // Fall through to label ??Subroutine104_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine104_0:
   \   000000   12....       LCALL   ?Subroutine87 & 0xFFFF
   \                     ??CrossCallReturnLabel_165:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   12....       LCALL   ?Subroutine86 & 0xFFFF
   \                     ??CrossCallReturnLabel_139:
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine86:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8882         MOV     DPL,R0
   \   000003   8983         MOV     DPH,R1
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   12....       LCALL   ?Subroutine86 & 0xFFFF
   \                     ??CrossCallReturnLabel_140:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine72:
   \   000000   EA           MOV     A,R2
   \   000001   2402         ADD     A,#0x2
   \   000003   FC           MOV     R4,A
   \   000004   E4           CLR     A
   \   000005   3B           ADDC    A,R3
   \   000006   FD           MOV     R5,A
   \   000007   EA           MOV     A,R2
   \   000008   240F         ADD     A,#0xf
   \   00000A   FA           MOV     R2,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   FF           MOV     R7,A
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   E4           CLR     A
   \   000006   F0           MOVX    @DPTR,A
   \   000007   EC           MOV     A,R4
   \   000008   A3           INC     DPTR
   \   000009   F0           MOVX    @DPTR,A
   \   00000A   ED           MOV     A,R5
   \   00000B   8E82         MOV     DPL,R6
   \   00000D   8F83         MOV     DPH,R7
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   F0           MOVX    @DPTR,A
   \   000012   740A         MOV     A,#0xa
   \   000014   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8C82         MOV     DPL,R4
   \   000003   8D83         MOV     DPH,R5
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine49:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   A3           INC     DPTR
   \   000006   22           RET
    777          
    778          /*********************************************************************
    779           * @fn          ZDP_PowerDescMsg
    780           *
    781           * @brief       Builds and sends a Power Descriptor message, unicast to the
    782           *              specified device.
    783           *
    784           * @param       inMsg - incoming message (request)
    785           * @param       nwkAddr - 16 bit network address for device
    786           * @param       pPowerDesc - pointer to the node descriptor
    787           *
    788           * @return      afStatus_t
    789           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    790          afStatus_t ZDP_PowerDescMsg( zdoIncomingMsg_t *inMsg,
   \                     ZDP_PowerDescMsg:
    791                               uint16 nwkAddr, NodePowerDescriptorFormat_t *pPowerDesc )
    792          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    793            uint8 *pBuf = ZDP_TmpBuf;
   \   000005   12....       LCALL   ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_171:
   \   000008   FE           MOV     R6,A
   \   000009   E9           MOV     A,R1
   \   00000A   12....       LCALL   ?Subroutine17 & 0xFFFF
    794            byte len = 1 + 2 + 2;  // Status + nwkAddr + Node Power descriptor.
    795          
    796            *pBuf++ = ZDP_SUCCESS;
    797          
    798            *pBuf++ = LO_UINT16( nwkAddr );
    799            *pBuf++ = HI_UINT16( nwkAddr );
   \                     ??CrossCallReturnLabel_20:
   \   00000D   12....       LCALL   ?XSTACK_DISP0_8
   \   000010   12....       LCALL   ?Subroutine41 & 0xFFFF
    800          
    801            *pBuf++ = (byte)((pPowerDesc->AvailablePowerSources << 4)
    802                              | (pPowerDesc->PowerMode & 0x0F));
   \                     ??CrossCallReturnLabel_65:
   \   000013   8E82         MOV     DPL,R6
   \   000015   8F83         MOV     DPH,R7
   \   000017   A3           INC     DPTR
   \   000018   A3           INC     DPTR
   \   000019   A3           INC     DPTR
   \   00001A   12....       LCALL   ?Subroutine87 & 0xFFFF
    803            *pBuf++ = (byte)((pPowerDesc->CurrentPowerSourceLevel << 4)
    804                              | (pPowerDesc->CurrentPowerSource & 0x0F));
   \                     ??CrossCallReturnLabel_166:
   \   00001D   12....       LCALL   ??Subroutine112_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_206:
   \   000020   540F         ANL     A,#0xf
   \   000022   F9           MOV     R1,A
   \   000023   740C         MOV     A,#0xc
   \   000025   78..         MOV     R0,#?V0
   \   000027   12....       LCALL   ?US_SHR
   \   00002A   E5..         MOV     A,?V0
   \   00002C   C4           SWAP    A
   \   00002D   49           ORL     A,R1
   \   00002E   8E82         MOV     DPL,R6
   \   000030   8F83         MOV     DPH,R7
   \   000032   A3           INC     DPTR
   \   000033   A3           INC     DPTR
   \   000034   A3           INC     DPTR
   \   000035   A3           INC     DPTR
   \   000036   F0           MOVX    @DPTR,A
    805          
    806            return fillAndSend( &(inMsg->TransSeq), &(inMsg->srcAddr), Power_Desc_rsp, len );
   \   000037                ; Setup parameters for call to function fillAndSend
   \   000037   75..03       MOV     ?V0,#0x3
   \   00003A   75..80       MOV     ?V1,#-0x80
   \   00003D   78..         MOV     R0,#?V0
   \   00003F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000042   7905         MOV     R1,#0x5
   \   000044   12....       LCALL   ?Subroutine72 & 0xFFFF
   \                     ??CrossCallReturnLabel_118:
   \   000047   5001         JNC     ??ZDP_PowerDescMsg_0
   \   000049   0B           INC     R3
   \                     ??ZDP_PowerDescMsg_0:
   \   00004A   02....       LJMP    ??Subroutine98_0 & 0xFFFF
    807          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine56:
   \   000000   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000003                REQUIRE ??Subroutine105_0
   \   000003                ; // Fall through to label ??Subroutine105_0
    808          
    809          /*********************************************************************
    810           * @fn          ZDP_SimpleDescMsg
    811           *
    812           * @brief       Builds and sends a Simple Descriptor message, unicast to the
    813           *              specified device.
    814           *
    815           * @param       inMsg - incoming message (request)
    816           * @param       Status - message status (ZDP_SUCCESS or other)
    817           * @param       pSimpleDesc - pointer to the node descriptor
    818           *
    819           * @return      afStatus_t
    820           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    821          afStatus_t ZDP_SimpleDescMsg( zdoIncomingMsg_t *inMsg, byte Status,
   \                     ZDP_SimpleDescMsg:
    822                                        SimpleDescriptionFormat_t *pSimpleDesc )
    823          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   7401         MOV     A,#0x1
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   000012   E9           MOV     A,R1
   \   000013   85..82       MOV     DPL,?XSP + 0
   \   000016   85..83       MOV     DPH,?XSP + 1
   \   000019   F0           MOVX    @DPTR,A
   \   00001A   EC           MOV     A,R4
   \   00001B   FE           MOV     R6,A
   \   00001C   ED           MOV     A,R5
   \   00001D   FF           MOV     R7,A
    824            uint8 *pBuf = ZDP_TmpBuf;
   \   00001E   12....       LCALL   ??Subroutine109_0 & 0xFFFF
    825            uint8 i, len;
    826          
    827            if ( Status == ZDP_SUCCESS && pSimpleDesc )
   \                     ??CrossCallReturnLabel_187:
   \   000021   EE           MOV     A,R6
   \   000022   2409         ADD     A,#0x9
   \   000024   F5..         MOV     ?V2,A
   \   000026   E4           CLR     A
   \   000027   3F           ADDC    A,R7
   \   000028   F5..         MOV     ?V3,A
   \   00002A   EE           MOV     A,R6
   \   00002B   2406         ADD     A,#0x6
   \   00002D   F5..         MOV     ?V4,A
   \   00002F   E4           CLR     A
   \   000030   3F           ADDC    A,R7
   \   000031   F5..         MOV     ?V5,A
   \   000033   85..82       MOV     DPL,?XSP + 0
   \   000036   85..83       MOV     DPH,?XSP + 1
   \   000039   E0           MOVX    A,@DPTR
   \   00003A   7023         JNZ     ??ZDP_SimpleDescMsg_0
   \   00003C   EE           MOV     A,R6
   \   00003D   4F           ORL     A,R7
   \   00003E   601F         JZ      ??ZDP_SimpleDescMsg_0
    828            {
    829              // Status + NWKAddrOfInterest + desc length + empty simple descriptor.
    830              len = 1 + 2 + 1 + 8;
    831              len += (pSimpleDesc->AppNumInClusters + pSimpleDesc->AppNumOutClusters) * sizeof ( uint16 );
   \   000040   85..82       MOV     DPL,?V2
   \   000043   85..83       MOV     DPH,?V3
   \   000046   E0           MOVX    A,@DPTR
   \   000047   F8           MOV     R0,A
   \   000048   85..82       MOV     DPL,?V4
   \   00004B   85..83       MOV     DPH,?V5
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   28           ADD     A,R0
   \   000050   C3           CLR     C
   \   000051   33           RLC     A
   \   000052   240C         ADD     A,#0xc
   \   000054   F9           MOV     R1,A
    832            }
    833            else
    834            {
    835              len = 1 + 2 + 1; // Status + desc length
    836            }
    837            if ( len >= ZDP_BUF_SZ-1 )
   \   000055   C3           CLR     C
   \   000056   944F         SUBB    A,#0x4f
   \   000058   4007         JC      ??ZDP_SimpleDescMsg_1
    838            {
    839              return afStatus_MEM_FAIL;
   \   00005A   7910         MOV     R1,#0x10
   \   00005C   02....       LJMP    ??ZDP_SimpleDescMsg_2 & 0xFFFF
    840            }
   \                     ??ZDP_SimpleDescMsg_0:
   \   00005F   7904         MOV     R1,#0x4
    841          
    842            *pBuf++ = Status;
   \                     ??ZDP_SimpleDescMsg_1:
   \   000061   12....       LCALL   ?Subroutine40 & 0xFFFF
    843          
    844            *pBuf++ = LO_UINT16( ZDAppNwkAddr.addr.shortAddr );
   \                     ??CrossCallReturnLabel_224:
   \   000064   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000067   12....       LCALL   ??Subroutine123_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_235:
   \   00006A   F0           MOVX    @DPTR,A
    845            *pBuf++ = HI_UINT16( ZDAppNwkAddr.addr.shortAddr );
   \   00006B   90....       MOV     DPTR,#ZDAppNwkAddr + 1
   \   00006E   12....       LCALL   ?Subroutine65 & 0xFFFF
    846          
    847            if ( len > 4 )
   \                     ??CrossCallReturnLabel_104:
   \   000071   EA           MOV     A,R2
   \   000072   2403         ADD     A,#0x3
   \   000074   F582         MOV     DPL,A
   \   000076   E4           CLR     A
   \   000077   3B           ADDC    A,R3
   \   000078   F583         MOV     DPH,A
   \   00007A   E9           MOV     A,R1
   \   00007B   C3           CLR     C
   \   00007C   9405         SUBB    A,#0x5
   \   00007E   5003         JNC     $+5
   \   000080   02....       LJMP    ??ZDP_SimpleDescMsg_3 & 0xFFFF
    848            {
    849              *pBuf++ = len - 4;   // Simple descriptor length
   \   000083   74FC         MOV     A,#-0x4
   \   000085   29           ADD     A,R1
   \   000086   F0           MOVX    @DPTR,A
    850          
    851              *pBuf++ = pSimpleDesc->EndPoint;
   \   000087   8E82         MOV     DPL,R6
   \   000089   8F83         MOV     DPH,R7
   \   00008B   12....       LCALL   ??Subroutine123_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_236:
   \   00008E   A3           INC     DPTR
   \   00008F   A3           INC     DPTR
   \   000090   A3           INC     DPTR
   \   000091   F0           MOVX    @DPTR,A
    852              *pBuf++ = LO_UINT16( pSimpleDesc->AppProfId );
   \   000092   8E82         MOV     DPL,R6
   \   000094   8F83         MOV     DPH,R7
   \   000096   A3           INC     DPTR
   \   000097   AC82         MOV     R4,DPL
   \   000099   AD83         MOV     R5,DPH
   \   00009B   12....       LCALL   ?Subroutine67 & 0xFFFF
   \                     ??CrossCallReturnLabel_106:
   \   00009E   12....       LCALL   ?Subroutine9 & 0xFFFF
    853              *pBuf++ = HI_UINT16( pSimpleDesc->AppProfId );
   \                     ??CrossCallReturnLabel_2:
   \   0000A1   F0           MOVX    @DPTR,A
    854              *pBuf++ = LO_UINT16( pSimpleDesc->AppDeviceId );
   \   0000A2   EE           MOV     A,R6
   \   0000A3   2403         ADD     A,#0x3
   \   0000A5   12....       LCALL   ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_237:
   \   0000A8   A3           INC     DPTR
   \   0000A9   12....       LCALL   ?Subroutine9 & 0xFFFF
    855              *pBuf++ = HI_UINT16( pSimpleDesc->AppDeviceId );
   \                     ??CrossCallReturnLabel_3:
   \   0000AC   12....       LCALL   ?Subroutine36 & 0xFFFF
    856          
    857              *pBuf++ = (byte)(pSimpleDesc->AppDevVer << 4);
   \                     ??CrossCallReturnLabel_57:
   \   0000AF   A3           INC     DPTR
   \   0000B0   A3           INC     DPTR
   \   0000B1   E0           MOVX    A,@DPTR
   \   0000B2   C4           SWAP    A
   \   0000B3   54F0         ANL     A,#0xf0
   \   0000B5   8A82         MOV     DPL,R2
   \   0000B7   8B83         MOV     DPH,R3
   \   0000B9   A3           INC     DPTR
   \   0000BA   A3           INC     DPTR
   \   0000BB   A3           INC     DPTR
   \   0000BC   A3           INC     DPTR
   \   0000BD   A3           INC     DPTR
   \   0000BE   A3           INC     DPTR
   \   0000BF   A3           INC     DPTR
   \   0000C0   12....       LCALL   ?Subroutine13 & 0xFFFF
    858          
    859              *pBuf++ = pSimpleDesc->AppNumInClusters;
   \                     ??CrossCallReturnLabel_11:
   \   0000C3   A3           INC     DPTR
   \   0000C4   A3           INC     DPTR
   \   0000C5   A3           INC     DPTR
   \   0000C6   A3           INC     DPTR
   \   0000C7   A3           INC     DPTR
   \   0000C8   A3           INC     DPTR
   \   0000C9   A3           INC     DPTR
   \   0000CA   F0           MOVX    @DPTR,A
   \   0000CB   EA           MOV     A,R2
   \   0000CC   240B         ADD     A,#0xb
   \   0000CE   FA           MOV     R2,A
   \   0000CF   5001         JNC     ??ZDP_SimpleDescMsg_4
   \   0000D1   0B           INC     R3
    860              if ( pSimpleDesc->AppNumInClusters )
   \                     ??ZDP_SimpleDescMsg_4:
   \   0000D2   85..82       MOV     DPL,?V4
   \   0000D5   85..83       MOV     DPH,?V5
   \   0000D8   E0           MOVX    A,@DPTR
   \   0000D9   6033         JZ      ??ZDP_SimpleDescMsg_5
    861              {
    862                for (i=0; i<pSimpleDesc->AppNumInClusters; ++i)
   \   0000DB   7800         MOV     R0,#0x0
   \   0000DD   EE           MOV     A,R6
   \   0000DE   2407         ADD     A,#0x7
   \   0000E0   F5..         MOV     ?V6,A
   \   0000E2   E4           CLR     A
   \   0000E3   3F           ADDC    A,R7
   \   0000E4   F5..         MOV     ?V7,A
   \   0000E6   8019         SJMP    ??ZDP_SimpleDescMsg_6
    863                {
    864                  *pBuf++ = LO_UINT16( pSimpleDesc->pAppInClusterList[i] );
   \                     ??ZDP_SimpleDescMsg_7:
   \   0000E8   12....       LCALL   ?Subroutine73 & 0xFFFF
    865                  *pBuf++ = HI_UINT16( pSimpleDesc->pAppInClusterList[i] );
    866                }
   \                     ??CrossCallReturnLabel_174:
   \   0000EB   85..82       MOV     DPL,?V6
   \   0000EE   85..83       MOV     DPH,?V7
   \   0000F1   12....       LCALL   ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_78:
   \   0000F4   12....       LCALL   ?Subroutine67 & 0xFFFF
   \                     ??CrossCallReturnLabel_107:
   \   0000F7   12....       LCALL   ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_56:
   \   0000FA   12....       LCALL   ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   0000FD   5001         JNC     ??ZDP_SimpleDescMsg_8
   \   0000FF   0B           INC     R3
   \                     ??ZDP_SimpleDescMsg_8:
   \   000100   08           INC     R0
   \                     ??ZDP_SimpleDescMsg_6:
   \   000101   85..82       MOV     DPL,?V4
   \   000104   85..83       MOV     DPH,?V5
   \   000107   E0           MOVX    A,@DPTR
   \   000108   FC           MOV     R4,A
   \   000109   E8           MOV     A,R0
   \   00010A   C3           CLR     C
   \   00010B   9C           SUBB    A,R4
   \   00010C   40DA         JC      ??ZDP_SimpleDescMsg_7
    867              }
    868          
    869              *pBuf++ = pSimpleDesc->AppNumOutClusters;
   \                     ??ZDP_SimpleDescMsg_5:
   \   00010E   85..82       MOV     DPL,?V2
   \   000111   85..83       MOV     DPH,?V3
   \   000114   12....       LCALL   ?Subroutine19 & 0xFFFF
    870              if ( pSimpleDesc->AppNumOutClusters )
   \                     ??CrossCallReturnLabel_178:
   \   000117   85..82       MOV     DPL,?V2
   \   00011A   85..83       MOV     DPH,?V3
   \   00011D   E0           MOVX    A,@DPTR
   \   00011E   6037         JZ      ??ZDP_SimpleDescMsg_9
    871              {
    872                for (i=0; i<pSimpleDesc->AppNumOutClusters; ++i)
   \   000120   7800         MOV     R0,#0x0
   \   000122   EE           MOV     A,R6
   \   000123   240A         ADD     A,#0xa
   \   000125   FC           MOV     R4,A
   \   000126   E4           CLR     A
   \   000127   3F           ADDC    A,R7
   \   000128   FD           MOV     R5,A
   \   000129   EC           MOV     A,R4
   \   00012A   FE           MOV     R6,A
   \   00012B   ED           MOV     A,R5
   \   00012C   FF           MOV     R7,A
   \                     ??ZDP_SimpleDescMsg_10:
   \   00012D   85..82       MOV     DPL,?V2
   \   000130   85..83       MOV     DPH,?V3
   \   000133   E0           MOVX    A,@DPTR
   \   000134   FC           MOV     R4,A
   \   000135   E8           MOV     A,R0
   \   000136   C3           CLR     C
   \   000137   9C           SUBB    A,R4
   \   000138   501D         JNC     ??ZDP_SimpleDescMsg_9
    873                {
    874                  *pBuf++ = LO_UINT16( pSimpleDesc->pAppOutClusterList[i] );
   \   00013A   12....       LCALL   ?Subroutine73 & 0xFFFF
   \                     ??CrossCallReturnLabel_175:
   \   00013D   8E82         MOV     DPL,R6
   \   00013F   8F83         MOV     DPH,R7
   \   000141   12....       LCALL   ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_79:
   \   000144   12....       LCALL   ??Subroutine120_0 & 0xFFFF
    875                  *pBuf++ = HI_UINT16( pSimpleDesc->pAppOutClusterList[i] );
   \                     ??CrossCallReturnLabel_220:
   \   000147   8E82         MOV     DPL,R6
   \   000149   8F83         MOV     DPH,R7
   \   00014B   E0           MOVX    A,@DPTR
   \   00014C   12....       LCALL   ?Subroutine39 & 0xFFFF
    876                }
   \                     ??CrossCallReturnLabel_62:
   \   00014F   5001         JNC     ??ZDP_SimpleDescMsg_11
   \   000151   0B           INC     R3
   \                     ??ZDP_SimpleDescMsg_11:
   \   000152   08           INC     R0
   \   000153   80D8         SJMP    ??ZDP_SimpleDescMsg_10
    877              }
    878            }
    879          
    880            else
    881            {
    882              *pBuf = 0; // Description Length = 0;
   \                     ??ZDP_SimpleDescMsg_3:
   \   000155   E4           CLR     A
   \   000156   F0           MOVX    @DPTR,A
    883            }
    884          
    885            return fillAndSend( &(inMsg->TransSeq), &(inMsg->srcAddr), Simple_Desc_rsp, len );
   \                     ??ZDP_SimpleDescMsg_9:
   \   000157                ; Setup parameters for call to function fillAndSend
   \   000157   75..04       MOV     ?V0,#0x4
   \   00015A   75..80       MOV     ?V1,#-0x80
   \   00015D   78..         MOV     R0,#?V0
   \   00015F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000162   7403         MOV     A,#0x3
   \   000164   12....       LCALL   ?XSTACK_DISP0_8
   \   000167   E0           MOVX    A,@DPTR
   \   000168   2402         ADD     A,#0x2
   \   00016A   FC           MOV     R4,A
   \   00016B   A3           INC     DPTR
   \   00016C   E0           MOVX    A,@DPTR
   \   00016D   3400         ADDC    A,#0x0
   \   00016F   FD           MOV     R5,A
   \   000170   7403         MOV     A,#0x3
   \   000172   12....       LCALL   ?XSTACK_DISP0_8
   \   000175   E0           MOVX    A,@DPTR
   \   000176   240F         ADD     A,#0xf
   \   000178   FA           MOV     R2,A
   \   000179   A3           INC     DPTR
   \   00017A   E0           MOVX    A,@DPTR
   \   00017B   3400         ADDC    A,#0x0
   \   00017D   FB           MOV     R3,A
   \   00017E   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   000181   7402         MOV     A,#0x2
   \   000183   12....       LCALL   ?DEALLOC_XSTACK8
   \                     ??ZDP_SimpleDescMsg_2:
   \   000186   02....       LJMP    ?Subroutine3 & 0xFFFF
    886          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine73:
   \   000000   E8           MOV     A,R0
   \   000001                REQUIRE ??Subroutine106_0
   \   000001                ; // Fall through to label ??Subroutine106_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine106_0:
   \   000000   25E0         ADD     A,0xE0 /* A   */
   \   000002   FC           MOV     R4,A
   \   000003   E4           CLR     A
   \   000004   33           RLC     A
   \   000005   FD           MOV     R5,A
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine50:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   12....       LCALL   ?Subroutine91 & 0xFFFF
   \                     ??CrossCallReturnLabel_148:
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine91:
   \   000000   2C           ADD     A,R4
   \   000001   F5..         MOV     ?V0,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   3D           ADDC    A,R5
   \   000006   85..82       MOV     DPL,?V0
   \   000009   F583         MOV     DPH,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   12....       LCALL   ?Subroutine91 & 0xFFFF
   \                     ??CrossCallReturnLabel_147:
   \   000003   12....       LCALL   ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_241:
   \   000006   F0           MOVX    @DPTR,A
   \   000007   EA           MOV     A,R2
   \   000008   2402         ADD     A,#0x2
   \   00000A   FA           MOV     R2,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   E0           MOVX    A,@DPTR
   \   000001                REQUIRE ??Subroutine107_0
   \   000001                ; // Fall through to label ??Subroutine107_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   F0           MOVX    @DPTR,A
   \   000006   8C82         MOV     DPL,R4
   \   000008   8D83         MOV     DPH,R5
   \   00000A   A3           INC     DPTR
   \   00000B   12....       LCALL   ?Subroutine78 & 0xFFFF
   \                     ??CrossCallReturnLabel_129:
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   F0           MOVX    @DPTR,A
   \   000003   85..82       MOV     DPL,?V4
   \   000006   85..83       MOV     DPH,?V5
   \   000009   12....       LCALL   ?Subroutine78 & 0xFFFF
   \                     ??CrossCallReturnLabel_130:
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine78:
   \   000000   12....       LCALL   ?Subroutine92 & 0xFFFF
   \                     ??CrossCallReturnLabel_244:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine67:
   \   000000   12....       LCALL   ?Subroutine92 & 0xFFFF
   \                     ??CrossCallReturnLabel_243:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine92:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   F0           MOVX    @DPTR,A
   \   000003   8E82         MOV     DPL,R6
   \   000005   8F83         MOV     DPH,R7
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   7403         MOV     A,#0x3
   \   000002                REQUIRE ??Subroutine116_0
   \   000002                ; // Fall through to label ??Subroutine116_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine116_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine117_0
   \   000003                ; // Fall through to label ??Subroutine117_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine120_0
   \   000006                ; // Fall through to label ??Subroutine120_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine120_0:
   \   000000   12....       LCALL   ?Subroutine92 & 0xFFFF
   \                     ??CrossCallReturnLabel_245:
   \   000003   F0           MOVX    @DPTR,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine66:
   \   000000   FC           MOV     R4,A
   \   000001   E4           CLR     A
   \   000002   3F           ADDC    A,R7
   \   000003   FD           MOV     R5,A
   \   000004   8C82         MOV     DPL,R4
   \   000006   8D83         MOV     DPH,R5
   \   000008                REQUIRE ??Subroutine123_0
   \   000008                ; // Fall through to label ??Subroutine123_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine123_0:
   \   000000   12....       LCALL   ??Subroutine124_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_242:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine65:
   \   000000   12....       LCALL   ??Subroutine124_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_239:
   \   000003   A3           INC     DPTR
   \   000004   F0           MOVX    @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine79:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine124_0
   \   000001                ; // Fall through to label ??Subroutine124_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine124_0:
   \   000000   12....       LCALL   ?Subroutine92 & 0xFFFF
   \                     ??CrossCallReturnLabel_246:
   \   000003   A3           INC     DPTR
   \   000004   22           RET
    887          
    888          /*********************************************************************
    889           * @fn          ZDP_EPRsp
    890           *
    891           * @brief       This builds and send an endpoint list. Used in
    892           *              Active_EP_rsp and Match_Desc_Rsp
    893           *              message.  This function sends unicast message to the
    894           *              requesting device.
    895           *
    896           * @param       MsgType - either Active_EP_rsp or Match_Desc_Rsp
    897           * @param       dstAddr - destination address
    898           * @param       Status - message status (ZDP_SUCCESS or other)
    899           * @param       nwkAddr - Device's short address that this response describes
    900           * @param       Count - number of endpoint/interfaces in list
    901           * @param       pEPIntfList - Array of Endpoint/Interfaces
    902           * @param       SecurityEnable - Security Options
    903           *
    904           * @return      afStatus_t
    905           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    906          afStatus_t ZDP_EPRsp( uint16 MsgType, byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_EPRsp:
    907                                  byte Status, uint16 nwkAddr, byte Count,
    908                                  uint8 *pEPList,
    909                                  byte SecurityEnable )
    910          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   F0           MOVX    @DPTR,A
   \   000012   EA           MOV     A,R2
   \   000013   FE           MOV     R6,A
   \   000014   EB           MOV     A,R3
   \   000015   FF           MOV     R7,A
   \   000016   8C..         MOV     ?V6,R4
   \   000018   8D..         MOV     ?V7,R5
    911            uint8 *pBuf = ZDP_TmpBuf;
   \   00001A   12....       LCALL   ??Subroutine109_0 & 0xFFFF
    912            byte len = 1 + 2 + 1;  // Status + nwkAddr + endpoint/interface count.
   \                     ??CrossCallReturnLabel_188:
   \   00001D   75..04       MOV     ?V4,#0x4
    913            byte txOptions;
    914          
    915            (void)SecurityEnable;  // Intentionally unreferenced parameter
    916          
    917            if ( MsgType == Match_Desc_rsp )
   \   000020   7406         MOV     A,#0x6
   \   000022   6E           XRL     A,R6
   \   000023   7003         JNZ     ??ZDP_EPRsp_0
   \   000025   7480         MOV     A,#-0x80
   \   000027   6F           XRL     A,R7
   \                     ??ZDP_EPRsp_0:
   \   000028   7005         JNZ     ??ZDP_EPRsp_1
    918              txOptions = AF_MSG_ACK_REQUEST;
   \   00002A   75..10       MOV     ?V3,#0x10
   \   00002D   8003         SJMP    ??ZDP_EPRsp_2
    919            else
    920              txOptions = 0;
   \                     ??ZDP_EPRsp_1:
   \   00002F   75..00       MOV     ?V3,#0x0
    921          
    922              *pBuf++ = Status;
   \                     ??ZDP_EPRsp_2:
   \   000032   7411         MOV     A,#0x11
   \   000034   12....       LCALL   ?XSTACK_DISP0_8
   \   000037   12....       LCALL   ??Subroutine120_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_221:
   \   00003A   7412         MOV     A,#0x12
   \   00003C   12....       LCALL   ?XSTACK_DISP0_8
   \   00003F   12....       LCALL   ?Subroutine12 & 0xFFFF
    923            *pBuf++ = LO_UINT16( nwkAddr );
    924            *pBuf++ = HI_UINT16( nwkAddr );
   \                     ??CrossCallReturnLabel_8:
   \   000042   7414         MOV     A,#0x14
   \   000044   12....       LCALL   ?XSTACK_DISP0_8
   \   000047   E0           MOVX    A,@DPTR
   \   000048   FC           MOV     R4,A
    925          
    926            *pBuf++ = Count;   // Endpoint/Interface count
   \   000049   8A82         MOV     DPL,R2
   \   00004B   8B83         MOV     DPH,R3
   \   00004D   A3           INC     DPTR
   \   00004E   A3           INC     DPTR
   \   00004F   A3           INC     DPTR
   \   000050   F0           MOVX    @DPTR,A
    927          
    928            if ( Count )
   \   000051   6021         JZ      ??ZDP_EPRsp_3
    929            {
    930              len += Count;
   \   000053   7404         MOV     A,#0x4
   \   000055   2C           ADD     A,R4
   \   000056   F5..         MOV     ?V4,A
    931              osal_memcpy( pBuf, pEPList, Count );
   \   000058                ; Setup parameters for call to function osal_memcpy
   \   000058   7415         MOV     A,#0x15
   \   00005A   12....       LCALL   ?XSTACK_DISP0_8
   \   00005D   12....       LCALL   ?Subroutine47 & 0xFFFF
    932            }
   \                     ??CrossCallReturnLabel_72:
   \   000060   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000063   7D00         MOV     R5,#0x0
   \   000065   EA           MOV     A,R2
   \   000066   2404         ADD     A,#0x4
   \   000068   FA           MOV     R2,A
   \   000069   5001         JNC     ??ZDP_EPRsp_4
   \   00006B   0B           INC     R3
   \                     ??ZDP_EPRsp_4:
   \   00006C   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00006F   7403         MOV     A,#0x3
   \   000071   12....       LCALL   ?DEALLOC_XSTACK8
    933          
    934            FillAndSendTxOptions( &TransSeq, dstAddr, MsgType, len, txOptions );
   \                     ??ZDP_EPRsp_3:
   \   000074   E5..         MOV     A,?V3
   \   000076   90....       MOV     DPTR,#ZDP_TxOptions
   \   000079   F0           MOVX    @DPTR,A
   \   00007A                ; Setup parameters for call to function fillAndSend
   \   00007A   8E..         MOV     ?V0,R6
   \   00007C   8F..         MOV     ?V1,R7
   \   00007E   78..         MOV     R0,#?V0
   \   000080   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000083   A9..         MOV     R1,?V4
   \   000085   AC..         MOV     R4,?V6
   \   000087   AD..         MOV     R5,?V7
   \   000089   7402         MOV     A,#0x2
   \   00008B   12....       LCALL   ?XSTACK_DISP101_8
   \   00008E   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   000091   7402         MOV     A,#0x2
   \   000093   12....       LCALL   ?DEALLOC_XSTACK8
   \   000096   E9           MOV     A,R1
   \   000097   F9           MOV     R1,A
   \   000098   90....       MOV     DPTR,#ZDP_TxOptions
   \   00009B   E4           CLR     A
   \   00009C   F0           MOVX    @DPTR,A
   \   00009D   04           INC     A
   \   00009E   02....       LJMP    ??Subroutine116_0 & 0xFFFF
    935          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   12....       LCALL   ?Subroutine80 & 0xFFFF
   \                     ??CrossCallReturnLabel_132:
   \   000003   A3           INC     DPTR
   \   000004   12....       LCALL   ?Subroutine89 & 0xFFFF
   \                     ??CrossCallReturnLabel_143:
   \   000007   F0           MOVX    @DPTR,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine80:
   \   000000   12....       LCALL   ??Subroutine129_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_273:
   \   000003   F9           MOV     R1,A
   \   000004   E8           MOV     A,R0
   \   000005   8A82         MOV     DPL,R2
   \   000007   8B83         MOV     DPH,R3
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine47:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V1,A
   \   000007   75..00       MOV     ?V2,#0x0
   \   00000A   78..         MOV     R0,#?V0
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine89:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   E9           MOV     A,R1
   \   000002   8A82         MOV     DPL,R2
   \   000004   8B83         MOV     DPH,R3
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   22           RET
    936          
    937          /*********************************************************************
    938           * @fn          ZDP_UserDescRsp
    939           *
    940           * @brief       Build and send the User Decriptor Response.
    941           *
    942           *
    943           * @param       dstAddr - destination address
    944           * @param       nwkAddrOfInterest -
    945           * @param       userDesc -
    946           * @param       SecurityEnable - Security Options
    947           *
    948           * @return      ZStatus_t
    949           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    950          ZStatus_t ZDP_UserDescRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_UserDescRsp:
    951                          uint16 nwkAddrOfInterest, UserDescriptorFormat_t *userDesc,
    952                          byte SecurityEnable )
    953          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   F0           MOVX    @DPTR,A
   \   000012   8A..         MOV     ?V6,R2
   \   000014   8B..         MOV     ?V7,R3
    954            uint8 *pBuf = ZDP_TmpBuf;
   \   000016   12....       LCALL   ??Subroutine109_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_189:
   \   000019   7411         MOV     A,#0x11
   \   00001B   12....       LCALL   ?XSTACK_DISP0_8
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   F5..         MOV     ?V4,A
   \   000021   A3           INC     DPTR
   \   000022   E0           MOVX    A,@DPTR
   \   000023   F5..         MOV     ?V5,A
    955            byte len = 1 + 2 + 1;  // Status + nwkAddr + descriptor length.
    956          
    957            (void)SecurityEnable;  // Intentionally unreferenced parameter
    958          
    959            len += userDesc->len;
   \   000025   85..82       MOV     DPL,?V4
   \   000028   F583         MOV     DPH,A
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   2404         ADD     A,#0x4
   \   00002D   FF           MOV     R7,A
    960          
    961            *pBuf++ = ZSUCCESS;
   \   00002E   8A82         MOV     DPL,R2
   \   000030   8B83         MOV     DPH,R3
   \   000032   E4           CLR     A
   \   000033   F0           MOVX    @DPTR,A
    962          
    963            *pBuf++ = LO_UINT16( nwkAddrOfInterest );
   \   000034   EC           MOV     A,R4
   \   000035   A3           INC     DPTR
   \   000036   F0           MOVX    @DPTR,A
    964            *pBuf++ = HI_UINT16( nwkAddrOfInterest );
   \   000037   ED           MOV     A,R5
   \   000038   8A82         MOV     DPL,R2
   \   00003A   8B83         MOV     DPH,R3
   \   00003C   12....       LCALL   ?Subroutine13 & 0xFFFF
    965          
    966            *pBuf++ = userDesc->len;
   \                     ??CrossCallReturnLabel_12:
   \   00003F   12....       LCALL   ?Subroutine37 & 0xFFFF
    967            osal_memcpy( pBuf, userDesc->desc, userDesc->len );
   \                     ??CrossCallReturnLabel_59:
   \   000042   AC82         MOV     R4,DPL
   \   000044   AD83         MOV     R5,DPH
   \   000046   8C..         MOV     ?V0,R4
   \   000048   8D..         MOV     ?V1,R5
   \   00004A   75..00       MOV     ?V2,#0x0
   \   00004D   78..         MOV     R0,#?V0
   \   00004F   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000052   85..82       MOV     DPL,?V4
   \   000055   85..83       MOV     DPH,?V5
   \   000058   E0           MOVX    A,@DPTR
   \   000059   FC           MOV     R4,A
   \   00005A   7D00         MOV     R5,#0x0
   \   00005C   EA           MOV     A,R2
   \   00005D   2404         ADD     A,#0x4
   \   00005F   FA           MOV     R2,A
   \   000060   5001         JNC     ??ZDP_UserDescRsp_0
   \   000062   0B           INC     R3
   \                     ??ZDP_UserDescRsp_0:
   \   000063   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000066   7403         MOV     A,#0x3
   \   000068   12....       LCALL   ?DEALLOC_XSTACK8
    968          
    969            return (ZStatus_t)fillAndSend( &TransSeq, dstAddr, User_Desc_rsp, len );
   \   00006B                ; Setup parameters for call to function fillAndSend
   \   00006B   75..11       MOV     ?V0,#0x11
   \   00006E   75..80       MOV     ?V1,#-0x80
   \   000071   78..         MOV     R0,#?V0
   \   000073   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000076   EF           MOV     A,R7
   \   000077   F9           MOV     R1,A
   \   000078   AC..         MOV     R4,?V6
   \   00007A   AD..         MOV     R5,?V7
   \   00007C   7402         MOV     A,#0x2
   \   00007E   12....       LCALL   ?XSTACK_DISP101_8
   \   000081   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   000084   7402         MOV     A,#0x2
   \   000086   12....       LCALL   ?DEALLOC_XSTACK8
   \   000089   7401         MOV     A,#0x1
   \   00008B   02....       LJMP    ??Subroutine116_0 & 0xFFFF
    970          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   12....       LCALL   ?Subroutine88 & 0xFFFF
   \                     ??CrossCallReturnLabel_142:
   \   000003   22           RET
    971          
    972          /*********************************************************************
    973           * @fn          ZDP_ServerDiscRsp
    974           *
    975           * @brief       Build and send the Server_Discovery_rsp response.
    976           *
    977           * @param       transID - Transaction sequence number of request.
    978           * @param       dstAddr - Network Destination Address.
    979           * @param       status - Status of response to request.
    980           * @param       aoi - Network Address of Interest of request.
    981           * @param       serverMask - Bit map of service(s) being sought.
    982           * @param       SecurityEnable - Security Options
    983           *
    984           * @return      ZStatus_t
    985           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    986          ZStatus_t ZDP_ServerDiscRsp( byte transID, zAddrType_t *dstAddr, byte status,
   \                     ZDP_ServerDiscRsp:
    987                                     uint16 aoi, uint16 serverMask, byte SecurityEnable )
    988          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   F0           MOVX    @DPTR,A
   \   000012   EC           MOV     A,R4
   \   000013   FE           MOV     R6,A
    989            const byte len = 1  + 2;  // status + aoi + mask.
    990            uint8 *pBuf = ZDP_TmpBuf;
   \   000014   12....       LCALL   ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_172:
   \   000017   FC           MOV     R4,A
   \   000018   E9           MOV     A,R1
   \   000019   FD           MOV     R5,A
    991            ZStatus_t stat;
    992          
    993            // Intentionally unreferenced parameters
    994            (void)aoi;
    995            (void)SecurityEnable;
    996          
    997            *pBuf++ = status;
   \   00001A   EE           MOV     A,R6
   \   00001B   8C82         MOV     DPL,R4
   \   00001D   8D83         MOV     DPH,R5
   \   00001F   F0           MOVX    @DPTR,A
   \   000020   740D         MOV     A,#0xd
   \   000022   12....       LCALL   ?XSTACK_DISP0_8
   \   000025   12....       LCALL   ?Subroutine54 & 0xFFFF
    998          
    999            *pBuf++ = LO_UINT16( serverMask );
   \                     ??CrossCallReturnLabel_85:
   \   000028   A3           INC     DPTR
   \   000029   F0           MOVX    @DPTR,A
   1000            *pBuf++ = HI_UINT16( serverMask );
   \   00002A   E9           MOV     A,R1
   \   00002B   8C82         MOV     DPL,R4
   \   00002D   8D83         MOV     DPH,R5
   \   00002F   A3           INC     DPTR
   \   000030   A3           INC     DPTR
   \   000031   F0           MOVX    @DPTR,A
   1001          
   1002            ZDP_TxOptions = AF_MSG_ACK_REQUEST;
   \   000032   90....       MOV     DPTR,#ZDP_TxOptions
   \   000035   7410         MOV     A,#0x10
   \   000037   F0           MOVX    @DPTR,A
   1003            stat = fillAndSend( &transID, dstAddr, Server_Discovery_rsp, len );
   \   000038                ; Setup parameters for call to function fillAndSend
   \   000038   75..15       MOV     ?V0,#0x15
   \   00003B   75..80       MOV     ?V1,#-0x80
   \   00003E   78..         MOV     R0,#?V0
   \   000040   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000043   7903         MOV     R1,#0x3
   \   000045   EA           MOV     A,R2
   \   000046   FC           MOV     R4,A
   \   000047   EB           MOV     A,R3
   \   000048   FD           MOV     R5,A
   \   000049   7402         MOV     A,#0x2
   \   00004B   12....       LCALL   ?XSTACK_DISP101_8
   \   00004E   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   000051   7402         MOV     A,#0x2
   \   000053   12....       LCALL   ?DEALLOC_XSTACK8
   \   000056   E9           MOV     A,R1
   \   000057   F9           MOV     R1,A
   1004            ZDP_TxOptions = AF_TX_OPTIONS_NONE;
   \   000058   90....       MOV     DPTR,#ZDP_TxOptions
   \   00005B   E4           CLR     A
   \   00005C   F0           MOVX    @DPTR,A
   1005          
   1006            return ( stat );
   \   00005D   04           INC     A
   \   00005E   02....       LJMP    ??Subroutine99_0 & 0xFFFF
   1007          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine54:
   \   000000   12....       LCALL   ?Subroutine81 & 0xFFFF
   \                     ??CrossCallReturnLabel_269:
   \   000003   E8           MOV     A,R0
   \   000004   8C82         MOV     DPL,R4
   \   000006   8D83         MOV     DPH,R5
   \   000008   22           RET
   1008          
   1009          /*********************************************************************
   1010           * @fn          ZDP_GenericRsp
   1011           *
   1012           * @brief       Sends a response message with only the parameter status
   1013           *              byte and the addr of interest for data.
   1014           *              This function sends unicast message to the
   1015           *              requesting device.
   1016           *
   1017           * @param       dstAddr - destination address
   1018           * @param       status  - generic status for response
   1019           * @param       aoi     - address of interest
   1020           * @param       dstAddr - destination address
   1021           * @param       rspId   - response cluster ID
   1022           * @param       SecurityEnable - Security Options
   1023           *
   1024           * @return      afStatus_t
   1025           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1026          afStatus_t ZDP_GenericRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_GenericRsp:
   1027                               byte status, uint16 aoi, uint16 rspID, byte SecurityEnable )
   1028          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   F0           MOVX    @DPTR,A
   1029            uint8 len;
   1030          
   1031            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1032          
   1033            ZDP_TmpBuf[0] = status;
   \   000012   12....       LCALL   ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_195:
   \   000015   EC           MOV     A,R4
   \   000016   F0           MOVX    @DPTR,A
   \   000017   740A         MOV     A,#0xa
   \   000019   12....       LCALL   ?XSTACK_DISP0_8
   \   00001C   12....       LCALL   ??Subroutine128_0 & 0xFFFF
   1034            ZDP_TmpBuf[1] = LO_UINT16( aoi );
   \                     ??CrossCallReturnLabel_261:
   \   00001F   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000022   E0           MOVX    A,@DPTR
   \   000023   FC           MOV     R4,A
   \   000024   A3           INC     DPTR
   \   000025   E0           MOVX    A,@DPTR
   \   000026   F583         MOV     DPH,A
   \   000028   8C82         MOV     DPL,R4
   \   00002A   A3           INC     DPTR
   \   00002B   E8           MOV     A,R0
   \   00002C   12....       LCALL   ?Subroutine11 & 0xFFFF
   1035            ZDP_TmpBuf[2] = HI_UINT16( aoi );
   1036          
   1037            // Length byte
   1038            ZDP_TmpBuf[3] = 0;
   \                     ??CrossCallReturnLabel_7:
   \   00002F   12....       LCALL   ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_196:
   \   000032   A3           INC     DPTR
   \   000033   A3           INC     DPTR
   \   000034   A3           INC     DPTR
   \   000035   E4           CLR     A
   \   000036   F0           MOVX    @DPTR,A
   1039            len = 4;
   1040          
   1041            return fillAndSend( &TransSeq, dstAddr, rspID, len );
   \   000037                ; Setup parameters for call to function fillAndSend
   \   000037   740C         MOV     A,#0xc
   \   000039   12....       LCALL   ?XSTACK_DISP0_8
   \   00003C   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00003F   7904         MOV     R1,#0x4
   \   000041   EA           MOV     A,R2
   \   000042   FC           MOV     R4,A
   \   000043   EB           MOV     A,R3
   \   000044   FD           MOV     R5,A
   \   000045   7402         MOV     A,#0x2
   \   000047   12....       LCALL   ?XSTACK_DISP101_8
   \   00004A   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   00004D   7402         MOV     A,#0x2
   \   00004F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000052   7401         MOV     A,#0x1
   \   000054   12....       LCALL   ?DEALLOC_XSTACK8
   \   000057                REQUIRE ?Subroutine4
   \   000057                ; // Fall through to label ?Subroutine4
   1042          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
   1043          
   1044          /*********************************************************************
   1045           * Binding
   1046           */
   1047          /*********************************************************************
   1048           * @fn          ZDP_EndDeviceBindReq
   1049           *
   1050           * @brief       This builds and sends a End_Device_Bind_req message.
   1051           *              This function sends a unicast message.
   1052           *
   1053           * @param       dstAddr - destination address
   1054           * @param       LocalCoordinator - short address of local coordinator
   1055           * @param       epIntf - Endpoint/Interface of Simple Desc
   1056           * @param       ProfileID - Profile ID
   1057           *
   1058           *   The Input cluster list is the opposite of what you would think.
   1059           *   This is the output cluster list of this device
   1060           * @param       NumInClusters - number of input clusters
   1061           * @param       InClusterList - input cluster ID list
   1062           *
   1063           *   The Output cluster list is the opposite of what you would think.
   1064           *   This is the input cluster list of this device
   1065           * @param       NumOutClusters - number of output clusters
   1066           * @param       OutClusterList - output cluster ID list
   1067           *
   1068           * @param       SecurityEnable - Security Options
   1069           *
   1070           * @return      afStatus_t
   1071           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1072          afStatus_t ZDP_EndDeviceBindReq( zAddrType_t *dstAddr,
   \                     ZDP_EndDeviceBindReq:
   1073                                           uint16 LocalCoordinator,
   1074                                           byte endPoint,
   1075                                           uint16 ProfileID,
   1076                                           byte NumInClusters, cId_t *InClusterList,
   1077                                           byte NumOutClusters, cId_t *OutClusterList,
   1078                                           byte SecurityEnable )
   1079          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   000013   EC           MOV     A,R4
   \   000014   FE           MOV     R6,A
   \   000015   ED           MOV     A,R5
   \   000016   FF           MOV     R7,A
   \   000017   89..         MOV     ?V7,R1
   1080            uint8 *pBuf = ZDP_TmpBuf;
   \   000019   90....       MOV     DPTR,#ZDP_TmpBuf
   \   00001C   12....       LCALL   ??Subroutine112_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_207:
   \   00001F   7414         MOV     A,#0x14
   \   000021   12....       LCALL   ?XSTACK_DISP0_8
   \   000024   E0           MOVX    A,@DPTR
   \   000025   F5..         MOV     ?V2,A
   \   000027   7417         MOV     A,#0x17
   \   000029   12....       LCALL   ?XSTACK_DISP0_8
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   F5..         MOV     ?V3,A
   1081            uint8 i, len;
   1082            uint8 *ieeeAddr;
   1083          
   1084            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1085          
   1086            // LocalCoordinator + SrcExtAddr + ep + ProfileID +  NumInClusters + NumOutClusters.
   1087            len = 2 + Z_EXTADDR_LEN + 1 + 2 + 1 + 1;
   1088            len += (NumInClusters + NumOutClusters) * sizeof ( uint16 );
   \   00002F   E5..         MOV     A,?V2
   \   000031   25..         ADD     A,?V3
   \   000033   C3           CLR     C
   \   000034   33           RLC     A
   \   000035   240F         ADD     A,#0xf
   \   000037   F5..         MOV     ?V6,A
   1089          
   1090            if ( len >= ZDP_BUF_SZ-1 )
   \   000039   C3           CLR     C
   \   00003A   944F         SUBB    A,#0x4f
   \   00003C   4005         JC      ??ZDP_EndDeviceBindReq_0
   1091            {
   1092              return afStatus_MEM_FAIL;
   \   00003E   7910         MOV     R1,#0x10
   \   000040   02....       LJMP    ??ZDP_EndDeviceBindReq_1 & 0xFFFF
   1093            }
   1094          
   1095            if ( LocalCoordinator != NLME_GetShortAddr() )
   \                     ??ZDP_EndDeviceBindReq_0:
   \   000043                ; Setup parameters for call to function NLME_GetShortAddr
   \   000043   12....       LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   000046   EA           MOV     A,R2
   \   000047   6E           XRL     A,R6
   \   000048   7002         JNZ     ??ZDP_EndDeviceBindReq_2
   \   00004A   EB           MOV     A,R3
   \   00004B   6F           XRL     A,R7
   \                     ??ZDP_EndDeviceBindReq_2:
   \   00004C   6005         JZ      ??ZDP_EndDeviceBindReq_3
   1096            {
   1097              return afStatus_INVALID_PARAMETER;
   \   00004E   7902         MOV     R1,#0x2
   \   000050   02....       LJMP    ??ZDP_EndDeviceBindReq_1 & 0xFFFF
   1098            }
   1099          
   1100            *pBuf++ = LO_UINT16( LocalCoordinator );
   \                     ??ZDP_EndDeviceBindReq_3:
   \   000053   EE           MOV     A,R6
   \   000054   85..82       MOV     DPL,?V0
   \   000057   85..83       MOV     DPH,?V1
   \   00005A   F0           MOVX    @DPTR,A
   1101            *pBuf++ = HI_UINT16( LocalCoordinator );
   \   00005B   EF           MOV     A,R7
   \   00005C   A3           INC     DPTR
   \   00005D   F0           MOVX    @DPTR,A
   1102          
   1103            ieeeAddr = NLME_GetExtAddr();
   \   00005E                ; Setup parameters for call to function NLME_GetExtAddr
   \   00005E   12....       LCALL   `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
   \   000061   8A..         MOV     ?V4,R2
   \   000063   8B..         MOV     ?V5,R3
   \   000065   AC..         MOV     R4,?V4
   \   000067   AD..         MOV     R5,?V5
   1104            pBuf = osal_cpyExtAddr( pBuf, ieeeAddr );
   \   000069                ; Setup parameters for call to function sAddrExtCpy
   \   000069   E5..         MOV     A,?V0
   \   00006B   2402         ADD     A,#0x2
   \   00006D   FA           MOV     R2,A
   \   00006E   E4           CLR     A
   \   00006F   35..         ADDC    A,?V1
   \   000071   FB           MOV     R3,A
   \   000072   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   1105          
   1106            *pBuf++ = endPoint;
   \   000075   8A82         MOV     DPL,R2
   \   000077   8B83         MOV     DPH,R3
   \   000079   E5..         MOV     A,?V7
   \   00007B   F0           MOVX    @DPTR,A
   \   00007C   7412         MOV     A,#0x12
   \   00007E   12....       LCALL   ?XSTACK_DISP0_8
   \   000081   12....       LCALL   ?Subroutine12 & 0xFFFF
   1107          
   1108            *pBuf++ = LO_UINT16( ProfileID );   // Profile ID
   1109            *pBuf++ = HI_UINT16( ProfileID );
   1110          
   1111            *pBuf++ = NumInClusters; // Input cluster list
   \                     ??CrossCallReturnLabel_9:
   \   000084   8A82         MOV     DPL,R2
   \   000086   8B83         MOV     DPH,R3
   \   000088   A3           INC     DPTR
   \   000089   A3           INC     DPTR
   \   00008A   A3           INC     DPTR
   \   00008B   E5..         MOV     A,?V2
   \   00008D   F0           MOVX    @DPTR,A
   \   00008E   EA           MOV     A,R2
   \   00008F   2404         ADD     A,#0x4
   \   000091   F5..         MOV     ?V0,A
   \   000093   E4           CLR     A
   \   000094   3B           ADDC    A,R3
   \   000095   F5..         MOV     ?V1,A
   1112            for ( i = 0; i < NumInClusters; ++i )
   \   000097   7A00         MOV     R2,#0x0
   \   000099   7415         MOV     A,#0x15
   \   00009B   12....       LCALL   ?XSTACK_DISP0_8
   \   00009E   12....       LCALL   ?Subroutine59 & 0xFFFF
   \                     ??CrossCallReturnLabel_92:
   \   0000A1   8029         SJMP    ??ZDP_EndDeviceBindReq_4
   1113            {
   1114              *pBuf++ = LO_UINT16(InClusterList[i]);
   \                     ??ZDP_EndDeviceBindReq_5:
   \   0000A3   EA           MOV     A,R2
   \   0000A4   25E0         ADD     A,0xE0 /* A   */
   \   0000A6   FE           MOV     R6,A
   \   0000A7   E4           CLR     A
   \   0000A8   33           RLC     A
   \   0000A9   FF           MOV     R7,A
   \   0000AA   EC           MOV     A,R4
   \   0000AB   2E           ADD     A,R6
   \   0000AC   F5..         MOV     ?V4,A
   \   0000AE   ED           MOV     A,R5
   \   0000AF   3F           ADDC    A,R7
   \   0000B0   F5..         MOV     ?V5,A
   \   0000B2   85..82       MOV     DPL,?V4
   \   0000B5   F583         MOV     DPH,A
   \   0000B7   12....       LCALL   ?Subroutine64 & 0xFFFF
   1115              *pBuf++ = HI_UINT16(InClusterList[i]);
   1116            }
   \                     ??CrossCallReturnLabel_102:
   \   0000BA   12....       LCALL   ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   0000BD   12....       LCALL   ??Subroutine118_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_211:
   \   0000C0   F0           MOVX    @DPTR,A
   \   0000C1   E5..         MOV     A,?V0
   \   0000C3   2402         ADD     A,#0x2
   \   0000C5   F5..         MOV     ?V0,A
   \   0000C7   5002         JNC     ??ZDP_EndDeviceBindReq_6
   \   0000C9   05..         INC     ?V1
   \                     ??ZDP_EndDeviceBindReq_6:
   \   0000CB   0A           INC     R2
   \                     ??ZDP_EndDeviceBindReq_4:
   \   0000CC   85..82       MOV     DPL,?V0
   \   0000CF   85..83       MOV     DPH,?V1
   \   0000D2   A3           INC     DPTR
   \   0000D3   A882         MOV     R0,DPL
   \   0000D5   A983         MOV     R1,DPH
   \   0000D7   EA           MOV     A,R2
   \   0000D8   C3           CLR     C
   \   0000D9   95..         SUBB    A,?V2
   \   0000DB   40C6         JC      ??ZDP_EndDeviceBindReq_5
   1117          
   1118            *pBuf++ = NumOutClusters; // Output cluster list
   \   0000DD   85..82       MOV     DPL,?V0
   \   0000E0   85..83       MOV     DPH,?V1
   \   0000E3   E5..         MOV     A,?V3
   \   0000E5   F0           MOVX    @DPTR,A
   \   0000E6   88..         MOV     ?V0,R0
   \   0000E8   89..         MOV     ?V1,R1
   1119            for ( i = 0; i < NumOutClusters; ++i )
   \   0000EA   7A00         MOV     R2,#0x0
   \   0000EC   7418         MOV     A,#0x18
   \   0000EE   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F1   12....       LCALL   ??Subroutine128_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_262:
   \   0000F4   8027         SJMP    ??ZDP_EndDeviceBindReq_7
   1120            {
   1121              *pBuf++ = LO_UINT16(OutClusterList[i]);
   \                     ??ZDP_EndDeviceBindReq_8:
   \   0000F6   EA           MOV     A,R2
   \   0000F7   12....       LCALL   ??Subroutine106_0 & 0xFFFF
   1122              *pBuf++ = HI_UINT16(OutClusterList[i]);
   1123            }
   \                     ??CrossCallReturnLabel_173:
   \   0000FA   E8           MOV     A,R0
   \   0000FB   2C           ADD     A,R4
   \   0000FC   FC           MOV     R4,A
   \   0000FD   E9           MOV     A,R1
   \   0000FE   3D           ADDC    A,R5
   \   0000FF   FD           MOV     R5,A
   \   000100   8C82         MOV     DPL,R4
   \   000102   8D83         MOV     DPH,R5
   \   000104   12....       LCALL   ?Subroutine64 & 0xFFFF
   \                     ??CrossCallReturnLabel_103:
   \   000107   12....       LCALL   ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   00010A   85..82       MOV     DPL,?V0
   \   00010D   85..83       MOV     DPH,?V1
   \   000110   A3           INC     DPTR
   \   000111   F0           MOVX    @DPTR,A
   \   000112   E5..         MOV     A,?V0
   \   000114   2402         ADD     A,#0x2
   \   000116   F5..         MOV     ?V0,A
   \   000118   5002         JNC     ??ZDP_EndDeviceBindReq_9
   \   00011A   05..         INC     ?V1
   \                     ??ZDP_EndDeviceBindReq_9:
   \   00011C   0A           INC     R2
   \                     ??ZDP_EndDeviceBindReq_7:
   \   00011D   EA           MOV     A,R2
   \   00011E   C3           CLR     C
   \   00011F   95..         SUBB    A,?V3
   \   000121   40D3         JC      ??ZDP_EndDeviceBindReq_8
   1124          
   1125            return fillAndSend( &ZDP_TransID, dstAddr, End_Device_Bind_req, len );
   \   000123                ; Setup parameters for call to function fillAndSend
   \   000123   75..20       MOV     ?V0,#0x20
   \   000126   75..00       MOV     ?V1,#0x0
   \   000129   78..         MOV     R0,#?V0
   \   00012B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00012E   A9..         MOV     R1,?V6
   \   000130   7402         MOV     A,#0x2
   \   000132   12....       LCALL   ?XSTACK_DISP0_8
   \   000135   12....       LCALL   ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_89:
   \   000138   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   00013B   7402         MOV     A,#0x2
   \   00013D   12....       LCALL   ?DEALLOC_XSTACK8
   \                     ??ZDP_EndDeviceBindReq_1:
   \   000140                REQUIRE ?Subroutine6
   \   000140                ; // Fall through to label ?Subroutine6
   1126          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   7402         MOV     A,#0x2
   \   000002   02....       LJMP    ??Subroutine116_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine58:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FC           MOV     R4,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FD           MOV     R5,A
   \   000005   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   000007   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine118_0:
   \   000000   12....       LCALL   ??Subroutine119_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_219:
   \   000003   22           RET
   1127          
   1128          /*********************************************************************
   1129           * @fn          ZDP_BindUnbindReq
   1130           *
   1131           * @brief       This builds and send a Bind_req or Unbind_req message
   1132           *              Depending on the ClusterID. This function
   1133           *              sends a unicast message to the local coordinator.
   1134           *
   1135           * @param       BindOrUnbind - either Bind_req or Unbind_req
   1136           * @param       dstAddr - destination address of the message
   1137           * @param       SourceAddr - source 64 bit address of the binding
   1138           * @param       SrcEPIntf - Source endpoint/interface
   1139           * @param       ClusterID - Binding cluster ID
   1140           * @param       DestinationAddr - destination 64 bit addr of binding
   1141           * @param       DstEPIntf - destination endpoint/interface
   1142           * @param       SecurityEnable - Security Options
   1143           *
   1144           * @return      afStatus_t
   1145           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1146          afStatus_t ZDP_BindUnbindReq( uint16 BindOrUnbind, zAddrType_t *dstAddr,
   \                     ZDP_BindUnbindReq:
   1147                                        uint8 *SourceAddr, byte SrcEndPoint,
   1148                                        cId_t ClusterID,
   1149                                        zAddrType_t *destinationAddr, byte DstEndPoint,
   1150                                        byte SecurityEnable )
   1151          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   EC           MOV     A,R4
   \   000011   F0           MOVX    @DPTR,A
   \   000012   A3           INC     DPTR
   \   000013   ED           MOV     A,R5
   \   000014   F0           MOVX    @DPTR,A
   \   000015   EA           MOV     A,R2
   \   000016   FE           MOV     R6,A
   \   000017   EB           MOV     A,R3
   \   000018   FF           MOV     R7,A
   \   000019   89..         MOV     ?V1,R1
   1152            uint8 *pBuf = ZDP_TmpBuf;
   \   00001B   12....       LCALL   ??Subroutine109_0 & 0xFFFF
   1153            byte len;
   1154          
   1155            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1156          
   1157            // SourceAddr + SrcEPIntf + ClusterID +  addrMode.
   1158            len = Z_EXTADDR_LEN + 1 + sizeof( cId_t ) + sizeof( uint8 );
   \                     ??CrossCallReturnLabel_190:
   \   00001E   75..0C       MOV     ?V0,#0xc
   \   000021   7416         MOV     A,#0x16
   \   000023   12....       LCALL   ?XSTACK_DISP0_8
   \   000026   12....       LCALL   ??Subroutine95_0 & 0xFFFF
   1159            if ( destinationAddr->addrMode == Addr64Bit )
   \                     ??CrossCallReturnLabel_149:
   \   000029   E5..         MOV     A,?V2
   \   00002B   2408         ADD     A,#0x8
   \   00002D   12....       LCALL   ?Subroutine71 & 0xFFFF
   \                     ??CrossCallReturnLabel_115:
   \   000030   E0           MOVX    A,@DPTR
   \   000031   F8           MOV     R0,A
   \   000032   7403         MOV     A,#0x3
   \   000034   68           XRL     A,R0
   \   000035   7005         JNZ     ??ZDP_BindUnbindReq_0
   1160              len += Z_EXTADDR_LEN + 1;     // +1 for DstEPIntf
   \   000037   75..15       MOV     ?V0,#0x15
   \   00003A   8008         SJMP    ??ZDP_BindUnbindReq_1
   1161            else if ( destinationAddr->addrMode == AddrGroup )
   \                     ??ZDP_BindUnbindReq_0:
   \   00003C   7401         MOV     A,#0x1
   \   00003E   68           XRL     A,R0
   \   00003F   7003         JNZ     ??ZDP_BindUnbindReq_1
   1162              len += sizeof ( uint16 );
   \   000041   75..0E       MOV     ?V0,#0xe
   1163          
   1164            pBuf = osal_cpyExtAddr( pBuf, SourceAddr );
   \                     ??ZDP_BindUnbindReq_1:
   \   000044                ; Setup parameters for call to function sAddrExtCpy
   \   000044   7412         MOV     A,#0x12
   \   000046   12....       LCALL   ?XSTACK_DISP0_8
   \   000049   12....       LCALL   ?Subroutine59 & 0xFFFF
   \                     ??CrossCallReturnLabel_93:
   \   00004C   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   1165            *pBuf++ = SrcEndPoint;
   \   00004F   8A82         MOV     DPL,R2
   \   000051   8B83         MOV     DPH,R3
   \   000053   E5..         MOV     A,?V1
   \   000055   F0           MOVX    @DPTR,A
   \   000056   7414         MOV     A,#0x14
   \   000058   12....       LCALL   ?XSTACK_DISP0_8
   \   00005B   12....       LCALL   ?Subroutine12 & 0xFFFF
   1166          
   1167            *pBuf++ = LO_UINT16( ClusterID );
   1168          
   1169            *pBuf++ = HI_UINT16( ClusterID );
   1170            *pBuf++ = destinationAddr->addrMode;
   \                     ??CrossCallReturnLabel_10:
   \   00005E   85..82       MOV     DPL,?V6
   \   000061   85..83       MOV     DPH,?V7
   \   000064   12....       LCALL   ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   000067   5001         JNC     ??ZDP_BindUnbindReq_2
   \   000069   0B           INC     R3
   1171            if ( destinationAddr->addrMode == Addr64Bit )
   \                     ??ZDP_BindUnbindReq_2:
   \   00006A   85..82       MOV     DPL,?V6
   \   00006D   85..83       MOV     DPH,?V7
   \   000070   E0           MOVX    A,@DPTR
   \   000071   F8           MOV     R0,A
   \   000072   7403         MOV     A,#0x3
   \   000074   68           XRL     A,R0
   \   000075   7017         JNZ     ??ZDP_BindUnbindReq_3
   1172            {
   1173              pBuf = osal_cpyExtAddr( pBuf, destinationAddr->addr.extAddr );
   1174              *pBuf = DstEndPoint;
   \   000077   7418         MOV     A,#0x18
   \   000079   12....       LCALL   ?XSTACK_DISP0_8
   \   00007C   E0           MOVX    A,@DPTR
   \   00007D   C0E0         PUSH    A
   \   00007F                ; Setup parameters for call to function sAddrExtCpy
   \   00007F   AC..         MOV     R4,?V2
   \   000081   AD..         MOV     R5,?V3
   \   000083   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   000086   8A82         MOV     DPL,R2
   \   000088   8B83         MOV     DPH,R3
   \   00008A   D0E0         POP     A
   \   00008C   8016         SJMP    ??ZDP_BindUnbindReq_4
   1175            }
   1176            else if ( destinationAddr->addrMode == AddrGroup )
   \                     ??ZDP_BindUnbindReq_3:
   \   00008E   7401         MOV     A,#0x1
   \   000090   68           XRL     A,R0
   \   000091   7012         JNZ     ??ZDP_BindUnbindReq_5
   1177            {
   1178              *pBuf++ = LO_UINT16( destinationAddr->addr.shortAddr );
   \   000093   85..82       MOV     DPL,?V2
   \   000096   85..83       MOV     DPH,?V3
   \   000099   12....       LCALL   ?Subroutine67 & 0xFFFF
   1179              *pBuf++ = HI_UINT16( destinationAddr->addr.shortAddr );
   1180            }
   \                     ??CrossCallReturnLabel_108:
   \   00009C   12....       LCALL   ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   00009F   8A82         MOV     DPL,R2
   \   0000A1   8B83         MOV     DPH,R3
   \   0000A3   A3           INC     DPTR
   \                     ??ZDP_BindUnbindReq_4:
   \   0000A4   F0           MOVX    @DPTR,A
   1181          
   1182            FillAndSendTxOptions( &ZDP_TransID, dstAddr, BindOrUnbind, len, AF_MSG_ACK_REQUEST );
   \                     ??ZDP_BindUnbindReq_5:
   \   0000A5   90....       MOV     DPTR,#ZDP_TxOptions
   \   0000A8   7410         MOV     A,#0x10
   \   0000AA   F0           MOVX    @DPTR,A
   \   0000AB                ; Setup parameters for call to function fillAndSend
   \   0000AB   8E..         MOV     ?V2,R6
   \   0000AD   8F..         MOV     ?V3,R7
   \   0000AF   78..         MOV     R0,#?V2
   \   0000B1   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000B4   A9..         MOV     R1,?V0
   \   0000B6   7402         MOV     A,#0x2
   \   0000B8   12....       LCALL   ?XSTACK_DISP0_8
   \   0000BB   12....       LCALL   ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_90:
   \   0000BE   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   0000C1   7402         MOV     A,#0x2
   \   0000C3   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000C6   E9           MOV     A,R1
   \   0000C7   F9           MOV     R1,A
   \   0000C8   90....       MOV     DPTR,#ZDP_TxOptions
   \   0000CB   E4           CLR     A
   \   0000CC   F0           MOVX    @DPTR,A
   \   0000CD   02....       LJMP    ?Subroutine6 & 0xFFFF
   1183          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   12....       LCALL   ?Subroutine90 & 0xFFFF
   \                     ??CrossCallReturnLabel_146:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine90:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   85..82       MOV     DPL,?V2
   \   000004   85..83       MOV     DPH,?V3
   \   000007   A3           INC     DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine45:
   \   000000   12....       LCALL   ?Subroutine78 & 0xFFFF
   \                     ??CrossCallReturnLabel_131:
   \   000003   F0           MOVX    @DPTR,A
   \   000004   EA           MOV     A,R2
   \   000005   2404         ADD     A,#0x4
   \   000007   FA           MOV     R2,A
   \   000008   22           RET
   1184          
   1185          /*********************************************************************
   1186           * Network Management
   1187           */
   1188          
   1189          /*********************************************************************
   1190           * @fn          ZDP_MgmtNwkDiscReq
   1191           *
   1192           * @brief       This builds and send a Mgmt_NWK_Disc_req message. This
   1193           *              function sends a unicast message.
   1194           *
   1195           * @param       dstAddr - destination address of the message
   1196           * @param       ScanChannels - 32 bit address bit map
   1197           * @param       StartIndex - Starting index within the reporting network
   1198           *                           list
   1199           * @param       SecurityEnable - Security Options
   1200           *
   1201           * @return      afStatus_t
   1202           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1203          afStatus_t ZDP_MgmtNwkDiscReq( zAddrType_t *dstAddr,
   \                     ZDP_MgmtNwkDiscReq:
   1204                                         uint32 ScanChannels,
   1205                                         byte ScanDuration,
   1206                                         byte StartIndex,
   1207                                         byte SecurityEnable )
   1208          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0,R2
   \   000007   8B..         MOV     ?V1,R3
   \   000009   E9           MOV     A,R1
   \   00000A   FE           MOV     R6,A
   \   00000B   EC           MOV     A,R4
   \   00000C   FF           MOV     R7,A
   1209            uint8 *pBuf = ZDP_TmpBuf;
   1210            byte len = sizeof( uint32 )+1+1;  // ScanChannels + ScanDuration + StartIndex.
   1211          
   1212            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1213          
   1214            pBuf = osal_buffer_uint32( pBuf, ScanChannels );
   \   00000D                ; Setup parameters for call to function osal_buffer_uint32
   \   00000D   740C         MOV     A,#0xc
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   000015   12....       LCALL   ??Subroutine109_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_191:
   \   000018   12....       LCALL   `??osal_buffer_uint32::?relay`; Banked call to: osal_buffer_uint32
   \   00001B   7404         MOV     A,#0x4
   \   00001D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000020   8A82         MOV     DPL,R2
   \   000022   8B83         MOV     DPH,R3
   1215          
   1216            *pBuf++ = ScanDuration;
   \   000024   EE           MOV     A,R6
   \   000025   F0           MOVX    @DPTR,A
   1217            *pBuf = StartIndex;
   \   000026   EF           MOV     A,R7
   \   000027   A3           INC     DPTR
   \   000028   F0           MOVX    @DPTR,A
   1218          
   1219            return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_NWK_Disc_req, len );
   \   000029                ; Setup parameters for call to function fillAndSend
   \   000029   75..30       MOV     ?V2,#0x30
   \   00002C   75..00       MOV     ?V3,#0x0
   \   00002F   78..         MOV     R0,#?V2
   \   000031   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000034   7906         MOV     R1,#0x6
   \   000036   AC..         MOV     R4,?V0
   \   000038   AD..         MOV     R5,?V1
   \   00003A   80..         SJMP    ??Subroutine113_0
   1220          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine113_0:
   \   000000   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   000002   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   000004   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   000007   7402         MOV     A,#0x2
   \   000009                REQUIRE ??Subroutine114_0
   \   000009                ; // Fall through to label ??Subroutine114_0
   1221          
   1222          /*********************************************************************
   1223           * @fn          ZDP_MgmtDirectJoinReq
   1224           *
   1225           * @brief       This builds and send a Mgmt_Direct_Join_req message. This
   1226           *              function sends a unicast message.
   1227           *
   1228           * @param       dstAddr - destination address of the message
   1229           * @param       deviceAddr - 64 bit IEEE Address
   1230           * @param       SecurityEnable - Security Options
   1231           *
   1232           * @return      afStatus_t
   1233           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   EA           MOV     A,R2
   \   000001   FE           MOV     R6,A
   \   000002   EB           MOV     A,R3
   \   000003   FF           MOV     R7,A
   \   000004   89..         MOV     ?V0,R1
   \   000006                ; Setup parameters for call to function sAddrExtCpy
   \   000006                ; Setup parameters for call to function sAddrExtCpy
   \   000006                REQUIRE ??Subroutine109_0
   \   000006                ; // Fall through to label ??Subroutine109_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   75..00       MOV     ?V3,#0x0
   \   000003   78..         MOV     R0,#?V2
   \   000005   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000008   7909         MOV     R1,#0x9
   \   00000A   EE           MOV     A,R6
   \   00000B   FC           MOV     R4,A
   \   00000C   EF           MOV     A,R7
   \   00000D   FD           MOV     R5,A
   \   00000E                REQUIRE ??Subroutine113_0
   \   00000E                ; // Fall through to label ??Subroutine113_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1234          afStatus_t ZDP_MgmtDirectJoinReq( zAddrType_t *dstAddr,
   \                     ZDP_MgmtDirectJoinReq:
   1235                                         uint8 *deviceAddr,
   1236                                         byte capInfo,
   1237                                         byte SecurityEnable )
   1238          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL   ?Subroutine38 & 0xFFFF
   1239            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1240          
   1241            osal_cpyExtAddr( ZDP_TmpBuf, deviceAddr );
   \                     ??CrossCallReturnLabel_180:
   \   000008   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   1242            ZDP_TmpBuf[Z_EXTADDR_LEN] = capInfo;
   \   00000B   12....       LCALL   ?Subroutine94 & 0xFFFF
   \                     ??CrossCallReturnLabel_275:
   \   00000E   C8           XCH     A,R0
   \   00000F   2408         ADD     A,#0x8
   \   000011   F582         MOV     DPL,A
   \   000013   E4           CLR     A
   \   000014   38           ADDC    A,R0
   \   000015   F583         MOV     DPH,A
   \   000017   E5..         MOV     A,?V0
   \   000019   F0           MOVX    @DPTR,A
   1243          
   1244            return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_Direct_Join_req, (Z_EXTADDR_LEN + 1) );
   \   00001A                ; Setup parameters for call to function fillAndSend
   \   00001A   75..35       MOV     ?V2,#0x35
   \   00001D   80..         SJMP    ?Subroutine0
   1245          }
   1246          
   1247          /*********************************************************************
   1248           * @fn          ZDP_MgmtPermitJoinReq
   1249           *
   1250           * @brief       This builds and send a Mgmt_Permit_Join_req message.
   1251           *
   1252           * @param       dstAddr - destination address of the message
   1253           * @param       duration - Permit duration
   1254           * @param       TcSignificance - Trust Center Significance
   1255           *
   1256           * @return      afStatus_t
   1257           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1258          afStatus_t ZDP_MgmtPermitJoinReq( zAddrType_t *dstAddr, byte duration,
   \                     ZDP_MgmtPermitJoinReq:
   1259                                            byte TcSignificance, byte SecurityEnable )
   1260          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1261            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1262          
   1263            // Build buffer
   1264            ZDP_TmpBuf[ZDP_MGMT_PERMIT_JOIN_REQ_DURATION] = duration;
   \   000005   12....       LCALL   ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_197:
   \   000008   E9           MOV     A,R1
   \   000009   12....       LCALL   ?Subroutine18 & 0xFFFF
   1265            ZDP_TmpBuf[ZDP_MGMT_PERMIT_JOIN_REQ_TC_SIG]   = TcSignificance;
   \                     ??CrossCallReturnLabel_22:
   \   00000C   EC           MOV     A,R4
   \   00000D   F0           MOVX    @DPTR,A
   1266          
   1267            // Send the message
   1268            return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_Permit_Join_req,
   1269                                ZDP_MGMT_PERMIT_JOIN_REQ_SIZE );
   \   00000E                ; Setup parameters for call to function fillAndSend
   \   00000E   75..36       MOV     ?V0,#0x36
   \   000011   02....       LJMP    ?Subroutine1 & 0xFFFF
   1270          }
   1271          
   1272          /*********************************************************************
   1273           * @fn          ZDP_MgmtLeaveReq
   1274           *
   1275           * @brief       This builds and send a Mgmt_Leave_req message.
   1276           *
   1277           * @param       dstAddr - destination address of the message
   1278           *              IEEEAddr - IEEE adddress of device that is removed
   1279           *              RemoveChildren - set to 1 to remove the children of the
   1280           *                                device as well. 0 otherwise.
   1281           *              Rejoin - set to 1 if the removed device should rejoin
   1282                                   afterwards. 0 otherwise.
   1283           *
   1284           * @return      afStatus_t
   1285           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1286          afStatus_t ZDP_MgmtLeaveReq( zAddrType_t *dstAddr, uint8 *IEEEAddr, uint8 RemoveChildren,
   \                     ZDP_MgmtLeaveReq:
   1287                           uint8 Rejoin, uint8 SecurityEnable )
   1288          
   1289          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL   ?Subroutine38 & 0xFFFF
   1290            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1291          
   1292            osal_cpyExtAddr( ZDP_TmpBuf, IEEEAddr );
   \                     ??CrossCallReturnLabel_181:
   \   000008   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   1293            ZDP_TmpBuf[Z_EXTADDR_LEN] = 0;
   \   00000B   90....       MOV     DPTR,#ZDP_TmpBuf
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   2408         ADD     A,#0x8
   \   000011   F8           MOV     R0,A
   \   000012   A3           INC     DPTR
   \   000013   E0           MOVX    A,@DPTR
   \   000014   3400         ADDC    A,#0x0
   \   000016   F9           MOV     R1,A
   \   000017   8882         MOV     DPL,R0
   \   000019   8983         MOV     DPH,R1
   \   00001B   E4           CLR     A
   \   00001C   F0           MOVX    @DPTR,A
   1294          
   1295            if ( RemoveChildren == TRUE )
   \   00001D   04           INC     A
   \   00001E   65..         XRL     A,?V0
   \   000020   7003         JNZ     ??ZDP_MgmtLeaveReq_0
   1296            {
   1297              ZDP_TmpBuf[Z_EXTADDR_LEN] |= ZDP_MGMT_LEAVE_REQ_RC;
   \   000022   7440         MOV     A,#0x40
   \   000024   F0           MOVX    @DPTR,A
   1298            }
   1299            if ( Rejoin == TRUE )
   \                     ??ZDP_MgmtLeaveReq_0:
   \   000025   740C         MOV     A,#0xc
   \   000027   12....       LCALL   ?XSTACK_DISP0_8
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   6401         XRL     A,#0x1
   \   00002D   7008         JNZ     ??ZDP_MgmtLeaveReq_1
   1300            {
   1301              ZDP_TmpBuf[Z_EXTADDR_LEN] |= ZDP_MGMT_LEAVE_REQ_REJOIN;
   \   00002F   8882         MOV     DPL,R0
   \   000031   8983         MOV     DPH,R1
   \   000033   E0           MOVX    A,@DPTR
   \   000034   D2E7         SETB    0xE0 /* A   */.7
   \   000036   F0           MOVX    @DPTR,A
   1302            }
   1303          
   1304            return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_Leave_req, (Z_EXTADDR_LEN + 1) );
   \                     ??ZDP_MgmtLeaveReq_1:
   \   000037                ; Setup parameters for call to function fillAndSend
   \   000037   75..34       MOV     ?V2,#0x34
   \   00003A   02....       LJMP    ?Subroutine0 & 0xFFFF
   1305          }
   1306          
   1307          /*********************************************************************
   1308           * @fn          ZDP_MgmtNwkUpdateReq
   1309           *
   1310           * @brief       This builds and send a Mgmt_NWK_Update_req message. This
   1311           *              function sends a unicast or broadcast message.
   1312           *
   1313           * @param       dstAddr - destination address of the message
   1314           * @param       ChannelMask - 32 bit address bit map
   1315           * @param       ScanDuration - length of time to spend scanning each channel
   1316           * @param       ScanCount - number of energy scans to be conducted
   1317           * @param       NwkUpdateId - NWk Update Id value
   1318           * @param       NwkManagerAddr - NWK address for device with Network Manager
   1319           *                               bit set in its Node Descriptor
   1320           *
   1321           * @return      afStatus_t
   1322           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1323          afStatus_t ZDP_MgmtNwkUpdateReq( zAddrType_t *dstAddr,
   \                     ZDP_MgmtNwkUpdateReq:
   1324                                           uint32 ChannelMask,
   1325                                           uint8 ScanDuration,
   1326                                           uint8 ScanCount,
   1327                                           uint8 NwkUpdateId,
   1328                                           uint16 NwkManagerAddr )
   1329          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V4,R2
   \   000007   8B..         MOV     ?V5,R3
   \   000009   E9           MOV     A,R1
   \   00000A   FE           MOV     R6,A
   \   00000B   8C..         MOV     ?V1,R4
   \   00000D   ED           MOV     A,R5
   \   00000E   FF           MOV     R7,A
   1330            uint8 *pBuf = ZDP_TmpBuf;
   1331            byte len = sizeof( uint32 ) + 1;  // ChannelMask + ScanDuration
   \   00000F   75..05       MOV     ?V0,#0x5
   1332          
   1333            pBuf = osal_buffer_uint32( pBuf, ChannelMask );
   \   000012                ; Setup parameters for call to function osal_buffer_uint32
   \   000012   740E         MOV     A,#0xe
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   00001A   12....       LCALL   ??Subroutine109_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_192:
   \   00001D   12....       LCALL   `??osal_buffer_uint32::?relay`; Banked call to: osal_buffer_uint32
   \   000020   7404         MOV     A,#0x4
   \   000022   12....       LCALL   ?DEALLOC_XSTACK8
   1334          
   1335            *pBuf++ = ScanDuration;
   \   000025   EE           MOV     A,R6
   \   000026   8A82         MOV     DPL,R2
   \   000028   8B83         MOV     DPH,R3
   \   00002A   F0           MOVX    @DPTR,A
   1336          
   1337            if ( ScanDuration <= 0x05 )
   \   00002B   EA           MOV     A,R2
   \   00002C   2402         ADD     A,#0x2
   \   00002E   FC           MOV     R4,A
   \   00002F   E4           CLR     A
   \   000030   3B           ADDC    A,R3
   \   000031   FD           MOV     R5,A
   \   000032   A3           INC     DPTR
   \   000033   EE           MOV     A,R6
   \   000034   C3           CLR     C
   \   000035   9406         SUBB    A,#0x6
   \   000037   5008         JNC     ??ZDP_MgmtNwkUpdateReq_0
   1338            {
   1339              // Request is to scan over channelMask
   1340              len += sizeof( uint8 );
   \   000039   75..06       MOV     ?V0,#0x6
   1341          
   1342              *pBuf++ = ScanCount;
   \   00003C   E5..         MOV     A,?V1
   \   00003E   F0           MOVX    @DPTR,A
   \   00003F   8025         SJMP    ??ZDP_MgmtNwkUpdateReq_1
   1343            }
   1344            else if ( ( ScanDuration == 0xFE ) || ( ScanDuration == 0xFF ) )
   \                     ??ZDP_MgmtNwkUpdateReq_0:
   \   000041   74FE         MOV     A,#-0x2
   \   000043   6E           XRL     A,R6
   \   000044   6005         JZ      ??ZDP_MgmtNwkUpdateReq_2
   \   000046   74FF         MOV     A,#-0x1
   \   000048   6E           XRL     A,R6
   \   000049   701B         JNZ     ??ZDP_MgmtNwkUpdateReq_1
   1345            {
   1346              // Request is to change Channel (0xFE) or apsChannelMask and NwkManagerAddr (0xFF)
   1347              len += sizeof( uint8 );
   \                     ??ZDP_MgmtNwkUpdateReq_2:
   \   00004B   75..06       MOV     ?V0,#0x6
   1348          
   1349              *pBuf++ = NwkUpdateId;
   \   00004E   EF           MOV     A,R7
   \   00004F   F0           MOVX    @DPTR,A
   1350          
   1351              if ( ScanDuration == 0xFF )
   \   000050   74FF         MOV     A,#-0x1
   \   000052   6E           XRL     A,R6
   \   000053   7011         JNZ     ??ZDP_MgmtNwkUpdateReq_1
   1352              {
   1353                len += sizeof( uint16 );
   \   000055   75..08       MOV     ?V0,#0x8
   \   000058   7412         MOV     A,#0x12
   \   00005A   12....       LCALL   ?XSTACK_DISP0_8
   \   00005D   12....       LCALL   ?Subroutine54 & 0xFFFF
   1354          
   1355                *pBuf++  = LO_UINT16( NwkManagerAddr );
   1356                *pBuf++  = HI_UINT16( NwkManagerAddr );
   1357              }
   1358            }
   \                     ??CrossCallReturnLabel_86:
   \   000060   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   000063   EA           MOV     A,R2
   \   000064   2404         ADD     A,#0x4
   1359          
   1360            return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_NWK_Update_req, len );
   \                     ??ZDP_MgmtNwkUpdateReq_1:
   \   000066                ; Setup parameters for call to function fillAndSend
   \   000066   75..38       MOV     ?V2,#0x38
   \   000069   75..00       MOV     ?V3,#0x0
   \   00006C   78..         MOV     R0,#?V2
   \   00006E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000071   A9..         MOV     R1,?V0
   \   000073   02....       LJMP    ?Subroutine2 & 0xFFFF
   1361          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   12....       LCALL   ?Subroutine89 & 0xFFFF
   \                     ??CrossCallReturnLabel_144:
   \   000003   A3           INC     DPTR
   \   000004   F0           MOVX    @DPTR,A
   \   000005   22           RET
   1362          
   1363          
   1364          /*********************************************************************
   1365           * Network Management Responses
   1366           */
   1367          
   1368          /*********************************************************************
   1369           * @fn          ZDP_MgmtNwkDiscRsp
   1370           *
   1371           * @brief       This builds and send a Mgmt_NWK_Disc_rsp message. This
   1372           *              function sends a unicast message.
   1373           *
   1374           * @param       dstAddr - destination address of the message
   1375           * @param       Status - message status (ZDP_SUCCESS or other)
   1376           * @param       NetworkCount - Total number of networks found
   1377           * @param       StartIndex - Starting index within the reporting network
   1378           *                           list
   1379           * @param       NetworkListCount - number of network lists included
   1380           *                                 in this message
   1381           * @param       NetworkList - List of network descriptors
   1382           * @param       SecurityEnable - Security Options
   1383           *
   1384           * @return      afStatus_t
   1385           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine48:
   \   000000   F583         MOV     DPH,A
   \   000002                REQUIRE ??Subroutine112_0
   \   000002                ; // Fall through to label ??Subroutine112_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1386          afStatus_t ZDP_MgmtNwkDiscRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_MgmtNwkDiscRsp:
   1387                                      byte Status,
   1388                                      byte NetworkCount,
   1389                                      byte StartIndex,
   1390                                      byte NetworkListCount,
   1391                                      networkDesc_t *NetworkList,
   1392                                      byte SecurityEnable )
   1393          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   7401         MOV     A,#0x1
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   E9           MOV     A,R1
   \   000010   F0           MOVX    @DPTR,A
   \   000011   7402         MOV     A,#0x2
   \   000013   12....       LCALL   ?XSTACK_DISP0_8
   \   000016   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   000019   12....       LCALL   ?XSTACK_DISP0_8
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   F5..         MOV     ?V5,A
   1394            uint8 *buf;
   1395            uint8 *pBuf;
   1396            byte len = 1+1+1+1;  // Status + NetworkCount + StartIndex + NetworkCountList.
   1397            byte idx;
   1398          
   1399            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1400          
   1401            len += (NetworkListCount * ( ZDP_NETWORK_EXTENDED_DISCRIPTOR_SIZE - 2 ));
   \   00001F   75F00C       MOV     B,#0xc
   \   000022   12....       LCALL   ?Subroutine70 & 0xFFFF
   1402          
   1403            buf = osal_mem_alloc( len+1 );
   \                     ??CrossCallReturnLabel_247:
   \   000025   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000028   8A..         MOV     ?V2,R2
   \   00002A   8B..         MOV     ?V3,R3
   1404            if ( buf == NULL )
   \   00002C   EA           MOV     A,R2
   \   00002D   45..         ORL     A,?V3
   \   00002F   7005         JNZ     ??ZDP_MgmtNwkDiscRsp_0
   1405            {
   1406              return afStatus_MEM_FAIL;
   \   000031   7910         MOV     R1,#0x10
   \   000033   02....       LJMP    ??CrossCallReturnLabel_30 & 0xFFFF
   1407            }
   \                     ??ZDP_MgmtNwkDiscRsp_0:
   \   000036   8A82         MOV     DPL,R2
   \   000038   8B83         MOV     DPH,R3
   \   00003A   A3           INC     DPTR
   \   00003B   AE82         MOV     R6,DPL
   \   00003D   AF83         MOV     R7,DPH
   1408          
   1409            pBuf = buf+1;
   1410          
   1411            *pBuf++ = Status;
   \   00003F   85..82       MOV     DPL,?XSP + 0
   \   000042   85..83       MOV     DPH,?XSP + 1
   \   000045   12....       LCALL   ??Subroutine103_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_157:
   \   000048   F0           MOVX    @DPTR,A
   1412            *pBuf++ = NetworkCount;
   \   000049   A3           INC     DPTR
   \   00004A   E5..         MOV     A,?V7
   \   00004C   F0           MOVX    @DPTR,A
   1413            *pBuf++ = StartIndex;
   \   00004D   7414         MOV     A,#0x14
   \   00004F   12....       LCALL   ?XSTACK_DISP0_8
   \   000052   12....       LCALL   ??Subroutine103_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_158:
   \   000055   12....       LCALL   ?Subroutine36 & 0xFFFF
   1414            *pBuf++ = NetworkListCount;
   \                     ??CrossCallReturnLabel_58:
   \   000058   E5..         MOV     A,?V5
   \   00005A   F0           MOVX    @DPTR,A
   \   00005B   EE           MOV     A,R6
   \   00005C   2404         ADD     A,#0x4
   \   00005E   FE           MOV     R6,A
   \   00005F   5001         JNC     ??ZDP_MgmtNwkDiscRsp_1
   \   000061   0F           INC     R7
   1415          
   1416            for ( idx = 0; idx < NetworkListCount; idx++ )
   \                     ??ZDP_MgmtNwkDiscRsp_1:
   \   000062   75..00       MOV     ?V4,#0x0
   \   000065   7416         MOV     A,#0x16
   \   000067   12....       LCALL   ?XSTACK_DISP0_8
   \   00006A   12....       LCALL   ??Subroutine112_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_208:
   \   00006D   8014         SJMP    ??ZDP_MgmtNwkDiscRsp_2
   1417            {
   1418              osal_cpyExtAddr( pBuf, NetworkList->extendedPANID);
   1419              pBuf += Z_EXTADDR_LEN;
   1420          
   1421              *pBuf++  = NetworkList->logicalChannel;                // LogicalChannel
   1422              *pBuf    = NetworkList->stackProfile;                  // Stack profile
   1423              *pBuf++ |= (byte)(NetworkList->version << 4);          // ZigBee Version
   1424              *pBuf    = NetworkList->beaconOrder;                   // Beacon Order
   1425              *pBuf++ |= (byte)(NetworkList->superFrameOrder << 4);  // Superframe Order
   1426          
   1427              if ( NetworkList->chosenRouter != INVALID_NODE_ADDR )
   1428              {
   1429                *pBuf++ = TRUE;                         // Permit Joining
   1430              }
   1431              else
   1432              {
   1433                *pBuf++ = FALSE;
   \                     ??ZDP_MgmtNwkDiscRsp_3:
   \   00006F   E4           CLR     A
   \                     ??ZDP_MgmtNwkDiscRsp_4:
   \   000070   F0           MOVX    @DPTR,A
   \   000071   E8           MOV     A,R0
   \   000072   FE           MOV     R6,A
   \   000073   E9           MOV     A,R1
   \   000074   FF           MOV     R7,A
   1434              }
   1435          
   1436              NetworkList = NetworkList->nextDesc;    // Move to next list entry
   \   000075   E5..         MOV     A,?V0
   \   000077   2416         ADD     A,#0x16
   \   000079   F582         MOV     DPL,A
   \   00007B   E4           CLR     A
   \   00007C   35..         ADDC    A,?V1
   \   00007E   12....       LCALL   ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_209:
   \   000081   05..         INC     ?V4
   \                     ??ZDP_MgmtNwkDiscRsp_2:
   \   000083   E5..         MOV     A,?V4
   \   000085   C3           CLR     C
   \   000086   95..         SUBB    A,?V5
   \   000088   507A         JNC     ??ZDP_MgmtNwkDiscRsp_5
   \   00008A                ; Setup parameters for call to function sAddrExtCpy
   \   00008A   E5..         MOV     A,?V0
   \   00008C   240D         ADD     A,#0xd
   \   00008E   FC           MOV     R4,A
   \   00008F   E4           CLR     A
   \   000090   35..         ADDC    A,?V1
   \   000092   FD           MOV     R5,A
   \   000093   EE           MOV     A,R6
   \   000094   FA           MOV     R2,A
   \   000095   EF           MOV     A,R7
   \   000096   FB           MOV     R3,A
   \   000097   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   00009A   85..82       MOV     DPL,?V0
   \   00009D   85..83       MOV     DPH,?V1
   \   0000A0   A3           INC     DPTR
   \   0000A1   A3           INC     DPTR
   \   0000A2   12....       LCALL   ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_77:
   \   0000A5   A3           INC     DPTR
   \   0000A6   A3           INC     DPTR
   \   0000A7   A3           INC     DPTR
   \   0000A8   A3           INC     DPTR
   \   0000A9   A3           INC     DPTR
   \   0000AA   A3           INC     DPTR
   \   0000AB   A3           INC     DPTR
   \   0000AC   F0           MOVX    @DPTR,A
   \   0000AD   EE           MOV     A,R6
   \   0000AE   2409         ADD     A,#0x9
   \   0000B0   F8           MOV     R0,A
   \   0000B1   12....       LCALL   ?Subroutine74 & 0xFFFF
   \                     ??CrossCallReturnLabel_119:
   \   0000B4   A3           INC     DPTR
   \   0000B5   A3           INC     DPTR
   \   0000B6   A3           INC     DPTR
   \   0000B7   A3           INC     DPTR
   \   0000B8   A3           INC     DPTR
   \   0000B9   12....       LCALL   ?Subroutine62 & 0xFFFF
   \                     ??CrossCallReturnLabel_214:
   \   0000BC   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   0000BF   12....       LCALL   ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   0000C2   240A         ADD     A,#0xa
   \   0000C4   08           INC     R0
   \   0000C5   12....       LCALL   ?Subroutine74 & 0xFFFF
   \                     ??CrossCallReturnLabel_120:
   \   0000C8   12....       LCALL   ?Subroutine62 & 0xFFFF
   \                     ??CrossCallReturnLabel_215:
   \   0000CB   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   0000CE   A3           INC     DPTR
   \   0000CF   12....       LCALL   ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_71:
   \   0000D2   240C         ADD     A,#0xc
   \   0000D4   F8           MOV     R0,A
   \   0000D5   E4           CLR     A
   \   0000D6   3F           ADDC    A,R7
   \   0000D7   F9           MOV     R1,A
   \   0000D8   EE           MOV     A,R6
   \   0000D9   240B         ADD     A,#0xb
   \   0000DB   FA           MOV     R2,A
   \   0000DC   E4           CLR     A
   \   0000DD   3F           ADDC    A,R7
   \   0000DE   FB           MOV     R3,A
   \   0000DF   85..82       MOV     DPL,?V0
   \   0000E2   85..83       MOV     DPH,?V1
   \   0000E5   A3           INC     DPTR
   \   0000E6   A3           INC     DPTR
   \   0000E7   A3           INC     DPTR
   \   0000E8   A3           INC     DPTR
   \   0000E9   A3           INC     DPTR
   \   0000EA   A3           INC     DPTR
   \   0000EB   A3           INC     DPTR
   \   0000EC   A3           INC     DPTR
   \   0000ED   A3           INC     DPTR
   \   0000EE   E0           MOVX    A,@DPTR
   \   0000EF   64FE         XRL     A,#0xfe
   \   0000F1   7003         JNZ     ??ZDP_MgmtNwkDiscRsp_6
   \   0000F3   A3           INC     DPTR
   \   0000F4   E0           MOVX    A,@DPTR
   \   0000F5   F4           CPL     A
   \                     ??ZDP_MgmtNwkDiscRsp_6:
   \   0000F6   8A82         MOV     DPL,R2
   \   0000F8   8B83         MOV     DPH,R3
   \   0000FA   7003         JNZ     $+5
   \   0000FC   02....       LJMP    ??ZDP_MgmtNwkDiscRsp_3 & 0xFFFF
   \   0000FF   7401         MOV     A,#0x1
   \   000101   02....       LJMP    ??ZDP_MgmtNwkDiscRsp_4 & 0xFFFF
   1437            }
   1438          
   1439            FillAndSendBuffer( &TransSeq, dstAddr, Mgmt_NWK_Disc_rsp, len, buf );
   \                     ??ZDP_MgmtNwkDiscRsp_5:
   \   000104   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_232:
   \   000107                ; Setup parameters for call to function fillAndSend
   \   000107   75..30       MOV     ?V0,#0x30
   \   00010A   75..80       MOV     ?V1,#-0x80
   \   00010D   78..         MOV     R0,#?V0
   \   00010F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000112   A9..         MOV     R1,?V6
   \   000114   7404         MOV     A,#0x4
   \   000116   12....       LCALL   ?XSTACK_DISP0_8
   \   000119   12....       LCALL   ?Subroutine59 & 0xFFFF
   \                     ??CrossCallReturnLabel_94:
   \   00011C   7403         MOV     A,#0x3
   \   00011E   12....       LCALL   ?XSTACK_DISP101_8
   \   000121   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   000124   7402         MOV     A,#0x2
   \   000126   12....       LCALL   ?DEALLOC_XSTACK8
   \   000129   E9           MOV     A,R1
   \   00012A   FE           MOV     R6,A
   \   00012B                ; Setup parameters for call to function osal_mem_free
   \   00012B   AA..         MOV     R2,?V2
   \   00012D   AB..         MOV     R3,?V3
   \   00012F   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000132   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   000135                REQUIRE ?Subroutine7
   \   000135                ; // Fall through to label ?Subroutine7
   1440          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   7404         MOV     A,#0x4
   \   000002   80..         SJMP    ??Subroutine116_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine74:
   \   000000   E4           CLR     A
   \   000001   3F           ADDC    A,R7
   \   000002   F9           MOV     R1,A
   \   000003   85..82       MOV     DPL,?V0
   \   000006   85..83       MOV     DPH,?V1
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine46:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   C4           SWAP    A
   \   000002   54F0         ANL     A,#0xf0
   \   000004   FA           MOV     R2,A
   \   000005   8882         MOV     DPL,R0
   \   000007   8983         MOV     DPH,R1
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   4A           ORL     A,R2
   \   00000B   F0           MOVX    @DPTR,A
   \   00000C   EE           MOV     A,R6
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine62:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003                REQUIRE ??Subroutine118_0
   \   000003                ; // Fall through to label ??Subroutine118_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   12....       LCALL   ?Subroutine85 & 0xFFFF
   \                     ??CrossCallReturnLabel_138:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000003   74..         MOV     A,#(ZDP_Buf + 1) & 0xff
   \   000005   F0           MOVX    @DPTR,A
   \   000006   A3           INC     DPTR
   \   000007   74..         MOV     A,#((ZDP_Buf + 1) >> 8) & 0xff
   \   000009   F0           MOVX    @DPTR,A
   \   00000A   EE           MOV     A,R6
   \   00000B   F9           MOV     R1,A
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   85..82       MOV     DPL,?V2
   \   000003   85..83       MOV     DPH,?V3
   \   000006   A3           INC     DPTR
   \   000007   A882         MOV     R0,DPL
   \   000009   A983         MOV     R1,DPH
   \   00000B                REQUIRE ??Subroutine121_0
   \   00000B                ; // Fall through to label ??Subroutine121_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine121_0:
   \   000000   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000003                REQUIRE ??Subroutine122_0
   \   000003                ; // Fall through to label ??Subroutine122_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   EA           MOV     A,R2
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   EB           MOV     A,R3
   \   000004   F0           MOVX    @DPTR,A
   \   000005   EC           MOV     A,R4
   \   000006   85..82       MOV     DPL,?XSP + 0
   \   000009   85..83       MOV     DPH,?XSP + 1
   \   00000C   F0           MOVX    @DPTR,A
   \   00000D   8D..         MOV     ?V7,R5
   \   00000F   7415         MOV     A,#0x15
   \   000011   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine70:
   \   000000   A4           MUL     AB
   \   000001   2404         ADD     A,#0x4
   \   000003   F5..         MOV     ?V6,A
   \   000005                ; Setup parameters for call to function osal_mem_alloc
   \   000005                ; Setup parameters for call to function osal_mem_alloc
   \   000005                REQUIRE ??Subroutine125_0
   \   000005                ; // Fall through to label ??Subroutine125_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine125_0:
   \   000000   2401         ADD     A,#0x1
   \   000002   FA           MOV     R2,A
   \   000003   E4           CLR     A
   \   000004   3400         ADDC    A,#0x0
   \   000006   FB           MOV     R3,A
   \   000007   22           RET
   1441          
   1442          /*********************************************************************
   1443           * @fn          ZDP_MgmtLqiRsp
   1444           *
   1445           * @brief       This builds and send a Mgmt_Lqi_rsp message. This
   1446           *              function sends a unicast message.
   1447           *
   1448           * @param       dstAddr - destination address of the message
   1449           * @param       Status - message status (ZDP_SUCCESS or other)
   1450           * @param       NeighborLqiEntries - Total number of entries found
   1451           * @param       StartIndex - Starting index within the reporting list
   1452           * @param       NeighborLqiCount - number of lists included
   1453           *                                 in this message
   1454           * @param       NeighborLqiList - List of NeighborLqiItems.  This list
   1455           *                is the list to be sent, not the entire list
   1456           * @param       SecurityEnable - true if secure
   1457           *
   1458           * @return      ZStatus_t
   1459           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1460          ZStatus_t ZDP_MgmtLqiRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_MgmtLqiRsp:
   1461                                    byte Status,
   1462                                    byte NeighborLqiEntries,
   1463                                    byte StartIndex,
   1464                                    byte NeighborLqiCount,
   1465                                    ZDP_MgmtLqiItem_t* NeighborList,
   1466                                    byte SecurityEnable )
   1467          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   F0           MOVX    @DPTR,A
   \   000012   7402         MOV     A,#0x2
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   00001A   7401         MOV     A,#0x1
   \   00001C   12....       LCALL   ?XSTACK_DISP0_8
   \   00001F   ED           MOV     A,R5
   \   000020   F0           MOVX    @DPTR,A
   1468            ZDP_MgmtLqiItem_t* list = NeighborList;
   \   000021   7416         MOV     A,#0x16
   \   000023   12....       LCALL   ?XSTACK_DISP0_8
   \   000026   12....       LCALL   ??Subroutine126_0 & 0xFFFF
   1469            uint8 *buf, *pBuf;
   1470            byte len, x;
   1471          
   1472            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1473          
   1474            if ( ZSuccess != Status )
   \                     ??CrossCallReturnLabel_252:
   \   000029   EC           MOV     A,R4
   \   00002A   6028         JZ      ??ZDP_MgmtLqiRsp_0
   1475            {
   1476              ZDP_TmpBuf[0] = Status;
   \   00002C   12....       LCALL   ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_198:
   \   00002F   EC           MOV     A,R4
   \   000030   F0           MOVX    @DPTR,A
   1477              return fillAndSend( &TransSeq, dstAddr, Mgmt_Lqi_rsp, 1 );
   \   000031                ; Setup parameters for call to function fillAndSend
   \   000031   75..31       MOV     ?V0,#0x31
   \   000034   75..80       MOV     ?V1,#-0x80
   \   000037   78..         MOV     R0,#?V0
   \   000039   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003C   7901         MOV     R1,#0x1
   \   00003E   7404         MOV     A,#0x4
   \   000040   12....       LCALL   ?XSTACK_DISP0_8
   \   000043   12....       LCALL   ?Subroutine52 & 0xFFFF
   1478            }
   \                     ??CrossCallReturnLabel_82:
   \   000046   12....       LCALL   ?XSTACK_DISP101_8
   \   000049   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   00004C   7402         MOV     A,#0x2
   \   00004E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000051   02....       LJMP    ??CrossCallReturnLabel_31 & 0xFFFF
   \                     ??ZDP_MgmtLqiRsp_0:
   \   000054   7415         MOV     A,#0x15
   \   000056   12....       LCALL   ?XSTACK_DISP0_8
   \   000059   E0           MOVX    A,@DPTR
   \   00005A   F5..         MOV     ?V5,A
   1479          
   1480            // (Status + NeighborLqiEntries + StartIndex + NeighborLqiCount) +
   1481            //  neighbor LQI data.
   1482            len = (1 + 1 + 1 + 1) + (NeighborLqiCount * ZDP_MGMTLQI_EXTENDED_SIZE);
   \   00005C   75F016       MOV     B,#0x16
   \   00005F   12....       LCALL   ?Subroutine70 & 0xFFFF
   1483          
   1484            buf = osal_mem_alloc( len+1 );
   \                     ??CrossCallReturnLabel_248:
   \   000062   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000065   8A..         MOV     ?V2,R2
   \   000067   8B..         MOV     ?V3,R3
   1485            if ( buf == NULL )
   \   000069   EA           MOV     A,R2
   \   00006A   45..         ORL     A,?V3
   \   00006C   7005         JNZ     ??ZDP_MgmtLqiRsp_1
   1486            {
   1487              return afStatus_MEM_FAIL;
   \   00006E   7910         MOV     R1,#0x10
   \   000070   02....       LJMP    ??CrossCallReturnLabel_31 & 0xFFFF
   1488            }
   \                     ??ZDP_MgmtLqiRsp_1:
   \   000073   8A82         MOV     DPL,R2
   \   000075   8B83         MOV     DPH,R3
   \   000077   A3           INC     DPTR
   \   000078   8582..       MOV     ?V0,DPL
   \   00007B   8583..       MOV     ?V1,DPH
   1489          
   1490            pBuf = buf+1;
   1491          
   1492            *pBuf++ = Status;
   \   00007E   E4           CLR     A
   \   00007F   F0           MOVX    @DPTR,A
   1493            *pBuf++ = NeighborLqiEntries;
   \   000080   04           INC     A
   \   000081   12....       LCALL   ?XSTACK_DISP0_8
   \   000084   12....       LCALL   ?Subroutine63 & 0xFFFF
   \                     ??CrossCallReturnLabel_99:
   \   000087   F0           MOVX    @DPTR,A
   1494            *pBuf++ = StartIndex;
   \   000088   7414         MOV     A,#0x14
   \   00008A   12....       LCALL   ?XSTACK_DISP0_8
   \   00008D   12....       LCALL   ?Subroutine63 & 0xFFFF
   \                     ??CrossCallReturnLabel_100:
   \   000090   A3           INC     DPTR
   \   000091   12....       LCALL   ?Subroutine26 & 0xFFFF
   1495            *pBuf++ = NeighborLqiCount;
   \                     ??CrossCallReturnLabel_37:
   \   000094   E5..         MOV     A,?V5
   \   000096   F0           MOVX    @DPTR,A
   \   000097   E5..         MOV     A,?V0
   \   000099   2404         ADD     A,#0x4
   \   00009B   F5..         MOV     ?V0,A
   \   00009D   5002         JNC     ??ZDP_MgmtLqiRsp_2
   \   00009F   05..         INC     ?V1
   1496          
   1497            for ( x = 0; x < NeighborLqiCount; x++ )
   \                     ??ZDP_MgmtLqiRsp_2:
   \   0000A1   75..00       MOV     ?V4,#0x0
   \   0000A4   02....       LJMP    ??ZDP_MgmtLqiRsp_3 & 0xFFFF
   1498            {
   1499              osal_cpyExtAddr( pBuf, list->extPanID);         // Extended PanID
   \                     ??ZDP_MgmtLqiRsp_4:
   \   0000A7                ; Setup parameters for call to function sAddrExtCpy
   \   0000A7   EE           MOV     A,R6
   \   0000A8   2402         ADD     A,#0x2
   \   0000AA   FC           MOV     R4,A
   \   0000AB   E4           CLR     A
   \   0000AC   3F           ADDC    A,R7
   \   0000AD   FD           MOV     R5,A
   \   0000AE   AA..         MOV     R2,?V0
   \   0000B0   AB..         MOV     R3,?V1
   \   0000B2   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   1500              pBuf += Z_EXTADDR_LEN;
   1501          
   1502              // EXTADDR
   1503              pBuf = osal_cpyExtAddr( pBuf, list->extAddr );
   \   0000B5                ; Setup parameters for call to function sAddrExtCpy
   \   0000B5   EE           MOV     A,R6
   \   0000B6   240A         ADD     A,#0xa
   \   0000B8   FC           MOV     R4,A
   \   0000B9   E4           CLR     A
   \   0000BA   3F           ADDC    A,R7
   \   0000BB   FD           MOV     R5,A
   \   0000BC   E5..         MOV     A,?V0
   \   0000BE   2408         ADD     A,#0x8
   \   0000C0   FA           MOV     R2,A
   \   0000C1   E4           CLR     A
   \   0000C2   35..         ADDC    A,?V1
   \   0000C4   FB           MOV     R3,A
   \   0000C5   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   0000C8   8A..         MOV     ?V0,R2
   \   0000CA   8B..         MOV     ?V1,R3
   \   0000CC   A8..         MOV     R0,?V0
   \   0000CE   A9..         MOV     R1,?V1
   1504          
   1505              // NWKADDR
   1506              *pBuf++ = LO_UINT16( list->nwkAddr );
   \   0000D0   EE           MOV     A,R6
   \   0000D1   2412         ADD     A,#0x12
   \   0000D3   FC           MOV     R4,A
   \   0000D4   E4           CLR     A
   \   0000D5   3F           ADDC    A,R7
   \   0000D6   FD           MOV     R5,A
   \   0000D7   8C82         MOV     DPL,R4
   \   0000D9   8D83         MOV     DPH,R5
   \   0000DB   12....       LCALL   ??Subroutine118_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_212:
   \   0000DE   12....       LCALL   ?Subroutine25 & 0xFFFF
   1507              *pBuf++ = HI_UINT16( list->nwkAddr );
   \                     ??CrossCallReturnLabel_35:
   \   0000E1   8882         MOV     DPL,R0
   \   0000E3   8983         MOV     DPH,R1
   \   0000E5   A3           INC     DPTR
   \   0000E6   F0           MOVX    @DPTR,A
   1508          
   1509              // DEVICETYPE
   1510              *pBuf = list->devType;
   \   0000E7   E8           MOV     A,R0
   \   0000E8   2402         ADD     A,#0x2
   \   0000EA   FA           MOV     R2,A
   \   0000EB   E4           CLR     A
   \   0000EC   39           ADDC    A,R1
   \   0000ED   FB           MOV     R3,A
   \   0000EE   12....       LCALL   ?Subroutine76 & 0xFFFF
   \                     ??CrossCallReturnLabel_124:
   \   0000F1   12....       LCALL   ??Subroutine120_0 & 0xFFFF
   1511          
   1512              // RXONIDLE
   1513              *pBuf |= (uint8)(list->rxOnIdle << 2);
   \                     ??CrossCallReturnLabel_222:
   \   0000F4   EE           MOV     A,R6
   \   0000F5   2415         ADD     A,#0x15
   \   0000F7   F582         MOV     DPL,A
   \   0000F9   E4           CLR     A
   \   0000FA   3F           ADDC    A,R7
   \   0000FB   F583         MOV     DPH,A
   \   0000FD   E0           MOVX    A,@DPTR
   \   0000FE   33           RLC     A
   \   0000FF   33           RLC     A
   \   000100   54FC         ANL     A,#0xfc
   \   000102   FC           MOV     R4,A
   \   000103   8A82         MOV     DPL,R2
   \   000105   8B83         MOV     DPH,R3
   \   000107   E0           MOVX    A,@DPTR
   \   000108   4C           ORL     A,R4
   \   000109   F0           MOVX    @DPTR,A
   1514          
   1515              // RELATIONSHIP
   1516              *pBuf++ |= (uint8)(list->relation << 4);
   \   00010A   EE           MOV     A,R6
   \   00010B   2416         ADD     A,#0x16
   \   00010D   F582         MOV     DPL,A
   \   00010F   E4           CLR     A
   \   000110   3F           ADDC    A,R7
   \   000111   F583         MOV     DPH,A
   \   000113   E0           MOVX    A,@DPTR
   \   000114   C4           SWAP    A
   \   000115   54F0         ANL     A,#0xf0
   \   000117   FC           MOV     R4,A
   \   000118   8A82         MOV     DPL,R2
   \   00011A   8B83         MOV     DPH,R3
   \   00011C   E0           MOVX    A,@DPTR
   \   00011D   4C           ORL     A,R4
   \   00011E   F0           MOVX    @DPTR,A
   1517          
   1518              // PERMITJOINING
   1519              *pBuf++ = (uint8)(list->permit);
   \   00011F   EE           MOV     A,R6
   \   000120   2417         ADD     A,#0x17
   \   000122   F582         MOV     DPL,A
   \   000124   E4           CLR     A
   \   000125   3F           ADDC    A,R7
   \   000126   F583         MOV     DPH,A
   \   000128   12....       LCALL   ??Subroutine118_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_213:
   \   00012B   A3           INC     DPTR
   \   00012C   A3           INC     DPTR
   \   00012D   A3           INC     DPTR
   \   00012E   F0           MOVX    @DPTR,A
   1520          
   1521              // DEPTH
   1522              *pBuf++ = list->depth;
   \   00012F   EE           MOV     A,R6
   \   000130   2418         ADD     A,#0x18
   \   000132   12....       LCALL   ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_97:
   \   000135   F0           MOVX    @DPTR,A
   1523          
   1524              // LQI
   1525              *pBuf++ = list->lqi;
   \   000136   EE           MOV     A,R6
   \   000137   2419         ADD     A,#0x19
   \   000139   12....       LCALL   ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_98:
   \   00013C   A3           INC     DPTR
   \   00013D   F0           MOVX    @DPTR,A
   \   00013E   E8           MOV     A,R0
   \   00013F   2406         ADD     A,#0x6
   \   000141   F5..         MOV     ?V0,A
   \   000143   E4           CLR     A
   \   000144   39           ADDC    A,R1
   \   000145   F5..         MOV     ?V1,A
   1526          
   1527              list++; // next list entry
   \   000147   EE           MOV     A,R6
   \   000148   241A         ADD     A,#0x1a
   \   00014A   FE           MOV     R6,A
   \   00014B   5001         JNC     ??ZDP_MgmtLqiRsp_5
   \   00014D   0F           INC     R7
   1528            }
   \                     ??ZDP_MgmtLqiRsp_5:
   \   00014E   05..         INC     ?V4
   \                     ??ZDP_MgmtLqiRsp_3:
   \   000150   E5..         MOV     A,?V4
   \   000152   C3           CLR     C
   \   000153   95..         SUBB    A,?V5
   \   000155   5003         JNC     $+5
   \   000157   02....       LJMP    ??ZDP_MgmtLqiRsp_4 & 0xFFFF
   1529          
   1530            FillAndSendBuffer( &TransSeq, dstAddr, Mgmt_Lqi_rsp, len, buf );
   \   00015A   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_233:
   \   00015D                ; Setup parameters for call to function fillAndSend
   \   00015D   75..31       MOV     ?V0,#0x31
   \   000160   75..80       MOV     ?V1,#-0x80
   \   000163   78..         MOV     R0,#?V0
   \   000165   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000168   A9..         MOV     R1,?V6
   \   00016A   7404         MOV     A,#0x4
   \   00016C   12....       LCALL   ?XSTACK_DISP0_8
   \   00016F   12....       LCALL   ?Subroutine52 & 0xFFFF
   \                     ??CrossCallReturnLabel_83:
   \   000172   12....       LCALL   ?XSTACK_DISP101_8
   \   000175   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   000178   7402         MOV     A,#0x2
   \   00017A   12....       LCALL   ?DEALLOC_XSTACK8
   \   00017D   E9           MOV     A,R1
   \   00017E   FE           MOV     R6,A
   \   00017F                ; Setup parameters for call to function osal_mem_free
   \   00017F   AA..         MOV     R2,?V2
   \   000181   AB..         MOV     R3,?V3
   \   000183   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000186   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   000189   02....       LJMP    ?Subroutine7 & 0xFFFF
   1531          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine63:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   85..82       MOV     DPL,?V0
   \   000004   85..83       MOV     DPH,?V1
   \   000007   A3           INC     DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine61:
   \   000000   F582         MOV     DPL,A
   \   000002   E4           CLR     A
   \   000003   3F           ADDC    A,R7
   \   000004   12....       LCALL   ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_218:
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine76:
   \   000000   EE           MOV     A,R6
   \   000001   2414         ADD     A,#0x14
   \   000003   F582         MOV     DPL,A
   \   000005   E4           CLR     A
   \   000006   3F           ADDC    A,R7
   \   000007   F583         MOV     DPH,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine52:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FC           MOV     R4,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FD           MOV     R5,A
   \   000005   7402         MOV     A,#0x2
   \   000007   22           RET
   1532          
   1533          /*********************************************************************
   1534           * @fn          ZDP_MgmtRtgRsp
   1535           *
   1536           * @brief       This builds and send a Mgmt_Rtg_rsp message. This
   1537           *              function sends a unicast message.
   1538           *
   1539           * @param       dstAddr - destination address of the message
   1540           * @param       Status - message status (ZDP_SUCCESS or other)
   1541           * @param       RoutingTableEntries - Total number of entries
   1542           * @param       StartIndex - Starting index within the reporting list
   1543           * @param       RoutingTableListCount - number of entries included
   1544           *                                      in this message
   1545           * @param       RoutingTableList - List of Routing Table entries
   1546           * @param       SecurityEnable - true to enable security for this message
   1547           *
   1548           * @return      ZStatus_t
   1549           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1550          ZStatus_t ZDP_MgmtRtgRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_MgmtRtgRsp:
   1551                                      byte Status,
   1552                                      byte RoutingTableEntries,
   1553                                      byte StartIndex,
   1554                                      byte RoutingListCount,
   1555                                      rtgItem_t *RoutingTableList,
   1556                                      byte SecurityEnable )
   1557          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV     A,#-0x5
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   7402         MOV     A,#0x2
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   E9           MOV     A,R1
   \   000010   F0           MOVX    @DPTR,A
   \   000011   7403         MOV     A,#0x3
   \   000013   12....       LCALL   ?XSTACK_DISP0_8
   \   000016   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_46:
   \   000019   7401         MOV     A,#0x1
   \   00001B   12....       LCALL   ?XSTACK_DISP0_8
   \   00001E   EC           MOV     A,R4
   \   00001F   F0           MOVX    @DPTR,A
   \   000020   ED           MOV     A,R5
   \   000021   85..82       MOV     DPL,?XSP + 0
   \   000024   85..83       MOV     DPH,?XSP + 1
   \   000027   F0           MOVX    @DPTR,A
   \   000028   7416         MOV     A,#0x16
   \   00002A   12....       LCALL   ?XSTACK_DISP0_8
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   F5..         MOV     ?V0,A
   1558            uint8 *buf;
   1559            uint8 *pBuf;
   1560            // Status + RoutingTableEntries + StartIndex + RoutingListCount.
   1561            byte len = 1 + 1 + 1 + 1;
   1562            byte x;
   1563          
   1564            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1565          
   1566            // Add an array for Routing List data
   1567            len += (RoutingListCount * ZDP_ROUTINGENTRY_SIZE);
   \   000030   75F005       MOV     B,#0x5
   \   000033   A4           MUL     AB
   \   000034   2404         ADD     A,#0x4
   \   000036   F5..         MOV     ?V1,A
   1568          
   1569            buf = osal_mem_alloc( (short)(len+1) );
   \   000038                ; Setup parameters for call to function osal_mem_alloc
   \   000038   12....       LCALL   ??Subroutine125_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_249:
   \   00003B   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00003E   8A..         MOV     ?V2,R2
   \   000040   8B..         MOV     ?V3,R3
   \   000042   AE..         MOV     R6,?V2
   \   000044   AF..         MOV     R7,?V3
   1570            if ( buf == NULL )
   \   000046   EE           MOV     A,R6
   \   000047   4F           ORL     A,R7
   \   000048   7005         JNZ     ??ZDP_MgmtRtgRsp_0
   1571            {
   1572              return afStatus_MEM_FAIL;
   \   00004A   7910         MOV     R1,#0x10
   \   00004C   02....       LJMP    ??ZDP_MgmtRtgRsp_1 & 0xFFFF
   1573            }
   1574          
   1575            pBuf = buf+1;
   \                     ??ZDP_MgmtRtgRsp_0:
   \   00004F   8E82         MOV     DPL,R6
   \   000051   8F83         MOV     DPH,R7
   \   000053   A3           INC     DPTR
   \   000054   A882         MOV     R0,DPL
   \   000056   A983         MOV     R1,DPH
   \   000058   E8           MOV     A,R0
   \   000059   FC           MOV     R4,A
   \   00005A   E9           MOV     A,R1
   \   00005B   FD           MOV     R5,A
   1576          
   1577            *pBuf++ = Status;
   \   00005C   7401         MOV     A,#0x1
   \   00005E   12....       LCALL   ?XSTACK_DISP0_8
   \   000061   E0           MOVX    A,@DPTR
   \   000062   8C82         MOV     DPL,R4
   \   000064   8D83         MOV     DPH,R5
   \   000066   12....       LCALL   ?Subroutine23 & 0xFFFF
   1578            *pBuf++ = RoutingTableEntries;
   \                     ??CrossCallReturnLabel_29:
   \   000069   12....       LCALL   ?Subroutine83 & 0xFFFF
   \                     ??CrossCallReturnLabel_134:
   \   00006C   F0           MOVX    @DPTR,A
   1579            *pBuf++ = StartIndex;
   \   00006D   7415         MOV     A,#0x15
   \   00006F   12....       LCALL   ?XSTACK_DISP0_8
   \   000072   12....       LCALL   ?Subroutine68 & 0xFFFF
   1580            *pBuf++ = RoutingListCount;
   \                     ??CrossCallReturnLabel_110:
   \   000075   8C82         MOV     DPL,R4
   \   000077   8D83         MOV     DPH,R5
   \   000079   A3           INC     DPTR
   \   00007A   A3           INC     DPTR
   \   00007B   A3           INC     DPTR
   \   00007C   E5..         MOV     A,?V0
   \   00007E   F0           MOVX    @DPTR,A
   \   00007F   EC           MOV     A,R4
   \   000080   2404         ADD     A,#0x4
   \   000082   FC           MOV     R4,A
   \   000083   5001         JNC     ??ZDP_MgmtRtgRsp_2
   \   000085   0D           INC     R5
   1581          
   1582            for ( x = 0; x < RoutingListCount; x++ )
   \                     ??ZDP_MgmtRtgRsp_2:
   \   000086   7A00         MOV     R2,#0x0
   \   000088   7417         MOV     A,#0x17
   \   00008A   12....       LCALL   ?XSTACK_DISP0_8
   \   00008D   12....       LCALL   ??Subroutine95_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_150:
   \   000090   8046         SJMP    ??ZDP_MgmtRtgRsp_3
   1583            {
   1584              *pBuf++ = LO_UINT16( RoutingTableList->dstAddress );  // Destination Address
   \                     ??ZDP_MgmtRtgRsp_4:
   \   000092   85..82       MOV     DPL,?V2
   \   000095   85..83       MOV     DPH,?V3
   \   000098   E0           MOVX    A,@DPTR
   \   000099   8C82         MOV     DPL,R4
   \   00009B   8D83         MOV     DPH,R5
   \   00009D   12....       LCALL   ?Subroutine33 & 0xFFFF
   1585              *pBuf++ = HI_UINT16( RoutingTableList->dstAddress );
   \                     ??CrossCallReturnLabel_52:
   \   0000A0   8C82         MOV     DPL,R4
   \   0000A2   8D83         MOV     DPH,R5
   \   0000A4   A3           INC     DPTR
   \   0000A5   12....       LCALL   ?Subroutine90 & 0xFFFF
   1586              *pBuf++ = RoutingTableList->status;
   \                     ??CrossCallReturnLabel_145:
   \   0000A8   A3           INC     DPTR
   \   0000A9   A3           INC     DPTR
   \   0000AA   A3           INC     DPTR
   \   0000AB   A3           INC     DPTR
   \   0000AC   12....       LCALL   ?Subroutine68 & 0xFFFF
   1587              *pBuf++ = LO_UINT16( RoutingTableList->nextHopAddress );  // Next hop
   \                     ??CrossCallReturnLabel_111:
   \   0000AF   E5..         MOV     A,?V2
   \   0000B1   2402         ADD     A,#0x2
   \   0000B3   12....       LCALL   ?Subroutine71 & 0xFFFF
   \                     ??CrossCallReturnLabel_116:
   \   0000B6   12....       LCALL   ?Subroutine69 & 0xFFFF
   \                     ??CrossCallReturnLabel_112:
   \   0000B9   F0           MOVX    @DPTR,A
   1588              *pBuf++ = HI_UINT16( RoutingTableList->nextHopAddress );
   \   0000BA   85..82       MOV     DPL,?V6
   \   0000BD   85..83       MOV     DPH,?V7
   \   0000C0   A3           INC     DPTR
   \   0000C1   12....       LCALL   ?Subroutine69 & 0xFFFF
   \                     ??CrossCallReturnLabel_113:
   \   0000C4   A3           INC     DPTR
   \   0000C5   F0           MOVX    @DPTR,A
   \   0000C6   EC           MOV     A,R4
   \   0000C7   2405         ADD     A,#0x5
   \   0000C9   FC           MOV     R4,A
   \   0000CA   5001         JNC     ??ZDP_MgmtRtgRsp_5
   \   0000CC   0D           INC     R5
   1589              RoutingTableList++;    // Move to next list entry
   \                     ??ZDP_MgmtRtgRsp_5:
   \   0000CD   E5..         MOV     A,?V2
   \   0000CF   2406         ADD     A,#0x6
   \   0000D1   F5..         MOV     ?V2,A
   \   0000D3   5002         JNC     ??ZDP_MgmtRtgRsp_6
   \   0000D5   05..         INC     ?V3
   1590            }
   \                     ??ZDP_MgmtRtgRsp_6:
   \   0000D7   0A           INC     R2
   \                     ??ZDP_MgmtRtgRsp_3:
   \   0000D8   EA           MOV     A,R2
   \   0000D9   C3           CLR     C
   \   0000DA   95..         SUBB    A,?V0
   \   0000DC   40B4         JC      ??ZDP_MgmtRtgRsp_4
   1591          
   1592            FillAndSendBuffer( &TransSeq, dstAddr, Mgmt_Rtg_rsp, len, buf );
   \   0000DE   12....       LCALL   ??Subroutine121_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_231:
   \   0000E1                ; Setup parameters for call to function fillAndSend
   \   0000E1   75..32       MOV     ?V2,#0x32
   \   0000E4   75..80       MOV     ?V3,#-0x80
   \   0000E7   78..         MOV     R0,#?V2
   \   0000E9   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000EC   A9..         MOV     R1,?V1
   \   0000EE   7405         MOV     A,#0x5
   \   0000F0   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F3   12....       LCALL   ?Subroutine59 & 0xFFFF
   \                     ??CrossCallReturnLabel_95:
   \   0000F6   7404         MOV     A,#0x4
   \   0000F8   12....       LCALL   ?XSTACK_DISP101_8
   \   0000FB   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   0000FE   7402         MOV     A,#0x2
   \   000100   12....       LCALL   ?DEALLOC_XSTACK8
   \   000103   E9           MOV     A,R1
   \   000104   F5..         MOV     ?V0,A
   \   000106                ; Setup parameters for call to function osal_mem_free
   \   000106   EE           MOV     A,R6
   \   000107   FA           MOV     R2,A
   \   000108   EF           MOV     A,R7
   \   000109   FB           MOV     R3,A
   \   00010A   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   00010D   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000110   74..         MOV     A,#(ZDP_Buf + 1) & 0xff
   \   000112   F0           MOVX    @DPTR,A
   \   000113   A3           INC     DPTR
   \   000114   74..         MOV     A,#((ZDP_Buf + 1) >> 8) & 0xff
   \   000116   F0           MOVX    @DPTR,A
   \   000117   A9..         MOV     R1,?V0
   \                     ??ZDP_MgmtRtgRsp_1:
   \   000119   7405         MOV     A,#0x5
   \   00011B   02....       LJMP    ??Subroutine116_0 & 0xFFFF
   1593          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine69:
   \   000000   12....       LCALL   ?Subroutine83 & 0xFFFF
   \                     ??CrossCallReturnLabel_136:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine83:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8C82         MOV     DPL,R4
   \   000003   8D83         MOV     DPH,R5
   \   000005   A3           INC     DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine68:
   \   000000   12....       LCALL   ?Subroutine83 & 0xFFFF
   \                     ??CrossCallReturnLabel_135:
   \   000003   A3           INC     DPTR
   \   000004   F0           MOVX    @DPTR,A
   \   000005   22           RET
   1594          
   1595          /*********************************************************************
   1596           * @fn          ZDP_MgmtBindRsp
   1597           *
   1598           * @brief       This builds and send a Mgmt_Bind_rsp message. This
   1599           *              function sends a unicast message.
   1600           *
   1601           * @param       dstAddr - destination address of the message
   1602           * @param       Status - message status (ZDP_SUCCESS or other)
   1603           * @param       BindingTableEntries - Total number of entries
   1604           * @param       StartIndex - Starting index within the reporting list
   1605           * @param       BindingTableListCount - number of entries included
   1606           *                                 in this message
   1607           * @param       BindingTableList - List of Binding Table entries
   1608           * @param       SecurityEnable - Security Options
   1609           *
   1610           * @return      ZStatus_t
   1611           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1612          ZStatus_t ZDP_MgmtBindRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_MgmtBindRsp:
   1613                                      byte Status,
   1614                                      byte BindingTableEntries,
   1615                                      byte StartIndex,
   1616                                      byte BindingTableListCount,
   1617                                      apsBindingItem_t *BindingTableList,
   1618                                      byte SecurityEnable )
   1619          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   7401         MOV     A,#0x1
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   E9           MOV     A,R1
   \   000010   F0           MOVX    @DPTR,A
   \   000011   7402         MOV     A,#0x2
   \   000013   12....       LCALL   ?XSTACK_DISP0_8
   \   000016   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   000019   12....       LCALL   ?XSTACK_DISP0_8
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   F5..         MOV     ?V6,A
   1620            uint8 *buf;
   1621            uint8 *pBuf;
   1622            uint8 maxLen; // maxLen is the maximum packet length to allocate enough memory space
   1623            uint8 len;    // Actual length varies due to different addrMode
   1624            uint8 x;
   1625            byte extZdpBindEntrySize = ZDP_BINDINGENTRY_SIZE + 1 + 1; // One more byte for cluserID and DstAddrMode
   1626            byte shortZdpBindEntrySize = ZDP_BINDINGENTRY_SIZE + 1 + 1 + 2 - 8 - 1; // clusterID + DstAddrMode + shortAddr - ExtAddr - DstEndpoint
   1627          
   1628            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1629          
   1630            // Status + BindingTableEntries + StartIndex + BindingTableListCount.
   1631            maxLen = 1 + 1 + 1 + 1;
   1632            maxLen += (BindingTableListCount * extZdpBindEntrySize );  //max length
   1633            buf = osal_mem_alloc( maxLen + 1 );  // +1 for transaction ID
   \   00001F                ; Setup parameters for call to function osal_mem_alloc
   \   00001F   75F015       MOV     B,#0x15
   \   000022   A4           MUL     AB
   \   000023   2404         ADD     A,#0x4
   \   000025   12....       LCALL   ??Subroutine125_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_250:
   \   000028   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00002B   8A..         MOV     ?V2,R2
   \   00002D   8B..         MOV     ?V3,R3
   1634          
   1635            if ( buf == NULL )
   \   00002F   EA           MOV     A,R2
   \   000030   45..         ORL     A,?V3
   \   000032   7005         JNZ     ??ZDP_MgmtBindRsp_0
   1636            {
   1637              return afStatus_MEM_FAIL;
   \   000034   7910         MOV     R1,#0x10
   \   000036   02....       LJMP    ??CrossCallReturnLabel_32 & 0xFFFF
   1638            }
   \                     ??ZDP_MgmtBindRsp_0:
   \   000039   8A82         MOV     DPL,R2
   \   00003B   8B83         MOV     DPH,R3
   \   00003D   A3           INC     DPTR
   \   00003E   AA82         MOV     R2,DPL
   \   000040   AB83         MOV     R3,DPH
   1639          
   1640            pBuf = buf+1;
   1641          
   1642            *pBuf++ = Status;
   \   000042   12....       LCALL   ?Subroutine40 & 0xFFFF
   1643            *pBuf++ = BindingTableEntries;
   \                     ??CrossCallReturnLabel_225:
   \   000045   A3           INC     DPTR
   \   000046   E5..         MOV     A,?V7
   \   000048   F0           MOVX    @DPTR,A
   1644            *pBuf++ = StartIndex;
   \   000049   7414         MOV     A,#0x14
   \   00004B   12....       LCALL   ?XSTACK_DISP0_8
   \   00004E   12....       LCALL   ?Subroutine65 & 0xFFFF
   1645            *pBuf++ = BindingTableListCount;
   \                     ??CrossCallReturnLabel_105:
   \   000051   8A82         MOV     DPL,R2
   \   000053   8B83         MOV     DPH,R3
   \   000055   A3           INC     DPTR
   \   000056   A3           INC     DPTR
   \   000057   A3           INC     DPTR
   \   000058   E5..         MOV     A,?V6
   \   00005A   F0           MOVX    @DPTR,A
   \   00005B   EA           MOV     A,R2
   \   00005C   2404         ADD     A,#0x4
   \   00005E   FA           MOV     R2,A
   \   00005F   5001         JNC     ??ZDP_MgmtBindRsp_1
   \   000061   0B           INC     R3
   1646          
   1647            // Initial length = Status + BindingTableEntries + StartIndex + BindingTableListCount.
   1648            // length += ZDP_BINDINGENTRY_SIZE   -- Version 1.0
   1649            //           extZdpBindEntrySize     -- Version 1.1 extended address mode
   1650            //           shortZdpBindEntrySize   -- Version 1.1 group address mode
   1651          
   1652            len = 1 + 1 + 1 + 1;
   \                     ??ZDP_MgmtBindRsp_1:
   \   000062   75..04       MOV     ?V0,#0x4
   1653            for ( x = 0; x < BindingTableListCount; x++ )
   \   000065   75..00       MOV     ?V1,#0x0
   \   000068   7416         MOV     A,#0x16
   \   00006A   12....       LCALL   ?XSTACK_DISP0_8
   \   00006D   12....       LCALL   ??Subroutine126_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_253:
   \   000070   8021         SJMP    ??ZDP_MgmtBindRsp_2
   1654            {
   1655              pBuf = osal_cpyExtAddr( pBuf, BindingTableList->srcAddr );
   1656              *pBuf++ = BindingTableList->srcEP;
   1657          
   1658              // Cluster ID
   1659              *pBuf++ = LO_UINT16( BindingTableList->clusterID );
   1660              *pBuf++ = HI_UINT16( BindingTableList->clusterID );
   1661          
   1662              *pBuf++ = BindingTableList->dstAddr.addrMode;
   1663              if ( BindingTableList->dstAddr.addrMode == Addr64Bit )
   1664              {
   1665                len += extZdpBindEntrySize;
   1666                pBuf = osal_cpyExtAddr( pBuf, BindingTableList->dstAddr.addr.extAddr );
   1667                *pBuf++ = BindingTableList->dstEP;
   1668              }
   1669              else
   1670              {
   1671                len += shortZdpBindEntrySize;
   \                     ??ZDP_MgmtBindRsp_3:
   \   000072   740E         MOV     A,#0xe
   \   000074   25..         ADD     A,?V0
   \   000076   F5..         MOV     ?V0,A
   1672                *pBuf++ = LO_UINT16( BindingTableList->dstAddr.addr.shortAddr );
   \   000078   8C82         MOV     DPL,R4
   \   00007A   8D83         MOV     DPH,R5
   \   00007C   12....       LCALL   ?Subroutine67 & 0xFFFF
   1673                *pBuf++ = HI_UINT16( BindingTableList->dstAddr.addr.shortAddr );
   1674              }
   \                     ??CrossCallReturnLabel_109:
   \   00007F   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   000082   F0           MOVX    @DPTR,A
   \   000083   EA           MOV     A,R2
   \   000084   2402         ADD     A,#0x2
   \   000086   FA           MOV     R2,A
   \   000087   5001         JNC     ??ZDP_MgmtBindRsp_4
   \   000089   0B           INC     R3
   1675              BindingTableList++;    // Move to next list entry
   \                     ??ZDP_MgmtBindRsp_4:
   \   00008A   EE           MOV     A,R6
   \   00008B   2415         ADD     A,#0x15
   \   00008D   FE           MOV     R6,A
   \   00008E   5001         JNC     ??ZDP_MgmtBindRsp_5
   \   000090   0F           INC     R7
   \                     ??ZDP_MgmtBindRsp_5:
   \   000091   05..         INC     ?V1
   \                     ??ZDP_MgmtBindRsp_2:
   \   000093   E5..         MOV     A,?V1
   \   000095   C3           CLR     C
   \   000096   95..         SUBB    A,?V6
   \   000098   5053         JNC     ??ZDP_MgmtBindRsp_6
   \   00009A                ; Setup parameters for call to function sAddrExtCpy
   \   00009A   EE           MOV     A,R6
   \   00009B   FC           MOV     R4,A
   \   00009C   EF           MOV     A,R7
   \   00009D   FD           MOV     R5,A
   \   00009E   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   0000A1   8E82         MOV     DPL,R6
   \   0000A3   8F83         MOV     DPH,R7
   \   0000A5   A3           INC     DPTR
   \   0000A6   A3           INC     DPTR
   \   0000A7   A3           INC     DPTR
   \   0000A8   A3           INC     DPTR
   \   0000A9   A3           INC     DPTR
   \   0000AA   A3           INC     DPTR
   \   0000AB   A3           INC     DPTR
   \   0000AC   A3           INC     DPTR
   \   0000AD   12....       LCALL   ??Subroutine120_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_223:
   \   0000B0   EE           MOV     A,R6
   \   0000B1   2409         ADD     A,#0x9
   \   0000B3   12....       LCALL   ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_238:
   \   0000B6   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   0000B9   A3           INC     DPTR
   \   0000BA   F0           MOVX    @DPTR,A
   \   0000BB   EE           MOV     A,R6
   \   0000BC   2413         ADD     A,#0x13
   \   0000BE   F8           MOV     R0,A
   \   0000BF   E4           CLR     A
   \   0000C0   3F           ADDC    A,R7
   \   0000C1   F9           MOV     R1,A
   \   0000C2   8882         MOV     DPL,R0
   \   0000C4   8983         MOV     DPH,R1
   \   0000C6   12....       LCALL   ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_69:
   \   0000C9   5001         JNC     ??ZDP_MgmtBindRsp_7
   \   0000CB   0B           INC     R3
   \                     ??ZDP_MgmtBindRsp_7:
   \   0000CC   EE           MOV     A,R6
   \   0000CD   240B         ADD     A,#0xb
   \   0000CF   FC           MOV     R4,A
   \   0000D0   E4           CLR     A
   \   0000D1   3F           ADDC    A,R7
   \   0000D2   FD           MOV     R5,A
   \   0000D3   8882         MOV     DPL,R0
   \   0000D5   8983         MOV     DPH,R1
   \   0000D7   E0           MOVX    A,@DPTR
   \   0000D8   6403         XRL     A,#0x3
   \   0000DA   7096         JNZ     ??ZDP_MgmtBindRsp_3
   \   0000DC   7415         MOV     A,#0x15
   \   0000DE   25..         ADD     A,?V0
   \   0000E0   F5..         MOV     ?V0,A
   \   0000E2                ; Setup parameters for call to function sAddrExtCpy
   \   0000E2   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   0000E5   12....       LCALL   ?Subroutine76 & 0xFFFF
   1676            }
   \                     ??CrossCallReturnLabel_125:
   \   0000E8   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_179:
   \   0000EB   809D         SJMP    ??ZDP_MgmtBindRsp_4
   1677          
   1678            FillAndSendBuffer( &TransSeq, dstAddr, Mgmt_Bind_rsp, len, buf );
   \                     ??ZDP_MgmtBindRsp_6:
   \   0000ED   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_234:
   \   0000F0                ; Setup parameters for call to function fillAndSend
   \   0000F0   75..33       MOV     ?V4,#0x33
   \   0000F3   75..80       MOV     ?V5,#-0x80
   \   0000F6   78..         MOV     R0,#?V4
   \   0000F8   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000FB   A9..         MOV     R1,?V0
   \   0000FD   7404         MOV     A,#0x4
   \   0000FF   12....       LCALL   ?XSTACK_DISP0_8
   \   000102   12....       LCALL   ?Subroutine59 & 0xFFFF
   \                     ??CrossCallReturnLabel_96:
   \   000105   7403         MOV     A,#0x3
   \   000107   12....       LCALL   ?XSTACK_DISP101_8
   \   00010A   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   00010D   7402         MOV     A,#0x2
   \   00010F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000112   E9           MOV     A,R1
   \   000113   FE           MOV     R6,A
   \   000114                ; Setup parameters for call to function osal_mem_free
   \   000114   AA..         MOV     R2,?V2
   \   000116   AB..         MOV     R3,?V3
   \   000118   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   00011B   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   00011E   02....       LJMP    ?Subroutine7 & 0xFFFF
   1679          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8C82         MOV     DPL,R4
   \   000003   8D83         MOV     DPH,R5
   \   000005   12....       LCALL   ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_240:
   \   000008   22           RET
   1680          
   1681          /*********************************************************************
   1682           * @fn          ZDP_MgmtNwkUpdateNotify
   1683           *
   1684           * @brief       This builds and send a Mgmt_NWK_Update_notify message. This
   1685           *              function sends a unicast message.
   1686           *
   1687           * @param       dstAddr - destination address of the message
   1688           * @param       status - message status (ZDP_SUCCESS or other)
   1689           * @param       scannedChannels - List of channels scanned by the request
   1690           * @param       totalTransmissions - Total transmissions
   1691           * @param       transmissionFailures - Sum of transmission failures
   1692           * @param       listCount - Number of records contained in the energyValues list
   1693           * @param       energyValues - List of descriptors, one for each of ListCount,
   1694           *                             of the enegry detect descriptors
   1695           * @param       txOptions - Transmit options
   1696           * @param       securityEnable - Security options
   1697           *
   1698           * @return      afStatus_t
   1699           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1700          afStatus_t ZDP_MgmtNwkUpdateNotify( uint8 TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_MgmtNwkUpdateNotify:
   1701                                              uint8 status, uint32 scannedChannels,
   1702                                              uint16 totalTransmissions, uint16 transmissionFailures,
   1703                                              uint8 listCount, uint8 *energyValues, uint8 txOptions,
   1704                                              uint8 securityEnable )
   1705          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   F0           MOVX    @DPTR,A
   \   000012   7401         MOV     A,#0x1
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_47:
   \   00001A   8C..         MOV     ?V3,R4
   \   00001C   ED           MOV     A,R5
   \   00001D   FE           MOV     R6,A
   1706            uint8 *buf;
   1707            uint8 *pBuf;
   1708            uint8 len;
   1709          
   1710            (void)securityEnable;  // Intentionally unreferenced parameter
   1711          
   1712            // Status + ScannedChannels + totalTransmissions + transmissionFailures + ListCount + energyValues
   1713            len = 1 + 4 + 2 + 2 + 1 + listCount;
   \   00001E   740A         MOV     A,#0xa
   \   000020   2D           ADD     A,R5
   \   000021   FF           MOV     R7,A
   1714          
   1715            buf = osal_mem_alloc( len+1 ); // +1 for transaction ID
   \   000022                ; Setup parameters for call to function osal_mem_alloc
   \   000022   12....       LCALL   ??Subroutine125_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_251:
   \   000025   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000028   8A..         MOV     ?V4,R2
   \   00002A   8B..         MOV     ?V5,R3
   1716            if ( buf == NULL )
   \   00002C   EA           MOV     A,R2
   \   00002D   45..         ORL     A,?V5
   \   00002F   7005         JNZ     ??ZDP_MgmtNwkUpdateNotify_0
   1717            {
   1718              return afStatus_MEM_FAIL;
   \   000031   7910         MOV     R1,#0x10
   \   000033   02....       LJMP    ??ZDP_MgmtNwkUpdateNotify_1 & 0xFFFF
   1719            }
   1720          
   1721            pBuf = buf+1;
   \                     ??ZDP_MgmtNwkUpdateNotify_0:
   \   000036   8A82         MOV     DPL,R2
   \   000038   8B83         MOV     DPH,R3
   \   00003A   A3           INC     DPTR
   \   00003B   8582..       MOV     ?V6,DPL
   \   00003E   8583..       MOV     ?V7,DPH
   1722          
   1723            *pBuf++ = status;
   \   000041   E5..         MOV     A,?V3
   \   000043   12....       LCALL   ??Subroutine108_0 & 0xFFFF
   1724          
   1725            pBuf = osal_buffer_uint32( pBuf, scannedChannels );
   \                     ??CrossCallReturnLabel_176:
   \   000046                ; Setup parameters for call to function osal_buffer_uint32
   \   000046   7413         MOV     A,#0x13
   \   000048   12....       LCALL   ?XSTACK_DISP0_8
   \   00004B   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   00004E   12....       LCALL   `??osal_buffer_uint32::?relay`; Banked call to: osal_buffer_uint32
   \   000051   7404         MOV     A,#0x4
   \   000053   12....       LCALL   ?DEALLOC_XSTACK8
   \   000056   7417         MOV     A,#0x17
   \   000058   12....       LCALL   ?XSTACK_DISP0_8
   \   00005B   12....       LCALL   ?Subroutine55 & 0xFFFF
   1726          
   1727            *pBuf++ = LO_UINT16( totalTransmissions );
   \                     ??CrossCallReturnLabel_87:
   \   00005E   F0           MOVX    @DPTR,A
   1728            *pBuf++ = HI_UINT16( totalTransmissions );
   \   00005F   E9           MOV     A,R1
   \   000060   A3           INC     DPTR
   \   000061   F0           MOVX    @DPTR,A
   \   000062   7419         MOV     A,#0x19
   \   000064   12....       LCALL   ?XSTACK_DISP0_8
   \   000067   12....       LCALL   ?Subroutine55 & 0xFFFF
   1729          
   1730            *pBuf++ = LO_UINT16( transmissionFailures );
   \                     ??CrossCallReturnLabel_88:
   \   00006A   A3           INC     DPTR
   \   00006B   A3           INC     DPTR
   \   00006C   12....       LCALL   ?Subroutine30 & 0xFFFF
   1731            *pBuf++ = HI_UINT16( transmissionFailures );
   1732          
   1733            *pBuf++ = listCount;
   \                     ??CrossCallReturnLabel_41:
   \   00006F   EE           MOV     A,R6
   \   000070   8A82         MOV     DPL,R2
   \   000072   8B83         MOV     DPH,R3
   \   000074   A3           INC     DPTR
   \   000075   A3           INC     DPTR
   \   000076   A3           INC     DPTR
   \   000077   A3           INC     DPTR
   \   000078   F0           MOVX    @DPTR,A
   1734          
   1735            if ( listCount > 0 )
   \   000079   601E         JZ      ??ZDP_MgmtNwkUpdateNotify_2
   1736              osal_memcpy( pBuf, energyValues, listCount );
   \   00007B                ; Setup parameters for call to function osal_memcpy
   \   00007B   741B         MOV     A,#0x1b
   \   00007D   12....       LCALL   ?XSTACK_DISP0_8
   \   000080   12....       LCALL   ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   000083   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000086   EE           MOV     A,R6
   \   000087   FC           MOV     R4,A
   \   000088   7D00         MOV     R5,#0x0
   \   00008A   EA           MOV     A,R2
   \   00008B   2405         ADD     A,#0x5
   \   00008D   FA           MOV     R2,A
   \   00008E   5001         JNC     ??ZDP_MgmtNwkUpdateNotify_3
   \   000090   0B           INC     R3
   \                     ??ZDP_MgmtNwkUpdateNotify_3:
   \   000091   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000094   7403         MOV     A,#0x3
   \   000096   12....       LCALL   ?DEALLOC_XSTACK8
   1737          
   1738            FillAndSendBufferTxOptions( &TransSeq, dstAddr, Mgmt_NWK_Update_notify, len, buf, txOptions );
   \                     ??ZDP_MgmtNwkUpdateNotify_2:
   \   000099   90....       MOV     DPTR,#ZDP_TmpBuf
   \   00009C   E5..         MOV     A,?V6
   \   00009E   F0           MOVX    @DPTR,A
   \   00009F   A3           INC     DPTR
   \   0000A0   E5..         MOV     A,?V7
   \   0000A2   F0           MOVX    @DPTR,A
   \   0000A3   741D         MOV     A,#0x1d
   \   0000A5   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A8   E0           MOVX    A,@DPTR
   \   0000A9   90....       MOV     DPTR,#ZDP_TxOptions
   \   0000AC   F0           MOVX    @DPTR,A
   \   0000AD                ; Setup parameters for call to function fillAndSend
   \   0000AD   75..38       MOV     ?V0,#0x38
   \   0000B0   75..80       MOV     ?V1,#-0x80
   \   0000B3   78..         MOV     R0,#?V0
   \   0000B5   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000B8   EF           MOV     A,R7
   \   0000B9   F9           MOV     R1,A
   \   0000BA   7403         MOV     A,#0x3
   \   0000BC   12....       LCALL   ?XSTACK_DISP0_8
   \   0000BF   12....       LCALL   ?Subroutine52 & 0xFFFF
   \                     ??CrossCallReturnLabel_84:
   \   0000C2   12....       LCALL   ?XSTACK_DISP101_8
   \   0000C5   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   0000C8   7402         MOV     A,#0x2
   \   0000CA   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000CD   E9           MOV     A,R1
   \   0000CE   FF           MOV     R7,A
   \   0000CF                ; Setup parameters for call to function osal_mem_free
   \   0000CF   AA..         MOV     R2,?V4
   \   0000D1   AB..         MOV     R3,?V5
   \   0000D3   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0000D6   90....       MOV     DPTR,#ZDP_TmpBuf
   \   0000D9   74..         MOV     A,#(ZDP_Buf + 1) & 0xff
   \   0000DB   F0           MOVX    @DPTR,A
   \   0000DC   A3           INC     DPTR
   \   0000DD   74..         MOV     A,#((ZDP_Buf + 1) >> 8) & 0xff
   \   0000DF   F0           MOVX    @DPTR,A
   \   0000E0   90....       MOV     DPTR,#ZDP_TxOptions
   \   0000E3   E4           CLR     A
   \   0000E4   F0           MOVX    @DPTR,A
   \   0000E5   EF           MOV     A,R7
   \   0000E6   F9           MOV     R1,A
   \                     ??ZDP_MgmtNwkUpdateNotify_1:
   \   0000E7   02....       LJMP    ?Subroutine3 & 0xFFFF
   1739          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine55:
   \   000000   12....       LCALL   ?Subroutine80 & 0xFFFF
   \                     ??CrossCallReturnLabel_133:
   \   000003   22           RET
   1740          
   1741          /*********************************************************************
   1742           * Functions to register for ZDO Over-the-air messages
   1743           */
   1744          
   1745          /*********************************************************************
   1746           * @fn          ZDO_RegisterForZDOMsg
   1747           *
   1748           * @brief       Call this function to register of an incoming over
   1749           *              the air ZDO message - probably a response message
   1750           *              but requests can also be received.
   1751           *              Messages are delivered to the task with ZDO_CB_MSG
   1752           *              as the message ID.
   1753           *
   1754           * @param       taskID - Where you would like the message delivered
   1755           * @param       clusterID - What message?
   1756           *
   1757           * @return      ZSuccess - successful, ZMemError if not
   1758           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1759          ZStatus_t ZDO_RegisterForZDOMsg( uint8 taskID, uint16 clusterID )
   \                     ZDO_RegisterForZDOMsg:
   1760          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V2,R1
   \   000007   8A..         MOV     ?V0,R2
   \   000009   8B..         MOV     ?V1,R3
   1761            ZDO_MsgCB_t *pList;
   1762            ZDO_MsgCB_t *pLast;
   1763            ZDO_MsgCB_t *pNew;
   1764          
   1765            // Look for duplicate
   1766            pList = pLast = zdoMsgCBs;
   \   00000B   90....       MOV     DPTR,#zdoMsgCBs
   \   00000E   12....       LCALL   ??Subroutine126_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_254:
   \   000011   EE           MOV     A,R6
   \   000012   F8           MOV     R0,A
   \   000013   EF           MOV     A,R7
   \   000014   8028         SJMP    ??CrossCallReturnLabel_272
   1767            while ( pList )
   1768            {
   1769              if ( pList->taskID == taskID && pList->clusterID == clusterID )
   \                     ??ZDO_RegisterForZDOMsg_0:
   \   000016   8882         MOV     DPL,R0
   \   000018   8983         MOV     DPH,R1
   \   00001A   A3           INC     DPTR
   \   00001B   A3           INC     DPTR
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   65..         XRL     A,?V2
   \   00001F   7012         JNZ     ??ZDO_RegisterForZDOMsg_1
   \   000021   8882         MOV     DPL,R0
   \   000023   8983         MOV     DPH,R1
   \   000025   A3           INC     DPTR
   \   000026   A3           INC     DPTR
   \   000027   A3           INC     DPTR
   \   000028   E0           MOVX    A,@DPTR
   \   000029   65..         XRL     A,?V0
   \   00002B   7004         JNZ     ??ZDO_RegisterForZDOMsg_2
   \   00002D   A3           INC     DPTR
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   65..         XRL     A,?V1
   \                     ??ZDO_RegisterForZDOMsg_2:
   \   000031   6051         JZ      ??CrossCallReturnLabel_227
   1770                return ( ZSuccess );
   1771              pLast = pList;
   \                     ??ZDO_RegisterForZDOMsg_1:
   \   000033   E8           MOV     A,R0
   \   000034   FE           MOV     R6,A
   \   000035   E9           MOV     A,R1
   \   000036   FF           MOV     R7,A
   1772              pList = (ZDO_MsgCB_t *)pList->next;
   \   000037   8882         MOV     DPL,R0
   \   000039   8983         MOV     DPH,R1
   \   00003B   12....       LCALL   ??Subroutine129_0 & 0xFFFF
   1773            }
   \                     ??CrossCallReturnLabel_272:
   \   00003E   F9           MOV     R1,A
   \   00003F   E8           MOV     A,R0
   \   000040   49           ORL     A,R1
   \   000041   70D3         JNZ     ??ZDO_RegisterForZDOMsg_0
   1774          
   1775            // Add to the list
   1776            pNew = (ZDO_MsgCB_t *)osal_mem_alloc( sizeof ( ZDO_MsgCB_t ) );
   \   000043                ; Setup parameters for call to function osal_mem_alloc
   \   000043   7A05         MOV     R2,#0x5
   \   000045   7B00         MOV     R3,#0x0
   \   000047   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00004A   8A..         MOV     ?V4,R2
   \   00004C   8B..         MOV     ?V5,R3
   \   00004E   A8..         MOV     R0,?V4
   \   000050   A9..         MOV     R1,?V5
   1777            if ( pNew )
   \   000052   E8           MOV     A,R0
   \   000053   49           ORL     A,R1
   \   000054   6032         JZ      ??ZDO_RegisterForZDOMsg_3
   1778            {
   1779              pNew->taskID = taskID;
   \   000056   8882         MOV     DPL,R0
   \   000058   8983         MOV     DPH,R1
   \   00005A   A3           INC     DPTR
   \   00005B   A3           INC     DPTR
   \   00005C   E5..         MOV     A,?V2
   \   00005E   12....       LCALL   ??Subroutine104_0 & 0xFFFF
   1780              pNew->clusterID = clusterID;
   \                     ??CrossCallReturnLabel_163:
   \   000061   E5..         MOV     A,?V0
   \   000063   F0           MOVX    @DPTR,A
   \   000064   A3           INC     DPTR
   \   000065   E5..         MOV     A,?V1
   \   000067   12....       LCALL   ?Subroutine87 & 0xFFFF
   1781              pNew->next = NULL;
   \                     ??CrossCallReturnLabel_167:
   \   00006A   E4           CLR     A
   \   00006B   F0           MOVX    @DPTR,A
   \   00006C   A3           INC     DPTR
   \   00006D   F0           MOVX    @DPTR,A
   1782              if ( zdoMsgCBs )
   \   00006E   90....       MOV     DPTR,#zdoMsgCBs
   \   000071   12....       LCALL   ??Subroutine110_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_183:
   \   000074   EA           MOV     A,R2
   \   000075   4B           ORL     A,R3
   \   000076   6006         JZ      ??ZDO_RegisterForZDOMsg_4
   1783              {
   1784                pLast->next = pNew;
   \   000078   8E82         MOV     DPL,R6
   \   00007A   8F83         MOV     DPH,R7
   \   00007C   8003         SJMP    ??ZDO_RegisterForZDOMsg_5
   1785              }
   1786              else
   1787                zdoMsgCBs = pNew;
   \                     ??ZDO_RegisterForZDOMsg_4:
   \   00007E   90....       MOV     DPTR,#zdoMsgCBs
   \                     ??ZDO_RegisterForZDOMsg_5:
   \   000081   12....       LCALL   ??Subroutine122_0 & 0xFFFF
   1788              return ( ZSuccess );
   \                     ??CrossCallReturnLabel_227:
   \   000084   7900         MOV     R1,#0x0
   \   000086   8002         SJMP    ??ZDO_RegisterForZDOMsg_6
   1789            }
   1790            else
   1791              return ( ZMemError );
   \                     ??ZDO_RegisterForZDOMsg_3:
   \   000088   7910         MOV     R1,#0x10
   \                     ??ZDO_RegisterForZDOMsg_6:
   \   00008A   02....       LJMP    ??Subroutine100_0 & 0xFFFF
   1792          }
   1793          
   1794          /*********************************************************************
   1795           * @fn          ZDO_RemoveRegisteredCB
   1796           *
   1797           * @brief       Call this function if you don't want to receive the
   1798           *              incoming message.
   1799           *
   1800           * @param       taskID - Where the messages are being delivered.
   1801           * @param       clusterID - What message?
   1802           *
   1803           * @return      ZSuccess - successful, ZFailure if not found
   1804           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1805          ZStatus_t ZDO_RemoveRegisteredCB( uint8 taskID, uint16 clusterID )
   \                     ZDO_RemoveRegisteredCB:
   1806          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   1807            ZDO_MsgCB_t *pList;
   1808            ZDO_MsgCB_t *pLast = NULL;
   \   000007   7C00         MOV     R4,#0x0
   \   000009   7D00         MOV     R5,#0x0
   1809          
   1810            pList = zdoMsgCBs;
   \   00000B   90....       MOV     DPTR,#zdoMsgCBs
   \   00000E   8008         SJMP    ??ZDO_RemoveRegisteredCB_0
   1811            while ( pList )
   1812            {
   1813              if ( pList->taskID == taskID && pList->clusterID == clusterID )
   1814              {
   1815                if ( pLast )
   1816                {
   1817                  // remove this one from the linked list
   1818                  pLast->next = pList->next;
   1819                }
   1820                else if ( pList->next )
   1821                {
   1822                  // remove the first one from the linked list
   1823                  zdoMsgCBs = pList->next;
   1824                }
   1825                else
   1826                {
   1827                  // remove the only item from the list
   1828                  zdoMsgCBs = (ZDO_MsgCB_t *)NULL;
   1829                }
   1830                osal_mem_free( pList );
   1831                return ( ZSuccess );
   1832              }
   1833              pLast = pList;
   \                     ??ZDO_RemoveRegisteredCB_1:
   \   000010   E8           MOV     A,R0
   \   000011   FC           MOV     R4,A
   \   000012   E9           MOV     A,R1
   \   000013   FD           MOV     R5,A
   1834              pList = pList->next;
   \   000014   8882         MOV     DPL,R0
   \   000016   8983         MOV     DPH,R1
   \                     ??ZDO_RemoveRegisteredCB_0:
   \   000018   12....       LCALL   ??Subroutine105_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_169:
   \   00001B   49           ORL     A,R1
   \   00001C   6047         JZ      ??ZDO_RemoveRegisteredCB_2
   \   00001E   8882         MOV     DPL,R0
   \   000020   8983         MOV     DPH,R1
   \   000022   A3           INC     DPTR
   \   000023   A3           INC     DPTR
   \   000024   E0           MOVX    A,@DPTR
   \   000025   6E           XRL     A,R6
   \   000026   70E8         JNZ     ??ZDO_RemoveRegisteredCB_1
   \   000028   8882         MOV     DPL,R0
   \   00002A   8983         MOV     DPH,R1
   \   00002C   A3           INC     DPTR
   \   00002D   A3           INC     DPTR
   \   00002E   A3           INC     DPTR
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   6A           XRL     A,R2
   \   000031   7003         JNZ     ??ZDO_RemoveRegisteredCB_3
   \   000033   A3           INC     DPTR
   \   000034   E0           MOVX    A,@DPTR
   \   000035   6B           XRL     A,R3
   \                     ??ZDO_RemoveRegisteredCB_3:
   \   000036   70D8         JNZ     ??ZDO_RemoveRegisteredCB_1
   \   000038   8882         MOV     DPL,R0
   \   00003A   8983         MOV     DPH,R1
   \   00003C   12....       LCALL   ??Subroutine110_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_184:
   \   00003F   EC           MOV     A,R4
   \   000040   4D           ORL     A,R5
   \   000041   6006         JZ      ??ZDO_RemoveRegisteredCB_4
   \   000043   8C82         MOV     DPL,R4
   \   000045   8D83         MOV     DPH,R5
   \   000047   8007         SJMP    ??ZDO_RemoveRegisteredCB_5
   \                     ??ZDO_RemoveRegisteredCB_4:
   \   000049   EA           MOV     A,R2
   \   00004A   4B           ORL     A,R3
   \   00004B   90....       MOV     DPTR,#zdoMsgCBs
   \   00004E   6006         JZ      ??ZDO_RemoveRegisteredCB_6
   \                     ??ZDO_RemoveRegisteredCB_5:
   \   000050   EA           MOV     A,R2
   \   000051   F0           MOVX    @DPTR,A
   \   000052   A3           INC     DPTR
   \   000053   EB           MOV     A,R3
   \   000054   8003         SJMP    ??ZDO_RemoveRegisteredCB_7
   \                     ??ZDO_RemoveRegisteredCB_6:
   \   000056   E4           CLR     A
   \   000057   F0           MOVX    @DPTR,A
   \   000058   A3           INC     DPTR
   \                     ??ZDO_RemoveRegisteredCB_7:
   \   000059   F0           MOVX    @DPTR,A
   \   00005A                ; Setup parameters for call to function osal_mem_free
   \   00005A   E8           MOV     A,R0
   \   00005B   FA           MOV     R2,A
   \   00005C   E9           MOV     A,R1
   \   00005D   FB           MOV     R3,A
   \   00005E   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000061   7900         MOV     R1,#0x0
   \   000063   8002         SJMP    ??ZDO_RemoveRegisteredCB_8
   1835            }
   1836          
   1837            return ( ZFailure );
   \                     ??ZDO_RemoveRegisteredCB_2:
   \   000065   7901         MOV     R1,#0x1
   \                     ??ZDO_RemoveRegisteredCB_8:
   \   000067   02....       LJMP    ?Subroutine4 & 0xFFFF
   1838          }
   1839          
   1840          /*********************************************************************
   1841           * @fn          ZDO_SendMsgCBs
   1842           *
   1843           * @brief       This function sends messages to registered tasks.
   1844           *              Local to ZDO and shouldn't be called outside of ZDO.
   1845           *
   1846           * @param       inMsg - incoming message
   1847           *
   1848           * @return      TRUE if sent to at least 1 task, FALSE if not
   1849           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1850          uint8 ZDO_SendMsgCBs( zdoIncomingMsg_t *inMsg )
   \                     ZDO_SendMsgCBs:
   1851          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V6,R2
   \   000007   8B..         MOV     ?V7,R3
   1852            uint8 ret = FALSE;
   \   000009   75..00       MOV     ?V0,#0x0
   1853            ZDO_MsgCB_t *pList = zdoMsgCBs;
   \   00000C   90....       MOV     DPTR,#zdoMsgCBs
   \   00000F   02....       LJMP    ??ZDO_SendMsgCBs_0 & 0xFFFF
   1854            while ( pList )
   1855            {
   1856              if ( pList->clusterID == inMsg->clusterID )
   \                     ??ZDO_SendMsgCBs_1:
   \   000012   85..82       MOV     DPL,?V4
   \   000015   85..83       MOV     DPH,?V5
   \   000018   A3           INC     DPTR
   \   000019   A3           INC     DPTR
   \   00001A   A3           INC     DPTR
   \   00001B   12....       LCALL   ??Subroutine128_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_263:
   \   00001E   E5..         MOV     A,?V6
   \   000020   240C         ADD     A,#0xc
   \   000022   F582         MOV     DPL,A
   \   000024   E4           CLR     A
   \   000025   35..         ADDC    A,?V7
   \   000027   F583         MOV     DPH,A
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   68           XRL     A,R0
   \   00002B   7003         JNZ     ??ZDO_SendMsgCBs_2
   \   00002D   A3           INC     DPTR
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   69           XRL     A,R1
   \                     ??ZDO_SendMsgCBs_2:
   \   000030   6003         JZ      $+5
   \   000032   02....       LJMP    ??ZDO_SendMsgCBs_3 & 0xFFFF
   1857              {
   1858                zdoIncomingMsg_t *msgPtr;
   1859          
   1860                // Send the address to the task
   1861                msgPtr = (zdoIncomingMsg_t *)osal_msg_allocate( sizeof( zdoIncomingMsg_t ) + inMsg->asduLen );
   \   000035                ; Setup parameters for call to function osal_msg_allocate
   \   000035   12....       LCALL   ?Subroutine75 & 0xFFFF
   \                     ??CrossCallReturnLabel_121:
   \   000038   2415         ADD     A,#0x15
   \   00003A   FA           MOV     R2,A
   \   00003B   E4           CLR     A
   \   00003C   3400         ADDC    A,#0x0
   \   00003E   FB           MOV     R3,A
   \   00003F   12....       LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   000042   8A..         MOV     ?V2,R2
   \   000044   8B..         MOV     ?V3,R3
   \   000046   AE..         MOV     R6,?V2
   \   000048   AF..         MOV     R7,?V3
   1862                if ( msgPtr )
   \   00004A   EE           MOV     A,R6
   \   00004B   4F           ORL     A,R7
   \   00004C   606C         JZ      ??ZDO_SendMsgCBs_3
   1863                {
   1864                  // copy struct
   1865                  osal_memcpy( msgPtr, inMsg, sizeof( zdoIncomingMsg_t ));
   \   00004E                ; Setup parameters for call to function osal_memcpy
   \   00004E   85....       MOV     ?V0,?V6
   \   000051   85....       MOV     ?V1,?V7
   \   000054   75..00       MOV     ?V2,#0x0
   \   000057   78..         MOV     R0,#?V0
   \   000059   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00005C   7C15         MOV     R4,#0x15
   \   00005E   7D00         MOV     R5,#0x0
   \   000060   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000063   7403         MOV     A,#0x3
   \   000065   12....       LCALL   ?DEALLOC_XSTACK8
   1866          
   1867                  if ( inMsg->asduLen )
   \   000068   12....       LCALL   ?Subroutine75 & 0xFFFF
   \                     ??CrossCallReturnLabel_122:
   \   00006B   6032         JZ      ??ZDO_SendMsgCBs_4
   1868                  {
   1869                    msgPtr->asdu = (byte*)(((byte*)msgPtr) + sizeof( zdoIncomingMsg_t ));
   \   00006D   EE           MOV     A,R6
   \   00006E   2415         ADD     A,#0x15
   \   000070   FA           MOV     R2,A
   \   000071   E4           CLR     A
   \   000072   3F           ADDC    A,R7
   \   000073   FB           MOV     R3,A
   \   000074   EE           MOV     A,R6
   \   000075   2413         ADD     A,#0x13
   \   000077   F582         MOV     DPL,A
   \   000079   E4           CLR     A
   \   00007A   3F           ADDC    A,R7
   \   00007B   F583         MOV     DPH,A
   \   00007D   12....       LCALL   ?Subroutine31 & 0xFFFF
   1870                    osal_memcpy( msgPtr->asdu, inMsg->asdu, inMsg->asduLen );
   \                     ??CrossCallReturnLabel_48:
   \   000080                ; Setup parameters for call to function osal_memcpy
   \   000080   E5..         MOV     A,?V6
   \   000082   2413         ADD     A,#0x13
   \   000084   F582         MOV     DPL,A
   \   000086   E4           CLR     A
   \   000087   35..         ADDC    A,?V7
   \   000089   12....       LCALL   ?Subroutine48 & 0xFFFF
   1871                  }
   \                     ??CrossCallReturnLabel_210:
   \   00008C   78..         MOV     R0,#?V0
   \   00008E   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000091   12....       LCALL   ?Subroutine75 & 0xFFFF
   \                     ??CrossCallReturnLabel_123:
   \   000094   FC           MOV     R4,A
   \   000095   7D00         MOV     R5,#0x0
   \   000097   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00009A   7403         MOV     A,#0x3
   \   00009C   12....       LCALL   ?DEALLOC_XSTACK8
   1872          
   1873                  msgPtr->hdr.event = ZDO_CB_MSG;
   \                     ??ZDO_SendMsgCBs_4:
   \   00009F   8E82         MOV     DPL,R6
   \   0000A1   8F83         MOV     DPH,R7
   \   0000A3   74D3         MOV     A,#-0x2d
   \   0000A5   F0           MOVX    @DPTR,A
   1874                  osal_msg_send( pList->taskID, (uint8 *)msgPtr );
   \   0000A6                ; Setup parameters for call to function osal_msg_send
   \   0000A6   EE           MOV     A,R6
   \   0000A7   FA           MOV     R2,A
   \   0000A8   EF           MOV     A,R7
   \   0000A9   FB           MOV     R3,A
   \   0000AA   85..82       MOV     DPL,?V4
   \   0000AD   85..83       MOV     DPH,?V5
   \   0000B0   A3           INC     DPTR
   \   0000B1   A3           INC     DPTR
   \   0000B2   E0           MOVX    A,@DPTR
   \   0000B3   F9           MOV     R1,A
   \   0000B4   12....       LCALL   `??osal_msg_send::?relay`; Banked call to: osal_msg_send
   1875                  ret = TRUE;
   \   0000B7   75..01       MOV     ?V0,#0x1
   1876                }
   1877              }
   1878              pList = (ZDO_MsgCB_t *)pList->next;
   \                     ??ZDO_SendMsgCBs_3:
   \   0000BA   85..82       MOV     DPL,?V4
   \   0000BD   85..83       MOV     DPH,?V5
   \                     ??ZDO_SendMsgCBs_0:
   \   0000C0   E0           MOVX    A,@DPTR
   \   0000C1   F5..         MOV     ?V4,A
   \   0000C3   A3           INC     DPTR
   \   0000C4   E0           MOVX    A,@DPTR
   \   0000C5   F5..         MOV     ?V5,A
   1879            }
   \   0000C7   E5..         MOV     A,?V4
   \   0000C9   45..         ORL     A,?V5
   \   0000CB   6003         JZ      $+5
   \   0000CD   02....       LJMP    ??ZDO_SendMsgCBs_1 & 0xFFFF
   1880            return ( ret );
   \   0000D0   A9..         MOV     R1,?V0
   \   0000D2   02....       LJMP    ??Subroutine117_0 & 0xFFFF
   1881          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine75:
   \   000000   E5..         MOV     A,?V6
   \   000002   2410         ADD     A,#0x10
   \   000004   F582         MOV     DPL,A
   \   000006   E4           CLR     A
   \   000007   35..         ADDC    A,?V7
   \   000009   F583         MOV     DPH,A
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   22           RET
   1882          
   1883          /*********************************************************************
   1884           * Incoming message processor
   1885           */
   1886          
   1887          /*********************************************************************
   1888           * @fn          ZDP_IncomingData
   1889           *
   1890           * @brief       This function indicates the transfer of a data PDU (ASDU)
   1891           *              from the APS sub-layer to the ZDO.
   1892           *
   1893           * @param       pData - Incoming Message
   1894           *
   1895           * @return      none
   1896           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1897          void ZDP_IncomingData( afIncomingMSGPacket_t *pData )
   \                     ZDP_IncomingData:
   1898          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV     A,#-0x15
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1899            uint8 x = 0;
   \   00000A   7E00         MOV     R6,#0x0
   1900            uint8 handled;
   1901            zdoIncomingMsg_t inMsg;
   1902          
   1903            inMsg.srcAddr.addrMode = Addr16Bit;
   \   00000C   740A         MOV     A,#0xa
   \   00000E   12....       LCALL   ?XSTACK_DISP0_8
   \   000011   7402         MOV     A,#0x2
   \   000013   12....       LCALL   ?Subroutine34 & 0xFFFF
   1904            inMsg.srcAddr.addr.shortAddr = pData->srcAddr.addr.shortAddr;
   \                     ??CrossCallReturnLabel_53:
   \   000016   A3           INC     DPTR
   \   000017   A3           INC     DPTR
   \   000018   12....       LCALL   ??Subroutine128_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_264:
   \   00001B   7402         MOV     A,#0x2
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   12....       LCALL   ??Subroutine122_0 & 0xFFFF
   1905            inMsg.wasBroadcast = pData->wasBroadcast;
   \                     ??CrossCallReturnLabel_228:
   \   000023   EA           MOV     A,R2
   \   000024   2415         ADD     A,#0x15
   \   000026   F582         MOV     DPL,A
   \   000028   E4           CLR     A
   \   000029   3B           ADDC    A,R3
   \   00002A   F583         MOV     DPH,A
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   C0E0         PUSH    A
   \   00002F   740B         MOV     A,#0xb
   \   000031   12....       LCALL   ?XSTACK_DISP0_8
   \   000034   D0E0         POP     A
   \   000036   12....       LCALL   ?Subroutine34 & 0xFFFF
   1906            inMsg.clusterID = pData->clusterId;
   \                     ??CrossCallReturnLabel_54:
   \   000039   12....       LCALL   ??Subroutine128_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_265:
   \   00003C   740C         MOV     A,#0xc
   \   00003E   12....       LCALL   ?XSTACK_DISP0_8
   \   000041   12....       LCALL   ??Subroutine122_0 & 0xFFFF
   1907            inMsg.SecurityUse = pData->SecurityUse;
   \                     ??CrossCallReturnLabel_229:
   \   000044   EA           MOV     A,R2
   \   000045   2419         ADD     A,#0x19
   \   000047   F582         MOV     DPL,A
   \   000049   E4           CLR     A
   \   00004A   3B           ADDC    A,R3
   \   00004B   F583         MOV     DPH,A
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   C0E0         PUSH    A
   \   000050   740E         MOV     A,#0xe
   \   000052   12....       LCALL   ?XSTACK_DISP0_8
   \   000055   D0E0         POP     A
   \   000057   F0           MOVX    @DPTR,A
   1908          
   1909            inMsg.asduLen = pData->cmd.DataLength-1;
   \   000058   EA           MOV     A,R2
   \   000059   241F         ADD     A,#0x1f
   \   00005B   F582         MOV     DPL,A
   \   00005D   E4           CLR     A
   \   00005E   3B           ADDC    A,R3
   \   00005F   F583         MOV     DPH,A
   \   000061   E0           MOVX    A,@DPTR
   \   000062   14           DEC     A
   \   000063   C0E0         PUSH    A
   \   000065   7410         MOV     A,#0x10
   \   000067   12....       LCALL   ?XSTACK_DISP0_8
   \   00006A   D0E0         POP     A
   \   00006C   F0           MOVX    @DPTR,A
   1910            inMsg.asdu = pData->cmd.Data+1;
   \   00006D   EA           MOV     A,R2
   \   00006E   2421         ADD     A,#0x21
   \   000070   F8           MOV     R0,A
   \   000071   E4           CLR     A
   \   000072   3B           ADDC    A,R3
   \   000073   F9           MOV     R1,A
   \   000074   8882         MOV     DPL,R0
   \   000076   8983         MOV     DPH,R1
   \   000078   E0           MOVX    A,@DPTR
   \   000079   2401         ADD     A,#0x1
   \   00007B   FC           MOV     R4,A
   \   00007C   A3           INC     DPTR
   \   00007D   E0           MOVX    A,@DPTR
   \   00007E   3400         ADDC    A,#0x0
   \   000080   FD           MOV     R5,A
   \   000081   7413         MOV     A,#0x13
   \   000083   12....       LCALL   ?XSTACK_DISP0_8
   \   000086   EC           MOV     A,R4
   \   000087   F0           MOVX    @DPTR,A
   \   000088   A3           INC     DPTR
   \   000089   ED           MOV     A,R5
   \   00008A   12....       LCALL   ?Subroutine87 & 0xFFFF
   1911            inMsg.TransSeq = pData->cmd.Data[0];
   \                     ??CrossCallReturnLabel_168:
   \   00008D   12....       LCALL   ??Subroutine111_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_193:
   \   000090   E0           MOVX    A,@DPTR
   \   000091   C0E0         PUSH    A
   \   000093   740F         MOV     A,#0xf
   \   000095   12....       LCALL   ?XSTACK_DISP0_8
   \   000098   D0E0         POP     A
   \   00009A   F0           MOVX    @DPTR,A
   1912            inMsg.macDestAddr = pData->macDestAddr;
   \   00009B   EA           MOV     A,R2
   \   00009C   2412         ADD     A,#0x12
   \   00009E   F582         MOV     DPL,A
   \   0000A0   E4           CLR     A
   \   0000A1   3B           ADDC    A,R3
   \   0000A2   F583         MOV     DPH,A
   \   0000A4   12....       LCALL   ??Subroutine128_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_266:
   \   0000A7   7411         MOV     A,#0x11
   \   0000A9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AC   12....       LCALL   ??Subroutine122_0 & 0xFFFF
   1913          
   1914            handled = ZDO_SendMsgCBs( &inMsg );
   \                     ??CrossCallReturnLabel_230:
   \   0000AF                ; Setup parameters for call to function ZDO_SendMsgCBs
   \   0000AF   AA..         MOV     R2,?XSP + 0
   \   0000B1   AB..         MOV     R3,?XSP + 1
   \   0000B3   12....       LCALL   `??ZDO_SendMsgCBs::?relay`; Banked call to: ZDO_SendMsgCBs
   \   0000B6   E9           MOV     A,R1
   \   0000B7   FC           MOV     R4,A
   \   0000B8   8001         SJMP    ??ZDP_IncomingData_0
   1915          
   1916          #if (defined MT_ZDO_CB_FUNC)
   1917          #if !defined MT_TASK
   1918            if (zgZdoDirectCB)
   1919          #endif
   1920            {
   1921              MT_ZdoDirectCB( pData, &inMsg );
   1922            }
   1923          #endif
   1924          
   1925            while ( zdpMsgProcs[x].clusterID != 0xFFFF )
   1926            {
   1927              if ( zdpMsgProcs[x].clusterID == inMsg.clusterID )
   1928              {
   1929                zdpMsgProcs[x].pFn( &inMsg );
   1930                return;
   1931              }
   1932              x++;
   \                     ??ZDP_IncomingData_1:
   \   0000BA   0E           INC     R6
   \                     ??ZDP_IncomingData_0:
   \   0000BB   8E..         MOV     ?V0,R6
   \   0000BD   75..00       MOV     ?V1,#0x0
   \   0000C0   7402         MOV     A,#0x2
   \   0000C2   78..         MOV     R0,#?V0
   \   0000C4   12....       LCALL   ?S_SHL
   \   0000C7   74..         MOV     A,#zdpMsgProcs & 0xff
   \   0000C9   25..         ADD     A,?V0
   \   0000CB   F8           MOV     R0,A
   \   0000CC   74..         MOV     A,#(zdpMsgProcs >> 8) & 0xff
   \   0000CE   35..         ADDC    A,?V1
   \   0000D0   F9           MOV     R1,A
   \   0000D1   8882         MOV     DPL,R0
   \   0000D3   8983         MOV     DPH,R1
   \   0000D5   E4           CLR     A
   \   0000D6   93           MOVC    A,@A+DPTR
   \   0000D7   C0E0         PUSH    A
   \   0000D9   7401         MOV     A,#0x1
   \   0000DB   93           MOVC    A,@A+DPTR
   \   0000DC   F583         MOV     DPH,A
   \   0000DE   D082         POP     DPL
   \   0000E0   AA82         MOV     R2,DPL
   \   0000E2   AB83         MOV     R3,DPH
   \   0000E4   74FF         MOV     A,#-0x1
   \   0000E6   6A           XRL     A,R2
   \   0000E7   7003         JNZ     ??ZDP_IncomingData_2
   \   0000E9   74FF         MOV     A,#-0x1
   \   0000EB   6B           XRL     A,R3
   \                     ??ZDP_IncomingData_2:
   \   0000EC   6028         JZ      ??ZDP_IncomingData_3
   \   0000EE   740C         MOV     A,#0xc
   \   0000F0   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F3   E0           MOVX    A,@DPTR
   \   0000F4   6A           XRL     A,R2
   \   0000F5   7003         JNZ     ??ZDP_IncomingData_4
   \   0000F7   A3           INC     DPTR
   \   0000F8   E0           MOVX    A,@DPTR
   \   0000F9   6B           XRL     A,R3
   \                     ??ZDP_IncomingData_4:
   \   0000FA   70BE         JNZ     ??ZDP_IncomingData_1
   \   0000FC                ; Setup parameters for indirect call
   \   0000FC   AA..         MOV     R2,?XSP + 0
   \   0000FE   AB..         MOV     R3,?XSP + 1
   \   000100   8882         MOV     DPL,R0
   \   000102   8983         MOV     DPH,R1
   \   000104   A3           INC     DPTR
   \   000105   A3           INC     DPTR
   \   000106   E4           CLR     A
   \   000107   93           MOVC    A,@A+DPTR
   \   000108   C0E0         PUSH    A
   \   00010A   7401         MOV     A,#0x1
   \   00010C   93           MOVC    A,@A+DPTR
   \   00010D   F583         MOV     DPH,A
   \   00010F   D082         POP     DPL
   \   000111   12....       LCALL   ?CALL_IND
   \   000114   800A         SJMP    ??ZDP_IncomingData_5
   1933            }
   1934          
   1935            // Handle unhandled messages
   1936            if ( !handled )
   \                     ??ZDP_IncomingData_3:
   \   000116   EC           MOV     A,R4
   \   000117   7007         JNZ     ??ZDP_IncomingData_5
   1937              ZDApp_InMsgCB( &inMsg );
   \   000119                ; Setup parameters for call to function ZDApp_InMsgCB
   \   000119   AA..         MOV     R2,?XSP + 0
   \   00011B   AB..         MOV     R3,?XSP + 1
   \   00011D   12....       LCALL   `??ZDApp_InMsgCB::?relay`; Banked call to: ZDApp_InMsgCB
   1938          }
   \                     ??ZDP_IncomingData_5:
   \   000120   7415         MOV     A,#0x15
   \   000122   02....       LJMP    ??Subroutine99_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   22           RET

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for ZDP_TmpBuf>`:
   \   000000   ....         DW ZDP_Buf + 1H

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??fillAndSend::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    fillAndSend

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_SendData::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_SendData

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_NWKAddrOfInterestReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_NWKAddrOfInterestReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_NwkAddrReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_NwkAddrReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_IEEEAddrReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_IEEEAddrReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_MatchDescReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MatchDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_SimpleDescReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_SimpleDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_UserDescSet::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_UserDescSet

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_ServerDiscReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_ServerDiscReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_DeviceAnnce::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_DeviceAnnce

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zdpProcessAddrReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zdpProcessAddrReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_NodeDescMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_NodeDescMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_PowerDescMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_PowerDescMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_SimpleDescMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_SimpleDescMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_EPRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_EPRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_UserDescRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_UserDescRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_ServerDiscRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_ServerDiscRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_GenericRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_GenericRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_EndDeviceBindReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_EndDeviceBindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_BindUnbindReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_BindUnbindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_MgmtNwkDiscReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtNwkDiscReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_MgmtDirectJoinReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtDirectJoinReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_MgmtPermitJoinReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtPermitJoinReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_MgmtLeaveReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtLeaveReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_MgmtNwkUpdateReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtNwkUpdateReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_MgmtNwkDiscRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtNwkDiscRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_MgmtLqiRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtLqiRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_MgmtRtgRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtRtgRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_MgmtBindRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtBindRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_MgmtNwkUpdateNotify::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtNwkUpdateNotify

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_RegisterForZDOMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_RegisterForZDOMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_RemoveRegisteredCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_RemoveRegisteredCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_SendMsgCBs::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_SendMsgCBs

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_IncomingData::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_IncomingData
   1939          
   1940          /*********************************************************************
   1941          *********************************************************************/
   1942          

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      1     14   ZDO_RegisterForZDOMsg
        0     14   -> osal_mem_alloc
      0      9   ZDO_RemoveRegisteredCB
        0      9   -> osal_mem_free
      0     50   ZDO_SendMsgCBs
        0     19   -> osal_memcpy
        0     16   -> osal_msg_allocate
        0     16   -> osal_msg_send
      1     28   ZDP_BindUnbindReq
        0     20   -> fillAndSend
        0     18   -> sAddrExtCpy
        1     18   -> sAddrExtCpy
      1     22   ZDP_DeviceAnnce
        0     21   -> fillAndSend
        0     19   -> sAddrExtCpy
      1     27   ZDP_EPRsp
        0     19   -> fillAndSend
        0     20   -> osal_memcpy
      1     29   ZDP_EndDeviceBindReq
        0     18   -> NLME_GetExtAddr
        0     18   -> NLME_GetShortAddr
        0     20   -> fillAndSend
        0     18   -> sAddrExtCpy
      1     16   ZDP_GenericRsp
        0     12   -> fillAndSend
      1     21   ZDP_IEEEAddrReq
        0     21   -> fillAndSend
      1     31   ZDP_IncomingData
        0     31   -> ZDApp_InMsgCB
        0     31   -> ZDO_SendMsgCBs
      1     24   ZDP_MatchDescReq
        0     16   -> fillAndSend
      1     27   ZDP_MgmtBindRsp
        0     22   -> fillAndSend
        0     20   -> osal_mem_alloc
        0     20   -> osal_mem_free
        0     20   -> sAddrExtCpy
      1     15   ZDP_MgmtDirectJoinReq
        0     14   -> fillAndSend
        0     12   -> sAddrExtCpy
      0     16   ZDP_MgmtLeaveReq
        0     14   -> fillAndSend
        0     12   -> sAddrExtCpy
      1     27   ZDP_MgmtLqiRsp
        0     22   -> fillAndSend
        0     20   -> osal_mem_alloc
        0     20   -> osal_mem_free
        0     20   -> sAddrExtCpy
      1     20   ZDP_MgmtNwkDiscReq
        0     14   -> fillAndSend
        0     16   -> osal_buffer_uint32
      1     27   ZDP_MgmtNwkDiscRsp
        0     22   -> fillAndSend
        0     20   -> osal_mem_alloc
        0     20   -> osal_mem_free
        0     20   -> sAddrExtCpy
      1     35   ZDP_MgmtNwkUpdateNotify
        0     21   -> fillAndSend
        0     23   -> osal_buffer_uint32
        0     19   -> osal_mem_alloc
        0     19   -> osal_mem_free
        0     22   -> osal_memcpy
      1     24   ZDP_MgmtNwkUpdateReq
        0     16   -> fillAndSend
        0     18   -> osal_buffer_uint32
      1     12   ZDP_MgmtPermitJoinReq
        0     12   -> fillAndSend
      1     28   ZDP_MgmtRtgRsp
        0     23   -> fillAndSend
        0     21   -> osal_mem_alloc
        0     21   -> osal_mem_free
      1     13   ZDP_NWKAddrOfInterestReq
        0     12   -> fillAndSend
      1     14   ZDP_NodeDescMsg
        0     12   -> fillAndSend
      1     23   ZDP_NwkAddrReq
        0     23   -> fillAndSend
        0     21   -> sAddrExtCmp
        0     21   -> sAddrExtCpy
      1     14   ZDP_PowerDescMsg
        0     12   -> fillAndSend
      1     19   ZDP_SendData
        0     14   -> fillAndSend
      1     21   ZDP_ServerDiscReq
        0     21   -> fillAndSend
      1     17   ZDP_ServerDiscRsp
        0     13   -> fillAndSend
      1     21   ZDP_SimpleDescMsg
        0     21   -> fillAndSend
      1     13   ZDP_SimpleDescReq
        0     12   -> fillAndSend
      1     23   ZDP_UserDescRsp
        0     19   -> fillAndSend
        0     20   -> osal_memcpy
      1     19   ZDP_UserDescSet
        0     16   -> fillAndSend
        0     17   -> osal_memcpy
        0     14   -> osal_memset
      1     57   fillAndSend
        0     34   -> AF_DataRequest
        0     25   -> osal_memset
      1     18   zdpProcessAddrReq
        0     18   -> fillAndSend
        0     16   -> sAddrExtCmp
        0     16   -> sAddrExtCpy


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       2  ?<Initializer for ZDP_TmpBuf>
       5  ??Subroutine100_0
       2  ??Subroutine101_0
       5  ??Subroutine102_0
       6  ??Subroutine103_0
       7  ??Subroutine104_0
       5  ??Subroutine105_0
       7  ??Subroutine106_0
       4  ??Subroutine107_0
       7  ??Subroutine108_0
       3  ??Subroutine109_0
       6  ??Subroutine110_0
       4  ??Subroutine111_0
       8  ??Subroutine112_0
       9  ??Subroutine113_0
       3  ??Subroutine114_0
       5  ??Subroutine115_0
       3  ??Subroutine116_0
       5  ??Subroutine117_0
       4  ??Subroutine118_0
       6  ??Subroutine119_0
       5  ??Subroutine120_0
       3  ??Subroutine121_0
       6  ??Subroutine122_0
       4  ??Subroutine123_0
       5  ??Subroutine124_0
       8  ??Subroutine125_0
       6  ??Subroutine126_0
       4  ??Subroutine127_0
       4  ??Subroutine128_0
       5  ??Subroutine129_0
       8  ??Subroutine95_0
       4  ??Subroutine96_0
       8  ??Subroutine97_0
       5  ??Subroutine98_0
       8  ??Subroutine99_0
      14  ?Subroutine0
      10  ?Subroutine1
      18  ?Subroutine10
       7  ?Subroutine11
       9  ?Subroutine12
      13  ?Subroutine13
       8  ?Subroutine14
      12  ?Subroutine15
      17  ?Subroutine16
      21  ?Subroutine17
       4  ?Subroutine18
       1  ?Subroutine19
      16  ?Subroutine2
       6  ?Subroutine20
       9  ?Subroutine21
      11  ?Subroutine22
       8  ?Subroutine23
      13  ?Subroutine24
       8  ?Subroutine25
       4  ?Subroutine26
      11  ?Subroutine27
       5  ?Subroutine28
       1  ?Subroutine29
       2  ?Subroutine3
       6  ?Subroutine30
       6  ?Subroutine31
      12  ?Subroutine32
       5  ?Subroutine33
      10  ?Subroutine34
       9  ?Subroutine35
      11  ?Subroutine36
       4  ?Subroutine37
       6  ?Subroutine38
      12  ?Subroutine39
       5  ?Subroutine4
       6  ?Subroutine40
       9  ?Subroutine41
       3  ?Subroutine42
      15  ?Subroutine43
       3  ?Subroutine44
       9  ?Subroutine45
      14  ?Subroutine46
      13  ?Subroutine47
       2  ?Subroutine48
       7  ?Subroutine49
      17  ?Subroutine5
       5  ?Subroutine50
      10  ?Subroutine51
       8  ?Subroutine52
       3  ?Subroutine53
       9  ?Subroutine54
       4  ?Subroutine55
       3  ?Subroutine56
       1  ?Subroutine57
      10  ?Subroutine58
       6  ?Subroutine59
       5  ?Subroutine6
       1  ?Subroutine60
      12  ?Subroutine61
       3  ?Subroutine62
       9  ?Subroutine63
       8  ?Subroutine64
       6  ?Subroutine65
       8  ?Subroutine66
       4  ?Subroutine67
       6  ?Subroutine68
       6  ?Subroutine69
       4  ?Subroutine7
       5  ?Subroutine70
      13  ?Subroutine71
      12  ?Subroutine72
       1  ?Subroutine73
      10  ?Subroutine74
      13  ?Subroutine75
      10  ?Subroutine76
       9  ?Subroutine77
       7  ?Subroutine78
       1  ?Subroutine79
      43  ?Subroutine8
      10  ?Subroutine80
       5  ?Subroutine81
       2  ?Subroutine82
       7  ?Subroutine83
       4  ?Subroutine84
      11  ?Subroutine85
      11  ?Subroutine86
       6  ?Subroutine87
       9  ?Subroutine88
       9  ?Subroutine89
      18  ?Subroutine9
       9  ?Subroutine90
      12  ?Subroutine91
       6  ?Subroutine92
       8  ?Subroutine93
       3  ?Subroutine94
     141  ZDO_RegisterForZDOMsg
       6  ZDO_RegisterForZDOMsg::?relay
     106  ZDO_RemoveRegisteredCB
       6  ZDO_RemoveRegisteredCB::?relay
     213  ZDO_SendMsgCBs
       6  ZDO_SendMsgCBs::?relay
       1  ZDP_AF_ENDPOINT
     208  ZDP_BindUnbindReq
       6  ZDP_BindUnbindReq::?relay
      80  ZDP_Buf
      74  ZDP_DeviceAnnce
       6  ZDP_DeviceAnnce::?relay
     161  ZDP_EPRsp
       6  ZDP_EPRsp::?relay
     320  ZDP_EndDeviceBindReq
       6  ZDP_EndDeviceBindReq::?relay
      87  ZDP_GenericRsp
       6  ZDP_GenericRsp::?relay
      60  ZDP_IEEEAddrReq
       6  ZDP_IEEEAddrReq::?relay
     293  ZDP_IncomingData
       6  ZDP_IncomingData::?relay
     240  ZDP_MatchDescReq
       6  ZDP_MatchDescReq::?relay
     289  ZDP_MgmtBindRsp
       6  ZDP_MgmtBindRsp::?relay
      31  ZDP_MgmtDirectJoinReq
       6  ZDP_MgmtDirectJoinReq::?relay
      61  ZDP_MgmtLeaveReq
       6  ZDP_MgmtLeaveReq::?relay
     396  ZDP_MgmtLqiRsp
       6  ZDP_MgmtLqiRsp::?relay
      60  ZDP_MgmtNwkDiscReq
       6  ZDP_MgmtNwkDiscReq::?relay
     309  ZDP_MgmtNwkDiscRsp
       6  ZDP_MgmtNwkDiscRsp::?relay
     234  ZDP_MgmtNwkUpdateNotify
       6  ZDP_MgmtNwkUpdateNotify::?relay
     118  ZDP_MgmtNwkUpdateReq
       6  ZDP_MgmtNwkUpdateReq::?relay
      20  ZDP_MgmtPermitJoinReq
       6  ZDP_MgmtPermitJoinReq::?relay
     286  ZDP_MgmtRtgRsp
       6  ZDP_MgmtRtgRsp::?relay
      16  ZDP_NWKAddrOfInterestReq
       6  ZDP_NWKAddrOfInterestReq::?relay
     204  ZDP_NodeDescMsg
       6  ZDP_NodeDescMsg::?relay
     128  ZDP_NwkAddrReq
       6  ZDP_NwkAddrReq::?relay
      77  ZDP_PowerDescMsg
       6  ZDP_PowerDescMsg::?relay
     108  ZDP_SendData
       6  ZDP_SendData::?relay
      81  ZDP_ServerDiscReq
       6  ZDP_ServerDiscReq::?relay
      97  ZDP_ServerDiscRsp
       6  ZDP_ServerDiscRsp::?relay
     393  ZDP_SimpleDescMsg
       6  ZDP_SimpleDescMsg::?relay
      27  ZDP_SimpleDescReq
       6  ZDP_SimpleDescReq::?relay
       2  ZDP_TmpBuf
       1  ZDP_TransID
       1  ZDP_TxOptions
     142  ZDP_UserDescRsp
       6  ZDP_UserDescRsp::?relay
     115  ZDP_UserDescSet
       6  ZDP_UserDescSet::?relay
     163  fillAndSend
       6  fillAndSend::?relay
       2  zdoMsgCBs
      40  zdpMsgProcs
     298  zdpProcessAddrReq
       6  zdpProcessAddrReq::?relay

 
 6 540 bytes in segment BANKED_CODE
   204 bytes in segment BANK_RELAYS
    41 bytes in segment CODE_C
     2 bytes in segment XDATA_I
     2 bytes in segment XDATA_ID
    84 bytes in segment XDATA_Z
 
 6 787 bytes of CODE  memory
    86 bytes of XDATA memory

Errors: none
Warnings: none
