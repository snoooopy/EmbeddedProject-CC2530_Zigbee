###############################################################################
#
# IAR C/C++ Compiler V9.20.1.2476 for 8051                26/May/2017  14:07:30
# Copyright 2004-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Components\osal\mcu\cc2530\OSAL_Nv.c
#    Command line       =  
#        -f
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DBLINK_LEDS) -f
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_POLLED=3000
#        -DNWK_INDIRECT_MSG_TIMEOUT=7 -DMAX_RREQ_ENTRIES=8
#        -DAPSC_MAX_FRAME_RETRIES=3 -DNWK_MAX_DATA_RETRIES=2
#        -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9 -DAPS_MAX_GROUPS=16
#        -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000
#        -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
#        -DREJOIN_POLL_RATE=440
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Components\osal\mcu\cc2530\OSAL_Nv.c
#        -D NWK_AUTO_POLL -D ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC
#        -D POWER_SAVING -lC
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\EndDeviceEB\List\
#        -lA
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\EndDeviceEB\List\
#        --diag_suppress Pe001,Pa010 -o
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\EndDeviceEB\Obj\
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 8 -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\SOURCE\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\ZMAIN\TI2530DB\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MT\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\INCLUDE\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\TARGET\CC2530EB\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\MCU\CCSOC\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\INCLUDE\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\AF\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\NWK\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SEC\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SAPI\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SYS\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\ZDO\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\F8W\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES\SADDR\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES\SDATA\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\INCLUDE\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\HIGH_LEVEL\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\
#        -I
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\
#        -Ohz --require_prototypes
#    List file          =  
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\EndDeviceEB\List\OSAL_Nv.lst
#    Object file        =  
#        D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\EndDeviceEB\Obj\OSAL_Nv.r51
#
###############################################################################

D:\Zigbee\ZStack-CC2530-2.3.0-1.4.0\Components\osal\mcu\cc2530\OSAL_Nv.c
      1          /**************************************************************************************************
      2            Filename:       OSAL_Nv.c
      3            Revised:        $Date: 2008-08-06 17:17:11 -0700 (Wed, 06 Aug 2008) $
      4            Revision:       $Revision: 17715 $
      5          
      6            Description:    This module contains the OSAL non-volatile memory functions.
      7          
      8          
      9            Copyright 2006-2009 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /**************************************************************************************************
     41            Notes:
     42              - A trick buried deep in initPage() requires that the MSB of the NV Item Id is to
     43                be reserved for use by this module.
     44          **************************************************************************************************/
     45          
     46          /*********************************************************************
     47           * INCLUDES
     48           */
     49          
     50          #include "hal_adc.h"
     51          #include "hal_flash.h"
     52          #include "hal_types.h"
     53          #include "ZComdef.h"
     54          #include "OSAL_Nv.h"
     55          
     56          /*********************************************************************
     57           * CONSTANTS
     58           */
     59          
     60          #define OSAL_NV_PAGE_SIZE       HAL_FLASH_PAGE_SIZE
     61          #define OSAL_NV_PAGES_USED      HAL_NV_PAGE_CNT
     62          #define OSAL_NV_PAGE_BEG        HAL_NV_PAGE_BEG
     63          #define OSAL_NV_PAGE_END       (OSAL_NV_PAGE_BEG + OSAL_NV_PAGES_USED - 1)
     64          
     65          #define OSAL_NV_ACTIVE          0x00
     66          #define OSAL_NV_ERASED          0xFF
     67          #define OSAL_NV_ERASED_ID       0xFFFF
     68          #define OSAL_NV_ZEROED_ID       0x0000
     69          // Reserve MSB of Id to signal a search for the "old" source copy (new write interrupted/failed.)
     70          #define OSAL_NV_SOURCE_ID       0x8000
     71          
     72          #define OSAL_NV_PAGE_FREE       HAL_FLASH_PAGE_SIZE
     73          
     74          // In case pages 0-1 are ever used, define a null page value.
     75          #define OSAL_NV_PAGE_NULL       0
     76          
     77          // In case item Id 0 is ever used, define a null item value.
     78          #define OSAL_NV_ITEM_NULL       0
     79          
     80          #define OSAL_NV_WORD_SIZE       HAL_FLASH_WORD_SIZE
     81          
     82          #define OSAL_NV_PAGE_HDR_OFFSET 0
     83          
     84          /*********************************************************************
     85           * MACROS
     86           */
     87          
     88          #define  OSAL_NV_CHECK_BUS_VOLTAGE  (HalAdcCheckVdd( HAL_ADC_VDD_LIMIT_4 ))
     89          
     90          #define OSAL_NV_DATA_SIZE( LEN )  \
     91             ((((LEN) + OSAL_NV_WORD_SIZE - 1) / OSAL_NV_WORD_SIZE) * OSAL_NV_WORD_SIZE)
     92          
     93          #define OSAL_NV_ITEM_SIZE( LEN )  \
     94            (((((LEN) + OSAL_NV_WORD_SIZE - 1) / OSAL_NV_WORD_SIZE) * OSAL_NV_WORD_SIZE) + OSAL_NV_HDR_SIZE)
     95          
     96          /*********************************************************************
     97           * TYPEDEFS
     98           */
     99          
    100          typedef struct
    101          {
    102            uint16 id;
    103            uint16 len;   // Enforce Flash-WORD size on len.
    104            uint16 chk;   // Byte-wise checksum of the 'len' data bytes of the item.
    105            uint16 stat;  // Item status.
    106          } osalNvHdr_t;
    107          // Struct member offsets.
    108          #define OSAL_NV_HDR_ID    0
    109          #define OSAL_NV_HDR_LEN   2
    110          #define OSAL_NV_HDR_CHK   4
    111          #define OSAL_NV_HDR_STAT  6
    112          
    113          #define OSAL_NV_HDR_ITEM  2  // Length of any item of a header struct.
    114          #define OSAL_NV_HDR_SIZE  8
    115          #define OSAL_NV_HDR_HALF (OSAL_NV_HDR_SIZE / 2)
    116          
    117          typedef struct
    118          {
    119            uint16 active;
    120            uint16 inUse;
    121            uint16 xfer;
    122            uint16 spare;
    123          } osalNvPgHdr_t;
    124          // Struct member offsets.
    125          #define OSAL_NV_PG_ACTIVE 0
    126          #define OSAL_NV_PG_INUSE  2
    127          #define OSAL_NV_PG_XFER   4
    128          #define OSAL_NV_PG_SPARE  6
    129          
    130          #define OSAL_NV_PAGE_HDR_SIZE  8
    131          #define OSAL_NV_PAGE_HDR_HALF (OSAL_NV_PAGE_HDR_SIZE / 2)
    132          
    133          typedef enum
    134          {
    135            eNvXfer,
    136            eNvZero
    137          } eNvHdrEnum;
    138          
    139          typedef enum
    140          {
    141            ePgActive,
    142            ePgInUse,
    143            ePgXfer,
    144            ePgSpare
    145          } ePgHdrEnum;
    146          
    147          /*********************************************************************
    148           * EXTERNAL FUNCTIONS
    149           */
    150          
    151          extern bool HalAdcCheckVdd(uint8 limit);
    152          
    153          /*********************************************************************
    154           * GLOBAL VARIABLES
    155           */
    156          
    157          #ifndef OAD_KEEP_NV_PAGES
    158          // When NV pages are to remain intact during OAD download,
    159          // the image itself should not include NV pages.
    160          #pragma location="ZIGNV_ADDRESS_SPACE"

   \                                 In  segment ZIGNV_ADDRESS_SPACE, align 1
    161          __no_init uint8 _nvBuf[OSAL_NV_PAGES_USED * OSAL_NV_PAGE_SIZE];
   \                     _nvBuf:
   \   000000                DS 12288
    162          #pragma required=_nvBuf
    163          #pragma location="IEEE_ADDRESS_SPACE"

   \                                 In  segment IEEE_ADDRESS_SPACE, align 1
    164          __no_init uint8 _nvIEEE[Z_EXTADDR_LEN];
   \                     _nvIEEE:
   \   000000                DS 8
   \   000008                REQUIRE _nvBuf
    165          #pragma required=_nvIEEE
    166          #endif // OAD_KEEP_NV_PAGES
    167          
    168          /*********************************************************************
    169           * LOCAL VARIABLES
    170           */
    171          
    172          // Offset into the page of the first available erased space.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    173          static uint16 pgOff[OSAL_NV_PAGES_USED];
   \                     pgOff:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
   \   00000C                REQUIRE _nvIEEE
    174          
    175          // Count of the bytes lost for the zeroed-out items.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    176          static uint16 pgLost[OSAL_NV_PAGES_USED];
   \                     pgLost:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    177          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    178          static uint8 pgRes;  // Page reserved for item compacting transfer.
   \                     pgRes:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    179          
    180          // Saving ~100 code bytes to move a uint8* parameter/return value from findItem() to a global.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    181          static uint8 findPg;
   \                     findPg:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    182          
    183          /* Immediately before the voltage critical operations of a page erase or
    184           * a word write, check bus voltage. If less than min, set global flag & abort.
    185           * Since this is to be done at the lowest level, many void functions would have to be changed to
    186           * return a value and code added to check that value before proceeding, resulting in a very
    187           * expensive code size hit for implementing this properly. Therefore, use this global as follows:
    188           * at the start of osal_nv_item_init/osal_nv_write, set to FALSE, and at the end, before returning,
    189           * check the value. Thus, the global is an accumulator of any error that occurred in any of the
    190           * attempts to modify Flash with a low bus voltage during the complicated sequence of events that
    191           * may occur on any item init or write. This is much more expedient and code saving than adding
    192           * return values and checking return values to early out. No matter which method is used, an NV
    193           * data record may end up mangled due to the low VCC conditions. The strategy is that the headers
    194           * and checksums will detect and allow recovery from such a condition.
    195           *
    196           * One unfortunate side-effect of using the global fail flag vice adding and checking return
    197           * values, is that when setting an item Id to zero has failed due to the low VCC check,
    198           * the page lost-bytes counter is still updated. Having an artificially high lost-byte
    199           * count makes it look like there are more bytes to recover from compacting a page than there may
    200           * actually be. The easy work-around implemented is it to invoke initNV() from osal_nv_item_init or
    201           * osal_nv_write anytime that the failF gets set - this will re-walk all of the pages and set the
    202           * page offset count and page lost bytes count to their actual values.
    203           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    204          static uint8 failF;
   \                     failF:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    205          
    206          /*********************************************************************
    207           * LOCAL FUNCTIONS
    208           */
    209          
    210          static uint8  initNV( void );
    211          
    212          static void   setPageUse( uint8 pg, uint8 inUse );
    213          static uint16 initPage( uint8 pg, uint16 id, uint8 findDups );
    214          static void   erasePage( uint8 pg );
    215          static void   compactPage( uint8 pg );
    216          
    217          static uint16 findItem( uint16 id );
    218          static uint8  initItem( uint8 flag, uint16 id, uint16 len, void *buf );
    219          static void   setItem( uint8 pg, uint16 offset, eNvHdrEnum stat );
    220          
    221          static uint16 calcChkB( uint16 len, uint8 *buf );
    222          static uint16 calcChkF( byte pg, uint16 offset, uint16 len );
    223          
    224          static void   writeWord( uint8 pg, uint16 offset, uint8 *buf );
    225          static void   writeWordH( uint8 pg, uint16 offset, uint8 *buf );
    226          static void   writeWordM( uint8 pg, uint16 offset, uint8 *buf, uint16 cnt );
    227          static void   writeBuf( uint8 pg, uint16 offset, uint16 len, uint8 *buf );
    228          static void   xferBuf( uint8 srcPg, uint16 srcOff, uint8 dstPg, uint16 dstOff, uint16 len );
    229          
    230          static uint8  writeItem( uint8 pg, uint16 id, uint16 len, void *buf, uint8 flag );
    231          
    232          /*********************************************************************
    233           * @fn      initNV
    234           *
    235           * @brief   Initialize the NV flash pages.
    236           *
    237           * @param   none
    238           *
    239           * @return  TRUE
    240           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    241          static uint8 initNV( void )
   \                     initNV:
    242          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV     A,#-0x8
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    243            osalNvPgHdr_t pgHdr;
    244            uint8 oldPg = OSAL_NV_PAGE_NULL;
   \   00000A   7F00         MOV     R7,#0x0
    245            uint8 newPg = OSAL_NV_PAGE_NULL;
   \   00000C   75..00       MOV     ?V0,#0x0
    246            uint8 findDups = FALSE;
   \   00000F   75..00       MOV     ?V1,#0x0
    247            uint8 pg;
    248          
    249            pgRes = OSAL_NV_PAGE_NULL;
   \   000012   90....       MOV     DPTR,#pgRes
   \   000015   E4           CLR     A
   \   000016   F0           MOVX    @DPTR,A
    250          
    251            for ( pg = OSAL_NV_PAGE_BEG; pg <= OSAL_NV_PAGE_END; pg++ )
   \   000017   7E79         MOV     R6,#0x79
    252            {
    253              HalFlashRead(pg, OSAL_NV_PAGE_HDR_OFFSET, (uint8 *)(&pgHdr), OSAL_NV_HDR_SIZE);
   \                     ??initNV_0:
   \   000019                ; Setup parameters for call to function HalFlashRead
   \   000019   75..08       MOV     ?V2,#0x8
   \   00001C   75..00       MOV     ?V3,#0x0
   \   00001F   78..         MOV     R0,#?V2
   \   000021   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000024   7402         MOV     A,#0x2
   \   000026   12....       LCALL   ?XSTACK_DISP102_8
   \   000029   7A00         MOV     R2,#0x0
   \   00002B   7B00         MOV     R3,#0x0
   \   00002D   EE           MOV     A,R6
   \   00002E   F9           MOV     R1,A
   \   00002F   12....       LCALL   `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   000032   7402         MOV     A,#0x2
   \   000034   12....       LCALL   ?DEALLOC_XSTACK8
    254          
    255              if ( pgHdr.active == OSAL_NV_ERASED_ID )
   \   000037   85..82       MOV     DPL,?XSP + 0
   \   00003A   85..83       MOV     DPH,?XSP + 1
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   F4           CPL     A
   \   00003F   7003         JNZ     ??initNV_1
   \   000041   A3           INC     DPTR
   \   000042   E0           MOVX    A,@DPTR
   \   000043   F4           CPL     A
   \                     ??initNV_1:
   \   000044   7013         JNZ     ??initNV_2
    256              {
    257                if ( pgRes == OSAL_NV_PAGE_NULL )
   \   000046   90....       MOV     DPTR,#pgRes
   \   000049   E0           MOVX    A,@DPTR
   \   00004A   7004         JNZ     ??initNV_3
    258                {
    259                  pgRes = pg;
   \   00004C   EE           MOV     A,R6
   \   00004D   F0           MOVX    @DPTR,A
   \   00004E   802B         SJMP    ??initNV_4
    260                }
    261                else
    262                {
    263                  setPageUse( pg, TRUE );
   \                     ??initNV_3:
   \   000050                ; Setup parameters for call to function setPageUse
   \   000050   7A01         MOV     R2,#0x1
   \   000052   EE           MOV     A,R6
   \   000053   F9           MOV     R1,A
   \   000054   12....       LCALL   `??setPageUse::?relay`; Banked call to: setPageUse
   \   000057   8022         SJMP    ??initNV_4
    264                }
    265              }
    266              else  // Page is active.
    267              {
    268                // If the page is not yet in use, it is the tgt of items from an xfer.
    269                if ( pgHdr.inUse == OSAL_NV_ERASED_ID )
   \                     ??initNV_2:
   \   000059   7402         MOV     A,#0x2
   \   00005B   12....       LCALL   ?XSTACK_DISP0_8
   \   00005E   E0           MOVX    A,@DPTR
   \   00005F   F4           CPL     A
   \   000060   7003         JNZ     ??initNV_5
   \   000062   A3           INC     DPTR
   \   000063   E0           MOVX    A,@DPTR
   \   000064   F4           CPL     A
   \                     ??initNV_5:
   \   000065   7004         JNZ     ??initNV_6
    270                {
    271                  newPg = pg;
   \   000067   8E..         MOV     ?V0,R6
   \   000069   8010         SJMP    ??initNV_4
    272                }
    273                // An Xfer from this page was in progress.
    274                else if ( pgHdr.xfer != OSAL_NV_ERASED_ID )
   \                     ??initNV_6:
   \   00006B   7404         MOV     A,#0x4
   \   00006D   12....       LCALL   ?XSTACK_DISP0_8
   \   000070   E0           MOVX    A,@DPTR
   \   000071   F4           CPL     A
   \   000072   7003         JNZ     ??initNV_7
   \   000074   A3           INC     DPTR
   \   000075   E0           MOVX    A,@DPTR
   \   000076   F4           CPL     A
   \                     ??initNV_7:
   \   000077   6002         JZ      ??initNV_4
    275                {
    276                  oldPg = pg;
   \   000079   EE           MOV     A,R6
   \   00007A   FF           MOV     R7,A
    277                }
    278              }
    279          
    280              // Calculate page offset and lost bytes - any "old" item triggers an N^2 re-scan from start.
    281              if ( initPage( pg, OSAL_NV_ITEM_NULL, findDups ) != OSAL_NV_ITEM_NULL )
   \                     ??initNV_4:
   \   00007B                ; Setup parameters for call to function initPage
   \   00007B   AC..         MOV     R4,?V1
   \   00007D   7A00         MOV     R2,#0x0
   \   00007F   7B00         MOV     R3,#0x0
   \   000081   EE           MOV     A,R6
   \   000082   F9           MOV     R1,A
   \   000083   12....       LCALL   `??initPage::?relay` ; Banked call to: initPage
   \   000086   8B..         MOV     ?V3,R3
   \   000088   EA           MOV     A,R2
   \   000089   45..         ORL     A,?V3
   \   00008B   6005         JZ      ??initNV_8
    282              {
    283                findDups = TRUE;
   \   00008D   75..01       MOV     ?V1,#0x1
    284                pg = OSAL_NV_PAGE_BEG-1;
   \   000090   7E78         MOV     R6,#0x78
    285                continue;
    286              }
    287            }  // for ( pg = OSAL_NV_PAGE_BEG; pg <= OSAL_NV_PAGE_END; pg++ )
   \                     ??initNV_8:
   \   000092   0E           INC     R6
   \   000093   EE           MOV     A,R6
   \   000094   C3           CLR     C
   \   000095   947F         SUBB    A,#0x7f
   \   000097   4080         JC      ??initNV_0
    288          
    289            /* First the old page is erased, and then the new page is put into use.
    290             * So if a transfer was in progress, the new page will always not yet be
    291             * marked as in use, since that is the last step to ending a transfer.
    292             */
    293            if ( newPg != OSAL_NV_PAGE_NULL )
   \   000099   E5..         MOV     A,?V0
   \   00009B   601D         JZ      ??initNV_9
    294            {
    295              /* If there is already a fallow page reserved, keep it and put the newPg in use.
    296               * An unfinished compaction will finish to the new reserve page and the old page
    297               * will be erased and reserved.
    298               */
    299              if ( pgRes != OSAL_NV_PAGE_NULL )
   \   00009D   90....       MOV     DPTR,#pgRes
   \   0000A0   E0           MOVX    A,@DPTR
   \   0000A1   600C         JZ      ??initNV_10
    300              {
    301                setPageUse( newPg, TRUE );
   \   0000A3                ; Setup parameters for call to function setPageUse
   \   0000A3   7A01         MOV     R2,#0x1
   \   0000A5   A9..         MOV     R1,?V0
   \   0000A7   12....       LCALL   `??setPageUse::?relay`; Banked call to: setPageUse
    302              }
    303              else if ( oldPg != OSAL_NV_PAGE_NULL )
    304              {
    305                pgRes = newPg;
    306              }
    307          
    308              /* If a page compaction was interrupted and the page being compacted is not
    309               * yet erased, then there may be items remaining to xfer before erasing.
    310               */
    311              if ( oldPg != OSAL_NV_PAGE_NULL )
   \   0000AA   EF           MOV     A,R7
   \   0000AB   7008         JNZ     ??initNV_11
   \   0000AD   800B         SJMP    ??initNV_9
   \                     ??initNV_10:
   \   0000AF   EF           MOV     A,R7
   \   0000B0   600E         JZ      ??initNV_12
   \   0000B2   E5..         MOV     A,?V0
   \   0000B4   F0           MOVX    @DPTR,A
    312              {
    313                compactPage( oldPg );
   \                     ??initNV_11:
   \   0000B5                ; Setup parameters for call to function compactPage
   \   0000B5   EF           MOV     A,R7
   \   0000B6   F9           MOV     R1,A
   \   0000B7   12....       LCALL   `??compactPage::?relay`; Banked call to: compactPage
    314              }
    315            }
    316          
    317            /* If no page met the criteria to be the reserve page:
    318             *  - A compactPage() failed or board reset before doing so.
    319             *  - Perhaps the user changed which Flash pages are dedicated to NV and downloaded the code
    320             *    without erasing Flash?
    321             */
    322            if ( pgRes == OSAL_NV_PAGE_NULL )
   \                     ??initNV_9:
   \   0000BA   90....       MOV     DPTR,#pgRes
   \   0000BD   E0           MOVX    A,@DPTR
   \   0000BE   7011         JNZ     ??initNV_13
    323            {
    324              for ( pg = OSAL_NV_PAGE_BEG; pg <= OSAL_NV_PAGE_END; pg++ )
   \                     ??initNV_12:
   \   0000C0   7E79         MOV     R6,#0x79
    325              {
    326                erasePage( pg );
   \                     ??initNV_14:
   \   0000C2                ; Setup parameters for call to function erasePage
   \   0000C2   EE           MOV     A,R6
   \   0000C3   F9           MOV     R1,A
   \   0000C4   12....       LCALL   `??erasePage::?relay`; Banked call to: erasePage
    327              }
   \   0000C7   0E           INC     R6
   \   0000C8   EE           MOV     A,R6
   \   0000C9   C3           CLR     C
   \   0000CA   947F         SUBB    A,#0x7f
   \   0000CC   40F4         JC      ??initNV_14
    328              initNV();
   \   0000CE                ; Setup parameters for call to function initNV
   \   0000CE   12....       LCALL   `??initNV::?relay`   ; Banked call to: initNV
    329            }
    330          
    331            return TRUE;
   \                     ??initNV_13:
   \   0000D1   7901         MOV     R1,#0x1
   \   0000D3   7408         MOV     A,#0x8
   \   0000D5   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000D8                REQUIRE ?Subroutine0
   \   0000D8                ; // Fall through to label ?Subroutine0
    332          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F04         MOV     R7,#0x4
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    333          
    334          /*********************************************************************
    335           * @fn      setPageUse
    336           *
    337           * @brief   Set page header active/inUse state according to 'inUse'.
    338           *
    339           * @param   pg - Valid NV page to verify and init.
    340           * @param   inUse - Boolean TRUE if inUse, FALSE if only active.
    341           *
    342           * @return  none
    343           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    344          static void setPageUse( uint8 pg, uint8 inUse )
   \                     setPageUse:
    345          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV     A,#-0x8
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FF           MOV     R7,A
    346            osalNvPgHdr_t pgHdr;
    347          
    348            pgHdr.active = OSAL_NV_ZEROED_ID;
   \   00000C   85..82       MOV     DPL,?XSP + 0
   \   00000F   85..83       MOV     DPH,?XSP + 1
   \   000012   E4           CLR     A
   \   000013   F0           MOVX    @DPTR,A
   \   000014   A3           INC     DPTR
   \   000015   F0           MOVX    @DPTR,A
    349          
    350            if ( inUse )
   \   000016   EF           MOV     A,R7
   \   000017   6008         JZ      ??setPageUse_0
    351            {
    352              pgHdr.inUse = OSAL_NV_ZEROED_ID;
   \   000019   7402         MOV     A,#0x2
   \   00001B   12....       LCALL   ?XSTACK_DISP0_8
   \   00001E   E4           CLR     A
   \   00001F   8007         SJMP    ??setPageUse_1
    353            }
    354            else
    355            {
    356              pgHdr.inUse = OSAL_NV_ERASED_ID;
   \                     ??setPageUse_0:
   \   000021   7402         MOV     A,#0x2
   \   000023   12....       LCALL   ?XSTACK_DISP0_8
   \   000026   74FF         MOV     A,#-0x1
    357            }
   \                     ??setPageUse_1:
   \   000028   12....       LCALL   ??Subroutine41_0 & 0xFFFF
    358          
    359            writeWord( pg, OSAL_NV_PAGE_HDR_OFFSET, (uint8*)(&pgHdr) );
   \                     ??CrossCallReturnLabel_85:
   \   00002B   7A00         MOV     R2,#0x0
   \   00002D   7B00         MOV     R3,#0x0
   \   00002F   12....       LCALL   `??writeWord::?relay`; Banked call to: writeWord
    360          }
   \   000032   7408         MOV     A,#0x8
   \   000034                REQUIRE ?Subroutine1
   \   000034                ; // Fall through to label ?Subroutine1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine36_0
   \   000003                ; // Fall through to label ??Subroutine36_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine36_0:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine41_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   F0           MOVX    @DPTR,A
   \   000003                ; Setup parameters for call to function writeWordH
   \   000003                ; Setup parameters for call to function writeWord
   \   000003                ; Setup parameters for call to function writeWord
   \   000003   AC..         MOV     R4,?XSP + 0
   \   000005   AD..         MOV     R5,?XSP + 1
   \   000007   22           RET
    361          
    362          /*********************************************************************
    363           * @fn      initPage
    364           *
    365           * @brief   Walk the page items; calculate checksums, lost bytes & page offset.
    366           *
    367           * @param   pg - Valid NV page to verify and init.
    368           * @param   id - Valid NV item Id to use function as a "findItem".
    369           *               If set to NULL then just perform the page initialization.
    370           *
    371           * @return  If 'id' is non-NULL and good checksums are found, return the offset
    372           *          of the data corresponding to item Id; else OSAL_NV_ITEM_NULL.
    373           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    374          static uint16 initPage( uint8 pg, uint16 id, uint8 findDups )
   \                     initPage:
    375          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_71:
   \   00000D   89..         MOV     ?V6,R1
   \   00000F   8C..         MOV     ?V7,R4
    376            uint16 offset = OSAL_NV_PAGE_HDR_SIZE;
   \   000011   75..08       MOV     ?V0,#0x8
   \   000014   75..00       MOV     ?V1,#0x0
    377            uint16 sz, lost = 0;
   \   000017   75..00       MOV     ?V2,#0x0
   \   00001A   75..00       MOV     ?V3,#0x0
   \   00001D   801B         SJMP    ??initPage_0
    378            osalNvHdr_t hdr;
    379          
    380            do
    381            {
    382              HalFlashRead(pg, offset, (uint8 *)(&hdr), OSAL_NV_HDR_SIZE);
    383          
    384              if ( hdr.id == OSAL_NV_ERASED_ID )
    385              {
    386                break;
    387              }
    388              offset += OSAL_NV_HDR_SIZE;
    389              sz = OSAL_NV_DATA_SIZE( hdr.len );
    390          
    391              // A bad 'len' write has blown away the rest of the page.
    392              if ( (offset + sz) > OSAL_NV_PAGE_FREE )
    393              {
    394                lost += (OSAL_NV_PAGE_FREE - offset + OSAL_NV_HDR_SIZE);
    395                offset = OSAL_NV_PAGE_FREE;
    396                break;
    397              }
    398          
    399              if ( hdr.id != OSAL_NV_ZEROED_ID )
    400              {
    401                /* This trick allows function to do double duty for findItem() without
    402                 * compromising its essential functionality at powerup initialization.
    403                 */
    404                if ( id != OSAL_NV_ITEM_NULL )
    405                {
    406                  /* This trick allows asking to find the old/transferred item in case
    407                   * of a successful new item write that gets interrupted before the
    408                   * old item can be zeroed out.
    409                   */
    410                  if ( (id & 0x7fff) == hdr.id )
    411                  {
    412                    if ( (((id & OSAL_NV_SOURCE_ID) == 0) && (hdr.stat == OSAL_NV_ERASED_ID)) ||
    413                         (((id & OSAL_NV_SOURCE_ID) != 0) && (hdr.stat != OSAL_NV_ERASED_ID)) )
    414                    {
    415                      return offset;
    416                    }
    417                  }
    418                }
    419                // When invoked from the osal_nv_init(), verify checksums and find & zero any duplicates.
    420                else
    421                {
    422                  if ( hdr.chk == calcChkF( pg, offset, hdr.len ) )
    423                  {
    424                    if ( findDups )
    425                    {
    426                      if ( hdr.stat == OSAL_NV_ERASED_ID )
    427                      {
    428                        /* The trick of setting the MSB of the item Id causes the logic
    429                         * immediately above to return a valid page only if the header 'stat'
    430                         * indicates that it was the older item being transferred.
    431                         */
    432                        uint16 off = findItem( (hdr.id | OSAL_NV_SOURCE_ID) );
    433          
    434                        if ( off != OSAL_NV_ITEM_NULL )
    435                        {
    436                          setItem( findPg, off, eNvZero );  // Mark old duplicate as invalid.
    437                        }
    438                      }
    439                    }
    440                    // Any "old" item immediately exits and triggers the N^2 exhaustive initialization.
    441                    else if ( hdr.stat != OSAL_NV_ERASED_ID )
    442                    {
    443                      return OSAL_NV_ERASED_ID;
    444                    }
    445                  }
    446                  else
    447                  {
    448                    setItem( pg, offset, eNvZero );  // Mark bad checksum as invalid.
    449                    lost += (OSAL_NV_HDR_SIZE + sz);
    450                  }
    451                }
    452              }
    453              else
    454              {
    455                lost += (OSAL_NV_HDR_SIZE + sz);
   \                     ??initPage_1:
   \   00001F   EE           MOV     A,R6
   \   000020   2408         ADD     A,#0x8
   \   000022   F8           MOV     R0,A
   \   000023   E4           CLR     A
   \   000024   3F           ADDC    A,R7
   \   000025   F9           MOV     R1,A
   \   000026   E5..         MOV     A,?V2
   \   000028   28           ADD     A,R0
   \   000029   F5..         MOV     ?V2,A
   \   00002B   E5..         MOV     A,?V3
   \   00002D   39           ADDC    A,R1
   \   00002E   F5..         MOV     ?V3,A
    456              }
    457              offset += sz;
   \                     ??initPage_2:
   \   000030   E5..         MOV     A,?V0
   \   000032   2E           ADD     A,R6
   \   000033   F5..         MOV     ?V0,A
   \   000035   E5..         MOV     A,?V1
   \   000037   3F           ADDC    A,R7
   \   000038   F5..         MOV     ?V1,A
    458          
    459            } while ( TRUE );
   \                     ??initPage_0:
   \   00003A                ; Setup parameters for call to function HalFlashRead
   \   00003A   75..08       MOV     ?V4,#0x8
   \   00003D   75..00       MOV     ?V5,#0x0
   \   000040   78..         MOV     R0,#?V4
   \   000042   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000045   7404         MOV     A,#0x4
   \   000047   12....       LCALL   ?XSTACK_DISP102_8
   \   00004A   AA..         MOV     R2,?V0
   \   00004C   AB..         MOV     R3,?V1
   \   00004E   A9..         MOV     R1,?V6
   \   000050   12....       LCALL   `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   000053   7402         MOV     A,#0x2
   \   000055   12....       LCALL   ?DEALLOC_XSTACK8
   \   000058   7402         MOV     A,#0x2
   \   00005A   12....       LCALL   ?XSTACK_DISP0_8
   \   00005D   E0           MOVX    A,@DPTR
   \   00005E   F4           CPL     A
   \   00005F   7003         JNZ     ??initPage_3
   \   000061   A3           INC     DPTR
   \   000062   E0           MOVX    A,@DPTR
   \   000063   F4           CPL     A
   \                     ??initPage_3:
   \   000064   603C         JZ      ??initPage_4
   \   000066   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   000069   7404         MOV     A,#0x4
   \   00006B   12....       LCALL   ?XSTACK_DISP0_8
   \   00006E   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   000071   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   000074   FE           MOV     R6,A
   \   000075   E9           MOV     A,R1
   \   000076   FF           MOV     R7,A
   \   000077   E5..         MOV     A,?V0
   \   000079   2E           ADD     A,R6
   \   00007A   F8           MOV     R0,A
   \   00007B   E5..         MOV     A,?V1
   \   00007D   3F           ADDC    A,R7
   \   00007E   12....       LCALL   ??Subroutine39_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   000081   4044         JC      ??initPage_5
   \   000083   E5..         MOV     A,?V2
   \   000085   2408         ADD     A,#0x8
   \   000087   F5..         MOV     ?V2,A
   \   000089   E5..         MOV     A,?V3
   \   00008B   3408         ADDC    A,#0x8
   \   00008D   F5..         MOV     ?V3,A
   \   00008F   C3           CLR     C
   \   000090   E5..         MOV     A,?V2
   \   000092   95..         SUBB    A,?V0
   \   000094   F5..         MOV     ?V2,A
   \   000096   E5..         MOV     A,?V3
   \   000098   95..         SUBB    A,?V1
   \   00009A   F5..         MOV     ?V3,A
   \   00009C   75..00       MOV     ?V0,#0x0
   \   00009F   75..08       MOV     ?V1,#0x8
    460          
    461            pgOff[pg - OSAL_NV_PAGE_BEG] = offset;
   \                     ??initPage_4:
   \   0000A2   A8..         MOV     R0,?V6
   \   0000A4   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   0000A7   F582         MOV     DPL,A
   \   0000A9   74..         MOV     A,#((pgOff - 242) >> 8) & 0xff
   \   0000AB   39           ADDC    A,R1
   \   0000AC   F583         MOV     DPH,A
   \   0000AE   E5..         MOV     A,?V0
   \   0000B0   F0           MOVX    @DPTR,A
   \   0000B1   A3           INC     DPTR
   \   0000B2   E5..         MOV     A,?V1
   \   0000B4   12....       LCALL   ?Subroutine7 & 0xFFFF
    462            pgLost[pg - OSAL_NV_PAGE_BEG] = lost;
   \                     ??CrossCallReturnLabel_0:
   \   0000B7   E5..         MOV     A,?V2
   \   0000B9   F0           MOVX    @DPTR,A
   \   0000BA   A3           INC     DPTR
   \   0000BB   E5..         MOV     A,?V3
   \   0000BD   F0           MOVX    @DPTR,A
    463          
    464            return OSAL_NV_ITEM_NULL;
   \   0000BE   7A00         MOV     R2,#0x0
   \   0000C0   7B00         MOV     R3,#0x0
   \                     ??initPage_6:
   \   0000C2   740A         MOV     A,#0xa
   \   0000C4   02....       LJMP    ?Subroutine2 & 0xFFFF
   \                     ??initPage_5:
   \   0000C7   7402         MOV     A,#0x2
   \   0000C9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000CC   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   0000CF   7003         JNZ     $+5
   \   0000D1   02....       LJMP    ??initPage_1 & 0xFFFF
   \   0000D4   85..82       MOV     DPL,?XSP + 0
   \   0000D7   85..83       MOV     DPH,?XSP + 1
   \   0000DA   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   0000DD   6052         JZ      ??initPage_7
   \   0000DF   85..82       MOV     DPL,?XSP + 0
   \   0000E2   85..83       MOV     DPH,?XSP + 1
   \   0000E5   A3           INC     DPTR
   \   0000E6   E0           MOVX    A,@DPTR
   \   0000E7   547F         ANL     A,#0x7f
   \   0000E9   F9           MOV     R1,A
   \   0000EA   7402         MOV     A,#0x2
   \   0000EC   12....       LCALL   ?XSTACK_DISP0_8
   \   0000EF   E0           MOVX    A,@DPTR
   \   0000F0   68           XRL     A,R0
   \   0000F1   7003         JNZ     ??initPage_8
   \   0000F3   A3           INC     DPTR
   \   0000F4   E0           MOVX    A,@DPTR
   \   0000F5   69           XRL     A,R1
   \                     ??initPage_8:
   \   0000F6   6003         JZ      $+5
   \   0000F8   02....       LJMP    ??initPage_2 & 0xFFFF
   \   0000FB   7408         MOV     A,#0x8
   \   0000FD   12....       LCALL   ?XSTACK_DISP0_8
   \   000100   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   000103   85..82       MOV     DPL,?XSP + 0
   \   000106   85..83       MOV     DPH,?XSP + 1
   \   000109   A3           INC     DPTR
   \   00010A   E0           MOVX    A,@DPTR
   \   00010B   5480         ANL     A,#0x80
   \   00010D   700F         JNZ     ??initPage_9
   \   00010F   74FF         MOV     A,#-0x1
   \   000111   6A           XRL     A,R2
   \   000112   7003         JNZ     ??initPage_10
   \   000114   74FF         MOV     A,#-0x1
   \   000116   6B           XRL     A,R3
   \                     ??initPage_10:
   \   000117   6003         JZ      $+5
   \   000119   02....       LJMP    ??initPage_2 & 0xFFFF
   \   00011C   800D         SJMP    ??initPage_11
   \                     ??initPage_9:
   \   00011E   74FF         MOV     A,#-0x1
   \   000120   6A           XRL     A,R2
   \   000121   7003         JNZ     ??initPage_12
   \   000123   74FF         MOV     A,#-0x1
   \   000125   6B           XRL     A,R3
   \                     ??initPage_12:
   \   000126   7003         JNZ     $+5
   \   000128   02....       LJMP    ??initPage_2 & 0xFFFF
   \                     ??initPage_11:
   \   00012B   AA..         MOV     R2,?V0
   \   00012D   AB..         MOV     R3,?V1
   \   00012F   8091         SJMP    ??initPage_6
   \                     ??initPage_7:
   \   000131                ; Setup parameters for call to function calcChkF
   \   000131   AA..         MOV     R2,?V0
   \   000133   AB..         MOV     R3,?V1
   \   000135   A9..         MOV     R1,?V6
   \   000137   12....       LCALL   `??calcChkF::?relay` ; Banked call to: calcChkF
   \   00013A   8A..         MOV     ?V4,R2
   \   00013C   8B..         MOV     ?V5,R3
   \   00013E   A8..         MOV     R0,?V4
   \   000140   A9..         MOV     R1,?V5
   \   000142   7406         MOV     A,#0x6
   \   000144   12....       LCALL   ?XSTACK_DISP0_8
   \   000147   E0           MOVX    A,@DPTR
   \   000148   68           XRL     A,R0
   \   000149   7003         JNZ     ??initPage_13
   \   00014B   A3           INC     DPTR
   \   00014C   E0           MOVX    A,@DPTR
   \   00014D   69           XRL     A,R1
   \                     ??initPage_13:
   \   00014E   7050         JNZ     ??initPage_14
   \   000150   7408         MOV     A,#0x8
   \   000152   12....       LCALL   ?XSTACK_DISP0_8
   \   000155   12....       LCALL   ??Subroutine43_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_89:
   \   000158   E5..         MOV     A,?V7
   \   00015A   6030         JZ      ??initPage_15
   \   00015C   74FF         MOV     A,#-0x1
   \   00015E   68           XRL     A,R0
   \   00015F   7003         JNZ     ??initPage_16
   \   000161   74FF         MOV     A,#-0x1
   \   000163   69           XRL     A,R1
   \                     ??initPage_16:
   \   000164   6003         JZ      $+5
   \   000166   02....       LJMP    ??initPage_2 & 0xFFFF
   \   000169                ; Setup parameters for call to function findItem
   \   000169   7402         MOV     A,#0x2
   \   00016B   12....       LCALL   ?XSTACK_DISP0_8
   \   00016E   E0           MOVX    A,@DPTR
   \   00016F   FA           MOV     R2,A
   \   000170   A3           INC     DPTR
   \   000171   E0           MOVX    A,@DPTR
   \   000172   4480         ORL     A,#0x80
   \   000174   FB           MOV     R3,A
   \   000175   12....       LCALL   `??findItem::?relay` ; Banked call to: findItem
   \   000178   EA           MOV     A,R2
   \   000179   4B           ORL     A,R3
   \   00017A   7003         JNZ     $+5
   \   00017C   02....       LJMP    ??initPage_2 & 0xFFFF
   \   00017F                ; Setup parameters for call to function setItem
   \   00017F   7C01         MOV     R4,#0x1
   \   000181   90....       MOV     DPTR,#findPg
   \   000184   E0           MOVX    A,@DPTR
   \   000185   F9           MOV     R1,A
   \   000186   12....       LCALL   `??setItem::?relay`  ; Banked call to: setItem
   \   000189   02....       LJMP    ??initPage_2 & 0xFFFF
   \                     ??initPage_15:
   \   00018C   74FF         MOV     A,#-0x1
   \   00018E   68           XRL     A,R0
   \   00018F   7003         JNZ     ??initPage_17
   \   000191   74FF         MOV     A,#-0x1
   \   000193   69           XRL     A,R1
   \                     ??initPage_17:
   \   000194   7003         JNZ     $+5
   \   000196   02....       LJMP    ??initPage_2 & 0xFFFF
   \   000199   7AFF         MOV     R2,#-0x1
   \   00019B   7BFF         MOV     R3,#-0x1
   \   00019D   02....       LJMP    ??initPage_6 & 0xFFFF
   \                     ??initPage_14:
   \   0001A0                ; Setup parameters for call to function setItem
   \   0001A0   7C01         MOV     R4,#0x1
   \   0001A2   AA..         MOV     R2,?V0
   \   0001A4   AB..         MOV     R3,?V1
   \   0001A6   A9..         MOV     R1,?V6
   \   0001A8   12....       LCALL   `??setItem::?relay`  ; Banked call to: setItem
   \   0001AB   02....       LJMP    ??initPage_1 & 0xFFFF
    465          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine37_0
   \   000006                ; // Fall through to label ??Subroutine37_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine37_0:
   \   000000   EA           MOV     A,R2
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   EB           MOV     A,R3
   \   000004   F0           MOVX    @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   12....       LCALL   ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_67:
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   74..         MOV     A,#(pgLost + 14) & 0xff
   \   000002   28           ADD     A,R0
   \   000003   F582         MOV     DPL,A
   \   000005   74..         MOV     A,#((pgLost - 242) >> 8) & 0xff
   \   000007   39           ADDC    A,R1
   \   000008   F583         MOV     DPH,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine39_0:
   \   000000   F9           MOV     R1,A
   \   000001   C3           CLR     C
   \   000002   E8           MOV     A,R0
   \   000003   9401         SUBB    A,#0x1
   \   000005   E9           MOV     A,R1
   \   000006   9408         SUBB    A,#0x8
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   EC           MOV     A,R4
   \   000001   2403         ADD     A,#0x3
   \   000003   F8           MOV     R0,A
   \   000004   E4           CLR     A
   \   000005   3D           ADDC    A,R5
   \   000006   F9           MOV     R1,A
   \   000007   E8           MOV     A,R0
   \   000008   54FC         ANL     A,#0xfc
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   E5..         MOV     A,?V0
   \   000002   2408         ADD     A,#0x8
   \   000004   F5..         MOV     ?V0,A
   \   000006   E4           CLR     A
   \   000007   35..         ADDC    A,?V1
   \   000009   F5..         MOV     ?V1,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   E8           MOV     A,R0
   \   000006   49           ORL     A,R1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FC           MOV     R4,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FD           MOV     R5,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine43_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine44_0
   \   000003                ; // Fall through to label ??Subroutine44_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine44_0:
   \   000000   7F08         MOV     R7,#0x8
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   E8           MOV     A,R0
   \   000001   28           ADD     A,R0
   \   000002   F8           MOV     R0,A
   \   000003   E4           CLR     A
   \   000004   33           RLC     A
   \   000005   F9           MOV     R1,A
   \   000006   74..         MOV     A,#(pgOff + 14) & 0xff
   \   000008   28           ADD     A,R0
   \   000009   22           RET
    466          
    467          /*********************************************************************
    468           * @fn      erasePage
    469           *
    470           * @brief   Erases a page in Flash.
    471           *
    472           * @param   pg - Valid NV page to erase.
    473           *
    474           * @return  none
    475           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    476          static void erasePage( uint8 pg )
   \                     erasePage:
    477          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    478            if ( !OSAL_NV_CHECK_BUS_VOLTAGE )
   \   000007                ; Setup parameters for call to function HalAdcCheckVdd
   \   000007   7904         MOV     R1,#0x4
   \   000009   12....       LCALL   `??HalAdcCheckVdd::?relay`; Banked call to: HalAdcCheckVdd
   \   00000C   E9           MOV     A,R1
   \   00000D   7007         JNZ     ??erasePage_0
    479            {
    480              failF = TRUE;
   \   00000F   90....       MOV     DPTR,#failF
   \   000012   7401         MOV     A,#0x1
   \   000014   8015         SJMP    ??erasePage_1
    481              return;
    482            }
    483          
    484            HalFlashErase(pg);
   \                     ??erasePage_0:
   \   000016                ; Setup parameters for call to function HalFlashErase
   \   000016   EE           MOV     A,R6
   \   000017   F9           MOV     R1,A
   \   000018   12....       LCALL   `??HalFlashErase::?relay`; Banked call to: HalFlashErase
    485          
    486            pgOff[pg - OSAL_NV_PAGE_BEG] = OSAL_NV_PAGE_HDR_SIZE;
   \   00001B   EE           MOV     A,R6
   \   00001C   2E           ADD     A,R6
   \   00001D   12....       LCALL   ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_64:
   \   000020   7408         MOV     A,#0x8
   \   000022   F0           MOVX    @DPTR,A
   \   000023   A3           INC     DPTR
   \   000024   E4           CLR     A
   \   000025   12....       LCALL   ?Subroutine7 & 0xFFFF
    487            pgLost[pg - OSAL_NV_PAGE_BEG] = 0;
   \                     ??CrossCallReturnLabel_1:
   \   000028   E4           CLR     A
   \   000029   F0           MOVX    @DPTR,A
   \   00002A   A3           INC     DPTR
   \                     ??erasePage_1:
   \   00002B   F0           MOVX    @DPTR,A
    488          }
   \   00002C   02....       LJMP    ??Subroutine36_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   F8           MOV     R0,A
   \   000001   E4           CLR     A
   \   000002   33           RLC     A
   \   000003   F9           MOV     R1,A
   \   000004   74..         MOV     A,#(pgOff + 14) & 0xff
   \   000006   28           ADD     A,R0
   \   000007   F582         MOV     DPL,A
   \   000009   74..         MOV     A,#((pgOff - 242) >> 8) & 0xff
   \   00000B   39           ADDC    A,R1
   \   00000C   F583         MOV     DPH,A
   \   00000E   22           RET
    489          
    490          /*********************************************************************
    491           * @fn      compactPage
    492           *
    493           * @brief   Compacts the page specified.
    494           *
    495           * @param   srcPg - Valid NV page to erase.
    496           *
    497           * @return  none
    498           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    499          static void compactPage( uint8 srcPg )
   \                     compactPage:
    500          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
    501            uint16 dstOff = pgOff[pgRes-OSAL_NV_PAGE_BEG];
   \   00000C   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   F5..         MOV     ?V0,A
   \   000012   A3           INC     DPTR
   \   000013   E0           MOVX    A,@DPTR
   \   000014   F5..         MOV     ?V1,A
    502            uint16 srcOff = OSAL_NV_ZEROED_ID;
   \   000016   12....       LCALL   ?Subroutine6 & 0xFFFF
    503            osalNvHdr_t hdr;
    504          
    505            // Mark page as being in process of compaction.
    506            writeWordH( srcPg, OSAL_NV_PG_XFER, (uint8*)(&srcOff) );
   \                     ??CrossCallReturnLabel_83:
   \   000019   7A04         MOV     R2,#0x4
   \   00001B   FB           MOV     R3,A
   \   00001C   EE           MOV     A,R6
   \   00001D   F9           MOV     R1,A
   \   00001E   12....       LCALL   `??writeWordH::?relay`; Banked call to: writeWordH
    507          
    508            srcOff = OSAL_NV_PAGE_HDR_SIZE;
   \   000021   85..82       MOV     DPL,?XSP + 0
   \   000024   85..83       MOV     DPH,?XSP + 1
   \   000027   7408         MOV     A,#0x8
   \   000029   F0           MOVX    @DPTR,A
   \   00002A   A3           INC     DPTR
   \   00002B   E4           CLR     A
   \   00002C   02....       LJMP    ??compactPage_0 & 0xFFFF
    509          
    510            do
    511            {
    512              uint16 sz;
    513              HalFlashRead(srcPg, srcOff, (uint8 *)(&hdr), OSAL_NV_HDR_SIZE);
    514          
    515              if ( hdr.id == OSAL_NV_ERASED_ID )
    516              {
    517                break;
    518              }
    519          
    520              srcOff += OSAL_NV_HDR_SIZE;
    521          
    522              if ( (srcOff + hdr.len) > OSAL_NV_PAGE_FREE )
    523              {
    524                break;
    525              }
    526          
    527              sz = OSAL_NV_DATA_SIZE( hdr.len );
   \                     ??compactPage_1:
   \   00002F   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_46:
   \   000032   F5..         MOV     ?V2,A
   \   000034   E9           MOV     A,R1
   \   000035   F5..         MOV     ?V3,A
    528          
    529              if ( hdr.id != OSAL_NV_ZEROED_ID )
   \   000037   7402         MOV     A,#0x2
   \   000039   12....       LCALL   ?XSTACK_DISP0_8
   \   00003C   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   00003F   607D         JZ      ??compactPage_2
    530              {
    531                if ( hdr.chk == calcChkF( srcPg, srcOff, hdr.len ) )
   \   000041                ; Setup parameters for call to function calcChkF
   \   000041   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_80:
   \   000044   12....       LCALL   `??calcChkF::?relay` ; Banked call to: calcChkF
   \   000047   8A..         MOV     ?V4,R2
   \   000049   8B..         MOV     ?V5,R3
   \   00004B   A8..         MOV     R0,?V4
   \   00004D   A9..         MOV     R1,?V5
   \   00004F   7406         MOV     A,#0x6
   \   000051   12....       LCALL   ?XSTACK_DISP0_8
   \   000054   E0           MOVX    A,@DPTR
   \   000055   68           XRL     A,R0
   \   000056   7003         JNZ     ??compactPage_3
   \   000058   A3           INC     DPTR
   \   000059   E0           MOVX    A,@DPTR
   \   00005A   69           XRL     A,R1
   \                     ??compactPage_3:
   \   00005B   7059         JNZ     ??compactPage_4
    532                {
    533                  setItem( srcPg, srcOff, eNvXfer );
   \   00005D                ; Setup parameters for call to function setItem
   \   00005D   7C00         MOV     R4,#0x0
   \   00005F   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_81:
   \   000062   12....       LCALL   `??setItem::?relay`  ; Banked call to: setItem
    534                  writeBuf( pgRes, dstOff, OSAL_NV_HDR_SIZE, (byte *)(&hdr) );
   \   000065                ; Setup parameters for call to function writeBuf
   \   000065   7402         MOV     A,#0x2
   \   000067   12....       LCALL   ?XSTACK_DISP100_8
   \   00006A   88..         MOV     ?V4,R0
   \   00006C   89..         MOV     ?V5,R1
   \   00006E   78..         MOV     R0,#?V4
   \   000070   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000073   7C08         MOV     R4,#0x8
   \   000075   7D00         MOV     R5,#0x0
   \   000077   AA..         MOV     R2,?V0
   \   000079   AB..         MOV     R3,?V1
   \   00007B   90....       MOV     DPTR,#pgRes
   \   00007E   E0           MOVX    A,@DPTR
   \   00007F   F9           MOV     R1,A
   \   000080   12....       LCALL   `??writeBuf::?relay` ; Banked call to: writeBuf
   \   000083   7402         MOV     A,#0x2
   \   000085   12....       LCALL   ?DEALLOC_XSTACK8
    535                  dstOff += OSAL_NV_HDR_SIZE;
   \   000088   12....       LCALL   ?Subroutine23 & 0xFFFF
    536                  xferBuf( srcPg, srcOff, pgRes, dstOff, sz );
   \                     ??CrossCallReturnLabel_43:
   \   00008B                ; Setup parameters for call to function xferBuf
   \   00008B   78..         MOV     R0,#?V2
   \   00008D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000090   78..         MOV     R0,#?V0
   \   000092   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000095   90....       MOV     DPTR,#pgRes
   \   000098   E0           MOVX    A,@DPTR
   \   000099   FC           MOV     R4,A
   \   00009A   7404         MOV     A,#0x4
   \   00009C   12....       LCALL   ?XSTACK_DISP0_8
   \   00009F   12....       LCALL   ??Subroutine40_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_78:
   \   0000A2   12....       LCALL   `??xferBuf::?relay`  ; Banked call to: xferBuf
   \   0000A5   7404         MOV     A,#0x4
   \   0000A7   12....       LCALL   ?DEALLOC_XSTACK8
    537                  dstOff += sz;
   \   0000AA   E5..         MOV     A,?V0
   \   0000AC   25..         ADD     A,?V2
   \   0000AE   F5..         MOV     ?V0,A
   \   0000B0   E5..         MOV     A,?V1
   \   0000B2   35..         ADDC    A,?V3
   \   0000B4   F5..         MOV     ?V1,A
    538                }
    539          
    540                setItem( srcPg, srcOff, eNvZero );  // Mark old location as invalid.
   \                     ??compactPage_4:
   \   0000B6                ; Setup parameters for call to function setItem
   \   0000B6   7C01         MOV     R4,#0x1
   \   0000B8   12....       LCALL   ?Subroutine12 & 0xFFFF
    541              }
   \                     ??CrossCallReturnLabel_82:
   \   0000BB   12....       LCALL   `??setItem::?relay`  ; Banked call to: setItem
    542          
    543              srcOff += sz;
   \                     ??compactPage_2:
   \   0000BE   85..82       MOV     DPL,?XSP + 0
   \   0000C1   85..83       MOV     DPH,?XSP + 1
   \   0000C4   E0           MOVX    A,@DPTR
   \   0000C5   25..         ADD     A,?V2
   \   0000C7   F0           MOVX    @DPTR,A
   \   0000C8   A3           INC     DPTR
   \   0000C9   E0           MOVX    A,@DPTR
   \   0000CA   35..         ADDC    A,?V3
   \                     ??compactPage_0:
   \   0000CC   F0           MOVX    @DPTR,A
    544          
    545            } while ( TRUE );
   \   0000CD                ; Setup parameters for call to function HalFlashRead
   \   0000CD   75..08       MOV     ?V2,#0x8
   \   0000D0   75..00       MOV     ?V3,#0x0
   \   0000D3   78..         MOV     R0,#?V2
   \   0000D5   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000D8   7404         MOV     A,#0x4
   \   0000DA   12....       LCALL   ?XSTACK_DISP102_8
   \   0000DD   7402         MOV     A,#0x2
   \   0000DF   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E2   12....       LCALL   ??Subroutine40_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_79:
   \   0000E5   12....       LCALL   `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   0000E8   7402         MOV     A,#0x2
   \   0000EA   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000ED   7402         MOV     A,#0x2
   \   0000EF   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F2   E0           MOVX    A,@DPTR
   \   0000F3   F4           CPL     A
   \   0000F4   7003         JNZ     ??compactPage_5
   \   0000F6   A3           INC     DPTR
   \   0000F7   E0           MOVX    A,@DPTR
   \   0000F8   F4           CPL     A
   \                     ??compactPage_5:
   \   0000F9   602B         JZ      ??compactPage_6
   \   0000FB   85..82       MOV     DPL,?XSP + 0
   \   0000FE   85..83       MOV     DPH,?XSP + 1
   \   000101   E0           MOVX    A,@DPTR
   \   000102   2408         ADD     A,#0x8
   \   000104   F0           MOVX    @DPTR,A
   \   000105   A3           INC     DPTR
   \   000106   E0           MOVX    A,@DPTR
   \   000107   3400         ADDC    A,#0x0
   \   000109   F0           MOVX    @DPTR,A
   \   00010A   7404         MOV     A,#0x4
   \   00010C   12....       LCALL   ?XSTACK_DISP0_8
   \   00010F   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   000112   85..82       MOV     DPL,?XSP + 0
   \   000115   85..83       MOV     DPH,?XSP + 1
   \   000118   E0           MOVX    A,@DPTR
   \   000119   2C           ADD     A,R4
   \   00011A   F8           MOV     R0,A
   \   00011B   A3           INC     DPTR
   \   00011C   E0           MOVX    A,@DPTR
   \   00011D   3D           ADDC    A,R5
   \   00011E   12....       LCALL   ??Subroutine39_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_75:
   \   000121   5003         JNC     $+5
   \   000123   02....       LJMP    ??compactPage_1 & 0xFFFF
    546          
    547            pgOff[pgRes-OSAL_NV_PAGE_BEG] = dstOff;
   \                     ??compactPage_6:
   \   000126   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   000129   E5..         MOV     A,?V0
   \   00012B   F0           MOVX    @DPTR,A
   \   00012C   A3           INC     DPTR
   \   00012D   E5..         MOV     A,?V1
   \   00012F   F0           MOVX    @DPTR,A
    548          
    549            /* In order to recover from a page compaction that is interrupted,
    550             * the logic in osal_nv_init() depends upon the following order:
    551             * 1. Compacted page is erased.
    552             * 2. State of the target of compaction is changed ePgActive to ePgInUse.
    553             */
    554            erasePage( srcPg );
   \   000130                ; Setup parameters for call to function erasePage
   \   000130   EE           MOV     A,R6
   \   000131   F9           MOV     R1,A
   \   000132   12....       LCALL   `??erasePage::?relay`; Banked call to: erasePage
    555          
    556            // Mark the reserve page as being in use.
    557            setPageUse( pgRes, TRUE );
   \   000135                ; Setup parameters for call to function setPageUse
   \   000135   7A01         MOV     R2,#0x1
   \   000137   90....       MOV     DPTR,#pgRes
   \   00013A   E0           MOVX    A,@DPTR
   \   00013B   F9           MOV     R1,A
   \   00013C   12....       LCALL   `??setPageUse::?relay`; Banked call to: setPageUse
    558          
    559            // Set the reserve page to be the newly erased page.
    560            pgRes = srcPg;
   \   00013F   EE           MOV     A,R6
   \   000140   90....       MOV     DPTR,#pgRes
   \   000143   F0           MOVX    @DPTR,A
    561          }
   \   000144   740A         MOV     A,#0xa
   \   000146                REQUIRE ?Subroutine3
   \   000146                ; // Fall through to label ?Subroutine3

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine38_0
   \   000003                ; // Fall through to label ??Subroutine38_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine38_0:
   \   000000   7F06         MOV     R7,#0x6
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   90....       MOV     DPTR,#pgRes
   \   000003   E0           MOVX    A,@DPTR
   \   000004   25E0         ADD     A,0xE0 /* A   */
   \   000006   12....       LCALL   ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine40_0
   \   000006                ; // Fall through to label ??Subroutine40_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine40_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   EE           MOV     A,R6
   \   000006   F9           MOV     R1,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006   E4           CLR     A
   \   000007                REQUIRE ??Subroutine41_0
   \   000007                ; // Fall through to label ??Subroutine41_0
    562          
    563          /*********************************************************************
    564           * @fn      findItem
    565           *
    566           * @brief   Find an item Id in NV and return the page and offset to its data.
    567           *
    568           * @param   id - Valid NV item Id.
    569           *
    570           * @return  Offset of data corresponding to item Id, if found;
    571           *          otherwise OSAL_NV_ITEM_NULL.
    572           *
    573           *          The page containing the item, if found;
    574           *          otherwise no valid assignment made - left equal to item Id.
    575           *
    576           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    577          static uint16 findItem( uint16 id )
   \                     findItem:
    578          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   8003         SJMP    ??findItem_0
    579            uint16 off;
    580            uint8 pg;
    581          
    582            for ( pg = OSAL_NV_PAGE_BEG; pg <= OSAL_NV_PAGE_END; pg++ )
    583            {
    584              if ( (off = initPage( pg, id, FALSE )) != OSAL_NV_ITEM_NULL )
    585              {
    586                findPg = pg;
    587                return off;
    588              }
    589            }
    590          
    591            // Now attempt to find the item as the "old" item of a failed/interrupted NV write.
    592            if ( (id & OSAL_NV_SOURCE_ID) == 0 )
    593            {
    594              return findItem( id | OSAL_NV_SOURCE_ID );
   \                     ??findItem_1:
   \   00000A   7480         MOV     A,#-0x80
   \   00000C   4F           ORL     A,R7
   \                     ??findItem_0:
   \   00000D   FF           MOV     R7,A
    595            }
   \   00000E   75..79       MOV     ?V0,#0x79
   \                     ??findItem_2:
   \   000011                ; Setup parameters for call to function initPage
   \   000011   7C00         MOV     R4,#0x0
   \   000013   EE           MOV     A,R6
   \   000014   FA           MOV     R2,A
   \   000015   EF           MOV     A,R7
   \   000016   FB           MOV     R3,A
   \   000017   A9..         MOV     R1,?V0
   \   000019   12....       LCALL   `??initPage::?relay` ; Banked call to: initPage
   \   00001C   EA           MOV     A,R2
   \   00001D   4B           ORL     A,R3
   \   00001E   6008         JZ      ??findItem_3
   \   000020   E5..         MOV     A,?V0
   \   000022   90....       MOV     DPTR,#findPg
   \   000025   F0           MOVX    @DPTR,A
   \   000026   8015         SJMP    ??findItem_4
   \                     ??findItem_3:
   \   000028   05..         INC     ?V0
   \   00002A   E5..         MOV     A,?V0
   \   00002C   C3           CLR     C
   \   00002D   947F         SUBB    A,#0x7f
   \   00002F   40E0         JC      ??findItem_2
   \   000031   EF           MOV     A,R7
   \   000032   5480         ANL     A,#0x80
   \   000034   60D4         JZ      ??findItem_1
    596            else
    597            {
    598              findPg = OSAL_NV_PAGE_NULL;
   \   000036   90....       MOV     DPTR,#findPg
   \   000039   E4           CLR     A
   \   00003A   F0           MOVX    @DPTR,A
    599              return OSAL_NV_ITEM_NULL;
   \   00003B   FA           MOV     R2,A
   \   00003C   FB           MOV     R3,A
    600            }
   \                     ??findItem_4:
   \   00003D   02....       LJMP    ?Subroutine0 & 0xFFFF
    601          }
    602          
    603          /*********************************************************************
    604           * @fn      initItem
    605           *
    606           * @brief   An NV item is created and initialized with the data passed to the function, if any.
    607           *
    608           * @param   id  - Valid NV item Id.
    609           * @param   len - Item data length.
    610           * @param  *buf - Pointer to item initalization data. Set to NULL if none.
    611           *
    612           * @return  TRUE if item write and read back checksums ok; FALSE otherwise.
    613           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   3B           ADDC    A,R3
   \   000001                REQUIRE ??Subroutine39_0
   \   000001                ; // Fall through to label ??Subroutine39_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    614          static uint8 initItem( uint8 flag, uint16 id, uint16 len, void *buf )
   \                     initItem:
    615          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0,R1
   \   000007   8A..         MOV     ?V6,R2
   \   000009   8B..         MOV     ?V7,R3
    616            uint16 sz = OSAL_NV_ITEM_SIZE( len );
   \   00000B   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_47:
   \   00000E   2408         ADD     A,#0x8
   \   000010   FA           MOV     R2,A
   \   000011   E4           CLR     A
   \   000012   39           ADDC    A,R1
   \   000013   FB           MOV     R3,A
    617            uint8 rtrn = FALSE;
   \   000014   75..00       MOV     ?V1,#0x0
    618            uint8 cnt = OSAL_NV_PAGES_USED;
   \   000017   75..06       MOV     ?V4,#0x6
    619            uint8 pg = pgRes+1;  // Set to 1 after the reserve page to even wear across all available pages.
   \   00001A   90....       MOV     DPTR,#pgRes
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   04           INC     A
   \   00001F   FE           MOV     R6,A
    620            uint8 idx = 0;
    621          
    622            do {
    623              if (pg >= OSAL_NV_PAGE_BEG+OSAL_NV_PAGES_USED)
   \                     ??initItem_0:
   \   000020   EE           MOV     A,R6
   \   000021   C3           CLR     C
   \   000022   947F         SUBB    A,#0x7f
   \   000024   4002         JC      ??initItem_1
    624              {
    625                pg = OSAL_NV_PAGE_BEG;
   \   000026   7E79         MOV     R6,#0x79
    626              }
    627              if ( pg != pgRes )
   \                     ??initItem_1:
   \   000028   90....       MOV     DPTR,#pgRes
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   6E           XRL     A,R6
   \   00002D   603A         JZ      ??initItem_2
    628              {
    629                idx = pg - OSAL_NV_PAGE_BEG;
   \   00002F   7487         MOV     A,#-0x79
   \   000031   2E           ADD     A,R6
   \   000032   FF           MOV     R7,A
    630                if ( (pgOff[idx] - pgLost[idx] + sz) <= OSAL_NV_PAGE_FREE )
   \   000033   25E0         ADD     A,0xE0 /* A   */
   \   000035   F8           MOV     R0,A
   \   000036   E4           CLR     A
   \   000037   33           RLC     A
   \   000038   F9           MOV     R1,A
   \   000039   74..         MOV     A,#pgOff & 0xff
   \   00003B   28           ADD     A,R0
   \   00003C   F582         MOV     DPL,A
   \   00003E   74..         MOV     A,#(pgOff >> 8) & 0xff
   \   000040   39           ADDC    A,R1
   \   000041   F583         MOV     DPH,A
   \   000043   E0           MOVX    A,@DPTR
   \   000044   F5..         MOV     ?V2,A
   \   000046   A3           INC     DPTR
   \   000047   E0           MOVX    A,@DPTR
   \   000048   F5..         MOV     ?V3,A
   \   00004A   74..         MOV     A,#pgLost & 0xff
   \   00004C   28           ADD     A,R0
   \   00004D   F582         MOV     DPL,A
   \   00004F   74..         MOV     A,#(pgLost >> 8) & 0xff
   \   000051   39           ADDC    A,R1
   \   000052   F583         MOV     DPH,A
   \   000054   12....       LCALL   ??Subroutine43_0 & 0xFFFF
    631                {
    632                  break;
    633                }
    634              }
   \                     ??CrossCallReturnLabel_90:
   \   000057   E5..         MOV     A,?V2
   \   000059   C3           CLR     C
   \   00005A   98           SUBB    A,R0
   \   00005B   F8           MOV     R0,A
   \   00005C   E5..         MOV     A,?V3
   \   00005E   99           SUBB    A,R1
   \   00005F   F9           MOV     R1,A
   \   000060   E8           MOV     A,R0
   \   000061   2A           ADD     A,R2
   \   000062   F8           MOV     R0,A
   \   000063   E9           MOV     A,R1
   \   000064   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_76:
   \   000067   4009         JC      ??initItem_3
    635              pg++;
   \                     ??initItem_2:
   \   000069   0E           INC     R6
    636            } while (--cnt);
   \   00006A   15..         DEC     ?V4
   \   00006C   E5..         MOV     A,?V4
   \   00006E   70B0         JNZ     ??initItem_0
   \   000070   805B         SJMP    ??initItem_4
    637          
    638            if (cnt)
   \                     ??initItem_3:
   \   000072   E5..         MOV     A,?V4
   \   000074   6057         JZ      ??initItem_4
    639            {
    640              // Item fits if an old page is compacted.
    641              if ( (pgOff[idx] + sz) > OSAL_NV_PAGE_FREE )
   \   000076   E5..         MOV     A,?V2
   \   000078   2A           ADD     A,R2
   \   000079   F8           MOV     R0,A
   \   00007A   E5..         MOV     A,?V3
   \   00007C   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_77:
   \   00007F   4005         JC      ??initItem_5
    642              {
    643                pg = pgRes;
   \   000081   90....       MOV     DPTR,#pgRes
   \   000084   E0           MOVX    A,@DPTR
   \   000085   FE           MOV     R6,A
   \                     ??initItem_5:
   \   000086   7410         MOV     A,#0x10
   \   000088   12....       LCALL   ?XSTACK_DISP0_8
   \   00008B   E0           MOVX    A,@DPTR
   \   00008C   F5..         MOV     ?V2,A
   \   00008E   A3           INC     DPTR
   \   00008F   E0           MOVX    A,@DPTR
   \   000090   F5..         MOV     ?V3,A
    644              }
    645          
    646              // New item is the first one written to the reserved page, then the old page is compacted.
    647              rtrn = writeItem( pg, id, len, buf, flag );
   \   000092                ; Setup parameters for call to function writeItem
   \   000092   E5..         MOV     A,?V0
   \   000094   F5..         MOV     ?V1,A
   \   000096   78..         MOV     R0,#?V1
   \   000098   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00009B   78..         MOV     R0,#?V2
   \   00009D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A0   AA..         MOV     R2,?V6
   \   0000A2   AB..         MOV     R3,?V7
   \   0000A4   EE           MOV     A,R6
   \   0000A5   F9           MOV     R1,A
   \   0000A6   12....       LCALL   `??writeItem::?relay`; Banked call to: writeItem
   \   0000A9   7403         MOV     A,#0x3
   \   0000AB   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000AE   E9           MOV     A,R1
   \   0000AF   F5..         MOV     ?V1,A
    648          
    649              if ( pg == pgRes )
   \   0000B1   90....       MOV     DPTR,#pgRes
   \   0000B4   E0           MOVX    A,@DPTR
   \   0000B5   6E           XRL     A,R6
   \   0000B6   7015         JNZ     ??initItem_4
    650              {
    651                if ( flag )
   \   0000B8   7479         MOV     A,#0x79
   \   0000BA   2F           ADD     A,R7
   \   0000BB   F9           MOV     R1,A
   \   0000BC   E5..         MOV     A,?V0
   \   0000BE   6005         JZ      ??initItem_6
    652                {
    653                  compactPage( OSAL_NV_PAGE_BEG+idx );
   \   0000C0                ; Setup parameters for call to function compactPage
   \   0000C0   12....       LCALL   `??compactPage::?relay`; Banked call to: compactPage
   \   0000C3   8008         SJMP    ??initItem_4
    654                }
    655                else
    656                {
    657                  *(uint8 *)buf = OSAL_NV_PAGE_BEG+idx;
   \                     ??initItem_6:
   \   0000C5   E9           MOV     A,R1
   \   0000C6   85..82       MOV     DPL,?V2
   \   0000C9   85..83       MOV     DPH,?V3
   \   0000CC   F0           MOVX    @DPTR,A
    658                }
    659              }
    660            }
    661          
    662            return rtrn;
   \                     ??initItem_4:
   \   0000CD   A9..         MOV     R1,?V1
   \   0000CF   02....       LJMP    ??Subroutine44_0 & 0xFFFF
    663          }
    664          
    665          /*********************************************************************
    666           * @fn      setItem
    667           *
    668           * @brief   Set an item Id or status to mark its state.
    669           *
    670           * @param   pg - Valid NV page.
    671           * @param   offset - Valid offset into the page of the item data - the header
    672           *                   offset is calculated from this.
    673           * @param   stat - Valid enum value for the item status.
    674           *
    675           * @return  none
    676           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    677          static void setItem( uint8 pg, uint16 offset, eNvHdrEnum stat )
   \                     setItem:
    678          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV     A,#-0x8
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V2,R1
   \   00000C   8C..         MOV     ?V3,R4
    679            osalNvHdr_t hdr;
    680          
    681            offset -= OSAL_NV_HDR_SIZE;
   \   00000E   EA           MOV     A,R2
   \   00000F   24F8         ADD     A,#-0x8
   \   000011   F5..         MOV     ?V0,A
   \   000013   EB           MOV     A,R3
   \   000014   34FF         ADDC    A,#-0x1
   \   000016   F5..         MOV     ?V1,A
    682            HalFlashRead(pg, offset, (uint8 *)(&hdr), OSAL_NV_HDR_SIZE);
   \   000018                ; Setup parameters for call to function HalFlashRead
   \   000018   75..08       MOV     ?V4,#0x8
   \   00001B   75..00       MOV     ?V5,#0x0
   \   00001E   78..         MOV     R0,#?V4
   \   000020   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000023   7402         MOV     A,#0x2
   \   000025   12....       LCALL   ?XSTACK_DISP102_8
   \   000028   AA..         MOV     R2,?V0
   \   00002A   AB..         MOV     R3,?V1
   \   00002C   12....       LCALL   `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   00002F   7402         MOV     A,#0x2
   \   000031   12....       LCALL   ?DEALLOC_XSTACK8
    683          
    684            if ( stat == eNvXfer )
   \   000034   E5..         MOV     A,?V3
   \   000036   7022         JNZ     ??setItem_0
    685            {
    686              hdr.stat = OSAL_NV_ACTIVE;
   \   000038   7406         MOV     A,#0x6
   \   00003A   12....       LCALL   ?XSTACK_DISP0_8
   \   00003D   E4           CLR     A
   \   00003E   F0           MOVX    @DPTR,A
   \   00003F   A3           INC     DPTR
   \   000040   F0           MOVX    @DPTR,A
    687              writeWord( pg, offset+OSAL_NV_HDR_CHK, (uint8*)(&(hdr.chk)) );
   \   000041                ; Setup parameters for call to function writeWord
   \   000041   7404         MOV     A,#0x4
   \   000043   12....       LCALL   ?XSTACK_DISP0_8
   \   000046   AC82         MOV     R4,DPL
   \   000048   AD83         MOV     R5,DPH
   \   00004A   E5..         MOV     A,?V0
   \   00004C   2404         ADD     A,#0x4
   \   00004E   FA           MOV     R2,A
   \   00004F   E4           CLR     A
   \   000050   35..         ADDC    A,?V1
   \   000052   FB           MOV     R3,A
   \   000053   A9..         MOV     R1,?V2
   \   000055   12....       LCALL   `??writeWord::?relay`; Banked call to: writeWord
   \   000058   802A         SJMP    ??setItem_1
    688          }
    689            else // if ( stat == eNvZero )
    690            {
    691              uint16 sz = ((hdr.len + (OSAL_NV_WORD_SIZE-1)) / OSAL_NV_WORD_SIZE) * OSAL_NV_WORD_SIZE +
    692                                                                                    OSAL_NV_HDR_SIZE;
   \                     ??setItem_0:
   \   00005A   7402         MOV     A,#0x2
   \   00005C   12....       LCALL   ?XSTACK_DISP0_8
   \   00005F   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   000062   FE           MOV     R6,A
   \   000063   E4           CLR     A
   \   000064   39           ADDC    A,R1
   \   000065   FF           MOV     R7,A
    693              hdr.id = 0;
   \   000066   12....       LCALL   ?Subroutine6 & 0xFFFF
    694              writeWord( pg, offset, (uint8 *)(&hdr) );
   \                     ??CrossCallReturnLabel_84:
   \   000069   AA..         MOV     R2,?V0
   \   00006B   AB..         MOV     R3,?V1
   \   00006D   A9..         MOV     R1,?V2
   \   00006F   12....       LCALL   `??writeWord::?relay`; Banked call to: writeWord
    695              pgLost[pg-OSAL_NV_PAGE_BEG] += sz;
   \   000072   A8..         MOV     R0,?V2
   \   000074   E8           MOV     A,R0
   \   000075   28           ADD     A,R0
   \   000076   F8           MOV     R0,A
   \   000077   E4           CLR     A
   \   000078   33           RLC     A
   \   000079   F9           MOV     R1,A
   \   00007A   12....       LCALL   ?Subroutine35 & 0xFFFF
    696            }
   \                     ??CrossCallReturnLabel_66:
   \   00007D   E0           MOVX    A,@DPTR
   \   00007E   2E           ADD     A,R6
   \   00007F   F0           MOVX    @DPTR,A
   \   000080   A3           INC     DPTR
   \   000081   E0           MOVX    A,@DPTR
   \   000082   3F           ADDC    A,R7
   \   000083   F0           MOVX    @DPTR,A
    697          }
   \                     ??setItem_1:
   \   000084   7408         MOV     A,#0x8
   \   000086   02....       LJMP    ?Subroutine3 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   000003   2408         ADD     A,#0x8
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   2403         ADD     A,#0x3
   \   000003   F8           MOV     R0,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   3400         ADDC    A,#0x0
   \   000008   F9           MOV     R1,A
   \   000009   E8           MOV     A,R0
   \   00000A   54FC         ANL     A,#0xfc
   \   00000C   22           RET
    698          
    699          /*********************************************************************
    700           * @fn      calcChkB
    701           *
    702           * @brief   Calculates the data checksum over the 'buf' parameter.
    703           *
    704           * @param   pg - A valid NV Flash page.
    705           * @param   offset - A valid offset into the page.
    706           * @param   len - Byte count of the data to be checksummed.
    707           *
    708           * @return  Calculated checksum of the data bytes.
    709           */
    710          static uint16 calcChkB( uint16 len, uint8 *buf )
    711          {
    712            uint8 fill = len % OSAL_NV_WORD_SIZE;
    713            uint16 chk;
    714          
    715            if ( !buf )
    716            {
    717              chk = len * OSAL_NV_ERASED;
    718            }
    719            else
    720            {
    721              chk = 0;
    722              while ( len-- )
    723              {
    724                chk += *buf++;
    725              }
    726            }
    727          
    728            // calcChkF() will calculate over OSAL_NV_WORD_SIZE alignment.
    729            if ( fill )
    730            {
    731              chk += (OSAL_NV_WORD_SIZE - fill) * OSAL_NV_ERASED;
    732            }
    733          
    734            return chk;
    735          }
    736          
    737          /*********************************************************************
    738           * @fn      calcChkF
    739           *
    740           * @brief   Calculates the data checksum by reading the data bytes from NV.
    741           *
    742           * @param   pg - A valid NV Flash page.
    743           * @param   offset - A valid offset into the page.
    744           * @param   len - Byte count of the data to be checksummed.
    745           *
    746           * @return  Calculated checksum of the data bytes.
    747           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    748          static uint16 calcChkF( byte pg, uint16 offset, uint16 len )
   \                     calcChkF:
    749          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V6,R1
   \   00000C   8A..         MOV     ?V0,R2
   \   00000E   8B..         MOV     ?V1,R3
   \   000010   EC           MOV     A,R4
   \   000011   FE           MOV     R6,A
   \   000012   ED           MOV     A,R5
   \   000013   FF           MOV     R7,A
    750            uint16 chk = 0;
   \   000014   75..00       MOV     ?V2,#0x0
   \   000017   75..00       MOV     ?V3,#0x0
    751          
    752            len = (len + (OSAL_NV_WORD_SIZE-1)) / OSAL_NV_WORD_SIZE;
   \   00001A   EE           MOV     A,R6
   \   00001B   2403         ADD     A,#0x3
   \   00001D   F5..         MOV     ?V4,A
   \   00001F   E4           CLR     A
   \   000020   3F           ADDC    A,R7
   \   000021   F5..         MOV     ?V5,A
   \   000023   7402         MOV     A,#0x2
   \   000025   78..         MOV     R0,#?V4
   \   000027   12....       LCALL   ?US_SHR
   \   00002A   AE..         MOV     R6,?V4
   \   00002C   AF..         MOV     R7,?V5
    753          
    754            while ( len-- )
   \                     ??calcChkF_0:
   \   00002E   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_56:
   \   000031   603C         JZ      ??calcChkF_1
    755            {
    756              uint8 cnt, tmp[OSAL_NV_WORD_SIZE];
    757          
    758              HalFlashRead(pg, offset, tmp, OSAL_NV_WORD_SIZE);
   \   000033                ; Setup parameters for call to function HalFlashRead
   \   000033   75..04       MOV     ?V4,#0x4
   \   000036   75..00       MOV     ?V5,#0x0
   \   000039   78..         MOV     R0,#?V4
   \   00003B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003E   7402         MOV     A,#0x2
   \   000040   12....       LCALL   ?XSTACK_DISP102_8
   \   000043   AA..         MOV     R2,?V0
   \   000045   AB..         MOV     R3,?V1
   \   000047   A9..         MOV     R1,?V6
   \   000049   12....       LCALL   `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   00004C   7402         MOV     A,#0x2
   \   00004E   12....       LCALL   ?DEALLOC_XSTACK8
    759              offset += OSAL_NV_WORD_SIZE;
   \   000051   12....       LCALL   ?Subroutine29 & 0xFFFF
    760          
    761              for ( cnt = 0; cnt < OSAL_NV_WORD_SIZE; cnt++ )
   \                     ??CrossCallReturnLabel_52:
   \   000054   7A00         MOV     R2,#0x0
    762              {
    763                chk += tmp[cnt];
   \                     ??calcChkF_2:
   \   000056   EA           MOV     A,R2
   \   000057   12....       LCALL   ?Subroutine25 & 0xFFFF
    764              }
   \                     ??CrossCallReturnLabel_87:
   \   00005A   E0           MOVX    A,@DPTR
   \   00005B   F8           MOV     R0,A
   \   00005C   E5..         MOV     A,?V2
   \   00005E   28           ADD     A,R0
   \   00005F   F5..         MOV     ?V2,A
   \   000061   E4           CLR     A
   \   000062   35..         ADDC    A,?V3
   \   000064   F5..         MOV     ?V3,A
   \   000066   0A           INC     R2
   \   000067   EA           MOV     A,R2
   \   000068   C3           CLR     C
   \   000069   9404         SUBB    A,#0x4
   \   00006B   50C1         JNC     ??calcChkF_0
   \   00006D   80E7         SJMP    ??calcChkF_2
    765            }
    766          
    767            return chk;
   \                     ??calcChkF_1:
   \   00006F   AA..         MOV     R2,?V2
   \   000071   AB..         MOV     R3,?V3
   \   000073   7404         MOV     A,#0x4
   \   000075                REQUIRE ?Subroutine4
   \   000075                ; // Fall through to label ?Subroutine4
    768          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F07         MOV     R7,#0x7
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   F8           MOV     R0,A
   \   000001                REQUIRE ??Subroutine42_0
   \   000001                ; // Fall through to label ??Subroutine42_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine42_0:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006   E582         MOV     A,DPL
   \   000008   28           ADD     A,R0
   \   000009   F582         MOV     DPL,A
   \   00000B   E4           CLR     A
   \   00000C   3583         ADDC    A,DPH
   \   00000E   F583         MOV     DPH,A
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   E5..         MOV     A,?V0
   \   000002   2404         ADD     A,#0x4
   \   000004   F5..         MOV     ?V0,A
   \   000006   E4           CLR     A
   \   000007   35..         ADDC    A,?V1
   \   000009   F5..         MOV     ?V1,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   EE           MOV     A,R6
   \   000001   F8           MOV     R0,A
   \   000002   EF           MOV     A,R7
   \   000003   F9           MOV     R1,A
   \   000004   E8           MOV     A,R0
   \   000005   24FF         ADD     A,#-0x1
   \   000007   1E           DEC     R6
   \   000008   E9           MOV     A,R1
   \   000009   34FF         ADDC    A,#-0x1
   \   00000B   FF           MOV     R7,A
   \   00000C   E8           MOV     A,R0
   \   00000D   49           ORL     A,R1
   \   00000E   22           RET
    769          
    770          /*********************************************************************
    771           * @fn      writeWord
    772           *
    773           * @brief   Writes a Flash-WORD to NV.
    774           *
    775           * @param   pg - A valid NV Flash page.
    776           * @param   offset - A valid offset into the page.
    777           * @param   buf - Pointer to source buffer.
    778           *
    779           * @return  none
    780           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    781          static void writeWord( uint8 pg, uint16 offset, uint8 *buf )
   \                     writeWord:
    782          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V2,R1
   \   000007   8A..         MOV     ?V0,R2
   \   000009   8B..         MOV     ?V1,R3
   \   00000B   EC           MOV     A,R4
   \   00000C   FE           MOV     R6,A
   \   00000D   ED           MOV     A,R5
   \   00000E   FF           MOV     R7,A
    783            offset = (offset >> 2) + ((uint16)pg << 9);
    784          
    785            if ( OSAL_NV_CHECK_BUS_VOLTAGE )
   \   00000F                ; Setup parameters for call to function HalAdcCheckVdd
   \   00000F   7904         MOV     R1,#0x4
   \   000011   12....       LCALL   `??HalAdcCheckVdd::?relay`; Banked call to: HalAdcCheckVdd
   \   000014   E9           MOV     A,R1
   \   000015   6034         JZ      ??writeWord_0
    786            {
    787              HalFlashWrite(offset, buf, 1);
   \   000017                ; Setup parameters for call to function HalFlashWrite
   \   000017   75..01       MOV     ?V4,#0x1
   \   00001A   75..00       MOV     ?V5,#0x0
   \   00001D   78..         MOV     R0,#?V4
   \   00001F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000022   EE           MOV     A,R6
   \   000023   FC           MOV     R4,A
   \   000024   EF           MOV     A,R7
   \   000025   FD           MOV     R5,A
   \   000026   7402         MOV     A,#0x2
   \   000028   78..         MOV     R0,#?V0
   \   00002A   12....       LCALL   ?US_SHR
   \   00002D   85....       MOV     ?V4,?V2
   \   000030   7409         MOV     A,#0x9
   \   000032   78..         MOV     R0,#?V4
   \   000034   12....       LCALL   ?S_SHL
   \   000037   E5..         MOV     A,?V0
   \   000039   2400         ADD     A,#0x0
   \   00003B   FA           MOV     R2,A
   \   00003C   E5..         MOV     A,?V1
   \   00003E   35..         ADDC    A,?V5
   \   000040   FB           MOV     R3,A
   \   000041   12....       LCALL   `??HalFlashWrite::?relay`; Banked call to: HalFlashWrite
   \   000044   7402         MOV     A,#0x2
   \   000046   12....       LCALL   ?DEALLOC_XSTACK8
   \   000049   8006         SJMP    ??writeWord_1
    788            }
    789            else
    790            {
    791              failF = TRUE;
   \                     ??writeWord_0:
   \   00004B   90....       MOV     DPTR,#failF
   \   00004E   7401         MOV     A,#0x1
   \   000050   F0           MOVX    @DPTR,A
    792            }
    793          }
   \                     ??writeWord_1:
   \   000051   02....       LJMP    ??Subroutine38_0 & 0xFFFF
    794          
    795          /*********************************************************************
    796           * @fn      writeWordM
    797           *
    798           * @brief   Writes multiple Flash-WORDs to NV.
    799           *
    800           * @param   pg - A valid NV Flash page.
    801           * @param   offset - A valid offset into the page.
    802           * @param   buf - Pointer to source buffer.
    803           * @param   cnt - Number of 4-byte blocks to write.
    804           *
    805           * @return  none
    806           */
    807          static void writeWordM( uint8 pg, uint16 offset, uint8 *buf, uint16 cnt )
    808          {
    809            offset = (offset >> 2) + ((uint16)pg << 9);
    810          
    811            if ( OSAL_NV_CHECK_BUS_VOLTAGE )
    812            {
    813              HalFlashWrite(offset, buf, cnt);
    814            }
    815            else
    816            {
    817              failF = TRUE;
    818            }
    819          }
    820          
    821          /*********************************************************************
    822           * @fn      writeWordH
    823           *
    824           * @brief   Writes the 1st half of a Flash-WORD to NV (filling 2nd half with 0xffff).
    825           *
    826           * @param   pg - A valid NV Flash page.
    827           * @param   offset - A valid offset into the page.
    828           * @param   buf - Pointer to source buffer.
    829           *
    830           * @return  none
    831           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    832          static void writeWordH( uint8 pg, uint16 offset, uint8 *buf )
   \                     writeWordH:
    833          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    834            uint8 tmp[4];
    835          
    836            tmp[0] = buf[0];
   \   00000A   8C82         MOV     DPL,R4
   \   00000C   8D83         MOV     DPH,R5
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   85..82       MOV     DPL,?XSP + 0
   \   000012   85..83       MOV     DPH,?XSP + 1
   \   000015   F0           MOVX    @DPTR,A
    837            tmp[1] = buf[1];
   \   000016   8C82         MOV     DPL,R4
   \   000018   8D83         MOV     DPH,R5
   \   00001A   A3           INC     DPTR
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   C0E0         PUSH    A
   \   00001E   7401         MOV     A,#0x1
   \   000020   12....       LCALL   ?XSTACK_DISP0_8
   \   000023   D0E0         POP     A
   \   000025   F0           MOVX    @DPTR,A
    838            tmp[2] = OSAL_NV_ERASED;
   \   000026   7402         MOV     A,#0x2
   \   000028   12....       LCALL   ?XSTACK_DISP0_8
   \   00002B   74FF         MOV     A,#-0x1
   \   00002D   F0           MOVX    @DPTR,A
    839            tmp[3] = OSAL_NV_ERASED;
   \   00002E   7403         MOV     A,#0x3
   \   000030   12....       LCALL   ?XSTACK_DISP0_8
   \   000033   74FF         MOV     A,#-0x1
   \   000035   F0           MOVX    @DPTR,A
    840          
    841            writeWord( pg, offset, tmp );
   \   000036                ; Setup parameters for call to function writeWord
   \   000036   AC..         MOV     R4,?XSP + 0
   \   000038   AD..         MOV     R5,?XSP + 1
   \   00003A   12....       LCALL   `??writeWord::?relay`; Banked call to: writeWord
    842          }
   \   00003D   7404         MOV     A,#0x4
   \   00003F   02....       LJMP    ?Subroutine1 & 0xFFFF
    843          
    844          /*********************************************************************
    845           * @fn      writeBuf
    846           *
    847           * @brief   Writes a data buffer to NV.
    848           *
    849           * @param   dstPg - A valid NV Flash page.
    850           * @param   offset - A valid offset into the page.
    851           * @param   len  - Byte count of the data to write.
    852           * @param   buf  - The data to write.
    853           *
    854           * @return  TRUE if data buf checksum matches read back checksum, else FALSE.
    855           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    856          static void writeBuf( uint8 dstPg, uint16 dstOff, uint16 len, uint8 *buf )
   \                     writeBuf:
    857          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V7,R1
   \   00000C   8A..         MOV     ?V0,R2
   \   00000E   8B..         MOV     ?V1,R3
   \   000010   EC           MOV     A,R4
   \   000011   FE           MOV     R6,A
   \   000012   ED           MOV     A,R5
   \   000013   FF           MOV     R7,A
    858            uint8 rem = dstOff % OSAL_NV_WORD_SIZE;
   \   000014   EA           MOV     A,R2
   \   000015   5403         ANL     A,#0x3
   \   000017   F5..         MOV     ?V6,A
    859            uint8 tmp[OSAL_NV_WORD_SIZE];
    860          
    861            if ( rem )
   \   000019   6065         JZ      ??CrossCallReturnLabel_53
    862            {
    863              dstOff = (dstOff / OSAL_NV_WORD_SIZE) * OSAL_NV_WORD_SIZE;
   \   00001B   74FC         MOV     A,#-0x4
   \   00001D   55..         ANL     A,?V0
   \   00001F   F5..         MOV     ?V0,A
    864              HalFlashRead(dstPg, dstOff, tmp, OSAL_NV_WORD_SIZE);
   \   000021                ; Setup parameters for call to function HalFlashRead
   \   000021   75..04       MOV     ?V2,#0x4
   \   000024   75..00       MOV     ?V3,#0x0
   \   000027   78..         MOV     R0,#?V2
   \   000029   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002C   7402         MOV     A,#0x2
   \   00002E   12....       LCALL   ?XSTACK_DISP102_8
   \   000031   AA..         MOV     R2,?V0
   \   000033   12....       LCALL   `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   000036   7402         MOV     A,#0x2
   \   000038   12....       LCALL   ?DEALLOC_XSTACK8
   \                     ??writeBuf_0:
   \   00003B   EE           MOV     A,R6
   \   00003C   4F           ORL     A,R7
   \   00003D   6031         JZ      ??writeBuf_1
    865          
    866              while ( (rem < OSAL_NV_WORD_SIZE) && len )
    867              {
    868                tmp[rem++] = *buf++;
   \   00003F   7414         MOV     A,#0x14
   \   000041   12....       LCALL   ?XSTACK_DISP0_8
   \   000044   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   000047   C0E0         PUSH    A
   \   000049   A8..         MOV     R0,?V6
   \   00004B   12....       LCALL   ??Subroutine42_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_86:
   \   00004E   D0E0         POP     A
   \   000050   F0           MOVX    @DPTR,A
   \   000051   7414         MOV     A,#0x14
   \   000053   12....       LCALL   ?XSTACK_DISP0_8
   \   000056   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   000059   12....       LCALL   ?XSTACK_DISP0_8
   \   00005C   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   00005F   05..         INC     ?V6
    869                len--;
   \   000061   EE           MOV     A,R6
   \   000062   24FF         ADD     A,#-0x1
   \   000064   1E           DEC     R6
   \   000065   EF           MOV     A,R7
   \   000066   34FF         ADDC    A,#-0x1
   \   000068   FF           MOV     R7,A
    870              }
   \   000069   E5..         MOV     A,?V6
   \   00006B   C3           CLR     C
   \   00006C   9404         SUBB    A,#0x4
   \   00006E   40CB         JC      ??writeBuf_0
    871          
    872              writeWord( dstPg, dstOff, tmp );
   \                     ??writeBuf_1:
   \   000070                ; Setup parameters for call to function writeWord
   \   000070   AC..         MOV     R4,?XSP + 0
   \   000072   AD..         MOV     R5,?XSP + 1
   \   000074   AA..         MOV     R2,?V0
   \   000076   AB..         MOV     R3,?V1
   \   000078   A9..         MOV     R1,?V7
   \   00007A   12....       LCALL   `??writeWord::?relay`; Banked call to: writeWord
    873              dstOff += OSAL_NV_WORD_SIZE;
   \   00007D   12....       LCALL   ?Subroutine29 & 0xFFFF
    874            }
    875          
    876            rem = len % OSAL_NV_WORD_SIZE;
   \                     ??CrossCallReturnLabel_53:
   \   000080   EE           MOV     A,R6
   \   000081   5403         ANL     A,#0x3
   \   000083   F5..         MOV     ?V6,A
    877            len /= OSAL_NV_WORD_SIZE;
   \   000085   8E..         MOV     ?V2,R6
   \   000087   8F..         MOV     ?V3,R7
   \   000089   7402         MOV     A,#0x2
   \   00008B   78..         MOV     R0,#?V2
   \   00008D   12....       LCALL   ?US_SHR
   \   000090   AE..         MOV     R6,?V2
   \   000092   AF..         MOV     R7,?V3
    878          
    879            if ( len )
   \   000094   EE           MOV     A,R6
   \   000095   4F           ORL     A,R7
   \   000096   6075         JZ      ??CrossCallReturnLabel_3
    880            {
    881              writeWordM( dstPg, dstOff, buf, len );
   \   000098                ; Setup parameters for call to function HalAdcCheckVdd
   \   000098   7904         MOV     R1,#0x4
   \   00009A   12....       LCALL   `??HalAdcCheckVdd::?relay`; Banked call to: HalAdcCheckVdd
   \   00009D   E9           MOV     A,R1
   \   00009E   603A         JZ      ??writeBuf_2
   \   0000A0                ; Setup parameters for call to function HalFlashWrite
   \   0000A0   78..         MOV     R0,#?V2
   \   0000A2   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A5   7416         MOV     A,#0x16
   \   0000A7   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AA   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   0000AD   85....       MOV     ?V2,?V0
   \   0000B0   85....       MOV     ?V3,?V1
   \   0000B3   7402         MOV     A,#0x2
   \   0000B5   78..         MOV     R0,#?V2
   \   0000B7   12....       LCALL   ?US_SHR
   \   0000BA   85....       MOV     ?V4,?V7
   \   0000BD   F5..         MOV     ?V5,A
   \   0000BF   7409         MOV     A,#0x9
   \   0000C1   78..         MOV     R0,#?V4
   \   0000C3   12....       LCALL   ?S_SHL
   \   0000C6   E5..         MOV     A,?V2
   \   0000C8   2400         ADD     A,#0x0
   \   0000CA   FA           MOV     R2,A
   \   0000CB   E5..         MOV     A,?V3
   \   0000CD   35..         ADDC    A,?V5
   \   0000CF   FB           MOV     R3,A
   \   0000D0   12....       LCALL   `??HalFlashWrite::?relay`; Banked call to: HalFlashWrite
   \   0000D3   7402         MOV     A,#0x2
   \   0000D5   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000D8   8006         SJMP    ??writeBuf_3
   \                     ??writeBuf_2:
   \   0000DA   90....       MOV     DPTR,#failF
   \   0000DD   7401         MOV     A,#0x1
   \   0000DF   F0           MOVX    @DPTR,A
    882              dstOff += OSAL_NV_WORD_SIZE * len;
   \                     ??writeBuf_3:
   \   0000E0   8E..         MOV     ?V2,R6
   \   0000E2   8F..         MOV     ?V3,R7
   \   0000E4   7402         MOV     A,#0x2
   \   0000E6   78..         MOV     R0,#?V2
   \   0000E8   12....       LCALL   ?S_SHL
   \   0000EB   A8..         MOV     R0,?V2
   \   0000ED   A9..         MOV     R1,?V3
   \   0000EF   E5..         MOV     A,?V0
   \   0000F1   28           ADD     A,R0
   \   0000F2   F5..         MOV     ?V0,A
   \   0000F4   E5..         MOV     A,?V1
   \   0000F6   39           ADDC    A,R1
   \   0000F7   F5..         MOV     ?V1,A
    883              buf += OSAL_NV_WORD_SIZE * len;
   \   0000F9   7414         MOV     A,#0x14
   \   0000FB   12....       LCALL   ?XSTACK_DISP0_8
   \   0000FE   E0           MOVX    A,@DPTR
   \   0000FF   28           ADD     A,R0
   \   000100   F8           MOV     R0,A
   \   000101   A3           INC     DPTR
   \   000102   E0           MOVX    A,@DPTR
   \   000103   39           ADDC    A,R1
   \   000104   F9           MOV     R1,A
   \   000105   7414         MOV     A,#0x14
   \   000107   12....       LCALL   ?XSTACK_DISP0_8
   \   00010A   12....       LCALL   ?Subroutine8 & 0xFFFF
    884            }
    885          
    886            if ( rem )
   \                     ??CrossCallReturnLabel_3:
   \   00010D   E5..         MOV     A,?V6
   \   00010F   6058         JZ      ??writeBuf_4
    887            {
    888              uint8 idx = 0;
   \   000111   7E00         MOV     R6,#0x0
    889              HalFlashRead(dstPg, dstOff, tmp, OSAL_NV_WORD_SIZE);
   \   000113                ; Setup parameters for call to function HalFlashRead
   \   000113   75..04       MOV     ?V2,#0x4
   \   000116   8E..         MOV     ?V3,R6
   \   000118   78..         MOV     R0,#?V2
   \   00011A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00011D   7402         MOV     A,#0x2
   \   00011F   12....       LCALL   ?XSTACK_DISP102_8
   \   000122   AA..         MOV     R2,?V0
   \   000124   AB..         MOV     R3,?V1
   \   000126   A9..         MOV     R1,?V7
   \   000128   12....       LCALL   `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   00012B   7402         MOV     A,#0x2
   \   00012D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000130   8020         SJMP    ??writeBuf_5
    890              while ( rem-- )
    891              {
    892                tmp[idx++] = *buf++;
   \                     ??writeBuf_6:
   \   000132   7414         MOV     A,#0x14
   \   000134   12....       LCALL   ?XSTACK_DISP0_8
   \   000137   12....       LCALL   ?Subroutine14 & 0xFFFF
    893              }
   \                     ??CrossCallReturnLabel_18:
   \   00013A   C0E0         PUSH    A
   \   00013C   EE           MOV     A,R6
   \   00013D   12....       LCALL   ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_88:
   \   000140   D0E0         POP     A
   \   000142   F0           MOVX    @DPTR,A
   \   000143   7414         MOV     A,#0x14
   \   000145   12....       LCALL   ?XSTACK_DISP0_8
   \   000148   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   00014B   12....       LCALL   ?XSTACK_DISP0_8
   \   00014E   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   000151   0E           INC     R6
   \                     ??writeBuf_5:
   \   000152   AF..         MOV     R7,?V6
   \   000154   74FF         MOV     A,#-0x1
   \   000156   2F           ADD     A,R7
   \   000157   F5..         MOV     ?V6,A
   \   000159   04           INC     A
   \   00015A   70D6         JNZ     ??writeBuf_6
    894              writeWord( dstPg, dstOff, tmp );
   \   00015C                ; Setup parameters for call to function writeWord
   \   00015C   AC..         MOV     R4,?XSP + 0
   \   00015E   AD..         MOV     R5,?XSP + 1
   \   000160   AA..         MOV     R2,?V0
   \   000162   AB..         MOV     R3,?V1
   \   000164   A9..         MOV     R1,?V7
   \   000166   12....       LCALL   `??writeWord::?relay`; Banked call to: writeWord
    895            }
    896          }
   \                     ??writeBuf_4:
   \   000169   7404         MOV     A,#0x4
   \   00016B   02....       LJMP    ?Subroutine2 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   2401         ADD     A,#0x1
   \   000003   F8           MOV     R0,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   3400         ADDC    A,#0x0
   \   000008   F9           MOV     R1,A
   \   000009   7414         MOV     A,#0x14
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   12....       LCALL   ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   E8           MOV     A,R0
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   E9           MOV     A,R1
   \   000004   F0           MOVX    @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F583         MOV     DPH,A
   \   000006   8882         MOV     DPL,R0
   \   000008   22           RET
    897          
    898          /*********************************************************************
    899           * @fn      xferBuf
    900           *
    901           * @brief   Xfers an NV buffer from one location to another, enforcing OSAL_NV_WORD_SIZE writes.
    902           *
    903           * @return  none
    904           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    905          static void xferBuf( uint8 srcPg, uint16 srcOff, uint8 dstPg, uint16 dstOff, uint16 len )
   \                     xferBuf:
    906          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV     A,#-0x5
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   F0           MOVX    @DPTR,A
   \   000012   8A..         MOV     ?V6,R2
   \   000014   8B..         MOV     ?V7,R3
   \   000016   8C..         MOV     ?V3,R4
   \   000018   7415         MOV     A,#0x15
   \   00001A   12....       LCALL   ?XSTACK_DISP0_8
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   F5..         MOV     ?V0,A
   \   000020   A3           INC     DPTR
   \   000021   E0           MOVX    A,@DPTR
   \   000022   F5..         MOV     ?V1,A
    907            uint8 rem = dstOff % OSAL_NV_WORD_SIZE;
   \   000024   E5..         MOV     A,?V0
   \   000026   5403         ANL     A,#0x3
   \   000028   F5..         MOV     ?V2,A
   \   00002A   7417         MOV     A,#0x17
   \   00002C   12....       LCALL   ?XSTACK_DISP0_8
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   FE           MOV     R6,A
   \   000031   A3           INC     DPTR
   \   000032   E0           MOVX    A,@DPTR
   \   000033   FF           MOV     R7,A
    908            uint8 tmp[OSAL_NV_WORD_SIZE];
    909          
    910            if ( rem )
   \   000034   E5..         MOV     A,?V2
   \   000036   6078         JZ      ??CrossCallReturnLabel_54
    911            {
    912              dstOff -= rem;
   \   000038   F8           MOV     R0,A
   \   000039   C3           CLR     C
   \   00003A   E5..         MOV     A,?V0
   \   00003C   98           SUBB    A,R0
   \   00003D   F5..         MOV     ?V0,A
   \   00003F   E5..         MOV     A,?V1
   \   000041   9400         SUBB    A,#0x0
   \   000043   F5..         MOV     ?V1,A
    913              HalFlashRead(dstPg, dstOff, tmp, OSAL_NV_WORD_SIZE);
   \   000045                ; Setup parameters for call to function HalFlashRead
   \   000045   75..04       MOV     ?V4,#0x4
   \   000048   75..00       MOV     ?V5,#0x0
   \   00004B   78..         MOV     R0,#?V4
   \   00004D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000050   7403         MOV     A,#0x3
   \   000052   12....       LCALL   ?XSTACK_DISP102_8
   \   000055   AA..         MOV     R2,?V0
   \   000057   AB..         MOV     R3,?V1
   \   000059   A9..         MOV     R1,?V3
   \   00005B   12....       LCALL   `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   00005E   7402         MOV     A,#0x2
   \   000060   12....       LCALL   ?DEALLOC_XSTACK8
   \                     ??xferBuf_0:
   \   000063   EE           MOV     A,R6
   \   000064   4F           ORL     A,R7
   \   000065   6038         JZ      ??xferBuf_1
    914          
    915              while ( (rem < OSAL_NV_WORD_SIZE) && len )
    916              {
    917                HalFlashRead(srcPg, srcOff, tmp+rem, 1);
   \   000067                ; Setup parameters for call to function HalFlashRead
   \   000067   75..01       MOV     ?V4,#0x1
   \   00006A   78..         MOV     R0,#?V4
   \   00006C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00006F   A8..         MOV     R0,?V2
   \   000071   7403         MOV     A,#0x3
   \   000073   12....       LCALL   ?XSTACK_DISP0_8
   \   000076   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_48:
   \   000079   12....       LCALL   ?XSTACK_DISP0_8
   \   00007C   E0           MOVX    A,@DPTR
   \   00007D   F9           MOV     R1,A
   \   00007E   12....       LCALL   `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   000081   7402         MOV     A,#0x2
   \   000083   12....       LCALL   ?DEALLOC_XSTACK8
    918                srcOff++;
   \   000086   05..         INC     ?V6
   \   000088   E5..         MOV     A,?V6
   \   00008A   7002         JNZ     ??xferBuf_2
   \   00008C   05..         INC     ?V7
    919                rem++;
   \                     ??xferBuf_2:
   \   00008E   05..         INC     ?V2
    920                len--;
   \   000090   EE           MOV     A,R6
   \   000091   24FF         ADD     A,#-0x1
   \   000093   1E           DEC     R6
   \   000094   EF           MOV     A,R7
   \   000095   34FF         ADDC    A,#-0x1
   \   000097   FF           MOV     R7,A
    921              }
   \   000098   E5..         MOV     A,?V2
   \   00009A   C3           CLR     C
   \   00009B   9404         SUBB    A,#0x4
   \   00009D   40C4         JC      ??xferBuf_0
    922          
    923              writeWord( dstPg, dstOff, tmp );
   \                     ??xferBuf_1:
   \   00009F                ; Setup parameters for call to function writeWord
   \   00009F   7401         MOV     A,#0x1
   \   0000A1   12....       LCALL   ?XSTACK_DISP102_8
   \   0000A4   AA..         MOV     R2,?V0
   \   0000A6   AB..         MOV     R3,?V1
   \   0000A8   A9..         MOV     R1,?V3
   \   0000AA   12....       LCALL   `??writeWord::?relay`; Banked call to: writeWord
    924              dstOff += OSAL_NV_WORD_SIZE;
   \   0000AD   12....       LCALL   ?Subroutine29 & 0xFFFF
    925            }
    926          
    927            rem = len % OSAL_NV_WORD_SIZE;
   \                     ??CrossCallReturnLabel_54:
   \   0000B0   EE           MOV     A,R6
   \   0000B1   5403         ANL     A,#0x3
   \   0000B3   F5..         MOV     ?V2,A
    928            len /= OSAL_NV_WORD_SIZE;
   \   0000B5   8E..         MOV     ?V4,R6
   \   0000B7   8F..         MOV     ?V5,R7
   \   0000B9   7402         MOV     A,#0x2
   \   0000BB   78..         MOV     R0,#?V4
   \   0000BD   12....       LCALL   ?US_SHR
   \   0000C0   AE..         MOV     R6,?V4
   \   0000C2   AF..         MOV     R7,?V5
   \   0000C4   803F         SJMP    ??CrossCallReturnLabel_55
    929          
    930            while ( len-- )
    931            {
    932              HalFlashRead(srcPg, srcOff, tmp, OSAL_NV_WORD_SIZE);
   \                     ??xferBuf_3:
   \   0000C6                ; Setup parameters for call to function HalFlashRead
   \   0000C6   75..04       MOV     ?V4,#0x4
   \   0000C9   75..00       MOV     ?V5,#0x0
   \   0000CC   78..         MOV     R0,#?V4
   \   0000CE   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000D1   7403         MOV     A,#0x3
   \   0000D3   12....       LCALL   ?XSTACK_DISP102_8
   \   0000D6   AA..         MOV     R2,?V6
   \   0000D8   AB..         MOV     R3,?V7
   \   0000DA   7402         MOV     A,#0x2
   \   0000DC   12....       LCALL   ?XSTACK_DISP0_8
   \   0000DF   E0           MOVX    A,@DPTR
   \   0000E0   F9           MOV     R1,A
   \   0000E1   12....       LCALL   `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   0000E4   7402         MOV     A,#0x2
   \   0000E6   12....       LCALL   ?DEALLOC_XSTACK8
    933              srcOff += OSAL_NV_WORD_SIZE;
   \   0000E9   E5..         MOV     A,?V6
   \   0000EB   2404         ADD     A,#0x4
   \   0000ED   F5..         MOV     ?V6,A
   \   0000EF   E4           CLR     A
   \   0000F0   35..         ADDC    A,?V7
   \   0000F2   F5..         MOV     ?V7,A
    934              writeWord( dstPg, dstOff, tmp );
   \   0000F4                ; Setup parameters for call to function writeWord
   \   0000F4   7401         MOV     A,#0x1
   \   0000F6   12....       LCALL   ?XSTACK_DISP102_8
   \   0000F9   AA..         MOV     R2,?V0
   \   0000FB   AB..         MOV     R3,?V1
   \   0000FD   A9..         MOV     R1,?V3
   \   0000FF   12....       LCALL   `??writeWord::?relay`; Banked call to: writeWord
    935              dstOff += OSAL_NV_WORD_SIZE;
   \   000102   12....       LCALL   ?Subroutine29 & 0xFFFF
    936            }
   \                     ??CrossCallReturnLabel_55:
   \   000105   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   000108   70BC         JNZ     ??xferBuf_3
    937          
    938            if ( rem )
   \   00010A   E5..         MOV     A,?V2
   \   00010C   6061         JZ      ??xferBuf_4
    939            {
    940              uint8 idx = 0;
   \   00010E   7E00         MOV     R6,#0x0
    941              HalFlashRead(dstPg, dstOff, tmp, OSAL_NV_WORD_SIZE);
   \   000110                ; Setup parameters for call to function HalFlashRead
   \   000110   75..04       MOV     ?V4,#0x4
   \   000113   8E..         MOV     ?V5,R6
   \   000115   78..         MOV     R0,#?V4
   \   000117   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00011A   7403         MOV     A,#0x3
   \   00011C   12....       LCALL   ?XSTACK_DISP102_8
   \   00011F   AA..         MOV     R2,?V0
   \   000121   AB..         MOV     R3,?V1
   \   000123   A9..         MOV     R1,?V3
   \   000125   12....       LCALL   `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   000128   7402         MOV     A,#0x2
   \   00012A   12....       LCALL   ?DEALLOC_XSTACK8
   \   00012D   8028         SJMP    ??xferBuf_5
    942              while ( rem-- )
    943              {
    944                HalFlashRead(srcPg, srcOff, tmp+idx, 1);
   \                     ??xferBuf_6:
   \   00012F                ; Setup parameters for call to function HalFlashRead
   \   00012F   75..01       MOV     ?V4,#0x1
   \   000132   78..         MOV     R0,#?V4
   \   000134   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000137   EE           MOV     A,R6
   \   000138   F8           MOV     R0,A
   \   000139   7403         MOV     A,#0x3
   \   00013B   12....       LCALL   ?XSTACK_DISP0_8
   \   00013E   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   000141   12....       LCALL   ?XSTACK_DISP0_8
   \   000144   E0           MOVX    A,@DPTR
   \   000145   F9           MOV     R1,A
   \   000146   12....       LCALL   `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   000149   7402         MOV     A,#0x2
   \   00014B   12....       LCALL   ?DEALLOC_XSTACK8
    945                srcOff++;
   \   00014E   05..         INC     ?V6
   \   000150   E5..         MOV     A,?V6
   \   000152   7002         JNZ     ??xferBuf_7
   \   000154   05..         INC     ?V7
    946                idx++;
   \                     ??xferBuf_7:
   \   000156   0E           INC     R6
    947              }
   \                     ??xferBuf_5:
   \   000157   AF..         MOV     R7,?V2
   \   000159   74FF         MOV     A,#-0x1
   \   00015B   2F           ADD     A,R7
   \   00015C   F5..         MOV     ?V2,A
   \   00015E   04           INC     A
   \   00015F   70CE         JNZ     ??xferBuf_6
    948              writeWord( dstPg, dstOff, tmp );
   \   000161                ; Setup parameters for call to function writeWord
   \   000161   7401         MOV     A,#0x1
   \   000163   12....       LCALL   ?XSTACK_DISP102_8
   \   000166   AA..         MOV     R2,?V0
   \   000168   AB..         MOV     R3,?V1
   \   00016A   A9..         MOV     R1,?V3
   \   00016C   12....       LCALL   `??writeWord::?relay`; Banked call to: writeWord
    949            }
    950          }
   \                     ??xferBuf_4:
   \   00016F   7405         MOV     A,#0x5
   \   000171   02....       LJMP    ?Subroutine2 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   E582         MOV     A,DPL
   \   000002   28           ADD     A,R0
   \   000003   FC           MOV     R4,A
   \   000004   E4           CLR     A
   \   000005   3583         ADDC    A,DPH
   \   000007   FD           MOV     R5,A
   \   000008   AA..         MOV     R2,?V6
   \   00000A   AB..         MOV     R3,?V7
   \   00000C   7402         MOV     A,#0x2
   \   00000E   22           RET
    951          
    952          /*********************************************************************
    953           * @fn      writeItem
    954           *
    955           * @brief   Writes an item header/data combo to the specified NV page.
    956           *
    957           * @param   pg - Valid NV Flash page.
    958           * @param   id - Valid NV item Id.
    959           * @param   len  - Byte count of the data to write.
    960           * @param   buf  - The data to write. If NULL, no data/checksum write.
    961           * @param   flag - TRUE if the checksum should be written, FALSE otherwise.
    962           *
    963           * @return  TRUE if header/data to write matches header/data read back, else FALSE.
    964           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    965          static uint8 writeItem( uint8 pg, uint16 id, uint16 len, void *buf, uint8 flag )
   \                     writeItem:
    966          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV     A,#-0xc
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_72:
   \   00000D   E9           MOV     A,R1
   \   00000E   FE           MOV     R6,A
   \   00000F   8C..         MOV     ?V2,R4
   \   000011   8D..         MOV     ?V3,R5
    967            uint16 offset = pgOff[pg-OSAL_NV_PAGE_BEG];
   \   000013   29           ADD     A,R1
   \   000014   F8           MOV     R0,A
   \   000015   E4           CLR     A
   \   000016   33           RLC     A
   \   000017   F9           MOV     R1,A
   \   000018   74..         MOV     A,#(pgOff + 14) & 0xff
   \   00001A   28           ADD     A,R0
   \   00001B   F8           MOV     R0,A
   \   00001C   74..         MOV     A,#((pgOff - 242) >> 8) & 0xff
   \   00001E   39           ADDC    A,R1
   \   00001F   F9           MOV     R1,A
   \   000020   7402         MOV     A,#0x2
   \   000022   12....       LCALL   ?XSTACK_DISP0_8
   \   000025   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   000028   7402         MOV     A,#0x2
   \   00002A   12....       LCALL   ?XSTACK_DISP0_8
   \   00002D   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   000030   F5..         MOV     ?V0,A
   \   000032   A3           INC     DPTR
   \   000033   E0           MOVX    A,@DPTR
   \   000034   F5..         MOV     ?V1,A
    968            uint8 rtrn = FALSE;
   \   000036   75..00       MOV     ?V6,#0x0
    969            osalNvHdr_t hdr;
    970          
    971            if ( pg == pgRes )
   \   000039   90....       MOV     DPTR,#pgRes
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   6E           XRL     A,R6
   \   00003E   7007         JNZ     ??writeItem_0
    972            {
    973              /* Mark reserve page as being active, in process of receiving items.
    974               * Invoking function must effect a page compaction.
    975               */
    976              setPageUse( pg, FALSE );
   \   000040                ; Setup parameters for call to function setPageUse
   \   000040   7A00         MOV     R2,#0x0
   \   000042   EE           MOV     A,R6
   \   000043   F9           MOV     R1,A
   \   000044   12....       LCALL   `??setPageUse::?relay`; Banked call to: setPageUse
    977            }
    978          
    979            hdr.id = id;
   \                     ??writeItem_0:
   \   000047   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_97:
   \   00004A   7404         MOV     A,#0x4
   \   00004C   12....       LCALL   ?XSTACK_DISP0_8
   \   00004F   12....       LCALL   ?Subroutine8 & 0xFFFF
    980            hdr.len = len;
   \                     ??CrossCallReturnLabel_6:
   \   000052   7406         MOV     A,#0x6
   \   000054   12....       LCALL   ?XSTACK_DISP0_8
   \   000057   E5..         MOV     A,?V2
   \   000059   F0           MOVX    @DPTR,A
   \   00005A   A3           INC     DPTR
   \   00005B   E5..         MOV     A,?V3
   \   00005D   F0           MOVX    @DPTR,A
    981          
    982            writeWord( pg, offset, (uint8 *)&hdr );
   \   00005E                ; Setup parameters for call to function writeWord
   \   00005E   7404         MOV     A,#0x4
   \   000060   12....       LCALL   ?XSTACK_DISP102_8
   \   000063   AA..         MOV     R2,?V0
   \   000065   AB..         MOV     R3,?V1
   \   000067   EE           MOV     A,R6
   \   000068   F9           MOV     R1,A
   \   000069   12....       LCALL   `??writeWord::?relay`; Banked call to: writeWord
    983            HalFlashRead(pg, offset, (uint8 *)(&hdr), OSAL_NV_HDR_SIZE);
   \   00006C                ; Setup parameters for call to function HalFlashRead
   \   00006C   75..08       MOV     ?V4,#0x8
   \   00006F   75..00       MOV     ?V5,#0x0
   \   000072   78..         MOV     R0,#?V4
   \   000074   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000077   7406         MOV     A,#0x6
   \   000079   12....       LCALL   ?XSTACK_DISP102_8
   \   00007C   AA..         MOV     R2,?V0
   \   00007E   AB..         MOV     R3,?V1
   \   000080   EE           MOV     A,R6
   \   000081   F9           MOV     R1,A
   \   000082   12....       LCALL   `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   000085   7402         MOV     A,#0x2
   \   000087   12....       LCALL   ?DEALLOC_XSTACK8
    984          
    985            if ( (hdr.id == id) && (hdr.len == len) )
   \   00008A   7404         MOV     A,#0x4
   \   00008C   12....       LCALL   ?XSTACK_DISP0_8
   \   00008F   12....       LCALL   ??Subroutine43_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_91:
   \   000092   85..82       MOV     DPL,?XSP + 0
   \   000095   85..83       MOV     DPH,?XSP + 1
   \   000098   E0           MOVX    A,@DPTR
   \   000099   68           XRL     A,R0
   \   00009A   7003         JNZ     ??writeItem_1
   \   00009C   A3           INC     DPTR
   \   00009D   E0           MOVX    A,@DPTR
   \   00009E   69           XRL     A,R1
   \                     ??writeItem_1:
   \   00009F   6003         JZ      $+5
   \   0000A1   02....       LJMP    ??writeItem_2 & 0xFFFF
   \   0000A4   7406         MOV     A,#0x6
   \   0000A6   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A9   E0           MOVX    A,@DPTR
   \   0000AA   65..         XRL     A,?V2
   \   0000AC   7004         JNZ     ??writeItem_3
   \   0000AE   A3           INC     DPTR
   \   0000AF   E0           MOVX    A,@DPTR
   \   0000B0   65..         XRL     A,?V3
   \                     ??writeItem_3:
   \   0000B2   6003         JZ      $+5
   \   0000B4   02....       LJMP    ??writeItem_2 & 0xFFFF
    986            {
    987              if ( flag )
   \   0000B7   741D         MOV     A,#0x1d
   \   0000B9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000BC   E0           MOVX    A,@DPTR
   \   0000BD   7003         JNZ     $+5
   \   0000BF   02....       LJMP    ??writeItem_4 & 0xFFFF
   \   0000C2   741B         MOV     A,#0x1b
   \   0000C4   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C7   E0           MOVX    A,@DPTR
   \   0000C8   F5..         MOV     ?V4,A
   \   0000CA   A3           INC     DPTR
   \   0000CB   E0           MOVX    A,@DPTR
   \   0000CC   F5..         MOV     ?V5,A
    988              {
    989                uint16 chk = calcChkB( len, buf );
   \   0000CE   85..82       MOV     DPL,?V4
   \   0000D1   F583         MOV     DPH,A
   \   0000D3   A8..         MOV     R0,?V2
   \   0000D5   A9..         MOV     R1,?V3
   \   0000D7   E8           MOV     A,R0
   \   0000D8   5403         ANL     A,#0x3
   \   0000DA   FF           MOV     R7,A
   \   0000DB   E582         MOV     A,DPL
   \   0000DD   4583         ORL     A,DPH
   \   0000DF   7015         JNZ     ??writeItem_5
   \   0000E1   E8           MOV     A,R0
   \   0000E2   75F0FF       MOV     B,#-0x1
   \   0000E5   A4           MUL     AB
   \   0000E6   F8           MOV     R0,A
   \   0000E7   AAF0         MOV     R2,B
   \   0000E9   75F0FF       MOV     B,#-0x1
   \   0000EC   E9           MOV     A,R1
   \   0000ED   A4           MUL     AB
   \   0000EE   2A           ADD     A,R2
   \   0000EF   F9           MOV     R1,A
   \   0000F0   E8           MOV     A,R0
   \   0000F1   FA           MOV     R2,A
   \   0000F2   E9           MOV     A,R1
   \   0000F3   FB           MOV     R3,A
   \   0000F4   801F         SJMP    ??writeItem_6
   \                     ??writeItem_5:
   \   0000F6   7A00         MOV     R2,#0x0
   \   0000F8   7B00         MOV     R3,#0x0
   \   0000FA   8009         SJMP    ??writeItem_7
   \                     ??writeItem_8:
   \   0000FC   E0           MOVX    A,@DPTR
   \   0000FD   FC           MOV     R4,A
   \   0000FE   EA           MOV     A,R2
   \   0000FF   2C           ADD     A,R4
   \   000100   FA           MOV     R2,A
   \   000101   E4           CLR     A
   \   000102   3B           ADDC    A,R3
   \   000103   FB           MOV     R3,A
   \   000104   A3           INC     DPTR
   \                     ??writeItem_7:
   \   000105   E8           MOV     A,R0
   \   000106   FC           MOV     R4,A
   \   000107   E9           MOV     A,R1
   \   000108   FD           MOV     R5,A
   \   000109   EC           MOV     A,R4
   \   00010A   24FF         ADD     A,#-0x1
   \   00010C   18           DEC     R0
   \   00010D   ED           MOV     A,R5
   \   00010E   34FF         ADDC    A,#-0x1
   \   000110   F9           MOV     R1,A
   \   000111   EC           MOV     A,R4
   \   000112   4D           ORL     A,R5
   \   000113   70E7         JNZ     ??writeItem_8
   \                     ??writeItem_6:
   \   000115   EF           MOV     A,R7
   \   000116   601E         JZ      ??writeItem_9
   \   000118   F8           MOV     R0,A
   \   000119   7404         MOV     A,#0x4
   \   00011B   C3           CLR     C
   \   00011C   98           SUBB    A,R0
   \   00011D   F8           MOV     R0,A
   \   00011E   95E0         SUBB    A,0xE0 /* A   */
   \   000120   F9           MOV     R1,A
   \   000121   E8           MOV     A,R0
   \   000122   75F0FF       MOV     B,#-0x1
   \   000125   A4           MUL     AB
   \   000126   F8           MOV     R0,A
   \   000127   ACF0         MOV     R4,B
   \   000129   75F0FF       MOV     B,#-0x1
   \   00012C   E9           MOV     A,R1
   \   00012D   A4           MUL     AB
   \   00012E   2C           ADD     A,R4
   \   00012F   F9           MOV     R1,A
   \   000130   EA           MOV     A,R2
   \   000131   28           ADD     A,R0
   \   000132   FA           MOV     R2,A
   \   000133   EB           MOV     A,R3
   \   000134   39           ADDC    A,R1
   \   000135   FB           MOV     R3,A
   \                     ??writeItem_9:
   \   000136   12....       LCALL   ?Subroutine9 & 0xFFFF
    990          
    991                offset += OSAL_NV_HDR_SIZE;
   \                     ??CrossCallReturnLabel_73:
   \   000139   12....       LCALL   ?Subroutine23 & 0xFFFF
    992                if ( buf != NULL )
   \                     ??CrossCallReturnLabel_44:
   \   00013C   E5..         MOV     A,?V4
   \   00013E   45..         ORL     A,?V5
   \   000140   6017         JZ      ??writeItem_10
    993                {
    994                  writeBuf( pg, offset, len, buf );
   \   000142                ; Setup parameters for call to function writeBuf
   \   000142   78..         MOV     R0,#?V4
   \   000144   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000147   AC..         MOV     R4,?V2
   \   000149   AD..         MOV     R5,?V3
   \   00014B   AA..         MOV     R2,?V0
   \   00014D   AB..         MOV     R3,?V1
   \   00014F   EE           MOV     A,R6
   \   000150   F9           MOV     R1,A
   \   000151   12....       LCALL   `??writeBuf::?relay` ; Banked call to: writeBuf
   \   000154   7402         MOV     A,#0x2
   \   000156   12....       LCALL   ?DEALLOC_XSTACK8
    995                }
    996          
    997                if ( chk == calcChkF( pg, offset, len ) )
   \                     ??writeItem_10:
   \   000159                ; Setup parameters for call to function calcChkF
   \   000159   AC..         MOV     R4,?V2
   \   00015B   AD..         MOV     R5,?V3
   \   00015D   AA..         MOV     R2,?V0
   \   00015F   AB..         MOV     R3,?V1
   \   000161   EE           MOV     A,R6
   \   000162   F9           MOV     R1,A
   \   000163   12....       LCALL   `??calcChkF::?relay` ; Banked call to: calcChkF
   \   000166   8A..         MOV     ?V2,R2
   \   000168   8B..         MOV     ?V3,R3
   \   00016A   A8..         MOV     R0,?V2
   \   00016C   A9..         MOV     R1,?V3
   \   00016E   85..82       MOV     DPL,?XSP + 0
   \   000171   85..83       MOV     DPH,?XSP + 1
   \   000174   E0           MOVX    A,@DPTR
   \   000175   68           XRL     A,R0
   \   000176   7003         JNZ     ??writeItem_11
   \   000178   A3           INC     DPTR
   \   000179   E0           MOVX    A,@DPTR
   \   00017A   69           XRL     A,R1
   \                     ??writeItem_11:
   \   00017B   704A         JNZ     ??writeItem_2
    998                {
    999                  writeWordH(pg, (offset-OSAL_NV_WORD_SIZE), (uint8 *)&chk);
   \   00017D                ; Setup parameters for call to function writeWordH
   \   00017D   AC..         MOV     R4,?XSP + 0
   \   00017F   AD..         MOV     R5,?XSP + 1
   \   000181   E5..         MOV     A,?V0
   \   000183   24FC         ADD     A,#-0x4
   \   000185   FA           MOV     R2,A
   \   000186   E5..         MOV     A,?V1
   \   000188   34FF         ADDC    A,#-0x1
   \   00018A   FB           MOV     R3,A
   \   00018B   EE           MOV     A,R6
   \   00018C   F9           MOV     R1,A
   \   00018D   12....       LCALL   `??writeWordH::?relay`; Banked call to: writeWordH
   1000                  HalFlashRead(pg, (offset-OSAL_NV_HDR_SIZE), (uint8 *)(&hdr), OSAL_NV_HDR_SIZE);
   \   000190                ; Setup parameters for call to function HalFlashRead
   \   000190   75..08       MOV     ?V2,#0x8
   \   000193   75..00       MOV     ?V3,#0x0
   \   000196   78..         MOV     R0,#?V2
   \   000198   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00019B   7406         MOV     A,#0x6
   \   00019D   12....       LCALL   ?XSTACK_DISP102_8
   \   0001A0   E5..         MOV     A,?V0
   \   0001A2   24F8         ADD     A,#-0x8
   \   0001A4   FA           MOV     R2,A
   \   0001A5   E5..         MOV     A,?V1
   \   0001A7   34FF         ADDC    A,#-0x1
   \   0001A9   FB           MOV     R3,A
   \   0001AA   EE           MOV     A,R6
   \   0001AB   F9           MOV     R1,A
   \   0001AC   12....       LCALL   `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   0001AF   7402         MOV     A,#0x2
   \   0001B1   12....       LCALL   ?DEALLOC_XSTACK8
   1001          
   1002                  if ( chk == hdr.chk )
   \   0001B4   12....       LCALL   ?Subroutine11 & 0xFFFF
   1003                  {
   1004                    rtrn = pg;
   1005                  }
   1006                }
   1007              }
   \                     ??CrossCallReturnLabel_98:
   \   0001B7   7408         MOV     A,#0x8
   \   0001B9   12....       LCALL   ?XSTACK_DISP0_8
   \   0001BC   E0           MOVX    A,@DPTR
   \   0001BD   68           XRL     A,R0
   \   0001BE   7003         JNZ     ??writeItem_12
   \   0001C0   A3           INC     DPTR
   \   0001C1   E0           MOVX    A,@DPTR
   \   0001C2   69           XRL     A,R1
   \                     ??writeItem_12:
   \   0001C3   7002         JNZ     ??writeItem_2
   1008              else
   1009              {
   1010                rtrn = pg;
   \                     ??writeItem_4:
   \   0001C5   8E..         MOV     ?V6,R6
   1011              }
   1012            }
   1013          
   1014            len = OSAL_NV_ITEM_SIZE( hdr.len );
   1015            pgOff[pg-OSAL_NV_PAGE_BEG] += len;
   \                     ??writeItem_2:
   \   0001C7   7406         MOV     A,#0x6
   \   0001C9   12....       LCALL   ?XSTACK_DISP0_8
   \   0001CC   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   0001CF   F8           MOV     R0,A
   \   0001D0   5001         JNC     ??writeItem_13
   \   0001D2   09           INC     R1
   \                     ??writeItem_13:
   \   0001D3   7402         MOV     A,#0x2
   \   0001D5   12....       LCALL   ?XSTACK_DISP0_8
   \   0001D8   E0           MOVX    A,@DPTR
   \   0001D9   FA           MOV     R2,A
   \   0001DA   A3           INC     DPTR
   \   0001DB   E0           MOVX    A,@DPTR
   \   0001DC   F583         MOV     DPH,A
   \   0001DE   8A82         MOV     DPL,R2
   \   0001E0   E0           MOVX    A,@DPTR
   \   0001E1   28           ADD     A,R0
   \   0001E2   F0           MOVX    @DPTR,A
   \   0001E3   A3           INC     DPTR
   \   0001E4   E0           MOVX    A,@DPTR
   \   0001E5   39           ADDC    A,R1
   \   0001E6   F0           MOVX    @DPTR,A
   1016          
   1017            return rtrn;
   \   0001E7   A9..         MOV     R1,?V6
   \   0001E9   740C         MOV     A,#0xc
   \   0001EB   02....       LJMP    ?Subroutine4 & 0xFFFF
   1018          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine43_0
   \   000006                ; // Fall through to label ??Subroutine43_0
   1019          
   1020          /*********************************************************************
   1021           * @fn      osal_nv_init
   1022           *
   1023           * @brief   Initialize NV service.
   1024           *
   1025           * @param   p - Not used.
   1026           *
   1027           * @return  none
   1028           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1029          void osal_nv_init( void *p )
   \                     osal_nv_init:
   1030          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1031            (void)p;  // Suppress Lint warning.
   1032            (void)initNV();  // Always returns TRUE after pages have been erased.
   \   000004                ; Setup parameters for call to function initNV
   \   000004   12....       LCALL   `??initNV::?relay`   ; Banked call to: initNV
   1033          }
   \   000007   D083         POP     DPH
   \   000009   D082         POP     DPL
   \   00000B   02....       LJMP    ?BRET
   1034          
   1035          /*********************************************************************
   1036           * @fn      osal_nv_item_init
   1037           *
   1038           * @brief   If the NV item does not already exist, it is created and
   1039           *          initialized with the data passed to the function, if any.
   1040           *          This function must be called before calling osal_nv_read() or
   1041           *          osal_nv_write().
   1042           *
   1043           * @param   id  - Valid NV item Id.
   1044           * @param   len - Item length.
   1045           * @param  *buf - Pointer to item initalization data. Set to NULL if none.
   1046           *
   1047           * @return  NV_ITEM_UNINIT - Id did not exist and was created successfully.
   1048           *          ZSUCCESS       - Id already existed, no action taken.
   1049           *          NV_OPER_FAILED - Failure to find or create Id.
   1050           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1051          uint8 osal_nv_item_init( uint16 id, uint16 len, void *buf )
   \                     osal_nv_item_init:
   1052          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V0,R4
   \   00000B   8D..         MOV     ?V1,R5
   1053            /* Global fail flag for fail due to low bus voltage has less impact on code
   1054             * size than passing back a return value all the way from the lowest level.
   1055             */
   1056            failF = FALSE;
   \   00000D   90....       MOV     DPTR,#failF
   \   000010   E4           CLR     A
   \   000011   F0           MOVX    @DPTR,A
   1057          
   1058            if ( (findItem( id ) != OSAL_NV_ITEM_NULL) )
   \   000012                ; Setup parameters for call to function findItem
   \   000012   12....       LCALL   `??findItem::?relay` ; Banked call to: findItem
   \   000015   8B..         MOV     ?V3,R3
   \   000017   EA           MOV     A,R2
   \   000018   45..         ORL     A,?V3
   \   00001A   6004         JZ      ??osal_nv_item_init_0
   1059            {
   1060              return ZSUCCESS;
   \   00001C   7900         MOV     R1,#0x0
   \   00001E   802E         SJMP    ??osal_nv_item_init_1
   1061            }
   1062            else if ( initItem( TRUE, id, len, buf ) )
   \                     ??osal_nv_item_init_0:
   \   000020                ; Setup parameters for call to function initItem
   \   000020   740C         MOV     A,#0xc
   \   000022   12....       LCALL   ?XSTACK_DISP0_8
   \   000025   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000028   AC..         MOV     R4,?V0
   \   00002A   AD..         MOV     R5,?V1
   \   00002C   EE           MOV     A,R6
   \   00002D   FA           MOV     R2,A
   \   00002E   EF           MOV     A,R7
   \   00002F   FB           MOV     R3,A
   \   000030   7901         MOV     R1,#0x1
   \   000032   12....       LCALL   `??initItem::?relay` ; Banked call to: initItem
   \   000035   7402         MOV     A,#0x2
   \   000037   12....       LCALL   ?DEALLOC_XSTACK8
   \   00003A   E9           MOV     A,R1
   \   00003B   600F         JZ      ??osal_nv_item_init_2
   1063            {
   1064              if ( failF )
   \   00003D   90....       MOV     DPTR,#failF
   \   000040   E0           MOVX    A,@DPTR
   \   000041   6005         JZ      ??osal_nv_item_init_3
   1065              {
   1066                (void)initNV();  // See comment at the declaration of failF.
   \   000043                ; Setup parameters for call to function initNV
   \   000043   12....       LCALL   `??initNV::?relay`   ; Banked call to: initNV
   1067                return NV_OPER_FAILED;
   \   000046   8004         SJMP    ??osal_nv_item_init_2
   1068              }
   1069              else
   1070              {
   1071                return NV_ITEM_UNINIT;
   \                     ??osal_nv_item_init_3:
   \   000048   7909         MOV     R1,#0x9
   \   00004A   8002         SJMP    ??osal_nv_item_init_1
   1072              }
   1073            }
   1074            else
   1075            {
   1076              return NV_OPER_FAILED;
   \                     ??osal_nv_item_init_2:
   \   00004C   790A         MOV     R1,#0xa
   1077            }
   \                     ??osal_nv_item_init_1:
   \   00004E   02....       LJMP    ?Subroutine0 & 0xFFFF
   1078          }
   1079          
   1080          /*********************************************************************
   1081           * @fn      osal_nv_item_len
   1082           *
   1083           * @brief   Get the data length of the item stored in NV memory.
   1084           *
   1085           * @param   id  - Valid NV item Id.
   1086           *
   1087           * @return  Item length, if found; zero otherwise.
   1088           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1089          uint16 osal_nv_item_len( uint16 id )
   \                     osal_nv_item_len:
   1090          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV     A,#-0x8
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1091            uint16 offset = findItem( id );
   \   00000A                ; Setup parameters for call to function findItem
   \   00000A   12....       LCALL   `??findItem::?relay` ; Banked call to: findItem
   1092          
   1093            if ( offset == OSAL_NV_ITEM_NULL )
   \   00000D   EA           MOV     A,R2
   \   00000E   4B           ORL     A,R3
   \   00000F   7006         JNZ     ??osal_nv_item_len_0
   1094            {
   1095              return 0;
   \   000011   7A00         MOV     R2,#0x0
   \   000013   7B00         MOV     R3,#0x0
   \   000015   8028         SJMP    ??CrossCallReturnLabel_35
   1096            }
   1097            else
   1098            {
   1099              osalNvHdr_t hdr;
   1100              HalFlashRead(findPg, (offset - OSAL_NV_HDR_SIZE), (uint8 *)(&hdr), OSAL_NV_HDR_SIZE);
   \                     ??osal_nv_item_len_0:
   \   000017                ; Setup parameters for call to function HalFlashRead
   \   000017   75..08       MOV     ?V0,#0x8
   \   00001A   75..00       MOV     ?V1,#0x0
   \   00001D   78..         MOV     R0,#?V0
   \   00001F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000022   7402         MOV     A,#0x2
   \   000024   12....       LCALL   ?XSTACK_DISP102_8
   \   000027   EA           MOV     A,R2
   \   000028   24F8         ADD     A,#-0x8
   \   00002A   FA           MOV     R2,A
   \   00002B   EB           MOV     A,R3
   \   00002C   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   00002F   12....       LCALL   `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   000032   7402         MOV     A,#0x2
   \   000034   12....       LCALL   ?DEALLOC_XSTACK8
   1101              return hdr.len;
   \   000037   7402         MOV     A,#0x2
   \   000039   12....       LCALL   ?XSTACK_DISP0_8
   \   00003C   12....       LCALL   ?Subroutine20 & 0xFFFF
   1102            }
   \                     ??CrossCallReturnLabel_35:
   \   00003F   7408         MOV     A,#0x8
   \   000041   12....       LCALL   ?DEALLOC_XSTACK8
   \   000044                REQUIRE ?Subroutine5
   \   000044                ; // Fall through to label ?Subroutine5
   1103          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   34FF         ADDC    A,#-0x1
   \   000002   FB           MOV     R3,A
   \   000003   90....       MOV     DPTR,#findPg
   \   000006   E0           MOVX    A,@DPTR
   \   000007   F9           MOV     R1,A
   \   000008   22           RET
   1104          
   1105          /*********************************************************************
   1106           * @fn      osal_nv_write
   1107           *
   1108           * @brief   Write a data item to NV. Function can write an entire item to NV or
   1109           *          an element of an item by indexing into the item with an offset.
   1110           *
   1111           * @param   id  - Valid NV item Id.
   1112           * @param   ndx - Index offset into item
   1113           * @param   len - Length of data to write.
   1114           * @param  *buf - Data to write.
   1115           *
   1116           * @return  ZSUCCESS if successful, NV_ITEM_UNINIT if item did not
   1117           *          exist in NV and offset is non-zero, NV_OPER_FAILED if failure.
   1118           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1119          uint8 osal_nv_write( uint16 id, uint16 ndx, uint16 len, void *buf )
   \                     osal_nv_write:
   1120          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 16
   \   000005   74F0         MOV     A,#-0x10
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   7406         MOV     A,#0x6
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   12....       LCALL   ??Subroutine37_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   000012   8C..         MOV     ?V4,R4
   \   000014   8D..         MOV     ?V5,R5
   1121            uint8 rtrn = ZSUCCESS;
   \   000016   7401         MOV     A,#0x1
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   E4           CLR     A
   \   00001C   F0           MOVX    @DPTR,A
   1122          
   1123            /* Global fail flag for fail due to low bus voltage has less impact on code
   1124             * size than passing back a return value all the way from the lowest level.
   1125             */
   1126            failF = FALSE;
   \   00001D   90....       MOV     DPTR,#failF
   \   000020   F0           MOVX    @DPTR,A
   1127          
   1128            if ( len != 0 )
   \   000021   7420         MOV     A,#0x20
   \   000023   12....       LCALL   ?XSTACK_DISP0_8
   \   000026   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   000029   7003         JNZ     $+5
   \   00002B   02....       LJMP    ??osal_nv_write_0 & 0xFFFF
   1129            {
   1130              osalNvHdr_t hdr;
   1131              uint16 origOff, srcOff;
   1132              uint16 cnt;
   1133              uint8 *ptr;
   1134          
   1135              origOff = srcOff = findItem( id );
   \   00002E                ; Setup parameters for call to function findItem
   \   00002E   7406         MOV     A,#0x6
   \   000030   12....       LCALL   ?XSTACK_DISP0_8
   \   000033   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   000036   12....       LCALL   `??findItem::?relay` ; Banked call to: findItem
   \   000039   7404         MOV     A,#0x4
   \   00003B   12....       LCALL   ?XSTACK_DISP0_8
   \   00003E   12....       LCALL   ??Subroutine37_0 & 0xFFFF
   1136              if ( srcOff == OSAL_NV_ITEM_NULL )
   \                     ??CrossCallReturnLabel_69:
   \   000041   7404         MOV     A,#0x4
   \   000043   12....       LCALL   ?XSTACK_DISP0_8
   \   000046   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   000049   7005         JNZ     ??osal_nv_write_1
   1137              {
   1138                return NV_ITEM_UNINIT;
   \   00004B   7909         MOV     R1,#0x9
   \   00004D   02....       LJMP    ??osal_nv_write_2 & 0xFFFF
   1139              }
   1140          
   1141              HalFlashRead(findPg, (srcOff - OSAL_NV_HDR_SIZE), (uint8 *)(&hdr), OSAL_NV_HDR_SIZE);
   \                     ??osal_nv_write_1:
   \   000050                ; Setup parameters for call to function HalFlashRead
   \   000050   75..08       MOV     ?V0,#0x8
   \   000053   75..00       MOV     ?V1,#0x0
   \   000056   78..         MOV     R0,#?V0
   \   000058   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005B   740A         MOV     A,#0xa
   \   00005D   12....       LCALL   ?XSTACK_DISP102_8
   \   000060   7406         MOV     A,#0x6
   \   000062   12....       LCALL   ?XSTACK_DISP0_8
   \   000065   E0           MOVX    A,@DPTR
   \   000066   24F8         ADD     A,#-0x8
   \   000068   FA           MOV     R2,A
   \   000069   A3           INC     DPTR
   \   00006A   E0           MOVX    A,@DPTR
   \   00006B   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_59:
   \   00006E   12....       LCALL   `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   000071   7402         MOV     A,#0x2
   \   000073   12....       LCALL   ?DEALLOC_XSTACK8
   1142              if ( hdr.len < (ndx + len) )
   \   000076   740A         MOV     A,#0xa
   \   000078   12....       LCALL   ?XSTACK_DISP0_8
   \   00007B   C082         PUSH    DPL
   \   00007D   C083         PUSH    DPH
   \   00007F   7420         MOV     A,#0x20
   \   000081   12....       LCALL   ?XSTACK_DISP0_8
   \   000084   E0           MOVX    A,@DPTR
   \   000085   25..         ADD     A,?V4
   \   000087   F8           MOV     R0,A
   \   000088   A3           INC     DPTR
   \   000089   E0           MOVX    A,@DPTR
   \   00008A   35..         ADDC    A,?V5
   \   00008C   F9           MOV     R1,A
   \   00008D   D083         POP     DPH
   \   00008F   D082         POP     DPL
   \   000091   C3           CLR     C
   \   000092   E0           MOVX    A,@DPTR
   \   000093   98           SUBB    A,R0
   \   000094   A3           INC     DPTR
   \   000095   E0           MOVX    A,@DPTR
   \   000096   99           SUBB    A,R1
   \   000097   5005         JNC     ??osal_nv_write_3
   1143              {
   1144                return NV_OPER_FAILED;
   \   000099   790A         MOV     R1,#0xa
   \   00009B   02....       LJMP    ??osal_nv_write_2 & 0xFFFF
   1145              }
   1146          
   1147              srcOff += ndx;
   \                     ??osal_nv_write_3:
   \   00009E   7404         MOV     A,#0x4
   \   0000A0   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A3   E0           MOVX    A,@DPTR
   \   0000A4   25..         ADD     A,?V4
   \   0000A6   F5..         MOV     ?V0,A
   \   0000A8   A3           INC     DPTR
   \   0000A9   E0           MOVX    A,@DPTR
   \   0000AA   35..         ADDC    A,?V5
   \   0000AC   F5..         MOV     ?V1,A
   \   0000AE   AE..         MOV     R6,?V0
   \   0000B0   FF           MOV     R7,A
   1148              ptr = buf;
   \   0000B1   7422         MOV     A,#0x22
   \   0000B3   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B6   E0           MOVX    A,@DPTR
   \   0000B7   F5..         MOV     ?V6,A
   \   0000B9   A3           INC     DPTR
   \   0000BA   E0           MOVX    A,@DPTR
   \   0000BB   F5..         MOV     ?V7,A
   1149              cnt = len;
   \   0000BD   7420         MOV     A,#0x20
   \   0000BF   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C2   12....       LCALL   ??Subroutine43_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_92:
   \   0000C5   7402         MOV     A,#0x2
   \   0000C7   12....       LCALL   ?XSTACK_DISP0_8
   \   0000CA   12....       LCALL   ?Subroutine8 & 0xFFFF
   1150              while ( cnt )
   1151              {
   1152                uint8 tmp;
   1153                HalFlashRead(findPg, srcOff++, &tmp, 1);
   \                     ??CrossCallReturnLabel_7:
   \   0000CD                ; Setup parameters for call to function HalFlashRead
   \   0000CD   75..01       MOV     ?V2,#0x1
   \   0000D0   75..00       MOV     ?V3,#0x0
   \   0000D3   78..         MOV     R0,#?V2
   \   0000D5   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000D8   7402         MOV     A,#0x2
   \   0000DA   12....       LCALL   ?XSTACK_DISP102_8
   \   0000DD   EE           MOV     A,R6
   \   0000DE   FA           MOV     R2,A
   \   0000DF   EF           MOV     A,R7
   \   0000E0   FB           MOV     R3,A
   \   0000E1   90....       MOV     DPTR,#findPg
   \   0000E4   E0           MOVX    A,@DPTR
   \   0000E5   F9           MOV     R1,A
   \   0000E6   12....       LCALL   `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   0000E9   7402         MOV     A,#0x2
   \   0000EB   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000EE   0E           INC     R6
   \   0000EF   EE           MOV     A,R6
   \   0000F0   7001         JNZ     ??osal_nv_write_4
   \   0000F2   0F           INC     R7
   1154                if ( tmp != *ptr++ )
   \                     ??osal_nv_write_4:
   \   0000F3   A8..         MOV     R0,?V6
   \   0000F5   A9..         MOV     R1,?V7
   \   0000F7   8882         MOV     DPL,R0
   \   0000F9   8983         MOV     DPH,R1
   \   0000FB   A3           INC     DPTR
   \   0000FC   8582..       MOV     ?V6,DPL
   \   0000FF   8583..       MOV     ?V7,DPH
   \   000102   85..82       MOV     DPL,?XSP + 0
   \   000105   85..83       MOV     DPH,?XSP + 1
   \   000108   E0           MOVX    A,@DPTR
   \   000109   FA           MOV     R2,A
   \   00010A   8882         MOV     DPL,R0
   \   00010C   8983         MOV     DPH,R1
   \   00010E   E0           MOVX    A,@DPTR
   \   00010F   6A           XRL     A,R2
   \   000110   7019         JNZ     ??osal_nv_write_5
   1155                {
   1156                  break;
   1157                }
   1158                cnt--;
   1159              }
   \   000112   7402         MOV     A,#0x2
   \   000114   12....       LCALL   ?XSTACK_DISP0_8
   \   000117   E0           MOVX    A,@DPTR
   \   000118   24FF         ADD     A,#-0x1
   \   00011A   F0           MOVX    @DPTR,A
   \   00011B   F8           MOV     R0,A
   \   00011C   A3           INC     DPTR
   \   00011D   E0           MOVX    A,@DPTR
   \   00011E   34FF         ADDC    A,#-0x1
   \   000120   F0           MOVX    @DPTR,A
   \   000121   F9           MOV     R1,A
   \   000122   E8           MOV     A,R0
   \   000123   49           ORL     A,R1
   \   000124   7003         JNZ     $+5
   \   000126   02....       LJMP    ??osal_nv_write_6 & 0xFFFF
   \   000129   80A2         SJMP    ??CrossCallReturnLabel_7
   1160          
   1161              if ( cnt != 0 )  // If the buffer to write is different in one or more bytes.
   1162              {
   1163                uint8 comPg, dstPg = initItem( FALSE, id, hdr.len, &comPg );
   \                     ??osal_nv_write_5:
   \   00012B                ; Setup parameters for call to function initItem
   \   00012B   A8..         MOV     R0,?XSP + 0
   \   00012D   A9..         MOV     R1,?XSP + 1
   \   00012F   88..         MOV     ?V2,R0
   \   000131   89..         MOV     ?V3,R1
   \   000133   78..         MOV     R0,#?V2
   \   000135   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000138   740C         MOV     A,#0xc
   \   00013A   12....       LCALL   ?XSTACK_DISP0_8
   \   00013D   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   000140   7408         MOV     A,#0x8
   \   000142   12....       LCALL   ?XSTACK_DISP0_8
   \   000145   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   000148   7900         MOV     R1,#0x0
   \   00014A   12....       LCALL   `??initItem::?relay` ; Banked call to: initItem
   \   00014D   7402         MOV     A,#0x2
   \   00014F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000152   E9           MOV     A,R1
   \   000153   F5..         MOV     ?V2,A
   1164          
   1165                if ( dstPg != OSAL_NV_PAGE_NULL )
   \   000155   7003         JNZ     $+5
   \   000157   02....       LJMP    ??osal_nv_write_7 & 0xFFFF
   1166                {
   1167                  uint16 tmp = OSAL_NV_DATA_SIZE( hdr.len );
   \   00015A   740A         MOV     A,#0xa
   \   00015C   12....       LCALL   ?XSTACK_DISP0_8
   \   00015F   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   000162   F8           MOV     R0,A
   \   000163   7402         MOV     A,#0x2
   \   000165   12....       LCALL   ?XSTACK_DISP0_8
   \   000168   12....       LCALL   ?Subroutine8 & 0xFFFF
   1168                  uint16 dstOff = pgOff[dstPg-OSAL_NV_PAGE_BEG] - tmp;
   \                     ??CrossCallReturnLabel_8:
   \   00016B   A8..         MOV     R0,?V2
   \   00016D   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   000170   F8           MOV     R0,A
   \   000171   74..         MOV     A,#((pgOff - 242) >> 8) & 0xff
   \   000173   39           ADDC    A,R1
   \   000174   F9           MOV     R1,A
   \   000175   7406         MOV     A,#0x6
   \   000177   12....       LCALL   ?XSTACK_DISP0_8
   \   00017A   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   00017D   7406         MOV     A,#0x6
   \   00017F   12....       LCALL   ?XSTACK_DISP0_8
   \   000182   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   000185   C082         PUSH    DPL
   \   000187   C083         PUSH    DPH
   \   000189   7402         MOV     A,#0x2
   \   00018B   12....       LCALL   ?XSTACK_DISP0_8
   \   00018E   12....       LCALL   ??Subroutine43_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_93:
   \   000191   D083         POP     DPH
   \   000193   D082         POP     DPL
   \   000195   12....       LCALL   ?Subroutine22 & 0xFFFF
   1169                  uint8 srcPg = findPg;
   \                     ??CrossCallReturnLabel_40:
   \   000198   90....       MOV     DPTR,#findPg
   \   00019B   E0           MOVX    A,@DPTR
   \   00019C   F5..         MOV     ?V3,A
   1170                  srcOff = origOff;
   1171          
   1172                  setItem( srcPg, srcOff, eNvXfer );
   \   00019E                ; Setup parameters for call to function setItem
   \   00019E   7C00         MOV     R4,#0x0
   \   0001A0   7404         MOV     A,#0x4
   \   0001A2   12....       LCALL   ?XSTACK_DISP0_8
   \   0001A5   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   0001A8   12....       LCALL   `??setItem::?relay`  ; Banked call to: setItem
   1173          
   1174                  xferBuf( srcPg, srcOff, dstPg, dstOff, ndx );
   \   0001AB                ; Setup parameters for call to function xferBuf
   \   0001AB   78..         MOV     R0,#?V4
   \   0001AD   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001B0   8E..         MOV     ?V6,R6
   \   0001B2   8F..         MOV     ?V7,R7
   \   0001B4   78..         MOV     R0,#?V6
   \   0001B6   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001B9   AC..         MOV     R4,?V2
   \   0001BB   7408         MOV     A,#0x8
   \   0001BD   12....       LCALL   ?XSTACK_DISP0_8
   \   0001C0   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   0001C3   12....       LCALL   `??xferBuf::?relay`  ; Banked call to: xferBuf
   \   0001C6   7404         MOV     A,#0x4
   \   0001C8   12....       LCALL   ?DEALLOC_XSTACK8
   1175                  srcOff += ndx;
   1176                  dstOff += ndx;
   \   0001CB   EE           MOV     A,R6
   \   0001CC   25..         ADD     A,?V4
   \   0001CE   FE           MOV     R6,A
   \   0001CF   EF           MOV     A,R7
   \   0001D0   35..         ADDC    A,?V5
   \   0001D2   FF           MOV     R7,A
   1177          
   1178                  writeBuf( dstPg, dstOff, len, buf );
   \   0001D3                ; Setup parameters for call to function writeBuf
   \   0001D3   7422         MOV     A,#0x22
   \   0001D5   12....       LCALL   ?XSTACK_DISP0_8
   \   0001D8   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   0001DB   7422         MOV     A,#0x22
   \   0001DD   12....       LCALL   ?XSTACK_DISP0_8
   \   0001E0   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   0001E3   12....       LCALL   `??writeBuf::?relay` ; Banked call to: writeBuf
   \   0001E6   7402         MOV     A,#0x2
   \   0001E8   12....       LCALL   ?DEALLOC_XSTACK8
   1179                  srcOff += len;
   1180                  dstOff += len;
   1181          
   1182                  xferBuf( srcPg, srcOff, dstPg, dstOff, (hdr.len-ndx-len) );
   \   0001EB                ; Setup parameters for call to function xferBuf
   \   0001EB   740A         MOV     A,#0xa
   \   0001ED   12....       LCALL   ?XSTACK_DISP0_8
   \   0001F0   E0           MOVX    A,@DPTR
   \   0001F1   C3           CLR     C
   \   0001F2   95..         SUBB    A,?V4
   \   0001F4   FA           MOV     R2,A
   \   0001F5   A3           INC     DPTR
   \   0001F6   E0           MOVX    A,@DPTR
   \   0001F7   95..         SUBB    A,?V5
   \   0001F9   FB           MOV     R3,A
   \   0001FA   7420         MOV     A,#0x20
   \   0001FC   12....       LCALL   ?XSTACK_DISP0_8
   \   0001FF   12....       LCALL   ??Subroutine43_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_94:
   \   000202   EA           MOV     A,R2
   \   000203   C3           CLR     C
   \   000204   98           SUBB    A,R0
   \   000205   F5..         MOV     ?V4,A
   \   000207   EB           MOV     A,R3
   \   000208   99           SUBB    A,R1
   \   000209   F5..         MOV     ?V5,A
   \   00020B   78..         MOV     R0,#?V4
   \   00020D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000210   7422         MOV     A,#0x22
   \   000212   12....       LCALL   ?XSTACK_DISP0_8
   \   000215   E0           MOVX    A,@DPTR
   \   000216   2E           ADD     A,R6
   \   000217   F5..         MOV     ?V4,A
   \   000219   A3           INC     DPTR
   \   00021A   E0           MOVX    A,@DPTR
   \   00021B   3F           ADDC    A,R7
   \   00021C   F5..         MOV     ?V5,A
   \   00021E   78..         MOV     R0,#?V4
   \   000220   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000223   AC..         MOV     R4,?V2
   \   000225   7424         MOV     A,#0x24
   \   000227   12....       LCALL   ?XSTACK_DISP0_8
   \   00022A   E0           MOVX    A,@DPTR
   \   00022B   25..         ADD     A,?V0
   \   00022D   FA           MOV     R2,A
   \   00022E   A3           INC     DPTR
   \   00022F   E0           MOVX    A,@DPTR
   \   000230   35..         ADDC    A,?V1
   \   000232   FB           MOV     R3,A
   \   000233   A9..         MOV     R1,?V3
   \   000235   12....       LCALL   `??xferBuf::?relay`  ; Banked call to: xferBuf
   \   000238   7404         MOV     A,#0x4
   \   00023A   12....       LCALL   ?DEALLOC_XSTACK8
   1183          
   1184                  // Calculate and write the new checksum.
   1185                  dstOff = pgOff[dstPg-OSAL_NV_PAGE_BEG] - tmp;
   \   00023D   7406         MOV     A,#0x6
   \   00023F   12....       LCALL   ?XSTACK_DISP0_8
   \   000242   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   000245   C082         PUSH    DPL
   \   000247   C083         PUSH    DPH
   \   000249   7402         MOV     A,#0x2
   \   00024B   12....       LCALL   ?XSTACK_DISP0_8
   \   00024E   12....       LCALL   ??Subroutine43_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_95:
   \   000251   D083         POP     DPH
   \   000253   D082         POP     DPL
   \   000255   12....       LCALL   ?Subroutine22 & 0xFFFF
   1186                  tmp = calcChkF( dstPg, dstOff, hdr.len );
   \                     ??CrossCallReturnLabel_41:
   \   000258                ; Setup parameters for call to function calcChkF
   \   000258   740A         MOV     A,#0xa
   \   00025A   12....       LCALL   ?XSTACK_DISP0_8
   \   00025D   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   000260   12....       LCALL   `??calcChkF::?relay` ; Banked call to: calcChkF
   \   000263   7402         MOV     A,#0x2
   \   000265   12....       LCALL   ?XSTACK_DISP0_8
   \   000268   12....       LCALL   ??Subroutine37_0 & 0xFFFF
   1187                  dstOff -= OSAL_NV_HDR_SIZE;
   \                     ??CrossCallReturnLabel_70:
   \   00026B   EE           MOV     A,R6
   \   00026C   24F8         ADD     A,#-0x8
   \   00026E   FE           MOV     R6,A
   \   00026F   EF           MOV     A,R7
   \   000270   34FF         ADDC    A,#-0x1
   \   000272   FF           MOV     R7,A
   1188                  writeWordH( dstPg, (dstOff+OSAL_NV_HDR_CHK), (uint8 *)&tmp );
   \   000273                ; Setup parameters for call to function writeWordH
   \   000273   7402         MOV     A,#0x2
   \   000275   12....       LCALL   ?XSTACK_DISP102_8
   \   000278   EE           MOV     A,R6
   \   000279   2404         ADD     A,#0x4
   \   00027B   FA           MOV     R2,A
   \   00027C   E4           CLR     A
   \   00027D   3F           ADDC    A,R7
   \   00027E   FB           MOV     R3,A
   \   00027F   A9..         MOV     R1,?V2
   \   000281   12....       LCALL   `??writeWordH::?relay`; Banked call to: writeWordH
   1189                  HalFlashRead(dstPg, dstOff, (uint8 *)(&hdr), OSAL_NV_HDR_SIZE);
   \   000284                ; Setup parameters for call to function HalFlashRead
   \   000284   75..08       MOV     ?V0,#0x8
   \   000287   75..00       MOV     ?V1,#0x0
   \   00028A   78..         MOV     R0,#?V0
   \   00028C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00028F   740A         MOV     A,#0xa
   \   000291   12....       LCALL   ?XSTACK_DISP102_8
   \   000294   EE           MOV     A,R6
   \   000295   FA           MOV     R2,A
   \   000296   EF           MOV     A,R7
   \   000297   FB           MOV     R3,A
   \   000298   A9..         MOV     R1,?V2
   \   00029A   12....       LCALL   `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   00029D   7402         MOV     A,#0x2
   \   00029F   12....       LCALL   ?DEALLOC_XSTACK8
   1190          
   1191                  if ( tmp == hdr.chk )
   \   0002A2   7402         MOV     A,#0x2
   \   0002A4   12....       LCALL   ?XSTACK_DISP0_8
   \   0002A7   12....       LCALL   ??Subroutine43_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_96:
   \   0002AA   740C         MOV     A,#0xc
   \   0002AC   12....       LCALL   ?XSTACK_DISP0_8
   \   0002AF   E0           MOVX    A,@DPTR
   \   0002B0   68           XRL     A,R0
   \   0002B1   7003         JNZ     ??osal_nv_write_8
   \   0002B3   A3           INC     DPTR
   \   0002B4   E0           MOVX    A,@DPTR
   \   0002B5   69           XRL     A,R1
   \                     ??osal_nv_write_8:
   \   0002B6   700F         JNZ     ??osal_nv_write_9
   1192                  {
   1193                    setItem( srcPg, origOff, eNvZero );
   \   0002B8                ; Setup parameters for call to function setItem
   \   0002B8   7C01         MOV     R4,#0x1
   \   0002BA   7404         MOV     A,#0x4
   \   0002BC   12....       LCALL   ?XSTACK_DISP0_8
   \   0002BF   12....       LCALL   ?Subroutine18 & 0xFFFF
   1194                  }
   \                     ??CrossCallReturnLabel_31:
   \   0002C2   12....       LCALL   `??setItem::?relay`  ; Banked call to: setItem
   \   0002C5   8008         SJMP    ??osal_nv_write_10
   1195                  else
   1196                  {
   1197                    rtrn = NV_OPER_FAILED;
   \                     ??osal_nv_write_9:
   \   0002C7   7401         MOV     A,#0x1
   \   0002C9   12....       LCALL   ?XSTACK_DISP0_8
   \   0002CC   740A         MOV     A,#0xa
   \   0002CE   F0           MOVX    @DPTR,A
   1198                  }
   1199          
   1200                  if ( dstPg == pgRes )
   \                     ??osal_nv_write_10:
   \   0002CF   90....       MOV     DPTR,#pgRes
   \   0002D2   E0           MOVX    A,@DPTR
   \   0002D3   65..         XRL     A,?V2
   \   0002D5   7015         JNZ     ??osal_nv_write_6
   1201                  {
   1202                    compactPage( comPg );
   \   0002D7                ; Setup parameters for call to function compactPage
   \   0002D7   85..82       MOV     DPL,?XSP + 0
   \   0002DA   85..83       MOV     DPH,?XSP + 1
   \   0002DD   E0           MOVX    A,@DPTR
   \   0002DE   F9           MOV     R1,A
   \   0002DF   12....       LCALL   `??compactPage::?relay`; Banked call to: compactPage
   \   0002E2   8008         SJMP    ??osal_nv_write_6
   1203                  }
   1204                }
   1205                else
   1206                {
   1207                  rtrn = NV_OPER_FAILED;
   \                     ??osal_nv_write_7:
   \   0002E4   7401         MOV     A,#0x1
   \   0002E6   12....       LCALL   ?XSTACK_DISP0_8
   \   0002E9   740A         MOV     A,#0xa
   \   0002EB   F0           MOVX    @DPTR,A
   1208                }
   1209              }
   1210            }
   1211          
   1212            if ( failF )
   \                     ??osal_nv_write_6:
   \   0002EC   90....       MOV     DPTR,#failF
   \   0002EF   E0           MOVX    A,@DPTR
   \   0002F0   600B         JZ      ??osal_nv_write_0
   1213            {
   1214              (void)initNV();  // See comment at the declaration of failF.
   \   0002F2                ; Setup parameters for call to function initNV
   \   0002F2   12....       LCALL   `??initNV::?relay`   ; Banked call to: initNV
   1215              rtrn = NV_OPER_FAILED;
   \   0002F5   7401         MOV     A,#0x1
   \   0002F7   12....       LCALL   ?XSTACK_DISP0_8
   \   0002FA   740A         MOV     A,#0xa
   \   0002FC   F0           MOVX    @DPTR,A
   1216            }
   1217          
   1218            return rtrn;
   \                     ??osal_nv_write_0:
   \   0002FD   7401         MOV     A,#0x1
   \   0002FF   12....       LCALL   ?XSTACK_DISP0_8
   \   000302   E0           MOVX    A,@DPTR
   \   000303   F9           MOV     R1,A
   \                     ??osal_nv_write_2:
   \   000304   7410         MOV     A,#0x10
   \   000306                REQUIRE ?Subroutine2
   \   000306                ; // Fall through to label ?Subroutine2
   1219          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   C3           CLR     C
   \   000002   98           SUBB    A,R0
   \   000003   FE           MOV     R6,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   99           SUBB    A,R1
   \   000007   FF           MOV     R7,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   12....       LCALL   ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_63:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   A9..         MOV     R1,?V3
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FC           MOV     R4,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FD           MOV     R5,A
   \   000005   EE           MOV     A,R6
   \   000006   FA           MOV     R2,A
   \   000007   EF           MOV     A,R7
   \   000008   FB           MOV     R3,A
   \   000009   A9..         MOV     R1,?V2
   \   00000B   22           RET
   1220          
   1221          /*********************************************************************
   1222           * @fn      osal_nv_read
   1223           *
   1224           * @brief   Read data from NV. This function can be used to read an entire item from NV or
   1225           *          an element of an item by indexing into the item with an offset.
   1226           *          Read data is copied into *buf.
   1227           *
   1228           * @param   id  - Valid NV item Id.
   1229           * @param   ndx - Index offset into item
   1230           * @param   len - Length of data to read.
   1231           * @param  *buf - Data is read into this buffer.
   1232           *
   1233           * @return  ZSUCCESS if NV data was copied to the parameter 'buf'.
   1234           *          Otherwise, NV_OPER_FAILED for failure.
   1235           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1236          uint8 osal_nv_read( uint16 id, uint16 ndx, uint16 len, void *buf )
   \                     osal_nv_read:
   1237          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EC           MOV     A,R4
   \   000006   FE           MOV     R6,A
   \   000007   ED           MOV     A,R5
   \   000008   FF           MOV     R7,A
   1238            uint16 offset;
   1239          
   1240            offset = findItem( id );
   \   000009                ; Setup parameters for call to function findItem
   \   000009   12....       LCALL   `??findItem::?relay` ; Banked call to: findItem
   \   00000C   8A..         MOV     ?V0,R2
   \   00000E   8B..         MOV     ?V1,R3
   \   000010   A8..         MOV     R0,?V0
   \   000012   A9..         MOV     R1,?V1
   1241            if ( offset == OSAL_NV_ITEM_NULL )
   \   000014   E8           MOV     A,R0
   \   000015   49           ORL     A,R1
   \   000016   7004         JNZ     ??osal_nv_read_0
   1242            {
   1243              return NV_OPER_FAILED;
   \   000018   790A         MOV     R1,#0xa
   \   00001A   8025         SJMP    ??osal_nv_read_1
   1244            }
   1245          
   1246            HalFlashRead(findPg, offset+ndx, buf, len);
   \                     ??osal_nv_read_0:
   \   00001C                ; Setup parameters for call to function HalFlashRead
   \   00001C   740A         MOV     A,#0xa
   \   00001E   12....       LCALL   ?XSTACK_DISP0_8
   \   000021   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000024   740E         MOV     A,#0xe
   \   000026   12....       LCALL   ?XSTACK_DISP0_8
   \   000029   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   00002C   E8           MOV     A,R0
   \   00002D   2E           ADD     A,R6
   \   00002E   FA           MOV     R2,A
   \   00002F   E9           MOV     A,R1
   \   000030   3F           ADDC    A,R7
   \   000031   FB           MOV     R3,A
   \   000032   90....       MOV     DPTR,#findPg
   \   000035   E0           MOVX    A,@DPTR
   \   000036   F9           MOV     R1,A
   \   000037   12....       LCALL   `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   00003A   7402         MOV     A,#0x2
   \   00003C   12....       LCALL   ?DEALLOC_XSTACK8
   1247          
   1248            return ZSUCCESS;
   \   00003F   7900         MOV     R1,#0x0
   \                     ??osal_nv_read_1:
   \   000041   02....       LJMP    ?Subroutine5 & 0xFFFF
   1249          }

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??initNV::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    initNV

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??setPageUse::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    setPageUse

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??initPage::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    initPage

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??erasePage::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    erasePage

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??compactPage::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    compactPage

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??findItem::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    findItem

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??initItem::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    initItem

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??setItem::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    setItem

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??calcChkF::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    calcChkF

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??writeWord::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    writeWord

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??writeWordH::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    writeWordH

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??writeBuf::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    writeBuf

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??xferBuf::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    xferBuf

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??writeItem::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    writeItem

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_nv_init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_nv_init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_nv_item_init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_nv_item_init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_nv_item_len::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_nv_item_len

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_nv_write::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_nv_write

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_nv_read::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_nv_read
   1250          
   1251          /*********************************************************************
   1252          *********************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0     53   calcChkF
        0     21   -> HalFlashRead
      0     60   compactPage
        0     26   -> HalFlashRead
        0     24   -> calcChkF
        0     24   -> erasePage
        0     24   -> setItem
        0     24   -> setPageUse
        0     26   -> writeBuf
        0     24   -> writeWordH
        0     28   -> xferBuf
      0     33   erasePage
        0      9   -> HalAdcCheckVdd
        0      9   -> HalFlashErase
      0     44   findItem
        0     12   -> initPage
      1     53   initItem
        0     16   -> compactPage
        0     19   -> writeItem
      0     54   initNV
        0     22   -> HalFlashRead
        0     20   -> compactPage
        0     20   -> erasePage
        0     20   -> initNV
        0     20   -> initPage
        0     20   -> setPageUse
      0     48   initPage
        0     28   -> HalFlashRead
        0     26   -> calcChkF
        0     26   -> findItem
        0     26   -> setItem
      2      0   osal_nv_init
        2      0   -> initNV
      0     16   osal_nv_item_init
        0     12   -> findItem
        0     14   -> initItem
        0     12   -> initNV
      0     20   osal_nv_item_len
        0     20   -> HalFlashRead
        0     18   -> findItem
      0     16   osal_nv_read
        0     12   -> HalFlashRead
        0     10   -> findItem
      2     40   osal_nv_write
        0     34   -> HalFlashRead
        0     32   -> calcChkF
        0     32   -> compactPage
        0     32   -> findItem
        0     34   -> initItem
        0     32   -> initNV
        0     32   -> setItem
        0     34   -> writeBuf
        0     32   -> writeWordH
        0     36   -> xferBuf
      0     56   setItem
        0     24   -> HalFlashRead
        0     22   -> writeWord
      0     44   setPageUse
        0     17   -> writeWord
      1     56   writeBuf
        0     20   -> HalAdcCheckVdd
        0     22   -> HalFlashRead
        0     22   -> HalFlashWrite
        0     20   -> writeWord
      0     48   writeItem
        0     29   -> HalFlashRead
        0     27   -> calcChkF
        0     27   -> setPageUse
        0     29   -> writeBuf
        0     27   -> writeWord
        0     27   -> writeWordH
      0     43   writeWord
        0     14   -> HalAdcCheckVdd
        0     16   -> HalFlashWrite
      1     45   writeWordH
        0     13   -> writeWord
      1     59   xferBuf
        0     23   -> HalFlashRead
        0     21   -> writeWord


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       5  ??Subroutine36_0
       6  ??Subroutine37_0
       5  ??Subroutine38_0
       9  ??Subroutine39_0
       8  ??Subroutine40_0
       8  ??Subroutine41_0
      17  ??Subroutine42_0
       6  ??Subroutine43_0
       5  ??Subroutine44_0
       5  ?Subroutine0
       3  ?Subroutine1
       8  ?Subroutine10
       6  ?Subroutine11
       6  ?Subroutine12
      10  ?Subroutine13
       5  ?Subroutine14
       6  ?Subroutine15
      12  ?Subroutine16
       6  ?Subroutine17
       8  ?Subroutine18
      12  ?Subroutine19
       3  ?Subroutine2
       6  ?Subroutine20
       4  ?Subroutine21
       9  ?Subroutine22
      12  ?Subroutine23
      11  ?Subroutine24
       1  ?Subroutine25
      15  ?Subroutine26
      10  ?Subroutine27
       1  ?Subroutine28
      12  ?Subroutine29
       3  ?Subroutine3
      15  ?Subroutine30
       9  ?Subroutine31
      13  ?Subroutine32
       9  ?Subroutine33
      15  ?Subroutine34
      11  ?Subroutine35
       8  ?Subroutine4
       5  ?Subroutine5
       7  ?Subroutine6
       5  ?Subroutine7
       6  ?Subroutine8
       6  ?Subroutine9
   12288  _nvBuf
       8  _nvIEEE
     117  calcChkF
       6  calcChkF::?relay
     326  compactPage
       6  compactPage::?relay
      47  erasePage
       6  erasePage::?relay
       1  failF
      64  findItem
       6  findItem::?relay
       1  findPg
     210  initItem
       6  initItem::?relay
     216  initNV
       6  initNV::?relay
     430  initPage
       6  initPage::?relay
      14  osal_nv_init
       6  osal_nv_init::?relay
      81  osal_nv_item_init
       6  osal_nv_item_init::?relay
      68  osal_nv_item_len
       6  osal_nv_item_len::?relay
      68  osal_nv_read
       6  osal_nv_read::?relay
     774  osal_nv_write
       6  osal_nv_write::?relay
      12  pgLost
      12  pgOff
       1  pgRes
     137  setItem
       6  setItem::?relay
      52  setPageUse
       6  setPageUse::?relay
     366  writeBuf
       6  writeBuf::?relay
     494  writeItem
       6  writeItem::?relay
      84  writeWord
       6  writeWord::?relay
      66  writeWordH
       6  writeWordH::?relay
     372  xferBuf
       6  xferBuf::?relay

 
  4 338 bytes in segment BANKED_CODE
    114 bytes in segment BANK_RELAYS
      8 bytes in segment IEEE_ADDRESS_SPACE
     27 bytes in segment XDATA_Z
 12 288 bytes in segment ZIGNV_ADDRESS_SPACE
 
  4 452 bytes of CODE  memory
 12 323 bytes of XDATA memory

Errors: none
Warnings: none
